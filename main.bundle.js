(self.webpackChunkger_vac_viz=self.webpackChunkger_vac_viz||[]).push([[179],{6700:(e,t,a)=>{var s={"./af":2786,"./af.js":2786,"./ar":867,"./ar-dz":4130,"./ar-dz.js":4130,"./ar-kw":6135,"./ar-kw.js":6135,"./ar-ly":6440,"./ar-ly.js":6440,"./ar-ma":7702,"./ar-ma.js":7702,"./ar-sa":6040,"./ar-sa.js":6040,"./ar-tn":7100,"./ar-tn.js":7100,"./ar.js":867,"./az":1083,"./az.js":1083,"./be":9808,"./be.js":9808,"./bg":8338,"./bg.js":8338,"./bm":7438,"./bm.js":7438,"./bn":8905,"./bn-bd":6225,"./bn-bd.js":6225,"./bn.js":8905,"./bo":1560,"./bo.js":1560,"./br":1278,"./br.js":1278,"./bs":622,"./bs.js":622,"./ca":2468,"./ca.js":2468,"./cs":5822,"./cs.js":5822,"./cv":877,"./cv.js":877,"./cy":7373,"./cy.js":7373,"./da":4780,"./da.js":4780,"./de":9740,"./de-at":217,"./de-at.js":217,"./de-ch":894,"./de-ch.js":894,"./de.js":9740,"./dv":5300,"./dv.js":5300,"./el":837,"./el.js":837,"./en-au":8348,"./en-au.js":8348,"./en-ca":7925,"./en-ca.js":7925,"./en-gb":2243,"./en-gb.js":2243,"./en-ie":6436,"./en-ie.js":6436,"./en-il":7207,"./en-il.js":7207,"./en-in":4175,"./en-in.js":4175,"./en-nz":6319,"./en-nz.js":6319,"./en-sg":1662,"./en-sg.js":1662,"./eo":2915,"./eo.js":2915,"./es":5655,"./es-do":5251,"./es-do.js":5251,"./es-mx":6112,"./es-mx.js":6112,"./es-us":1146,"./es-us.js":1146,"./es.js":5655,"./et":5603,"./et.js":5603,"./eu":7763,"./eu.js":7763,"./fa":6959,"./fa.js":6959,"./fi":1897,"./fi.js":1897,"./fil":2549,"./fil.js":2549,"./fo":4694,"./fo.js":4694,"./fr":4470,"./fr-ca":3049,"./fr-ca.js":3049,"./fr-ch":2330,"./fr-ch.js":2330,"./fr.js":4470,"./fy":5044,"./fy.js":5044,"./ga":9295,"./ga.js":9295,"./gd":2101,"./gd.js":2101,"./gl":8794,"./gl.js":8794,"./gom-deva":7884,"./gom-deva.js":7884,"./gom-latn":3168,"./gom-latn.js":3168,"./gu":5349,"./gu.js":5349,"./he":4206,"./he.js":4206,"./hi":2819,"./hi.js":2819,"./hr":316,"./hr.js":316,"./hu":2138,"./hu.js":2138,"./hy-am":1423,"./hy-am.js":1423,"./id":9218,"./id.js":9218,"./is":135,"./is.js":135,"./it":626,"./it-ch":150,"./it-ch.js":150,"./it.js":626,"./ja":9183,"./ja.js":9183,"./jv":4286,"./jv.js":4286,"./ka":2105,"./ka.js":2105,"./kk":7772,"./kk.js":7772,"./km":8758,"./km.js":8758,"./kn":9282,"./kn.js":9282,"./ko":3730,"./ko.js":3730,"./ku":1408,"./ku.js":1408,"./ky":3291,"./ky.js":3291,"./lb":6841,"./lb.js":6841,"./lo":5466,"./lo.js":5466,"./lt":7010,"./lt.js":7010,"./lv":7595,"./lv.js":7595,"./me":9861,"./me.js":9861,"./mi":5493,"./mi.js":5493,"./mk":5966,"./mk.js":5966,"./ml":7341,"./ml.js":7341,"./mn":5115,"./mn.js":5115,"./mr":370,"./mr.js":370,"./ms":9847,"./ms-my":1237,"./ms-my.js":1237,"./ms.js":9847,"./mt":2126,"./mt.js":2126,"./my":6165,"./my.js":6165,"./nb":4924,"./nb.js":4924,"./ne":6744,"./ne.js":6744,"./nl":3901,"./nl-be":9814,"./nl-be.js":9814,"./nl.js":3901,"./nn":3877,"./nn.js":3877,"./oc-lnc":2135,"./oc-lnc.js":2135,"./pa-in":5858,"./pa-in.js":5858,"./pl":4495,"./pl.js":4495,"./pt":9520,"./pt-br":7971,"./pt-br.js":7971,"./pt.js":9520,"./ro":6459,"./ro.js":6459,"./ru":1793,"./ru.js":1793,"./sd":950,"./sd.js":950,"./se":490,"./se.js":490,"./si":124,"./si.js":124,"./sk":4249,"./sk.js":4249,"./sl":4985,"./sl.js":4985,"./sq":1104,"./sq.js":1104,"./sr":9131,"./sr-cyrl":9915,"./sr-cyrl.js":9915,"./sr.js":9131,"./ss":5893,"./ss.js":5893,"./sv":8760,"./sv.js":8760,"./sw":1172,"./sw.js":1172,"./ta":7333,"./ta.js":7333,"./te":3110,"./te.js":3110,"./tet":2095,"./tet.js":2095,"./tg":7321,"./tg.js":7321,"./th":9041,"./th.js":9041,"./tk":9005,"./tk.js":9005,"./tl-ph":5768,"./tl-ph.js":5768,"./tlh":9444,"./tlh.js":9444,"./tr":2397,"./tr.js":2397,"./tzl":8254,"./tzl.js":8254,"./tzm":1106,"./tzm-latn":699,"./tzm-latn.js":699,"./tzm.js":1106,"./ug-cn":9288,"./ug-cn.js":9288,"./uk":7691,"./uk.js":7691,"./ur":3795,"./ur.js":3795,"./uz":6791,"./uz-latn":588,"./uz-latn.js":588,"./uz.js":6791,"./vi":5666,"./vi.js":5666,"./x-pseudo":4378,"./x-pseudo.js":4378,"./yo":5805,"./yo.js":5805,"./zh-cn":3839,"./zh-cn.js":3839,"./zh-hk":5726,"./zh-hk.js":5726,"./zh-mo":9807,"./zh-mo.js":9807,"./zh-tw":4152,"./zh-tw.js":4152};function o(e){var t=n(e);return a(t)}function n(e){if(!a.o(s,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return s[e]}o.keys=function(){return Object.keys(s)},o.resolve=n,e.exports=o,o.id=6700},204:function(e,t,a){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.calculateProgressTable=t.calculateTable=t.getCurrentData=t.calculateWeeklyData=t.calculateAverages=t.combineTimeSeries=void 0;const o=a(9882),n=a(3970),r=s(a(381));function l(e,t){var a;let s=null!==(a=null==e?void 0:e.date)&&void 0!==a?a:null==t?void 0:t.date;return e&&t&&(s=e.date.valueOf()<t.date.valueOf()?e.date:t.date),s}function i(e,t,a){const s=t>6?t-6:0,n=e.map(a).slice(s,t+1);return(0,o.average)(n)}function d(e){return e.slice(-1)[0]}t.combineTimeSeries=function(e,t){const a=[];let s,o;for(;;){s||(s=e.shift()),o||(o=t.shift());const n=l(o,s);if(void 0===n)break;const r={date:n,peopleFirstDose:0,peopleSecondDose:0,peopleVaccinated:0,peopleBoosterDose:0,totalVaccineDoses:0,totalPeopleFirstDose:0,totalPeopleFullyVaccinated:0,totalPeopleBoosterDose:0,modernaDosesDelivered:0,astraDosesDelivered:0,comirnatyDosesDelivered:0,johnsonDosesDelivered:0,dosesDelivered:0};(null==s?void 0:s.date.valueOf())===n.valueOf()&&(r.peopleFirstDose=s.peopleFirstDose,r.peopleSecondDose=s.peopleSecondDose,r.peopleBoosterDose=s.peopleBoosterDose,r.totalVaccineDoses=s.totalVaccineDoses,r.peopleVaccinated=s.peopleVaccinated,r.totalPeopleFirstDose=s.totalPeopleFirstDose,r.totalPeopleFullyVaccinated=s.totalPeopleFullyVaccinated,r.totalPeopleBoosterDose=s.totalPeopleBoosterDose,s=null),(null==o?void 0:o.date.valueOf())===n.valueOf()&&(r.dosesDelivered=o.dosesDelivered,r.astraDosesDelivered=o.astraDosesDelivered,r.comirnatyDosesDelivered=o.comirnatyDosesDelivered,r.johnsonDosesDelivered=o.johnsonDosesDelivered,r.modernaDosesDelivered=o.modernaDosesDelivered,o=null),a.push(r)}return a},t.calculateAverages=function(e){const t=[];let a=0;for(const[s,o]of e.entries())a+=o.dosesDelivered,t.push(Object.assign(Object.assign({},o),{totalDosesDelivered:a,averageDoses:i(e,s,(e=>e.peopleVaccinated)),averageFirstDoses:i(e,s,(e=>e.peopleFirstDose)),averageSecondDoses:i(e,s,(e=>e.peopleSecondDose)),averageBoosterDoses:i(e,s,(e=>e.peopleBoosterDose)),dosesAvailable:a-o.totalVaccineDoses}));return t},t.calculateWeeklyData=function(e){let t=[],a=null;for(const s of e)a&&s.date.isSame(a.date,"W")||(a={date:s.date,peopleFirstDose:0,peopleSecondDose:0,peopleVaccinated:0,peopleBoosterDose:0,dosesDelivered:0,astraDosesDelivered:0,comirnatyDosesDelired:0,johnsonDosesDelivered:0,modernaDosesDelivered:0},t.push(a)),a.peopleFirstDose+=s.peopleFirstDose,a.peopleSecondDose+=s.peopleSecondDose,a.peopleBoosterDose+=s.peopleBoosterDose,a.dosesDelivered+=s.dosesDelivered,a.peopleVaccinated+=s.peopleVaccinated,a.astraDosesDelivered+=s.astraDosesDelivered,a.comirnatyDosesDelired+=s.comirnatyDosesDelivered,a.johnsonDosesDelivered+=s.johnsonDosesDelivered,a.modernaDosesDelivered+=s.modernaDosesDelivered;return 0==d(e).date.day()?t:t.slice(0,t.length-1)},t.getCurrentData=d,t.calculateTable=function(e){const t=n.config.population,a=!(.9*e.averageSecondDoses>e.averageFirstDoses);return[{title:"80% first dose administered",subtitle:"based on first dose 7-day average and remaining first doses",days:(.8*t-e.totalPeopleFirstDose)/e.averageFirstDoses,meaningful:!0},{title:"70% fully vaccinated",subtitle:"based on the second dose 7-day average and remaining second doses",days:(.7*t-e.totalPeopleFullyVaccinated)/e.averageSecondDoses,meaningful:a},{title:"80% fully vaccinated",subtitle:"based on the second dose 7-day average and remaining second doses",days:(.8*t-e.totalPeopleFullyVaccinated)/e.averageSecondDoses,meaningful:a}]},t.calculateProgressTable=function(e,t){const a=n.config.population,s=(0,r.default)(e.date).subtract(6,"months"),l=t.filter((e=>e.date.isSame(s)))[0];return[{title:"People vaccinated at least once",value:(0,o.formatPercent)(e.totalPeopleFirstDose/a)},{title:"People fully vaccinated",value:(0,o.formatPercent)(e.totalPeopleFullyVaccinated/a)},{title:"People received the booster dose",value:(0,o.formatPercent)(e.totalPeopleBoosterDose/a)},{title:"People fully vaccinated 6 months before",value:(0,o.formatPercent)(l.totalPeopleFullyVaccinated/a)}]}},398:function(e,t,a){"use strict";var s=this&&this.__createBinding||(Object.create?function(e,t,a,s){void 0===s&&(s=a),Object.defineProperty(e,s,{enumerable:!0,get:function(){return t[a]}})}:function(e,t,a,s){void 0===s&&(s=a),e[s]=t[a]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var a in e)"default"!==a&&Object.prototype.hasOwnProperty.call(e,a)&&s(t,e,a);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.ChartComponent=void 0;const r=a(2181),l=n(a(298));r.Chart.register(r.ArcElement,r.LineElement,r.BarElement,r.PointElement,r.BarController,r.LineController,r.LinearScale,r.TimeScale,r.TimeSeriesScale,r.CategoryScale,r.Filler,r.Legend,r.Title,r.Tooltip);class i extends l.Component{buildChartConfig(e){return{type:"bar",data:{labels:e.labels,datasets:e.datasets},options:{responsive:!0,aspectRatio:this.getAspectRatio(),scales:{x:{display:!0,title:{display:!0,text:e.xTitle}},y:{display:!0,title:{display:!0,text:e.yTitle}}}}}}getAspectRatio(){return window.innerWidth<800&&window.innerWidth<window.innerHeight?1:2}updateAspectRatio(){this.chart&&(this.chart.options.aspectRatio=this.getAspectRatio(),this.chart.update())}drawChart(){var e=this.getCanvas().getContext("2d");if(!e)throw new Error("Couldn't get canvas context.");const t=this.buildChartConfig(this.props);this.chart=new r.Chart(e,t),window.addEventListener("resize",(()=>this.updateAspectRatio()))}getCanvas(){return this.elements[0].querySelector("canvas")}didMount(){this.drawChart()}render(){return l.default.h("div",null,l.default.h("h2",null,this.props.title),this.props.subtitle?l.default.h("p",{class:"subtitle"},this.props.subtitle):"",l.default.h("canvas",{width:"200",height:"100"}),this.props.remark?l.default.h("p",{class:"remark"},l.default.h("i",null,"Remark:")," ",this.props.remark):"")}}t.ChartComponent=i},1711:function(e,t,a){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.getVaccRatioChartConfig=t.getWeeklyChartByVaccineConfig=t.getEstimationChartConfig=t.getBoosterChartConfig=t.getWeeklyChartConfig=t.getDosesChartConfig=t.getVaccChartConfig=void 0;const o=s(a(381)),n=a(3970);var r;function l(e){return{borderColor:`rgba(${e}, 1)`,backgroundColor:`rgba(${e}, 0.4)`}}!function(e){e.Blue="25, 130, 196",e.DarkRed="143, 0, 5",e.Red="255, 89, 94",e.Yellow="255, 202, 58",e.Green="138, 201, 38",e.Purple="106, 76, 147"}(r||(r={}));const i=e=>e.map((e=>(0,o.default)(e.date).format("ddd, MMM DD")));function d(e,t,a){return Object.assign(Object.assign({label:e,data:t},l(a)),{fill:!1,tension:.4,type:"line"})}function c(e,t,a){return Object.assign(Object.assign({label:e,data:t},l(a)),{type:"line"})}function u(e,t,a){return Object.assign({label:e,data:t},l(a))}t.getVaccChartConfig=function(e){const t=[d("7-day Average Vaccinations",e.map((e=>e.averageDoses)),r.Purple),d("7-day Average First Dose",e.map((e=>e.averageFirstDoses)),r.Blue),d("7-day Average Second Dose",e.map((e=>e.averageSecondDoses)),r.Green),d("7-day Average Booster Dose",e.map((e=>e.averageBoosterDoses)),r.Red),u("Daily Vaccinations",e.map((e=>e.peopleVaccinated)),r.Yellow)];return{title:"Vaccinations",labels:i(e),yTitle:"Number of Vaccinations",datasets:t}},t.getDosesChartConfig=function(e,t){const a=[d("Available Doses",e.map((e=>e.dosesAvailable)),r.DarkRed),u("Daily Deliveries",e.map((e=>e.dosesDelivered)),r.Red)];return{title:"Deliveries of Doses",remark:`Deliveries will be updated on Mondays only. The last update was ${t.deliveryLastUpdated.fromNow()}.`,labels:i(e),yTitle:"Number of Doses",datasets:a}},t.getWeeklyChartConfig=function(e){const t=[c("People Vaccinated",e.map((e=>e.peopleVaccinated)),r.Purple),c("First Dose",e.map((e=>e.peopleFirstDose)),r.Blue),c("Second Dose",e.map((e=>e.peopleSecondDose)),r.Green),c("Booster Dose",e.map((e=>e.peopleBoosterDose)),r.Red),u("Doses Delivered",e.map((e=>e.dosesDelivered)),r.Yellow)];return{title:"Weekly Vaccinations and Deliveries",labels:e.map((e=>(0,o.default)(e.date).format("W"))),yTitle:"Number of Doses",xTitle:"ISO Week",datasets:t}},t.getBoosterChartConfig=function(e){const t=(0,o.default)(n.config.boosterStart),a=(0,o.default)(t).subtract(6,"months"),s=(0,o.default)(e.slice(-1)[0].date).subtract(6,"months"),l=n.config.population,c=e.filter((e=>e.date.isSameOrAfter(t))),u=e.filter((e=>e.date.isSameOrAfter(a)&&e.date.isSameOrBefore(s))),f=c.map(((e,t)=>u[t].totalPeopleFullyVaccinated-e.totalPeopleBoosterDose)),p=[d("People fully vaccinated 6 months before",u.map((e=>e.totalPeopleFullyVaccinated/l*100)),r.Blue),d("People who did received their booster dose",c.map((e=>e.totalPeopleBoosterDose/l*100)),r.Green),d("People who did not received their booster dose after 6 months",f.map((e=>e/l*100)),r.Red)];return{title:"Booster Progress",labels:i(c),yTitle:"Proportion of the population (%)",datasets:p}},t.getEstimationChartConfig=function(e){const t=n.config.population,a=[d("80% first dose administered",(e=e.filter((e=>e.date.isAfter((0,o.default)("2021-05-14"))))).map((e=>(.8*t-e.totalPeopleFirstDose)/e.averageFirstDoses)),r.Purple),d("70% fully vaccinated",e.map((e=>(.7*t-e.totalPeopleFullyVaccinated)/e.averageSecondDoses)),r.Blue),d("80% fully vaccinated",e.map((e=>(.8*t-e.totalPeopleFullyVaccinated)/e.averageSecondDoses)),r.Green)];return{title:"Remaining Vaccination Time Estimations",labels:i(e),yTitle:"Days",datasets:a}},t.getWeeklyChartByVaccineConfig=function(e){const t=[u("BioNTech/Pfizer",e.map((e=>e.comirnatyDosesDelired)),r.Purple),u("AstraZeneca",e.map((e=>e.astraDosesDelivered)),r.Green),u("Moderna",e.map((e=>e.modernaDosesDelivered)),r.Blue),u("Johnson & Johnson",e.map((e=>e.johnsonDosesDelivered)),r.Red)];return{title:"Weekly Vaccine Deliveries",labels:e.map((e=>(0,o.default)(e.date).format("W"))),yTitle:"Number of Doses",xTitle:"ISO Week",datasets:t}},t.getVaccRatioChartConfig=function(e){const t=[d("Ratio of Administered Doses on that Day",(e=e.filter((e=>e.date.isAfter((0,o.default)("2021-02-01"))))).map((e=>e.peopleFirstDose/e.peopleSecondDose)),r.Purple),d("Ratio on Weekly Average (Smoothed Ratio)",e.map((e=>e.averageFirstDoses/e.averageSecondDoses)),r.Yellow)];return{title:"Ratio of First to Second Dose Vaccinations",subtitle:"Number of people who received their first dose for every second dose administered.",labels:i(e),yTitle:"Ratio",datasets:t}}},3970:(e,t)=>{"use strict";var a;Object.defineProperty(t,"__esModule",{value:!0}),t.getBuildInfo=t.DataSource=t.config=void 0,t.config={dataPath:"https://impfdashboard.de/static/data",metadataPath:"metadata.json",population:83166711,boosterStart:"2021-09-01"},(a=t.DataSource||(t.DataSource={})).VaccinationsTimeSeries="germany_vaccinations_timeseries_v2",a.DeliveriesTimeSeries="germany_deliveries_timeseries_v2",t.getBuildInfo=function(){return{buildUser:"runner",logTarget:"vacc-log.azurewebsites.net",version:"170f9a7",branch:"master",lastCommit:"2021-11-20T21:08:23+01:00"}}},3607:(e,t,a)=>{"use strict";const s=a(447),o=a(204),n=a(3058),r=a(1711),l=a(3970);(0,a(9882).runAsync)((async function(){console.log("Build Info:",(0,l.getBuildInfo)());const[e,t,a]=await Promise.all([(0,s.fetchMetadata)(),(0,s.loadVaccinationTimeSeries)(),(0,s.loadDeliveryTimeSeries)()]),i=(0,o.combineTimeSeries)(t,a),d=(0,o.calculateAverages)(i),c=(0,o.calculateWeeklyData)(d),u=(0,o.getCurrentData)(d);(0,n.render)({lastUpdate:e,vaccProgress:(0,o.calculateProgressTable)(u,d),remainingVaccTime:(0,o.calculateTable)(u),chartConfigurations:[(0,r.getVaccChartConfig)(d),(0,r.getWeeklyChartConfig)(c),(0,r.getBoosterChartConfig)(d),(0,r.getWeeklyChartByVaccineConfig)(c),(0,r.getDosesChartConfig)(d,e),(0,r.getEstimationChartConfig)(d),(0,r.getVaccRatioChartConfig)(d)]})}),"main")},447:function(e,t,a){"use strict";var s=this&&this.__asyncValues||function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,a=e[Symbol.asyncIterator];return a?a.call(e):(e="function"==typeof __values?__values(e):e[Symbol.iterator](),t={},s("next"),s("throw"),s("return"),t[Symbol.asyncIterator]=function(){return this},t);function s(a){t[a]=e[a]&&function(t){return new Promise((function(s,o){!function(e,t,a,s){Promise.resolve(s).then((function(t){e({value:t,done:a})}),t)}(s,o,(t=e[a](t)).done,t.value)}))}}},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.loadDeliveryTimeSeries=t.loadVaccinationTimeSeries=t.fetchMetadata=void 0;const n=a(5492),r=o(a(381)),l=a(3970),i=a(9882);async function d(e){const t=await async function(e){const t=await fetch(`${l.config.dataPath}/${e}.tsv`,{});return await t.text()}(e);return(0,n.parse)(t,{delimiter:"\t",columns:!0})}t.fetchMetadata=async function(){const e=await fetch(`${l.config.dataPath}/${l.config.metadataPath}`,{}),t=await e.json();return{vaccinationsLastUpdated:(0,r.default)(t.vaccinationsLastUpdated).utcOffset(120),deliveryLastUpdated:(0,r.default)(t.deliveryLastUpdated).utcOffset(120)}},t.loadVaccinationTimeSeries=async function(){var e,t;const a=await d(l.DataSource.VaccinationsTimeSeries),o=[];try{for(var n,c=s(a);!(n=await c.next()).done;){const e=n.value;o.push({date:(0,r.default)(e.date),totalVaccineDoses:parseInt(e.dosen_kumulativ),peopleVaccinated:parseInt(e.dosen_differenz_zum_vortag),peopleFirstDose:parseInt(e.dosen_erst_differenz_zum_vortag),peopleSecondDose:parseInt(e.dosen_zweit_differenz_zum_vortag),peopleBoosterDose:parseInt(e.dosen_dritt_differenz_zum_vortag),totalPeopleFirstDose:parseInt(e.personen_erst_kumulativ),totalPeopleFullyVaccinated:parseInt(e.personen_voll_kumulativ),totalPeopleBoosterDose:parseInt(e.dosen_dritt_kumulativ)})}}catch(t){e={error:t}}finally{try{n&&!n.done&&(t=c.return)&&await t.call(c)}finally{if(e)throw e.error}}return o.sort(i.timeSeriesPointSort)},t.loadDeliveryTimeSeries=async function(){var e,t;const a=await d(l.DataSource.DeliveriesTimeSeries),o=[];try{for(var n,c=s(a);!(n=await c.next()).done;){const e=n.value,t=(0,r.default)(e.date),a=e.impfstoff,s=parseInt(e.dosen);let l=o.find((e=>e.date.isSame(t)));switch(l||(l={date:t,dosesDelivered:0,astraDosesDelivered:0,comirnatyDosesDelivered:0,johnsonDosesDelivered:0,modernaDosesDelivered:0},o.push(l)),l.dosesDelivered+=s,a){case"comirnaty":l.comirnatyDosesDelivered+=s;break;case"astra":l.astraDosesDelivered+=s;break;case"johnson":l.johnsonDosesDelivered+=s;break;case"moderna":l.modernaDosesDelivered+=s}}}catch(t){e={error:t}}finally{try{n&&!n.done&&(t=c.return)&&await t.call(c)}finally{if(e)throw e.error}}return o.sort(i.timeSeriesPointSort)}},3058:function(e,t,a){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.render=void 0;const o=s(a(381)),n=s(a(298)),r=a(398);t.render=function(e){var t;n.default.render((t=e,n.default.h("div",null,n.default.h("p",null,n.default.h("b",null,"Last Update:")," ",t.lastUpdate.vaccinationsLastUpdated.format("llll")," (",t.lastUpdate.vaccinationsLastUpdated.fromNow(),")"),n.default.h("h2",null,"Vaccination Progress"),n.default.h("table",null,n.default.h("thead",null,n.default.h("tr",null,n.default.h("th",null,"Value"),n.default.h("th",null,"Proportion of the population"))),n.default.h("tbody",null,t.vaccProgress.map((e=>n.default.h("tr",null,n.default.h("td",null,e.title),n.default.h("td",null,e.value)))))),n.default.h("h2",null,"Remaining Vaccination Time Estimations"),n.default.h("table",null,n.default.h("thead",null,n.default.h("tr",null,n.default.h("th",null,"Estimation"),n.default.h("th",null,"Remaining time"),n.default.h("th",null,"Date"))),n.default.h("tbody",null,t.remainingVaccTime.map((e=>n.default.h("tr",{class:e.meaningful?"":"grey"},n.default.h("td",null,e.title,e.meaningful?"":"*",n.default.h("br",null),n.default.h("small",null,e.subtitle)),n.default.h("td",null,Math.round(e.days)," days",n.default.h("br",null),n.default.h("small",null,"or ",Math.floor(e.days/30)," months and ",Math.round(e.days-30*Math.floor(e.days/30))," days")),n.default.h("td",null,(0,o.default)().add(e.days,"days").format("ddd, ll"))))))),n.default.h("p",{class:"remark"},n.default.h("i",null,"Remark:")," The calculation of the listed dates are based on the assumption that the 7-day averages remain steady. It does not take other factors into account, such as age restrictions of vaccines. ",t.remainingVaccTime.every((e=>!e.meaningful))?"":n.default.h("small",null,n.default.h("br",null),"* This estimation is likely not meaningful at the moment due to the high number of second doses in comparison the number of first doses.")),t.chartConfigurations.map((e=>n.default.h(r.ChartComponent,Object.assign({},e)))))),document.getElementById("content"))}},9882:function(e,t,a){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.runAsync=t.log=t.timeSeriesPointSort=t.formatPercent=t.average=void 0;const o=s(a(381)),n=a(3970);function r(e,t){console.log(e,t);const a=(0,n.getBuildInfo)();a.logTarget&&fetch(`https://${a.logTarget}/api/loghttptrigger`,{method:"POST",body:JSON.stringify({build:a,msg:e,error:null==t?void 0:t.stack}),mode:"cors"})}t.average=function(e){return e.reduce(((e,t)=>e+t),0)/e.length},t.formatPercent=function(e){return(100*e).toLocaleString(void 0,{minimumFractionDigits:0,maximumFractionDigits:1})+" %"},t.timeSeriesPointSort=function(e,t){return e.date.diff(t.date)},t.log=r,t.runAsync=function(e,t){const a=(0,o.default)();e().then((()=>function(e,t){r(`${e} finished after ${(0,o.default)().diff(t)} ms.`)}(t,a))).catch((e=>function(e,t){r(`${e} failed.`,t);const a=document.getElementById("content");if(a){const e=document.createElement("p");e.className="error",e.innerText="Sorry, an error occurred while loading data. Please come back later.",a.innerHTML="",a.appendChild(e)}}(t,e)))}},9862:()=>{},964:()=>{}},e=>{e.O(0,[216],(()=>(3607,e(e.s=3607)))),e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,