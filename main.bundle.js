(self.webpackChunkger_vac_viz=self.webpackChunkger_vac_viz||[]).push([[179],{6700:(e,t,a)=>{var s={"./af":2786,"./af.js":2786,"./ar":867,"./ar-dz":4130,"./ar-dz.js":4130,"./ar-kw":6135,"./ar-kw.js":6135,"./ar-ly":6440,"./ar-ly.js":6440,"./ar-ma":7702,"./ar-ma.js":7702,"./ar-sa":6040,"./ar-sa.js":6040,"./ar-tn":7100,"./ar-tn.js":7100,"./ar.js":867,"./az":1083,"./az.js":1083,"./be":9808,"./be.js":9808,"./bg":8338,"./bg.js":8338,"./bm":7438,"./bm.js":7438,"./bn":8905,"./bn-bd":6225,"./bn-bd.js":6225,"./bn.js":8905,"./bo":1560,"./bo.js":1560,"./br":1278,"./br.js":1278,"./bs":622,"./bs.js":622,"./ca":2468,"./ca.js":2468,"./cs":5822,"./cs.js":5822,"./cv":877,"./cv.js":877,"./cy":7373,"./cy.js":7373,"./da":4780,"./da.js":4780,"./de":9740,"./de-at":217,"./de-at.js":217,"./de-ch":894,"./de-ch.js":894,"./de.js":9740,"./dv":5300,"./dv.js":5300,"./el":837,"./el.js":837,"./en-au":8348,"./en-au.js":8348,"./en-ca":7925,"./en-ca.js":7925,"./en-gb":2243,"./en-gb.js":2243,"./en-ie":6436,"./en-ie.js":6436,"./en-il":7207,"./en-il.js":7207,"./en-in":4175,"./en-in.js":4175,"./en-nz":6319,"./en-nz.js":6319,"./en-sg":1662,"./en-sg.js":1662,"./eo":2915,"./eo.js":2915,"./es":5655,"./es-do":5251,"./es-do.js":5251,"./es-mx":6112,"./es-mx.js":6112,"./es-us":1146,"./es-us.js":1146,"./es.js":5655,"./et":5603,"./et.js":5603,"./eu":7763,"./eu.js":7763,"./fa":6959,"./fa.js":6959,"./fi":1897,"./fi.js":1897,"./fil":2549,"./fil.js":2549,"./fo":4694,"./fo.js":4694,"./fr":4470,"./fr-ca":3049,"./fr-ca.js":3049,"./fr-ch":2330,"./fr-ch.js":2330,"./fr.js":4470,"./fy":5044,"./fy.js":5044,"./ga":9295,"./ga.js":9295,"./gd":2101,"./gd.js":2101,"./gl":8794,"./gl.js":8794,"./gom-deva":7884,"./gom-deva.js":7884,"./gom-latn":3168,"./gom-latn.js":3168,"./gu":5349,"./gu.js":5349,"./he":4206,"./he.js":4206,"./hi":94,"./hi.js":94,"./hr":316,"./hr.js":316,"./hu":2138,"./hu.js":2138,"./hy-am":1423,"./hy-am.js":1423,"./id":9218,"./id.js":9218,"./is":135,"./is.js":135,"./it":626,"./it-ch":150,"./it-ch.js":150,"./it.js":626,"./ja":9183,"./ja.js":9183,"./jv":4286,"./jv.js":4286,"./ka":2105,"./ka.js":2105,"./kk":7772,"./kk.js":7772,"./km":8758,"./km.js":8758,"./kn":9282,"./kn.js":9282,"./ko":3730,"./ko.js":3730,"./ku":1408,"./ku.js":1408,"./ky":3291,"./ky.js":3291,"./lb":6841,"./lb.js":6841,"./lo":5466,"./lo.js":5466,"./lt":7010,"./lt.js":7010,"./lv":7595,"./lv.js":7595,"./me":9861,"./me.js":9861,"./mi":5493,"./mi.js":5493,"./mk":5966,"./mk.js":5966,"./ml":7341,"./ml.js":7341,"./mn":5115,"./mn.js":5115,"./mr":370,"./mr.js":370,"./ms":9847,"./ms-my":1237,"./ms-my.js":1237,"./ms.js":9847,"./mt":2126,"./mt.js":2126,"./my":6165,"./my.js":6165,"./nb":4924,"./nb.js":4924,"./ne":6744,"./ne.js":6744,"./nl":3901,"./nl-be":9814,"./nl-be.js":9814,"./nl.js":3901,"./nn":3877,"./nn.js":3877,"./oc-lnc":2135,"./oc-lnc.js":2135,"./pa-in":5858,"./pa-in.js":5858,"./pl":4495,"./pl.js":4495,"./pt":9520,"./pt-br":7971,"./pt-br.js":7971,"./pt.js":9520,"./ro":6459,"./ro.js":6459,"./ru":1793,"./ru.js":1793,"./sd":950,"./sd.js":950,"./se":490,"./se.js":490,"./si":124,"./si.js":124,"./sk":4249,"./sk.js":4249,"./sl":4985,"./sl.js":4985,"./sq":1104,"./sq.js":1104,"./sr":9131,"./sr-cyrl":9915,"./sr-cyrl.js":9915,"./sr.js":9131,"./ss":5893,"./ss.js":5893,"./sv":8760,"./sv.js":8760,"./sw":1172,"./sw.js":1172,"./ta":7333,"./ta.js":7333,"./te":3110,"./te.js":3110,"./tet":2095,"./tet.js":2095,"./tg":7321,"./tg.js":7321,"./th":9041,"./th.js":9041,"./tk":9005,"./tk.js":9005,"./tl-ph":5768,"./tl-ph.js":5768,"./tlh":9444,"./tlh.js":9444,"./tr":2397,"./tr.js":2397,"./tzl":8254,"./tzl.js":8254,"./tzm":1106,"./tzm-latn":699,"./tzm-latn.js":699,"./tzm.js":1106,"./ug-cn":9288,"./ug-cn.js":9288,"./uk":7691,"./uk.js":7691,"./ur":3795,"./ur.js":3795,"./uz":6791,"./uz-latn":588,"./uz-latn.js":588,"./uz.js":6791,"./vi":5666,"./vi.js":5666,"./x-pseudo":4378,"./x-pseudo.js":4378,"./yo":5805,"./yo.js":5805,"./zh-cn":3839,"./zh-cn.js":3839,"./zh-hk":5726,"./zh-hk.js":5726,"./zh-mo":9807,"./zh-mo.js":9807,"./zh-tw":4152,"./zh-tw.js":4152};function o(e){var t=n(e);return a(t)}function n(e){if(!a.o(s,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return s[e]}o.keys=function(){return Object.keys(s)},o.resolve=n,e.exports=o,o.id=6700},204:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.calculateTable=t.getCurrentData=t.calculateWeeklyData=t.calculateAverages=t.combineTimeSeries=void 0;const s=a(9882),o=a(3970);function n(e,t){var a;let s=null!==(a=null==e?void 0:e.date)&&void 0!==a?a:null==t?void 0:t.date;return e&&t&&(s=e.date.valueOf()<t.date.valueOf()?e.date:t.date),s}function i(e,t,a){const o=t>6?t-6:0,n=e.map(a).slice(o,t+1);return s.average(n)}function r(e){return e.slice(-1)[0]}t.combineTimeSeries=function(e,t){const a=[];let s,o;for(;;){s||(s=e.shift()),o||(o=t.shift());const i=n(o,s);if(void 0===i)break;const r={date:i,peopleFirstDose:0,peopleSecondDose:0,peopleVaccinated:0,totalVaccineDoses:0,totalPeopleFirstDose:0,totalPeopleFullyVaccinated:0,modernaDosesDelivered:0,astraDosesDelivered:0,comirnatyDosesDelivered:0,johnsonDosesDelivered:0,dosesDelivered:0};(null==s?void 0:s.date.valueOf())===i.valueOf()&&(r.peopleFirstDose=s.peopleFirstDose,r.peopleSecondDose=s.peopleSecondDose,r.totalVaccineDoses=s.totalVaccineDoses,r.peopleVaccinated=s.peopleVaccinated,r.totalPeopleFirstDose=s.totalPeopleFirstDose,r.totalPeopleFullyVaccinated=s.totalPeopleFullyVaccinated,s=null),(null==o?void 0:o.date.valueOf())===i.valueOf()&&(r.dosesDelivered=o.dosesDelivered,r.astraDosesDelivered=o.astraDosesDelivered,r.comirnatyDosesDelivered=o.comirnatyDosesDelivered,r.johnsonDosesDelivered=o.johnsonDosesDelivered,r.modernaDosesDelivered=o.modernaDosesDelivered,o=null),a.push(r)}return a},t.calculateAverages=function(e){const t=[];let a=0;for(const[s,o]of e.entries())a+=o.dosesDelivered,t.push(Object.assign(Object.assign({},o),{totalDosesDelivered:a,averageDoses:i(e,s,(e=>e.peopleVaccinated)),averageFirstDoses:i(e,s,(e=>e.peopleFirstDose)),averageSecondDoses:i(e,s,(e=>e.peopleSecondDose)),dosesAvailable:a-o.totalVaccineDoses}));return t},t.calculateWeeklyData=function(e){let t=[],a=null;for(const s of e)a&&s.date.isSame(a.date,"W")||(a={date:s.date,peopleFirstDose:0,peopleSecondDose:0,peopleVaccinated:0,dosesDelivered:0,astraDosesDelivered:0,comirnatyDosesDelired:0,johnsonDosesDelivered:0,modernaDosesDelivered:0},t.push(a)),a.peopleFirstDose+=s.peopleFirstDose,a.peopleSecondDose+=s.peopleSecondDose,a.dosesDelivered+=s.dosesDelivered,a.peopleVaccinated+=s.peopleVaccinated,a.astraDosesDelivered+=s.astraDosesDelivered,a.comirnatyDosesDelired+=s.comirnatyDosesDelivered,a.johnsonDosesDelivered+=s.johnsonDosesDelivered,a.modernaDosesDelivered+=s.modernaDosesDelivered;return 0==r(e).date.day()?t:t.slice(0,t.length-1)},t.getCurrentData=r,t.calculateTable=function(e){const t=o.config.population,a=!(.9*e.averageSecondDoses>e.averageFirstDoses);return[{title:"70% first dose administered",subtitle:"based on first dose 7-day average and remaining first doses",days:(.7*t-e.totalPeopleFirstDose)/e.averageFirstDoses,meaningful:!0},{title:"100% first dose administered",subtitle:"based on the first dose 7-day average and remaining first doses",days:(t-e.totalPeopleFirstDose)/e.averageFirstDoses,meaningful:a},{title:"70% fully vaccinated",subtitle:"based on the second dose 7-day average and remaining second doses",days:(.7*t-e.totalPeopleFullyVaccinated)/e.averageSecondDoses,meaningful:a},{title:"Fully vaccinated",subtitle:"based on the 7-day average of total doses and remaining overall doses",days:(2*t-e.totalVaccineDoses)/e.averageDoses,meaningful:!0},{title:"Fully vaccinated",subtitle:"based on the second dose 7-day average and remaining second doses",days:(t-e.totalPeopleFullyVaccinated)/e.averageSecondDoses,meaningful:a}]}},398:function(e,t,a){"use strict";var s=this&&this.__createBinding||(Object.create?function(e,t,a,s){void 0===s&&(s=a),Object.defineProperty(e,s,{enumerable:!0,get:function(){return t[a]}})}:function(e,t,a,s){void 0===s&&(s=a),e[s]=t[a]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var a in e)"default"!==a&&Object.prototype.hasOwnProperty.call(e,a)&&s(t,e,a);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.ChartComponent=void 0;const i=a(2181),r=n(a(1978));i.Chart.register(i.ArcElement,i.LineElement,i.BarElement,i.PointElement,i.BarController,i.LineController,i.LinearScale,i.TimeScale,i.TimeSeriesScale,i.CategoryScale,i.Filler,i.Legend,i.Title,i.Tooltip);class l extends r.Component{buildChartConfig(e){return{type:"bar",data:{labels:e.labels,datasets:e.datasets},options:{responsive:!0,aspectRatio:this.getAspectRatio(),scales:{x:{display:!0,title:{display:!0,text:e.xTitle}},y:{display:!0,title:{display:!0,text:e.yTitle}}}}}}getAspectRatio(){return window.innerWidth<800&&window.innerWidth<window.innerHeight?1:2}updateAspectRatio(){this.chart&&(this.chart.options.aspectRatio=this.getAspectRatio(),this.chart.update())}drawChart(){var e=this.getCanvas().getContext("2d");if(!e)throw new Error("Couldn't get canvas context.");const t=this.buildChartConfig(this.props);this.chart=new i.Chart(e,t),window.addEventListener("resize",(()=>this.updateAspectRatio()))}getCanvas(){return this.elements[0].querySelector("canvas")}didMount(){this.drawChart()}render(){return r.default.h("div",null,r.default.h("h2",null,this.props.title),this.props.subtitle?r.default.h("p",{class:"subtitle"},this.props.subtitle):"",r.default.h("canvas",{width:"200",height:"100"}),this.props.remark?r.default.h("p",{class:"remark"},r.default.h("i",null,"Remark:")," ",this.props.remark):"")}}t.ChartComponent=l},1711:function(e,t,a){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.getVaccRatioChartConfig=t.getWeeklyChartByVaccineConfig=t.getEstimationChartConfig=t.getWeeklyChartConfig=t.getDosesChartConfig=t.getVaccChartConfig=void 0;const o=s(a(381)),n=a(3970);var i;function r(e){return{borderColor:`rgba(${e}, 1)`,backgroundColor:`rgba(${e}, 0.4)`}}!function(e){e.Blue="25, 130, 196",e.DarkRed="143, 0, 5",e.Red="255, 89, 94",e.Yellow="255, 202, 58",e.Green="138, 201, 38",e.Purple="106, 76, 147"}(i||(i={}));const l=e=>e.map((e=>o.default(e.date).format("ddd, MMM DD")));function d(e,t,a){return Object.assign(Object.assign({label:e,data:t},r(a)),{fill:!1,tension:.4,type:"line"})}function c(e,t,a){return Object.assign(Object.assign({label:e,data:t},r(a)),{type:"line"})}function u(e,t,a){return Object.assign({label:e,data:t},r(a))}t.getVaccChartConfig=function(e){const t=[d("7-day Average Vaccinations",e.map((e=>e.averageDoses)),i.Purple),d("7-day Average First Dose",e.map((e=>e.averageFirstDoses)),i.Blue),d("7-day Average Second Dose",e.map((e=>e.averageSecondDoses)),i.Green),u("Daily Vaccinations",e.map((e=>e.peopleVaccinated)),i.Yellow)];return{title:"Vaccinations",labels:l(e),yTitle:"Number of Vaccinations",datasets:t}},t.getDosesChartConfig=function(e,t){const a=[d("Available Doses",e.map((e=>e.dosesAvailable)),i.DarkRed),u("Daily Deliveries",e.map((e=>e.dosesDelivered)),i.Red)];return{title:"Deliveries of Doses",remark:`Deliveries will be updated on Mondays only. The last update was ${t.deliveryLastUpdated.fromNow()}.`,labels:l(e),yTitle:"Number of Doses",datasets:a}},t.getWeeklyChartConfig=function(e){const t=[c("People Vaccinated",e.map((e=>e.peopleVaccinated)),i.Purple),c("First Dose",e.map((e=>e.peopleFirstDose)),i.Blue),c("Second Dose",e.map((e=>e.peopleSecondDose)),i.Green),u("Doses Delivered",e.map((e=>e.dosesDelivered)),i.Red)];return{title:"Weekly Vaccinations and Deliveries",labels:e.map((e=>o.default(e.date).format("W"))),yTitle:"Number of Doses",xTitle:"ISO Week",datasets:t}},t.getEstimationChartConfig=function(e){const t=n.config.population,a=[d("70% first dose administered",(e=e.filter((e=>e.date.isAfter(o.default("2021-05-14"))))).map((e=>(.7*t-e.totalPeopleFirstDose)/e.averageFirstDoses)),i.Purple),d("70% fully vaccinated",e.map((e=>(.7*t-e.totalPeopleFullyVaccinated)/e.averageSecondDoses)),i.Blue),d("Fully vaccinated",e.map((e=>(2*t-e.totalVaccineDoses)/e.averageDoses)),i.Green)];return{title:"Remaining Vaccination Time Estimations",labels:l(e),yTitle:"Days",datasets:a}},t.getWeeklyChartByVaccineConfig=function(e){const t=[u("BioNTech/Pfizer",e.map((e=>e.comirnatyDosesDelired)),i.Purple),u("AstraZeneca",e.map((e=>e.astraDosesDelivered)),i.Green),u("Moderna",e.map((e=>e.modernaDosesDelivered)),i.Blue),u("Johnson & Johnson",e.map((e=>e.johnsonDosesDelivered)),i.Red)];return{title:"Weekly Vaccine Deliveries",labels:e.map((e=>o.default(e.date).format("W"))),yTitle:"Number of Doses",xTitle:"ISO Week",datasets:t}},t.getVaccRatioChartConfig=function(e){const t=[d("Ratio of Administered Doses on that Day",(e=e.filter((e=>e.date.isAfter(o.default("2021-02-01"))))).map((e=>e.peopleFirstDose/e.peopleSecondDose)),i.Purple),d("Ratio on Weekly Average (Smoothed Ratio)",e.map((e=>e.averageFirstDoses/e.averageSecondDoses)),i.Yellow)];return{title:"Ratio of First to Second Dose Vaccinations",subtitle:"Number of people who received their first dose for every second dose administered.",labels:l(e),yTitle:"Ratio",datasets:t}}},3970:(e,t)=>{"use strict";var a;Object.defineProperty(t,"__esModule",{value:!0}),t.getBuildInfo=t.DataSource=t.config=void 0,t.config={dataPath:"https://impfdashboard.de/static/data",metadataPath:"metadata.json",population:83166711},(a=t.DataSource||(t.DataSource={})).VaccinationsTimeSeries="germany_vaccinations_timeseries_v2",a.DeliveriesTimeSeries="germany_deliveries_timeseries_v2",t.getBuildInfo=function(){return{buildUser:"runner",logTarget:"vacc-log.azurewebsites.net",version:"647b90b",branch:"master",lastCommit:"2021-09-09T21:34:35+02:00"}}},3607:(e,t,a)=>{"use strict";const s=a(447),o=a(204),n=a(3058),i=a(1711),r=a(3970);a(9882).runAsync((async function(){console.log("Build Info:",r.getBuildInfo());const[e,t,a]=await Promise.all([s.fetchMetadata(),s.loadVaccinationTimeSeries(),s.loadDeliveryTimeSeries()]),l=o.combineTimeSeries(t,a),d=o.calculateAverages(l),c=o.calculateWeeklyData(d),u=o.getCurrentData(d);n.render({lastUpdate:e,remainingVaccTime:o.calculateTable(u),chartConfigurations:[i.getVaccChartConfig(d),i.getWeeklyChartConfig(c),i.getWeeklyChartByVaccineConfig(c),i.getDosesChartConfig(d,e),i.getEstimationChartConfig(d),i.getVaccRatioChartConfig(d)]})}),"main")},447:function(e,t,a){"use strict";var s=this&&this.__asyncValues||function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,a=e[Symbol.asyncIterator];return a?a.call(e):(e="function"==typeof __values?__values(e):e[Symbol.iterator](),t={},s("next"),s("throw"),s("return"),t[Symbol.asyncIterator]=function(){return this},t);function s(a){t[a]=e[a]&&function(t){return new Promise((function(s,o){!function(e,t,a,s){Promise.resolve(s).then((function(t){e({value:t,done:a})}),t)}(s,o,(t=e[a](t)).done,t.value)}))}}},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.loadDeliveryTimeSeries=t.loadVaccinationTimeSeries=t.fetchMetadata=void 0;const n=o(a(3572)),i=o(a(381)),r=a(3970),l=a(9882);async function d(e){const t=await async function(e){const t=await fetch(`${r.config.dataPath}/${e}.tsv`,{});return await t.text()}(e);return n.default(t,{delimiter:"\t",columns:!0})}t.fetchMetadata=async function(){const e=await fetch(`${r.config.dataPath}/${r.config.metadataPath}`,{}),t=await e.json();return{vaccinationsLastUpdated:i.default(t.vaccinationsLastUpdated).utcOffset(120),deliveryLastUpdated:i.default(t.deliveryLastUpdated).utcOffset(120)}},t.loadVaccinationTimeSeries=async function(){var e,t;const a=await d(r.DataSource.VaccinationsTimeSeries),o=[];try{for(var n,c=s(a);!(n=await c.next()).done;){const e=n.value;o.push({date:i.default(e.date),totalVaccineDoses:parseInt(e.dosen_kumulativ),peopleVaccinated:parseInt(e.dosen_differenz_zum_vortag),peopleFirstDose:parseInt(e.dosen_erst_differenz_zum_vortag),peopleSecondDose:parseInt(e.dosen_zweit_differenz_zum_vortag),totalPeopleFirstDose:parseInt(e.personen_erst_kumulativ),totalPeopleFullyVaccinated:parseInt(e.personen_voll_kumulativ)})}}catch(t){e={error:t}}finally{try{n&&!n.done&&(t=c.return)&&await t.call(c)}finally{if(e)throw e.error}}return o.sort(l.timeSeriesPointSort)},t.loadDeliveryTimeSeries=async function(){var e,t;const a=await d(r.DataSource.DeliveriesTimeSeries),o=[];try{for(var n,c=s(a);!(n=await c.next()).done;){const e=n.value,t=i.default(e.date),a=e.impfstoff,s=parseInt(e.dosen);let r=o.find((e=>e.date.isSame(t)));switch(r||(r={date:t,dosesDelivered:0,astraDosesDelivered:0,comirnatyDosesDelivered:0,johnsonDosesDelivered:0,modernaDosesDelivered:0},o.push(r)),r.dosesDelivered+=s,a){case"comirnaty":r.comirnatyDosesDelivered+=s;break;case"astra":r.astraDosesDelivered+=s;break;case"johnson":r.johnsonDosesDelivered+=s;break;case"moderna":r.modernaDosesDelivered+=s}}}catch(t){e={error:t}}finally{try{n&&!n.done&&(t=c.return)&&await t.call(c)}finally{if(e)throw e.error}}return o.sort(l.timeSeriesPointSort)}},3058:function(e,t,a){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.render=void 0;const o=s(a(381)),n=s(a(1978)),i=a(398);t.render=function(e){var t;n.default.render((t=e,n.default.h("div",null,n.default.h("p",null,n.default.h("b",null,"Last Update:")," ",t.lastUpdate.vaccinationsLastUpdated.format("llll")," (",t.lastUpdate.vaccinationsLastUpdated.fromNow(),")"),n.default.h("h2",null,"Remaining Vaccination Time Estimations"),n.default.h("table",null,n.default.h("thead",null,n.default.h("tr",null,n.default.h("th",null,"Estimation"),n.default.h("th",null,"Remaining time"),n.default.h("th",null,"Date"))),n.default.h("tbody",null,t.remainingVaccTime.map((e=>n.default.h("tr",{class:e.meaningful?"":"grey"},n.default.h("td",null,e.title,e.meaningful?"":"*",n.default.h("br",null),n.default.h("small",null,e.subtitle)),n.default.h("td",null,Math.round(e.days)," days",n.default.h("br",null),n.default.h("small",null,"or ",Math.floor(e.days/30)," months and ",Math.round(e.days-30*Math.floor(e.days/30))," days")),n.default.h("td",null,o.default().add(e.days,"days").format("ddd, ll"))))))),n.default.h("p",{class:"remark"},n.default.h("i",null,"Remark:")," The calculation of the listed dates are based on the assumption that the 7-day averages remain steady. It does not take other factors into account, such as age restrictions of vaccines. ",t.remainingVaccTime.every((e=>!e.meaningful))?"":n.default.h("small",null,n.default.h("br",null),"* This estimation is likely not meaningful at the moment due to the high number of second doses in comparison the number of first doses.")),t.chartConfigurations.map((e=>n.default.h(i.ChartComponent,Object.assign({},e)))))),document.getElementById("content"))}},9882:function(e,t,a){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.runAsync=t.log=t.timeSeriesPointSort=t.average=void 0;const o=s(a(381)),n=a(3970);function i(e,t){console.log(e,t);const a=n.getBuildInfo();a.logTarget&&fetch(`https://${a.logTarget}/api/loghttptrigger`,{method:"POST",body:JSON.stringify({build:a,msg:e,error:null==t?void 0:t.stack}),mode:"cors"})}t.average=function(e){return e.reduce(((e,t)=>e+t),0)/e.length},t.timeSeriesPointSort=function(e,t){return e.date.diff(t.date)},t.log=i,t.runAsync=function(e,t){const a=o.default();e().then((()=>function(e,t){i(`${e} finished after ${o.default().diff(t)} ms.`)}(t,a))).catch((e=>function(e,t){i(`${e} failed.`,t);const a=document.getElementById("content");if(a){const e=document.createElement("p");e.className="error",e.innerText="Sorry, an error occurred while loading data. Please come back later.",a.innerHTML="",a.appendChild(e)}}(t,e)))}}},e=>{"use strict";e.O(0,[216],(()=>(3607,e(e.s=3607)))),e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZXItdmFjLXZpei8vaG9tZS9ydW5uZXIvd29yay9nZXItdmFjYy12aXovZ2VyLXZhY2Mtdml6L25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlfHN5bmN8L15cXC5cXC8uKiQvIiwid2VicGFjazovL2dlci12YWMtdml6Ly4vc3JjL2NhbGN1bGF0aW9uLnRzIiwid2VicGFjazovL2dlci12YWMtdml6Ly4vc3JjL2NoYXJ0LnRzeCIsIndlYnBhY2s6Ly9nZXItdmFjLXZpei8uL3NyYy9jaGFydENvbmZpZ3MudHMiLCJ3ZWJwYWNrOi8vZ2VyLXZhYy12aXovLi9zcmMvY29uc3QudHMiLCJ3ZWJwYWNrOi8vZ2VyLXZhYy12aXovLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vZ2VyLXZhYy12aXovLi9zcmMvbG9hZGVyLnRzIiwid2VicGFjazovL2dlci12YWMtdml6Ly4vc3JjL3JlbmRlci50c3giLCJ3ZWJwYWNrOi8vZ2VyLXZhYy12aXovLi9zcmMvdXRpbC50cyJdLCJuYW1lcyI6WyJtYXAiLCJ3ZWJwYWNrQ29udGV4dCIsInJlcSIsImlkIiwid2VicGFja0NvbnRleHRSZXNvbHZlIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm8iLCJlIiwiRXJyb3IiLCJjb2RlIiwia2V5cyIsIk9iamVjdCIsInJlc29sdmUiLCJtb2R1bGUiLCJleHBvcnRzIiwibWluRGF0ZSIsInBvaW50MSIsInBvaW50MiIsInJlc3VsdCIsImRhdGUiLCJ2YWx1ZU9mIiwiY2FsY0F2ZXJhZ2VGaWVsZCIsImlucHV0IiwiaSIsInNlbGVjdG9yIiwiaTAiLCJsYXN0N0RheXMiLCJzbGljZSIsImF2ZXJhZ2UiLCJnZXRDdXJyZW50RGF0YSIsInRzIiwidmFjY1RTIiwiZGVsaXZlcnlUUyIsImN1cnJlbnRWYWNjIiwiY3VycmVudERlbGl2ZXJ5Iiwic2hpZnQiLCJ1bmRlZmluZWQiLCJkYXRhIiwicGVvcGxlRmlyc3REb3NlIiwicGVvcGxlU2Vjb25kRG9zZSIsInBlb3BsZVZhY2NpbmF0ZWQiLCJ0b3RhbFZhY2NpbmVEb3NlcyIsInRvdGFsUGVvcGxlRmlyc3REb3NlIiwidG90YWxQZW9wbGVGdWxseVZhY2NpbmF0ZWQiLCJtb2Rlcm5hRG9zZXNEZWxpdmVyZWQiLCJhc3RyYURvc2VzRGVsaXZlcmVkIiwiY29taXJuYXR5RG9zZXNEZWxpdmVyZWQiLCJqb2huc29uRG9zZXNEZWxpdmVyZWQiLCJkb3Nlc0RlbGl2ZXJlZCIsInB1c2giLCJ0b3RhbERvc2VzRGVsaXZlcmVkIiwia2V5IiwidmFsdWUiLCJlbnRyaWVzIiwiYXZlcmFnZURvc2VzIiwidCIsImF2ZXJhZ2VGaXJzdERvc2VzIiwiYXZlcmFnZVNlY29uZERvc2VzIiwiZG9zZXNBdmFpbGFibGUiLCJkYWlseVRpbWVTZXJpZXMiLCJjdXJyZW50V2VlayIsImRheSIsImlzU2FtZSIsImNvbWlybmF0eURvc2VzRGVsaXJlZCIsImxlbmd0aCIsImQiLCJwb3B1bGF0aW9uIiwiY29uZmlnIiwic2Vjb25kRG9zZU1lYW5pbmdmdWwiLCJ0aXRsZSIsInN1YnRpdGxlIiwiZGF5cyIsIm1lYW5pbmdmdWwiLCJDaGFydCIsInJlZ2lzdGVyIiwiQXJjRWxlbWVudCIsIkxpbmVFbGVtZW50IiwiQmFyRWxlbWVudCIsIlBvaW50RWxlbWVudCIsIkJhckNvbnRyb2xsZXIiLCJMaW5lQ29udHJvbGxlciIsIkxpbmVhclNjYWxlIiwiVGltZVNjYWxlIiwiVGltZVNlcmllc1NjYWxlIiwiQ2F0ZWdvcnlTY2FsZSIsIkZpbGxlciIsIkxlZ2VuZCIsIlRpdGxlIiwiVG9vbHRpcCIsIkNoYXJ0Q29tcG9uZW50IiwiQ29tcG9uZW50IiwicCIsInR5cGUiLCJsYWJlbHMiLCJkYXRhc2V0cyIsIm9wdGlvbnMiLCJyZXNwb25zaXZlIiwiYXNwZWN0UmF0aW8iLCJ0aGlzIiwiZ2V0QXNwZWN0UmF0aW8iLCJzY2FsZXMiLCJ4IiwiZGlzcGxheSIsInRleHQiLCJ4VGl0bGUiLCJ5IiwieVRpdGxlIiwid2luZG93IiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwiY2hhcnQiLCJ1cGRhdGUiLCJkb3Nlc0N0eCIsImdldENhbnZhcyIsImdldENvbnRleHQiLCJidWlsZENoYXJ0Q29uZmlnIiwicHJvcHMiLCJhZGRFdmVudExpc3RlbmVyIiwidXBkYXRlQXNwZWN0UmF0aW8iLCJlbGVtZW50cyIsInF1ZXJ5U2VsZWN0b3IiLCJkcmF3Q2hhcnQiLCJjbGFzcyIsIndpZHRoIiwiaGVpZ2h0IiwicmVtYXJrIiwiQ2hhcnRDb2xvcnMiLCJjaGFydENvbG9yIiwiYyIsImJvcmRlckNvbG9yIiwiYmFja2dyb3VuZENvbG9yIiwidHNMYWJlbHMiLCJmb3JtYXQiLCJjTGluZUNoYXJ0IiwibGFiZWwiLCJjb2xvciIsImZpbGwiLCJ0ZW5zaW9uIiwibGluZUNoYXJ0IiwiYmFyQ2hhcnQiLCJQdXJwbGUiLCJCbHVlIiwiR3JlZW4iLCJZZWxsb3ciLCJtZXRhZGF0YSIsIkRhcmtSZWQiLCJSZWQiLCJkZWxpdmVyeUxhc3RVcGRhdGVkIiwiZnJvbU5vdyIsIndzIiwidyIsImZpbHRlciIsImlzQWZ0ZXIiLCJEYXRhU291cmNlIiwiZGF0YVBhdGgiLCJtZXRhZGF0YVBhdGgiLCJydW5Bc3luYyIsImFzeW5jIiwiY29uc29sZSIsImxvZyIsImdldEJ1aWxkSW5mbyIsImxhc3RVcGRhdGUiLCJ2YWNjaW5hdGlvbnNUaW1lU2VyaWVzIiwiZGVsaXZlcnlUaW1lU2VyaWVzIiwiUHJvbWlzZSIsImFsbCIsImZldGNoTWV0YWRhdGEiLCJsb2FkVmFjY2luYXRpb25UaW1lU2VyaWVzIiwibG9hZERlbGl2ZXJ5VGltZVNlcmllcyIsImNvbWJpbmVkVGltZVNlcmllcyIsImNvbWJpbmVUaW1lU2VyaWVzIiwidGltZVNlcmllcyIsImNhbGN1bGF0ZUF2ZXJhZ2VzIiwid2Vla2x5U2VyaWVzIiwiY2FsY3VsYXRlV2Vla2x5RGF0YSIsInJlbmRlciIsInJlbWFpbmluZ1ZhY2NUaW1lIiwiY2FsY3VsYXRlVGFibGUiLCJjaGFydENvbmZpZ3VyYXRpb25zIiwiZ2V0VmFjY0NoYXJ0Q29uZmlnIiwiZ2V0V2Vla2x5Q2hhcnRDb25maWciLCJnZXRXZWVrbHlDaGFydEJ5VmFjY2luZUNvbmZpZyIsImdldERvc2VzQ2hhcnRDb25maWciLCJnZXRFc3RpbWF0aW9uQ2hhcnRDb25maWciLCJnZXRWYWNjUmF0aW9DaGFydENvbmZpZyIsImZldGNoQ1NWIiwibmFtZSIsImNzdiIsInJlcyIsImZldGNoIiwiZmV0Y2hDU1ZUZXh0IiwiZGVsaW1pdGVyIiwiY29sdW1ucyIsImpzb24iLCJ2YWNjaW5hdGlvbnNMYXN0VXBkYXRlZCIsInV0Y09mZnNldCIsInBhcnNlciIsIlZhY2NpbmF0aW9uc1RpbWVTZXJpZXMiLCJyZWNvcmQiLCJwYXJzZUludCIsInNvcnQiLCJ0aW1lU2VyaWVzUG9pbnRTb3J0IiwiRGVsaXZlcmllc1RpbWVTZXJpZXMiLCJ2YWNjaW5lTmFtZSIsImRwIiwiZmluZCIsIk1hdGgiLCJyb3VuZCIsImZsb29yIiwiYWRkIiwiZXZlcnkiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwibXNnIiwiZXJyIiwiYiIsImxvZ1RhcmdldCIsIm1ldGhvZCIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiYnVpbGQiLCJlcnJvciIsInN0YWNrIiwibW9kZSIsImFyciIsInJlZHVjZSIsImEiLCJkaWZmIiwiZnVuYyIsInN0YXJ0VGltZSIsInRoZW4iLCJzdWNjZXNzIiwiY2F0Y2giLCJyZWFzb24iLCJjb250ZW50IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsImlubmVyVGV4dCIsImlubmVySFRNTCIsImFwcGVuZENoaWxkIiwiZXJyb3JIYW5kbGVyIl0sIm1hcHBpbmdzIjoiNEZBQUEsSUFBSUEsRUFBTSxDQUNULE9BQVEsS0FDUixVQUFXLEtBQ1gsT0FBUSxJQUNSLFVBQVcsS0FDWCxhQUFjLEtBQ2QsVUFBVyxLQUNYLGFBQWMsS0FDZCxVQUFXLEtBQ1gsYUFBYyxLQUNkLFVBQVcsS0FDWCxhQUFjLEtBQ2QsVUFBVyxLQUNYLGFBQWMsS0FDZCxVQUFXLEtBQ1gsYUFBYyxLQUNkLFVBQVcsSUFDWCxPQUFRLEtBQ1IsVUFBVyxLQUNYLE9BQVEsS0FDUixVQUFXLEtBQ1gsT0FBUSxLQUNSLFVBQVcsS0FDWCxPQUFRLEtBQ1IsVUFBVyxLQUNYLE9BQVEsS0FDUixVQUFXLEtBQ1gsYUFBYyxLQUNkLFVBQVcsS0FDWCxPQUFRLEtBQ1IsVUFBVyxLQUNYLE9BQVEsS0FDUixVQUFXLEtBQ1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLEtBQ1IsVUFBVyxLQUNYLE9BQVEsS0FDUixVQUFXLEtBQ1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLEtBQ1IsVUFBVyxLQUNYLE9BQVEsS0FDUixVQUFXLEtBQ1gsT0FBUSxLQUNSLFVBQVcsSUFDWCxhQUFjLElBQ2QsVUFBVyxJQUNYLGFBQWMsSUFDZCxVQUFXLEtBQ1gsT0FBUSxLQUNSLFVBQVcsS0FDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLFVBQVcsS0FDWCxhQUFjLEtBQ2QsVUFBVyxLQUNYLGFBQWMsS0FDZCxVQUFXLEtBQ1gsYUFBYyxLQUNkLFVBQVcsS0FDWCxhQUFjLEtBQ2QsVUFBVyxLQUNYLGFBQWMsS0FDZCxVQUFXLEtBQ1gsYUFBYyxLQUNkLFVBQVcsS0FDWCxhQUFjLEtBQ2QsVUFBVyxLQUNYLGFBQWMsS0FDZCxPQUFRLEtBQ1IsVUFBVyxLQUNYLE9BQVEsS0FDUixVQUFXLEtBQ1gsYUFBYyxLQUNkLFVBQVcsS0FDWCxhQUFjLEtBQ2QsVUFBVyxLQUNYLGFBQWMsS0FDZCxVQUFXLEtBQ1gsT0FBUSxLQUNSLFVBQVcsS0FDWCxPQUFRLEtBQ1IsVUFBVyxLQUNYLE9BQVEsS0FDUixVQUFXLEtBQ1gsT0FBUSxLQUNSLFVBQVcsS0FDWCxRQUFTLEtBQ1QsV0FBWSxLQUNaLE9BQVEsS0FDUixVQUFXLEtBQ1gsT0FBUSxLQUNSLFVBQVcsS0FDWCxhQUFjLEtBQ2QsVUFBVyxLQUNYLGFBQWMsS0FDZCxVQUFXLEtBQ1gsT0FBUSxLQUNSLFVBQVcsS0FDWCxPQUFRLEtBQ1IsVUFBVyxLQUNYLE9BQVEsS0FDUixVQUFXLEtBQ1gsT0FBUSxLQUNS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RUFBY2dELEdBQ2hDM0UsRUFBSSxHQUFHMkIsWUFBZ0JnRCxHQUN2QixNQUFNQyxFQUFVeEIsU0FBU0MsZUFBZSxXQUN4QyxHQUFJdUIsRUFBUyxDQUNULE1BQU1iLEVBQVFYLFNBQVN5QixjQUFjLEtBQ3JDZCxFQUFNZSxVQUFZLFFBQ2xCZixFQUFNZ0IsVUFBWSx1RUFDbEJILEVBQVFJLFVBQVksR0FDcEJKLEVBQVFLLFlBQVlsQixJQWFEbUIsQ0FBYXZELEVBQU1nRCxRIiwiZmlsZSI6Im1haW4uYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIG1hcCA9IHtcblx0XCIuL2FmXCI6IDI3ODYsXG5cdFwiLi9hZi5qc1wiOiAyNzg2LFxuXHRcIi4vYXJcIjogODY3LFxuXHRcIi4vYXItZHpcIjogNDEzMCxcblx0XCIuL2FyLWR6LmpzXCI6IDQxMzAsXG5cdFwiLi9hci1rd1wiOiA2MTM1LFxuXHRcIi4vYXIta3cuanNcIjogNjEzNSxcblx0XCIuL2FyLWx5XCI6IDY0NDAsXG5cdFwiLi9hci1seS5qc1wiOiA2NDQwLFxuXHRcIi4vYXItbWFcIjogNzcwMixcblx0XCIuL2FyLW1hLmpzXCI6IDc3MDIsXG5cdFwiLi9hci1zYVwiOiA2MDQwLFxuXHRcIi4vYXItc2EuanNcIjogNjA0MCxcblx0XCIuL2FyLXRuXCI6IDcxMDAsXG5cdFwiLi9hci10bi5qc1wiOiA3MTAwLFxuXHRcIi4vYXIuanNcIjogODY3LFxuXHRcIi4vYXpcIjogMTA4Myxcblx0XCIuL2F6LmpzXCI6IDEwODMsXG5cdFwiLi9iZVwiOiA5ODA4LFxuXHRcIi4vYmUuanNcIjogOTgwOCxcblx0XCIuL2JnXCI6IDgzMzgsXG5cdFwiLi9iZy5qc1wiOiA4MzM4LFxuXHRcIi4vYm1cIjogNzQzOCxcblx0XCIuL2JtLmpzXCI6IDc0MzgsXG5cdFwiLi9iblwiOiA4OTA1LFxuXHRcIi4vYm4tYmRcIjogNjIyNSxcblx0XCIuL2JuLWJkLmpzXCI6IDYyMjUsXG5cdFwiLi9ibi5qc1wiOiA4OTA1LFxuXHRcIi4vYm9cIjogMTU2MCxcblx0XCIuL2JvLmpzXCI6IDE1NjAsXG5cdFwiLi9iclwiOiAxMjc4LFxuXHRcIi4vYnIuanNcIjogMTI3OCxcblx0XCIuL2JzXCI6IDYyMixcblx0XCIuL2JzLmpzXCI6IDYyMixcblx0XCIuL2NhXCI6IDI0NjgsXG5cdFwiLi9jYS5qc1wiOiAyNDY4LFxuXHRcIi4vY3NcIjogNTgyMixcblx0XCIuL2NzLmpzXCI6IDU4MjIsXG5cdFwiLi9jdlwiOiA4NzcsXG5cdFwiLi9jdi5qc1wiOiA4NzcsXG5cdFwiLi9jeVwiOiA3MzczLFxuXHRcIi4vY3kuanNcIjogNzM3Myxcblx0XCIuL2RhXCI6IDQ3ODAsXG5cdFwiLi9kYS5qc1wiOiA0NzgwLFxuXHRcIi4vZGVcIjogOTc0MCxcblx0XCIuL2RlLWF0XCI6IDIxNyxcblx0XCIuL2RlLWF0LmpzXCI6IDIxNyxcblx0XCIuL2RlLWNoXCI6IDg5NCxcblx0XCIuL2RlLWNoLmpzXCI6IDg5NCxcblx0XCIuL2RlLmpzXCI6IDk3NDAsXG5cdFwiLi9kdlwiOiA1MzAwLFxuXHRcIi4vZHYuanNcIjogNTMwMCxcblx0XCIuL2VsXCI6IDgzNyxcblx0XCIuL2VsLmpzXCI6IDgzNyxcblx0XCIuL2VuLWF1XCI6IDgzNDgsXG5cdFwiLi9lbi1hdS5qc1wiOiA4MzQ4LFxuXHRcIi4vZW4tY2FcIjogNzkyNSxcblx0XCIuL2VuLWNhLmpzXCI6IDc5MjUsXG5cdFwiLi9lbi1nYlwiOiAyMjQzLFxuXHRcIi4vZW4tZ2IuanNcIjogMjI0Myxcblx0XCIuL2VuLWllXCI6IDY0MzYsXG5cdFwiLi9lbi1pZS5qc1wiOiA2NDM2LFxuXHRcIi4vZW4taWxcIjogNzIwNyxcblx0XCIuL2VuLWlsLmpzXCI6IDcyMDcsXG5cdFwiLi9lbi1pblwiOiA0MTc1LFxuXHRcIi4vZW4taW4uanNcIjogNDE3NSxcblx0XCIuL2VuLW56XCI6IDYzMTksXG5cdFwiLi9lbi1uei5qc1wiOiA2MzE5LFxuXHRcIi4vZW4tc2dcIjogMTY2Mixcblx0XCIuL2VuLXNnLmpzXCI6IDE2NjIsXG5cdFwiLi9lb1wiOiAyOTE1LFxuXHRcIi4vZW8uanNcIjogMjkxNSxcblx0XCIuL2VzXCI6IDU2NTUsXG5cdFwiLi9lcy1kb1wiOiA1MjUxLFxuXHRcIi4vZXMtZG8uanNcIjogNTI1MSxcblx0XCIuL2VzLW14XCI6IDYxMTIsXG5cdFwiLi9lcy1teC5qc1wiOiA2MTEyLFxuXHRcIi4vZXMtdXNcIjogMTE0Nixcblx0XCIuL2VzLXVzLmpzXCI6IDExNDYsXG5cdFwiLi9lcy5qc1wiOiA1NjU1LFxuXHRcIi4vZXRcIjogNTYwMyxcblx0XCIuL2V0LmpzXCI6IDU2MDMsXG5cdFwiLi9ldVwiOiA3NzYzLFxuXHRcIi4vZXUuanNcIjogNzc2Myxcblx0XCIuL2ZhXCI6IDY5NTksXG5cdFwiLi9mYS5qc1wiOiA2OTU5LFxuXHRcIi4vZmlcIjogMTg5Nyxcblx0XCIuL2ZpLmpzXCI6IDE4OTcsXG5cdFwiLi9maWxcIjogMjU0OSxcblx0XCIuL2ZpbC5qc1wiOiAyNTQ5LFxuXHRcIi4vZm9cIjogNDY5NCxcblx0XCIuL2ZvLmpzXCI6IDQ2OTQsXG5cdFwiLi9mclwiOiA0NDcwLFxuXHRcIi4vZnItY2FcIjogMzA0OSxcblx0XCIuL2ZyLWNhLmpzXCI6IDMwNDksXG5cdFwiLi9mci1jaFwiOiAyMzMwLFxuXHRcIi4vZnItY2guanNcIjogMjMzMCxcblx0XCIuL2ZyLmpzXCI6IDQ0NzAsXG5cdFwiLi9meVwiOiA1MDQ0LFxuXHRcIi4vZnkuanNcIjogNTA0NCxcblx0XCIuL2dhXCI6IDkyOTUsXG5cdFwiLi9nYS5qc1wiOiA5Mjk1LFxuXHRcIi4vZ2RcIjogMjEwMSxcblx0XCIuL2dkLmpzXCI6IDIxMDEsXG5cdFwiLi9nbFwiOiA4Nzk0LFxuXHRcIi4vZ2wuanNcIjogODc5NCxcblx0XCIuL2dvbS1kZXZhXCI6IDc4ODQsXG5cdFwiLi9nb20tZGV2YS5qc1wiOiA3ODg0LFxuXHRcIi4vZ29tLWxhdG5cIjogMzE2OCxcblx0XCIuL2dvbS1sYXRuLmpzXCI6IDMxNjgsXG5cdFwiLi9ndVwiOiA1MzQ5LFxuXHRcIi4vZ3UuanNcIjogNTM0OSxcblx0XCIuL2hlXCI6IDQyMDYsXG5cdFwiLi9oZS5qc1wiOiA0MjA2LFxuXHRcIi4vaGlcIjogOTQsXG5cdFwiLi9oaS5qc1wiOiA5NCxcblx0XCIuL2hyXCI6IDMxNixcblx0XCIuL2hyLmpzXCI6IDMxNixcblx0XCIuL2h1XCI6IDIxMzgsXG5cdFwiLi9odS5qc1wiOiAyMTM4LFxuXHRcIi4vaHktYW1cIjogMTQyMyxcblx0XCIuL2h5LWFtLmpzXCI6IDE0MjMsXG5cdFwiLi9pZFwiOiA5MjE4LFxuXHRcIi4vaWQuanNcIjogOTIxOCxcblx0XCIuL2lzXCI6IDEzNSxcblx0XCIuL2lzLmpzXCI6IDEzNSxcblx0XCIuL2l0XCI6IDYyNixcblx0XCIuL2l0LWNoXCI6IDE1MCxcblx0XCIuL2l0LWNoLmpzXCI6IDE1MCxcblx0XCIuL2l0LmpzXCI6IDYyNixcblx0XCIuL2phXCI6IDkxODMsXG5cdFwiLi9qYS5qc1wiOiA5MTgzLFxuXHRcIi4vanZcIjogNDI4Nixcblx0XCIuL2p2LmpzXCI6IDQyODYsXG5cdFwiLi9rYVwiOiAyMTA1LFxuXHRcIi4va2EuanNcIjogMjEwNSxcblx0XCIuL2trXCI6IDc3NzIsXG5cdFwiLi9ray5qc1wiOiA3NzcyLFxuXHRcIi4va21cIjogODc1OCxcblx0XCIuL2ttLmpzXCI6IDg3NTgsXG5cdFwiLi9rblwiOiA5MjgyLFxuXHRcIi4va24uanNcIjogOTI4Mixcblx0XCIuL2tvXCI6IDM3MzAsXG5cdFwiLi9rby5qc1wiOiAzNzMwLFxuXHRcIi4va3VcIjogMTQwOCxcblx0XCIuL2t1LmpzXCI6IDE0MDgsXG5cdFwiLi9reVwiOiAzMjkxLFxuXHRcIi4va3kuanNcIjogMzI5MSxcblx0XCIuL2xiXCI6IDY4NDEsXG5cdFwiLi9sYi5qc1wiOiA2ODQxLFxuXHRcIi4vbG9cIjogNTQ2Nixcblx0XCIuL2xvLmpzXCI6IDU0NjYsXG5cdFwiLi9sdFwiOiA3MDEwLFxuXHRcIi4vbHQuanNcIjogNzAxMCxcblx0XCIuL2x2XCI6IDc1OTUsXG5cdFwiLi9sdi5qc1wiOiA3NTk1LFxuXHRcIi4vbWVcIjogOTg2MSxcblx0XCIuL21lLmpzXCI6IDk4NjEsXG5cdFwiLi9taVwiOiA1NDkzLFxuXHRcIi4vbWkuanNcIjogNTQ5Myxcblx0XCIuL21rXCI6IDU5NjYsXG5cdFwiLi9tay5qc1wiOiA1OTY2LFxuXHRcIi4vbWxcIjogNzM0MSxcblx0XCIuL21sLmpzXCI6IDczNDEsXG5cdFwiLi9tblwiOiA1MTE1LFxuXHRcIi4vbW4uanNcIjogNTExNSxcblx0XCIuL21yXCI6IDM3MCxcblx0XCIuL21yLmpzXCI6IDM3MCxcblx0XCIuL21zXCI6IDk4NDcsXG5cdFwiLi9tcy1teVwiOiAxMjM3LFxuXHRcIi4vbXMtbXkuanNcIjogMTIzNyxcblx0XCIuL21zLmpzXCI6IDk4NDcsXG5cdFwiLi9tdFwiOiAyMTI2LFxuXHRcIi4vbXQuanNcIjogMjEyNixcblx0XCIuL215XCI6IDYxNjUsXG5cdFwiLi9teS5qc1wiOiA2MTY1LFxuXHRcIi4vbmJcIjogNDkyNCxcblx0XCIuL25iLmpzXCI6IDQ5MjQsXG5cdFwiLi9uZVwiOiA2NzQ0LFxuXHRcIi4vbmUuanNcIjogNjc0NCxcblx0XCIuL25sXCI6IDM5MDEsXG5cdFwiLi9ubC1iZVwiOiA5ODE0LFxuXHRcIi4vbmwtYmUuanNcIjogOTgxNCxcblx0XCIuL25sLmpzXCI6IDM5MDEsXG5cdFwiLi9ublwiOiAzODc3LFxuXHRcIi4vbm4uanNcIjogMzg3Nyxcblx0XCIuL29jLWxuY1wiOiAyMTM1LFxuXHRcIi4vb2MtbG5jLmpzXCI6IDIxMzUsXG5cdFwiLi9wYS1pblwiOiA1ODU4LFxuXHRcIi4vcGEtaW4uanNcIjogNTg1OCxcblx0XCIuL3BsXCI6IDQ0OTUsXG5cdFwiLi9wbC5qc1wiOiA0NDk1LFxuXHRcIi4vcHRcIjogOTUyMCxcblx0XCIuL3B0LWJyXCI6IDc5NzEsXG5cdFwiLi9wdC1ici5qc1wiOiA3OTcxLFxuXHRcIi4vcHQuanNcIjogOTUyMCxcblx0XCIuL3JvXCI6IDY0NTksXG5cdFwiLi9yby5qc1wiOiA2NDU5LFxuXHRcIi4vcnVcIjogMTc5Myxcblx0XCIuL3J1LmpzXCI6IDE3OTMsXG5cdFwiLi9zZFwiOiA5NTAsXG5cdFwiLi9zZC5qc1wiOiA5NTAsXG5cdFwiLi9zZVwiOiA0OTAsXG5cdFwiLi9zZS5qc1wiOiA0OTAsXG5cdFwiLi9zaVwiOiAxMjQsXG5cdFwiLi9zaS5qc1wiOiAxMjQsXG5cdFwiLi9za1wiOiA0MjQ5LFxuXHRcIi4vc2suanNcIjogNDI0OSxcblx0XCIuL3NsXCI6IDQ5ODUsXG5cdFwiLi9zbC5qc1wiOiA0OTg1LFxuXHRcIi4vc3FcIjogMTEwNCxcblx0XCIuL3NxLmpzXCI6IDExMDQsXG5cdFwiLi9zclwiOiA5MTMxLFxuXHRcIi4vc3ItY3lybFwiOiA5OTE1LFxuXHRcIi4vc3ItY3lybC5qc1wiOiA5OTE1LFxuXHRcIi4vc3IuanNcIjogOTEzMSxcblx0XCIuL3NzXCI6IDU4OTMsXG5cdFwiLi9zcy5qc1wiOiA1ODkzLFxuXHRcIi4vc3ZcIjogODc2MCxcblx0XCIuL3N2LmpzXCI6IDg3NjAsXG5cdFwiLi9zd1wiOiAxMTcyLFxuXHRcIi4vc3cuanNcIjogMTE3Mixcblx0XCIuL3RhXCI6IDczMzMsXG5cdFwiLi90YS5qc1wiOiA3MzMzLFxuXHRcIi4vdGVcIjogMzExMCxcblx0XCIuL3RlLmpzXCI6IDMxMTAsXG5cdFwiLi90ZXRcIjogMjA5NSxcblx0XCIuL3RldC5qc1wiOiAyMDk1LFxuXHRcIi4vdGdcIjogNzMyMSxcblx0XCIuL3RnLmpzXCI6IDczMjEsXG5cdFwiLi90aFwiOiA5MDQxLFxuXHRcIi4vdGguanNcIjogOTA0MSxcblx0XCIuL3RrXCI6IDkwMDUsXG5cdFwiLi90ay5qc1wiOiA5MDA1LFxuXHRcIi4vdGwtcGhcIjogNTc2OCxcblx0XCIuL3RsLXBoLmpzXCI6IDU3NjgsXG5cdFwiLi90bGhcIjogOTQ0NCxcblx0XCIuL3RsaC5qc1wiOiA5NDQ0LFxuXHRcIi4vdHJcIjogMjM5Nyxcblx0XCIuL3RyLmpzXCI6IDIzOTcsXG5cdFwiLi90emxcIjogODI1NCxcblx0XCIuL3R6bC5qc1wiOiA4MjU0LFxuXHRcIi4vdHptXCI6IDExMDYsXG5cdFwiLi90em0tbGF0blwiOiA2OTksXG5cdFwiLi90em0tbGF0bi5qc1wiOiA2OTksXG5cdFwiLi90em0uanNcIjogMTEwNixcblx0XCIuL3VnLWNuXCI6IDkyODgsXG5cdFwiLi91Zy1jbi5qc1wiOiA5Mjg4LFxuXHRcIi4vdWtcIjogNzY5MSxcblx0XCIuL3VrLmpzXCI6IDc2OTEsXG5cdFwiLi91clwiOiAzNzk1LFxuXHRcIi4vdXIuanNcIjogMzc5NSxcblx0XCIuL3V6XCI6IDY3OTEsXG5cdFwiLi91ei1sYXRuXCI6IDU4OCxcblx0XCIuL3V6LWxhdG4uanNcIjogNTg4LFxuXHRcIi4vdXouanNcIjogNjc5MSxcblx0XCIuL3ZpXCI6IDU2NjYsXG5cdFwiLi92aS5qc1wiOiA1NjY2LFxuXHRcIi4veC1wc2V1ZG9cIjogNDM3OCxcblx0XCIuL3gtcHNldWRvLmpzXCI6IDQzNzgsXG5cdFwiLi95b1wiOiA1ODA1LFxuXHRcIi4veW8uanNcIjogNTgwNSxcblx0XCIuL3poLWNuXCI6IDM4MzksXG5cdFwiLi96aC1jbi5qc1wiOiAzODM5LFxuXHRcIi4vemgtaGtcIjogNTcyNixcblx0XCIuL3poLWhrLmpzXCI6IDU3MjYsXG5cdFwiLi96aC1tb1wiOiA5ODA3LFxuXHRcIi4vemgtbW8uanNcIjogOTgwNyxcblx0XCIuL3poLXR3XCI6IDQxNTIsXG5cdFwiLi96aC10dy5qc1wiOiA0MTUyXG59O1xuXG5cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0KHJlcSkge1xuXHR2YXIgaWQgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKTtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oaWQpO1xufVxuZnVuY3Rpb24gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkge1xuXHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1hcCwgcmVxKSkge1xuXHRcdHZhciBlID0gbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJ1wiKTtcblx0XHRlLmNvZGUgPSAnTU9EVUxFX05PVF9GT1VORCc7XG5cdFx0dGhyb3cgZTtcblx0fVxuXHRyZXR1cm4gbWFwW3JlcV07XG59XG53ZWJwYWNrQ29udGV4dC5rZXlzID0gZnVuY3Rpb24gd2VicGFja0NvbnRleHRLZXlzKCkge1xuXHRyZXR1cm4gT2JqZWN0LmtleXMobWFwKTtcbn07XG53ZWJwYWNrQ29udGV4dC5yZXNvbHZlID0gd2VicGFja0NvbnRleHRSZXNvbHZlO1xubW9kdWxlLmV4cG9ydHMgPSB3ZWJwYWNrQ29udGV4dDtcbndlYnBhY2tDb250ZXh0LmlkID0gNjcwMDsiLCJpbXBvcnQgeyBhdmVyYWdlIH0gZnJvbSAnLi91dGlsJztcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4vY29uc3QnO1xuaW1wb3J0IHsgQmFzZVRpbWVTZXJpZXNEYXRhUG9pbnQsIENvbWJpbmVkVGltZVNlcmllc0RhdGFQb2ludCwgRGVsaXZlcnlUaW1lU2VyaWVzRGF0YVBvaW50LCBUaW1lU2VyaWVzLCBUaW1lU2VyaWVzRGF0YVBvaW50LCBWYWNjaW5hdGlvblRpbWVTZXJpZXNEYXRhUG9pbnQsIFdlZWtTdW1tYXJ5LCBSZW1haW5pbmdWYWNjaW5hdGlvblRpbWUgfSBmcm9tICcuL21vZGVsJztcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBvbGRlc3QgRGF0ZSBmcm9tIGJvdGggcG9pbnRzIG9yIHVuZGVmaW5lZC5cbiAqL1xuZnVuY3Rpb24gbWluRGF0ZShwb2ludDE6IEJhc2VUaW1lU2VyaWVzRGF0YVBvaW50IHwgdW5kZWZpbmVkLCBwb2ludDI6IEJhc2VUaW1lU2VyaWVzRGF0YVBvaW50IHwgdW5kZWZpbmVkKSB7XG4gICAgbGV0IHJlc3VsdCA9IHBvaW50MT8uZGF0ZSA/PyBwb2ludDI/LmRhdGU7XG5cbiAgICBpZihwb2ludDEgJiYgcG9pbnQyKSB7XG4gICAgICAgIGlmKHBvaW50MS5kYXRlLnZhbHVlT2YoKSA8IHBvaW50Mi5kYXRlLnZhbHVlT2YoKSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gcG9pbnQxLmRhdGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQgPSBwb2ludDIuZGF0ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tYmluZVRpbWVTZXJpZXModmFjY1RTOiBWYWNjaW5hdGlvblRpbWVTZXJpZXNEYXRhUG9pbnRbXSwgZGVsaXZlcnlUUzogRGVsaXZlcnlUaW1lU2VyaWVzRGF0YVBvaW50W10pIHtcbiAgICBjb25zdCByZXN1bHQ6IENvbWJpbmVkVGltZVNlcmllc0RhdGFQb2ludFtdID0gW107XG5cbiAgICBsZXQgY3VycmVudFZhY2MgPSB1bmRlZmluZWQ7XG4gICAgbGV0IGN1cnJlbnREZWxpdmVyeSA9IHVuZGVmaW5lZDtcbiAgICBkbyB7XG4gICAgICAgIGlmKCFjdXJyZW50VmFjYykge1xuICAgICAgICAgICAgY3VycmVudFZhY2MgPSB2YWNjVFMuc2hpZnQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZighY3VycmVudERlbGl2ZXJ5KSB7XG4gICAgICAgICAgICBjdXJyZW50RGVsaXZlcnkgPSBkZWxpdmVyeVRTLnNoaWZ0KCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGF0ZSA9IG1pbkRhdGUoY3VycmVudERlbGl2ZXJ5LCBjdXJyZW50VmFjYyk7XG4gICAgICAgIGlmKGRhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBkYXRhOiBDb21iaW5lZFRpbWVTZXJpZXNEYXRhUG9pbnQgPSB7XG4gICAgICAgICAgICBkYXRlOiBkYXRlLFxuXG4gICAgICAgICAgICBwZW9wbGVGaXJzdERvc2U6IDAsXG4gICAgICAgICAgICBwZW9wbGVTZWNvbmREb3NlOiAwLFxuICAgICAgICAgICAgcGVvcGxlVmFjY2luYXRlZDogMCxcbiAgICAgICAgICAgIHRvdGFsVmFjY2luZURvc2VzOiAwLFxuICAgICAgICAgICAgdG90YWxQZW9wbGVGaXJzdERvc2U6IDAsXG4gICAgICAgICAgICB0b3RhbFBlb3BsZUZ1bGx5VmFjY2luYXRlZDogMCxcbiAgICAgICAgICAgIG1vZGVybmFEb3Nlc0RlbGl2ZXJlZDogMCxcbiAgICAgICAgICAgIGFzdHJhRG9zZXNEZWxpdmVyZWQ6IDAsXG4gICAgICAgICAgICBjb21pcm5hdHlEb3Nlc0RlbGl2ZXJlZDogMCxcbiAgICAgICAgICAgIGpvaG5zb25Eb3Nlc0RlbGl2ZXJlZDogMCxcblxuICAgICAgICAgICAgZG9zZXNEZWxpdmVyZWQ6IDBcbiAgICAgICAgfTtcblxuICAgICAgICBpZihjdXJyZW50VmFjYz8uZGF0ZS52YWx1ZU9mKCkgPT09IGRhdGUudmFsdWVPZigpKSB7XG4gICAgICAgICAgICBkYXRhLnBlb3BsZUZpcnN0RG9zZSA9IGN1cnJlbnRWYWNjLnBlb3BsZUZpcnN0RG9zZSxcbiAgICAgICAgICAgIGRhdGEucGVvcGxlU2Vjb25kRG9zZSA9IGN1cnJlbnRWYWNjLnBlb3BsZVNlY29uZERvc2UsXG4gICAgICAgICAgICBkYXRhLnRvdGFsVmFjY2luZURvc2VzID0gY3VycmVudFZhY2MudG90YWxWYWNjaW5lRG9zZXMsXG4gICAgICAgICAgICBkYXRhLnBlb3BsZVZhY2NpbmF0ZWQgPSBjdXJyZW50VmFjYy5wZW9wbGVWYWNjaW5hdGVkO1xuICAgICAgICAgICAgZGF0YS50b3RhbFBlb3BsZUZpcnN0RG9zZSA9IGN1cnJlbnRWYWNjLnRvdGFsUGVvcGxlRmlyc3REb3NlLFxuICAgICAgICAgICAgZGF0YS50b3RhbFBlb3BsZUZ1bGx5VmFjY2luYXRlZCA9IGN1cnJlbnRWYWNjLnRvdGFsUGVvcGxlRnVsbHlWYWNjaW5hdGVkLFxuICAgICAgICAgICAgY3VycmVudFZhY2MgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmKGN1cnJlbnREZWxpdmVyeT8uZGF0ZS52YWx1ZU9mKCkgPT09IGRhdGUudmFsdWVPZigpKSB7XG4gICAgICAgICAgICBkYXRhLmRvc2VzRGVsaXZlcmVkID0gY3VycmVudERlbGl2ZXJ5LmRvc2VzRGVsaXZlcmVkO1xuICAgICAgICAgICAgZGF0YS5hc3RyYURvc2VzRGVsaXZlcmVkID0gY3VycmVudERlbGl2ZXJ5LmFzdHJhRG9zZXNEZWxpdmVyZWQ7XG4gICAgICAgICAgICBkYXRhLmNvbWlybmF0eURvc2VzRGVsaXZlcmVkID0gY3VycmVudERlbGl2ZXJ5LmNvbWlybmF0eURvc2VzRGVsaXZlcmVkO1xuICAgICAgICAgICAgZGF0YS5qb2huc29uRG9zZXNEZWxpdmVyZWQgPSBjdXJyZW50RGVsaXZlcnkuam9obnNvbkRvc2VzRGVsaXZlcmVkO1xuICAgICAgICAgICAgZGF0YS5tb2Rlcm5hRG9zZXNEZWxpdmVyZWQgPSBjdXJyZW50RGVsaXZlcnkubW9kZXJuYURvc2VzRGVsaXZlcmVkO1xuICAgICAgICAgICAgY3VycmVudERlbGl2ZXJ5ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQucHVzaChkYXRhKTtcblxuICAgIH0gd2hpbGUodHJ1ZSk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlQXZlcmFnZXMoaW5wdXQ6IENvbWJpbmVkVGltZVNlcmllc0RhdGFQb2ludFtdKTogVGltZVNlcmllcyB7XG4gICAgY29uc3QgcmVzdWx0OiBUaW1lU2VyaWVzID0gW107XG4gICAgbGV0IHRvdGFsRG9zZXNEZWxpdmVyZWQgPSAwO1xuXG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgaW5wdXQuZW50cmllcygpKSB7XG4gICAgICAgIHRvdGFsRG9zZXNEZWxpdmVyZWQgKz0gdmFsdWUuZG9zZXNEZWxpdmVyZWQ7XG4gICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgIC4uLnZhbHVlLFxuICAgICAgICAgICAgdG90YWxEb3Nlc0RlbGl2ZXJlZDogdG90YWxEb3Nlc0RlbGl2ZXJlZCxcbiAgICAgICAgICAgIGF2ZXJhZ2VEb3NlczogY2FsY0F2ZXJhZ2VGaWVsZChpbnB1dCwga2V5LCB0ID0+IHQucGVvcGxlVmFjY2luYXRlZCksXG4gICAgICAgICAgICBhdmVyYWdlRmlyc3REb3NlczogY2FsY0F2ZXJhZ2VGaWVsZChpbnB1dCwga2V5LCB0ID0+IHQucGVvcGxlRmlyc3REb3NlKSxcbiAgICAgICAgICAgIGF2ZXJhZ2VTZWNvbmREb3NlczogY2FsY0F2ZXJhZ2VGaWVsZChpbnB1dCwga2V5LCB0ID0+IHQucGVvcGxlU2Vjb25kRG9zZSksXG4gICAgICAgICAgICBkb3Nlc0F2YWlsYWJsZTogdG90YWxEb3Nlc0RlbGl2ZXJlZCAtIHZhbHVlLnRvdGFsVmFjY2luZURvc2VzXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGNhbGNBdmVyYWdlRmllbGQoaW5wdXQ6IENvbWJpbmVkVGltZVNlcmllc0RhdGFQb2ludFtdLCBpOiBudW1iZXIsIHNlbGVjdG9yOiAodDogQ29tYmluZWRUaW1lU2VyaWVzRGF0YVBvaW50KSA9PiBudW1iZXIpIHtcbiAgICBjb25zdCBpMCA9IGkgPiA2ID8gaSAtIDYgOiAwO1xuICAgIGNvbnN0IGxhc3Q3RGF5cyA9IGlucHV0Lm1hcChzZWxlY3Rvcikuc2xpY2UoaTAsIGkrMSk7XG4gICAgcmV0dXJuIGF2ZXJhZ2UobGFzdDdEYXlzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZVdlZWtseURhdGEoZGFpbHlUaW1lU2VyaWVzOiBUaW1lU2VyaWVzKTogV2Vla1N1bW1hcnlbXSB7XG4gICAgbGV0IHJlc3VsdDogV2Vla1N1bW1hcnlbXSA9IFtdO1xuICAgIGxldCBjdXJyZW50V2VlazogV2Vla1N1bW1hcnkgfCBudWxsID0gbnVsbDtcbiAgICBmb3IoY29uc3QgZGF5IG9mIGRhaWx5VGltZVNlcmllcykge1xuICAgICAgICBpZighY3VycmVudFdlZWsgfHwgIWRheS5kYXRlLmlzU2FtZShjdXJyZW50V2Vlay5kYXRlLCAnVycpKSB7XG4gICAgICAgICAgICBjdXJyZW50V2VlayA9IHtcbiAgICAgICAgICAgICAgICBkYXRlOiBkYXkuZGF0ZSxcbiAgICAgICAgICAgICAgICBwZW9wbGVGaXJzdERvc2U6IDAsXG4gICAgICAgICAgICAgICAgcGVvcGxlU2Vjb25kRG9zZTogMCxcbiAgICAgICAgICAgICAgICBwZW9wbGVWYWNjaW5hdGVkOiAwLFxuICAgICAgICAgICAgICAgIGRvc2VzRGVsaXZlcmVkOiAwLFxuICAgICAgICAgICAgICAgIGFzdHJhRG9zZXNEZWxpdmVyZWQ6IDAsXG4gICAgICAgICAgICAgICAgY29taXJuYXR5RG9zZXNEZWxpcmVkOiAwLFxuICAgICAgICAgICAgICAgIGpvaG5zb25Eb3Nlc0RlbGl2ZXJlZDogMCxcbiAgICAgICAgICAgICAgICBtb2Rlcm5hRG9zZXNEZWxpdmVyZWQ6IDBcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXN1bHQucHVzaChjdXJyZW50V2Vlayk7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudFdlZWsucGVvcGxlRmlyc3REb3NlICs9IGRheS5wZW9wbGVGaXJzdERvc2U7XG4gICAgICAgIGN1cnJlbnRXZWVrLnBlb3BsZVNlY29uZERvc2UgKz0gZGF5LnBlb3BsZVNlY29uZERvc2U7XG4gICAgICAgIGN1cnJlbnRXZWVrLmRvc2VzRGVsaXZlcmVkICs9IGRheS5kb3Nlc0RlbGl2ZXJlZDtcbiAgICAgICAgY3VycmVudFdlZWsucGVvcGxlVmFjY2luYXRlZCArPSBkYXkucGVvcGxlVmFjY2luYXRlZDtcbiAgICAgICAgY3VycmVudFdlZWsuYXN0cmFEb3Nlc0RlbGl2ZXJlZCArPSBkYXkuYXN0cmFEb3Nlc0RlbGl2ZXJlZDtcbiAgICAgICAgY3VycmVudFdlZWsuY29taXJuYXR5RG9zZXNEZWxpcmVkICs9IGRheS5jb21pcm5hdHlEb3Nlc0RlbGl2ZXJlZDtcbiAgICAgICAgY3VycmVudFdlZWsuam9obnNvbkRvc2VzRGVsaXZlcmVkICs9IGRheS5qb2huc29uRG9zZXNEZWxpdmVyZWQ7XG4gICAgICAgIGN1cnJlbnRXZWVrLm1vZGVybmFEb3Nlc0RlbGl2ZXJlZCArPSBkYXkubW9kZXJuYURvc2VzRGVsaXZlcmVkO1xuICAgIH1cblxuICAgIC8vIHNob3cgb25seSBmdWxsIHdlZWtzOlxuICAgIHJldHVybiBnZXRDdXJyZW50RGF0YShkYWlseVRpbWVTZXJpZXMpLmRhdGUuZGF5KCkgPT0gMCA/XG4gICAgcmVzdWx0IDogcmVzdWx0LnNsaWNlKDAscmVzdWx0Lmxlbmd0aC0xKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEN1cnJlbnREYXRhKHRzOiBUaW1lU2VyaWVzKSB7XG4gICAgcmV0dXJuICB0cy5zbGljZSgtMSlbMF07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVUYWJsZShkOiBUaW1lU2VyaWVzRGF0YVBvaW50KTogUmVtYWluaW5nVmFjY2luYXRpb25UaW1lW10ge1xuICAgIGNvbnN0IHBvcHVsYXRpb24gPSBjb25maWcucG9wdWxhdGlvbjtcblxuICAgIGNvbnN0IHNlY29uZERvc2VNZWFuaW5nZnVsID0gIShkLmF2ZXJhZ2VTZWNvbmREb3NlcyowLjkgPiBkLmF2ZXJhZ2VGaXJzdERvc2VzKTtcblxuICAgIGNvbnN0IHJlc3VsdCA9IFtcbiAgICAgICAge1xuICAgICAgICAgICAgdGl0bGU6IFwiNzAlIGZpcnN0IGRvc2UgYWRtaW5pc3RlcmVkXCIsXG4gICAgICAgICAgICBzdWJ0aXRsZTogXCJiYXNlZCBvbiBmaXJzdCBkb3NlIDctZGF5IGF2ZXJhZ2UgYW5kIHJlbWFpbmluZyBmaXJzdCBkb3Nlc1wiLFxuICAgICAgICAgICAgZGF5czogKHBvcHVsYXRpb24gICogMC43ICAtIGQudG90YWxQZW9wbGVGaXJzdERvc2UpIC8gZC5hdmVyYWdlRmlyc3REb3NlcyxcbiAgICAgICAgICAgIG1lYW5pbmdmdWw6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgdGl0bGU6IFwiMTAwJSBmaXJzdCBkb3NlIGFkbWluaXN0ZXJlZFwiLFxuICAgICAgICAgICAgc3VidGl0bGU6IFwiYmFzZWQgb24gdGhlIGZpcnN0IGRvc2UgNy1kYXkgYXZlcmFnZSBhbmQgcmVtYWluaW5nIGZpcnN0IGRvc2VzXCIsXG4gICAgICAgICAgICBkYXlzOiAocG9wdWxhdGlvbiAtIGQudG90YWxQZW9wbGVGaXJzdERvc2UpIC8gZC5hdmVyYWdlRmlyc3REb3NlcyxcbiAgICAgICAgICAgIG1lYW5pbmdmdWw6IHNlY29uZERvc2VNZWFuaW5nZnVsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRpdGxlOiBcIjcwJSBmdWxseSB2YWNjaW5hdGVkXCIsXG4gICAgICAgICAgICBzdWJ0aXRsZTogXCJiYXNlZCBvbiB0aGUgc2Vjb25kIGRvc2UgNy1kYXkgYXZlcmFnZSBhbmQgcmVtYWluaW5nIHNlY29uZCBkb3Nlc1wiLFxuICAgICAgICAgICAgLy8gVE9ETzogdGhpcyB1bm5lY2Vzc2FyeSBpbXByZWNpc2VseSBiZWNhdXNlIGl0IGRvZXMgbm90IHRha2UgdmFjY2luZXMgaW50byBhY2NvdW50IHdoaWNoIHJlcXVpcmVzIG9ubHkgb25lIGRvc2VcbiAgICAgICAgICAgIGRheXM6IChwb3B1bGF0aW9uICogMC43IC0gZC50b3RhbFBlb3BsZUZ1bGx5VmFjY2luYXRlZCkgLyBkLmF2ZXJhZ2VTZWNvbmREb3NlcyxcbiAgICAgICAgICAgIG1lYW5pbmdmdWw6IHNlY29uZERvc2VNZWFuaW5nZnVsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRpdGxlOiBcIkZ1bGx5IHZhY2NpbmF0ZWRcIixcbiAgICAgICAgICAgIHN1YnRpdGxlOiBcImJhc2VkIG9uIHRoZSA3LWRheSBhdmVyYWdlIG9mIHRvdGFsIGRvc2VzIGFuZCByZW1haW5pbmcgb3ZlcmFsbCBkb3Nlc1wiLFxuICAgICAgICAgICAgLy8gVE9ETzogdGhpcyB1bm5lY2Vzc2FyeSBpbXByZWNpc2VseSBiZWNhdXNlIGl0IGRvZXMgbm90IHRha2UgdmFjY2luZXMgaW50byBhY2NvdW50IHdoaWNoIHJlcXVpcmVzIG9ubHkgb25lIGRvc2VcbiAgICAgICAgICAgIGRheXM6IChwb3B1bGF0aW9uICogMiAtIGQudG90YWxWYWNjaW5lRG9zZXMpIC8gZC5hdmVyYWdlRG9zZXMsXG4gICAgICAgICAgICBtZWFuaW5nZnVsOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRpdGxlOiBcIkZ1bGx5IHZhY2NpbmF0ZWRcIixcbiAgICAgICAgICAgIHN1YnRpdGxlOiBcImJhc2VkIG9uIHRoZSBzZWNvbmQgZG9zZSA3LWRheSBhdmVyYWdlIGFuZCByZW1haW5pbmcgc2Vjb25kIGRvc2VzXCIsXG4gICAgICAgICAgICBkYXlzOiAocG9wdWxhdGlvbiAtIGQudG90YWxQZW9wbGVGdWxseVZhY2NpbmF0ZWQpIC8gZC5hdmVyYWdlU2Vjb25kRG9zZXMsXG4gICAgICAgICAgICBtZWFuaW5nZnVsOiBzZWNvbmREb3NlTWVhbmluZ2Z1bFxuICAgICAgICB9LFxuICAgIF07XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsIlxuaW1wb3J0IHtcbiAgICBDaGFydCxcbiAgICBBcmNFbGVtZW50LFxuICAgIExpbmVFbGVtZW50LFxuICAgIEJhckVsZW1lbnQsXG4gICAgUG9pbnRFbGVtZW50LFxuICAgIEJhckNvbnRyb2xsZXIsXG4gICAgTGluZUNvbnRyb2xsZXIsXG4gICAgTGluZWFyU2NhbGUsXG4gICAgVGltZVNjYWxlLFxuICAgIFRpbWVTZXJpZXNTY2FsZSxcbiAgICBDYXRlZ29yeVNjYWxlLFxuICAgIEZpbGxlcixcbiAgICBMZWdlbmQsXG4gICAgVGl0bGUsXG4gICAgVG9vbHRpcCxcbiAgICBDaGFydENvbmZpZ3VyYXRpb24sXG4gICAgQ2hhcnREYXRhc2V0IH0gZnJvbSAnY2hhcnQuanMnO1xuaW1wb3J0IE5hbm8sIHsgQ29tcG9uZW50IH0gZnJvbSAnbmFuby1qc3gnO1xuXG5DaGFydC5yZWdpc3RlcihcbiAgICBBcmNFbGVtZW50LFxuICAgIExpbmVFbGVtZW50LFxuICAgIEJhckVsZW1lbnQsXG4gICAgUG9pbnRFbGVtZW50LFxuICAgIEJhckNvbnRyb2xsZXIsXG4gICAgTGluZUNvbnRyb2xsZXIsXG4gICAgTGluZWFyU2NhbGUsXG4gICAgVGltZVNjYWxlLFxuICAgIFRpbWVTZXJpZXNTY2FsZSxcbiAgICBDYXRlZ29yeVNjYWxlLFxuICAgIEZpbGxlcixcbiAgICBMZWdlbmQsXG4gICAgVGl0bGUsXG4gICAgVG9vbHRpcFxuKTtcblxuXG5leHBvcnQgaW50ZXJmYWNlIENoYXJ0UHJvcHMge1xuICAgIHRpdGxlOiBzdHJpbmcsXG4gICAgc3VidGl0bGU/OiBzdHJpbmcsXG4gICAgcmVtYXJrPzogc3RyaW5nLFxuICAgIGxhYmVsczogc3RyaW5nW10sXG4gICAgeVRpdGxlOiBzdHJpbmcsXG4gICAgeFRpdGxlPzogc3RyaW5nLFxuICAgIGRhdGFzZXRzOiBDaGFydERhdGFzZXRbXVxufVxuXG5leHBvcnQgY2xhc3MgQ2hhcnRDb21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQ8Q2hhcnRQcm9wcz4ge1xuICAgIGNoYXJ0PzogQ2hhcnQ7XG5cbiAgICBidWlsZENoYXJ0Q29uZmlnKHA6IENoYXJ0UHJvcHMpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgICAgIGxhYmVsczogcC5sYWJlbHMsXG4gICAgICAgICAgICBkYXRhc2V0czogcC5kYXRhc2V0c1xuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGNvbmZpZzogQ2hhcnRDb25maWd1cmF0aW9uID0ge1xuICAgICAgICAgICAgdHlwZTogJ2JhcicsXG4gICAgICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNpdmU6IHRydWUsXG4gICAgICAgICAgICAgICAgYXNwZWN0UmF0aW86IHRoaXMuZ2V0QXNwZWN0UmF0aW8oKSxcbiAgICAgICAgICAgICAgICBzY2FsZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgeDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBwLnhUaXRsZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB5OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHAueVRpdGxlXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBjb25maWc7XG4gICAgfVxuXG4gICAgZ2V0QXNwZWN0UmF0aW8oKSB7XG4gICAgICAgIGlmKHdpbmRvdy5pbm5lcldpZHRoIDwgODAwICYmIHdpbmRvdy5pbm5lcldpZHRoIDwgd2luZG93LmlubmVySGVpZ2h0KSB7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXNwb25zaXZlIHVwZGF0ZSBvZiB0aGUgYXNwZWN0IHJhdGlvLCBzbyB0aGF0IHRoZSBjaGFydCBpcyByZWFkYWJsZSBvbiBzbWFsbCBkZXZpY2VzIGluIGxhbmRzY2FwZSBhbmQgcG9ydHJhaXQgbW9kZS5cbiAgICAgKi9cbiAgICB1cGRhdGVBc3BlY3RSYXRpbygpIHtcbiAgICAgICAgaWYodGhpcy5jaGFydCkge1xuICAgICAgICAgICAgdGhpcy5jaGFydC5vcHRpb25zLmFzcGVjdFJhdGlvID0gdGhpcy5nZXRBc3BlY3RSYXRpbygpO1xuICAgICAgICAgICAgdGhpcy5jaGFydC51cGRhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRyYXdDaGFydCgpIHtcbiAgICAgICAgdmFyIGRvc2VzQ3R4ID0gdGhpcy5nZXRDYW52YXMoKS5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgICBpZighZG9zZXNDdHgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGdldCBjYW52YXMgY29udGV4dC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29uZmlnID0gdGhpcy5idWlsZENoYXJ0Q29uZmlnKHRoaXMucHJvcHMpXG4gICAgICAgIHRoaXMuY2hhcnQgPSBuZXcgQ2hhcnQoZG9zZXNDdHgsIGNvbmZpZyk7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCAoKSA9PiB0aGlzLnVwZGF0ZUFzcGVjdFJhdGlvKCkpO1xuICAgIH1cblxuICAgIGdldENhbnZhcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudHNbMF0ucXVlcnlTZWxlY3RvcihcImNhbnZhc1wiKSBhcyBIVE1MQ2FudmFzRWxlbWVudDtcbiAgICB9XG5cbiAgICBkaWRNb3VudCgpIHtcbiAgICAgICAgdGhpcy5kcmF3Q2hhcnQoKTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGgyPnt0aGlzLnByb3BzLnRpdGxlfTwvaDI+XG4gICAgICAgICAgICB7dGhpcy5wcm9wcy5zdWJ0aXRsZSA/ICg8cCBjbGFzcz1cInN1YnRpdGxlXCI+e3RoaXMucHJvcHMuc3VidGl0bGV9PC9wPik6IFwiXCJ9XG4gICAgICAgICAgICA8Y2FudmFzIHdpZHRoPVwiMjAwXCIgaGVpZ2h0PVwiMTAwXCI+PC9jYW52YXM+XG4gICAgICAgICAgICB7dGhpcy5wcm9wcy5yZW1hcmsgPyAoPHAgY2xhc3M9XCJyZW1hcmtcIj48aT5SZW1hcms6PC9pPiB7dGhpcy5wcm9wcy5yZW1hcmt9PC9wPik6IFwiXCJ9XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBDaGFydERhdGFzZXQgfSBmcm9tICdjaGFydC5qcyc7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgeyBDaGFydFByb3BzIH0gZnJvbSAnLi9jaGFydCc7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuL2NvbnN0JztcbmltcG9ydCB7IE1ldGFkYXRhLCBUaW1lU2VyaWVzLCBXZWVrU3VtbWFyeSB9IGZyb20gJy4vbW9kZWwnO1xuXG5lbnVtIENoYXJ0Q29sb3JzIHtcbiAgICBCbHVlID0gXCIyNSwgMTMwLCAxOTZcIixcbiAgICBEYXJrUmVkID0gXCIxNDMsIDAsIDVcIixcbiAgICBSZWQgPSBcIjI1NSwgODksIDk0XCIsXG4gICAgWWVsbG93ID0gXCIyNTUsIDIwMiwgNThcIixcbiAgICBHcmVlbiA9IFwiMTM4LCAyMDEsIDM4XCIsXG4gICAgUHVycGxlID0gXCIxMDYsIDc2LCAxNDdcIixcbn1cblxuZnVuY3Rpb24gY2hhcnRDb2xvcihjOiBDaGFydENvbG9ycykge1xuICAgIHJldHVybiB7XG4gICAgICAgIGJvcmRlckNvbG9yOiBgcmdiYSgke2N9LCAxKWAsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogYHJnYmEoJHtjfSwgMC40KWAsXG4gICAgfVxufVxuXG5jb25zdCB0c0xhYmVscyA9ICh0czogVGltZVNlcmllcykgPT4gdHMubWFwKHQgPT4gbW9tZW50KHQuZGF0ZSkuZm9ybWF0KFwiZGRkLCBNTU0gRERcIikpO1xuXG5mdW5jdGlvbiBjTGluZUNoYXJ0KGxhYmVsOiBzdHJpbmcsIGRhdGE6IG51bWJlcltdLCBjb2xvcjogQ2hhcnRDb2xvcnMpOiBDaGFydERhdGFzZXQge1xuICAgIHJldHVybiB7XG4gICAgICAgIGxhYmVsLFxuICAgICAgICBkYXRhLFxuICAgICAgICAuLi5jaGFydENvbG9yKGNvbG9yKSxcbiAgICAgICAgZmlsbDogZmFsc2UsXG4gICAgICAgIHRlbnNpb246IDAuNCxcbiAgICAgICAgdHlwZTogJ2xpbmUnXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gbGluZUNoYXJ0KGxhYmVsOiBzdHJpbmcsIGRhdGE6IG51bWJlcltdLCBjb2xvcjogQ2hhcnRDb2xvcnMpOiBDaGFydERhdGFzZXQge1xuICAgIHJldHVybiB7XG4gICAgICAgIGxhYmVsLFxuICAgICAgICBkYXRhLFxuICAgICAgICAuLi5jaGFydENvbG9yKGNvbG9yKSxcbiAgICAgICAgdHlwZTogJ2xpbmUnXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gYmFyQ2hhcnQobGFiZWw6IHN0cmluZywgZGF0YTogbnVtYmVyW10sIGNvbG9yOiBDaGFydENvbG9ycyk6IENoYXJ0RGF0YXNldCB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbGFiZWwsXG4gICAgICAgIGRhdGEsXG4gICAgICAgIC4uLmNoYXJ0Q29sb3IoY29sb3IpLFxuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFZhY2NDaGFydENvbmZpZyh0czogVGltZVNlcmllcyk6IENoYXJ0UHJvcHMge1xuICAgIGNvbnN0IGRhdGFzZXRzOiBDaGFydERhdGFzZXRbXSA9IFtcbiAgICAgICAgY0xpbmVDaGFydChcIjctZGF5IEF2ZXJhZ2UgVmFjY2luYXRpb25zXCIsIHRzLm1hcCh0ID0+IHQuYXZlcmFnZURvc2VzKSwgQ2hhcnRDb2xvcnMuUHVycGxlKSxcbiAgICAgICAgY0xpbmVDaGFydChcIjctZGF5IEF2ZXJhZ2UgRmlyc3QgRG9zZVwiLCB0cy5tYXAodCA9PiB0LmF2ZXJhZ2VGaXJzdERvc2VzKSwgQ2hhcnRDb2xvcnMuQmx1ZSksXG4gICAgICAgIGNMaW5lQ2hhcnQoXCI3LWRheSBBdmVyYWdlIFNlY29uZCBEb3NlXCIsIHRzLm1hcCh0ID0+IHQuYXZlcmFnZVNlY29uZERvc2VzKSwgQ2hhcnRDb2xvcnMuR3JlZW4pLFxuICAgICAgICBiYXJDaGFydChcIkRhaWx5IFZhY2NpbmF0aW9uc1wiLCB0cy5tYXAodCA9PiB0LnBlb3BsZVZhY2NpbmF0ZWQpLCBDaGFydENvbG9ycy5ZZWxsb3cpLFxuICAgIF07XG5cbiAgICByZXR1cm4ge1xuICAgICAgICB0aXRsZTogXCJWYWNjaW5hdGlvbnNcIixcbiAgICAgICAgbGFiZWxzOiB0c0xhYmVscyh0cyksXG4gICAgICAgIHlUaXRsZTogXCJOdW1iZXIgb2YgVmFjY2luYXRpb25zXCIsXG4gICAgICAgIGRhdGFzZXRzXG4gICAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldERvc2VzQ2hhcnRDb25maWcodHM6IFRpbWVTZXJpZXMsIG1ldGFkYXRhOiBNZXRhZGF0YSkge1xuICAgIGNvbnN0IGRhdGFzZXRzOiBDaGFydERhdGFzZXRbXSA9IFtcbiAgICAgICAgY0xpbmVDaGFydChcIkF2YWlsYWJsZSBEb3Nlc1wiLCB0cy5tYXAodCA9PiB0LmRvc2VzQXZhaWxhYmxlKSwgQ2hhcnRDb2xvcnMuRGFya1JlZCksXG4gICAgICAgIGJhckNoYXJ0KFwiRGFpbHkgRGVsaXZlcmllc1wiLCB0cy5tYXAodCA9PiB0LmRvc2VzRGVsaXZlcmVkKSwgQ2hhcnRDb2xvcnMuUmVkKSxcbiAgICBdO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgdGl0bGU6IFwiRGVsaXZlcmllcyBvZiBEb3Nlc1wiLFxuICAgICAgICByZW1hcms6IGBEZWxpdmVyaWVzIHdpbGwgYmUgdXBkYXRlZCBvbiBNb25kYXlzIG9ubHkuIFRoZSBsYXN0IHVwZGF0ZSB3YXMgJHttZXRhZGF0YS5kZWxpdmVyeUxhc3RVcGRhdGVkLmZyb21Ob3coKX0uYCxcbiAgICAgICAgbGFiZWxzOiB0c0xhYmVscyh0cyksXG4gICAgICAgIHlUaXRsZTogXCJOdW1iZXIgb2YgRG9zZXNcIixcbiAgICAgICAgZGF0YXNldHNcbiAgICB9O1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRXZWVrbHlDaGFydENvbmZpZyh3czogV2Vla1N1bW1hcnlbXSkge1xuICAgIGNvbnN0IGRhdGFzZXRzOiBDaGFydERhdGFzZXRbXSA9IFtcbiAgICAgICAgbGluZUNoYXJ0KFwiUGVvcGxlIFZhY2NpbmF0ZWRcIiwgd3MubWFwKHQgPT4gdC5wZW9wbGVWYWNjaW5hdGVkKSwgQ2hhcnRDb2xvcnMuUHVycGxlKSxcbiAgICAgICAgbGluZUNoYXJ0KFwiRmlyc3QgRG9zZVwiLCB3cy5tYXAodCA9PiB0LnBlb3BsZUZpcnN0RG9zZSksIENoYXJ0Q29sb3JzLkJsdWUpLFxuICAgICAgICBsaW5lQ2hhcnQoXCJTZWNvbmQgRG9zZVwiLCB3cy5tYXAodCA9PiB0LnBlb3BsZVNlY29uZERvc2UpLCBDaGFydENvbG9ycy5HcmVlbiksXG4gICAgICAgIGJhckNoYXJ0KFwiRG9zZXMgRGVsaXZlcmVkXCIsIHdzLm1hcCh0ID0+IHQuZG9zZXNEZWxpdmVyZWQpLCBDaGFydENvbG9ycy5SZWQpLFxuICAgIF07XG5cbiAgICByZXR1cm4ge1xuICAgICAgICB0aXRsZTogXCJXZWVrbHkgVmFjY2luYXRpb25zIGFuZCBEZWxpdmVyaWVzXCIsXG4gICAgICAgIGxhYmVsczogd3MubWFwKHcgPT4gbW9tZW50KHcuZGF0ZSkuZm9ybWF0KFwiV1wiKSksXG4gICAgICAgIHlUaXRsZTogXCJOdW1iZXIgb2YgRG9zZXNcIixcbiAgICAgICAgeFRpdGxlOiBcIklTTyBXZWVrXCIsXG4gICAgICAgIGRhdGFzZXRzXG4gICAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEVzdGltYXRpb25DaGFydENvbmZpZyh0czogVGltZVNlcmllcyk6IENoYXJ0UHJvcHMge1xuICAgIGNvbnN0IHBvcHVsYXRpb24gPSBjb25maWcucG9wdWxhdGlvbjtcbiAgICB0cyA9IHRzLmZpbHRlcihwID0+IHAuZGF0ZS5pc0FmdGVyKG1vbWVudChcIjIwMjEtMDUtMTRcIikpKSAvLyB3YXMgMDUtMDFcblxuICAgIC8vIFRPRE86IEltcG9ydCBmcm9tIGNhbGN1bGF0aW9uP1xuICAgIGNvbnN0IGRhdGFzZXRzOiBDaGFydERhdGFzZXRbXSA9IFtcbiAgICAgICAgY0xpbmVDaGFydChcIjcwJSBmaXJzdCBkb3NlIGFkbWluaXN0ZXJlZFwiLCB0cy5tYXAoZCA9PiAocG9wdWxhdGlvbiAgKiAwLjcgIC0gZC50b3RhbFBlb3BsZUZpcnN0RG9zZSkgLyBkLmF2ZXJhZ2VGaXJzdERvc2VzKSwgQ2hhcnRDb2xvcnMuUHVycGxlKSxcbiAgICAgICAgY0xpbmVDaGFydChcIjcwJSBmdWxseSB2YWNjaW5hdGVkXCIsIHRzLm1hcChkID0+IChwb3B1bGF0aW9uICogMC43IC0gZC50b3RhbFBlb3BsZUZ1bGx5VmFjY2luYXRlZCkgLyBkLmF2ZXJhZ2VTZWNvbmREb3NlcyksIENoYXJ0Q29sb3JzLkJsdWUpLFxuICAgICAgICBjTGluZUNoYXJ0KFwiRnVsbHkgdmFjY2luYXRlZFwiLCB0cy5tYXAoZCA9PiAocG9wdWxhdGlvbiAqIDIgLSBkLnRvdGFsVmFjY2luZURvc2VzKSAvIGQuYXZlcmFnZURvc2VzKSwgQ2hhcnRDb2xvcnMuR3JlZW4pLFxuICAgIF07XG5cbiAgICByZXR1cm4ge1xuICAgICAgICB0aXRsZTogXCJSZW1haW5pbmcgVmFjY2luYXRpb24gVGltZSBFc3RpbWF0aW9uc1wiLFxuICAgICAgICBsYWJlbHM6IHRzTGFiZWxzKHRzKSxcbiAgICAgICAgeVRpdGxlOiBcIkRheXNcIixcbiAgICAgICAgZGF0YXNldHNcbiAgICB9O1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRXZWVrbHlDaGFydEJ5VmFjY2luZUNvbmZpZyh3czogV2Vla1N1bW1hcnlbXSkge1xuICAgIGNvbnN0IGRhdGFzZXRzOiBDaGFydERhdGFzZXRbXSA9IFtcbiAgICAgICAgYmFyQ2hhcnQoXCJCaW9OVGVjaC9QZml6ZXJcIiwgd3MubWFwKHQgPT4gdC5jb21pcm5hdHlEb3Nlc0RlbGlyZWQpLCBDaGFydENvbG9ycy5QdXJwbGUpLFxuICAgICAgICBiYXJDaGFydChcIkFzdHJhWmVuZWNhXCIsIHdzLm1hcCh0ID0+IHQuYXN0cmFEb3Nlc0RlbGl2ZXJlZCksIENoYXJ0Q29sb3JzLkdyZWVuKSxcbiAgICAgICAgYmFyQ2hhcnQoXCJNb2Rlcm5hXCIsIHdzLm1hcCh0ID0+IHQubW9kZXJuYURvc2VzRGVsaXZlcmVkKSwgQ2hhcnRDb2xvcnMuQmx1ZSksXG4gICAgICAgIGJhckNoYXJ0KFwiSm9obnNvbiAmIEpvaG5zb25cIiwgd3MubWFwKHQgPT4gdC5qb2huc29uRG9zZXNEZWxpdmVyZWQpLCBDaGFydENvbG9ycy5SZWQpLFxuICAgIF07XG5cbiAgICByZXR1cm4ge1xuICAgICAgICB0aXRsZTogXCJXZWVrbHkgVmFjY2luZSBEZWxpdmVyaWVzXCIsXG4gICAgICAgIGxhYmVsczogd3MubWFwKHcgPT4gbW9tZW50KHcuZGF0ZSkuZm9ybWF0KFwiV1wiKSksXG4gICAgICAgIHlUaXRsZTogXCJOdW1iZXIgb2YgRG9zZXNcIixcbiAgICAgICAgeFRpdGxlOiBcIklTTyBXZWVrXCIsXG4gICAgICAgIGRhdGFzZXRzXG4gICAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFZhY2NSYXRpb0NoYXJ0Q29uZmlnKHRzOiBUaW1lU2VyaWVzKTogQ2hhcnRQcm9wcyB7XG4gICAgdHMgPSB0cy5maWx0ZXIocCA9PiBwLmRhdGUuaXNBZnRlcihtb21lbnQoXCIyMDIxLTAyLTAxXCIpKSlcbiAgICBjb25zdCBkYXRhc2V0czogQ2hhcnREYXRhc2V0W10gPSBbXG4gICAgICAgIGNMaW5lQ2hhcnQoXCJSYXRpbyBvZiBBZG1pbmlzdGVyZWQgRG9zZXMgb24gdGhhdCBEYXlcIixcbiAgICAgICAgICAgIHRzLm1hcCh0ID0+IHQucGVvcGxlRmlyc3REb3NlIC8gdC5wZW9wbGVTZWNvbmREb3NlKSxcbiAgICAgICAgICAgIENoYXJ0Q29sb3JzLlB1cnBsZSksXG5cbiAgICAgICAgICAgIGNMaW5lQ2hhcnQoXCJSYXRpbyBvbiBXZWVrbHkgQXZlcmFnZSAoU21vb3RoZWQgUmF0aW8pXCIsXG4gICAgICAgICAgICB0cy5tYXAodCA9PiB0LmF2ZXJhZ2VGaXJzdERvc2VzIC8gdC5hdmVyYWdlU2Vjb25kRG9zZXMpLFxuICAgICAgICAgICAgQ2hhcnRDb2xvcnMuWWVsbG93KSxcbiAgICBdO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgdGl0bGU6IFwiUmF0aW8gb2YgRmlyc3QgdG8gU2Vjb25kIERvc2UgVmFjY2luYXRpb25zXCIsXG4gICAgICAgIHN1YnRpdGxlOiBcIk51bWJlciBvZiBwZW9wbGUgd2hvIHJlY2VpdmVkIHRoZWlyIGZpcnN0IGRvc2UgZm9yIGV2ZXJ5IHNlY29uZCBkb3NlIGFkbWluaXN0ZXJlZC5cIixcbiAgICAgICAgbGFiZWxzOiB0c0xhYmVscyh0cyksXG4gICAgICAgIHlUaXRsZTogXCJSYXRpb1wiLFxuICAgICAgICBkYXRhc2V0c1xuICAgIH07XG59IiwiXG5leHBvcnQgY29uc3QgY29uZmlnID0ge1xuICAgIGRhdGFQYXRoOiBcImh0dHBzOi8vaW1wZmRhc2hib2FyZC5kZS9zdGF0aWMvZGF0YVwiLFxuICAgIG1ldGFkYXRhUGF0aDogXCJtZXRhZGF0YS5qc29uXCIsXG4gICAgcG9wdWxhdGlvbjogODMxNjY3MTFcbn07XG5cbmV4cG9ydCBlbnVtIERhdGFTb3VyY2Uge1xuICAgIFZhY2NpbmF0aW9uc1RpbWVTZXJpZXMgPSBcImdlcm1hbnlfdmFjY2luYXRpb25zX3RpbWVzZXJpZXNfdjJcIixcbiAgICBEZWxpdmVyaWVzVGltZVNlcmllcyA9IFwiZ2VybWFueV9kZWxpdmVyaWVzX3RpbWVzZXJpZXNfdjJcIixcbn1cblxuZGVjbGFyZSB2YXIgX19CVUlMRElORk9fX186IGFueTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEJ1aWxkSW5mbygpIHtcbiAgICByZXR1cm4gX19CVUlMRElORk9fX187XG59XG4iLCJpbXBvcnQgeyBmZXRjaE1ldGFkYXRhLCBsb2FkRGVsaXZlcnlUaW1lU2VyaWVzLCBsb2FkVmFjY2luYXRpb25UaW1lU2VyaWVzIH0gZnJvbSAnLi9sb2FkZXInO1xuaW1wb3J0IHsgZ2V0Q3VycmVudERhdGEsIGNhbGN1bGF0ZVRhYmxlLCBjb21iaW5lVGltZVNlcmllcywgY2FsY3VsYXRlQXZlcmFnZXMsIGNhbGN1bGF0ZVdlZWtseURhdGEgfSBmcm9tICcuL2NhbGN1bGF0aW9uJztcbmltcG9ydCB7IHJlbmRlciB9IGZyb20gJy4vcmVuZGVyJztcbmltcG9ydCB7IGdldERvc2VzQ2hhcnRDb25maWcsIGdldFZhY2NDaGFydENvbmZpZywgZ2V0V2Vla2x5Q2hhcnRDb25maWcsIGdldEVzdGltYXRpb25DaGFydENvbmZpZywgZ2V0V2Vla2x5Q2hhcnRCeVZhY2NpbmVDb25maWcsIGdldFZhY2NSYXRpb0NoYXJ0Q29uZmlnIH0gZnJvbSAnLi9jaGFydENvbmZpZ3MnO1xuaW1wb3J0IHsgZ2V0QnVpbGRJbmZvIH0gZnJvbSAnLi9jb25zdCc7XG5pbXBvcnQgeyBydW5Bc3luYyB9IGZyb20gJy4vdXRpbCc7XG5cbmFzeW5jIGZ1bmN0aW9uIG1haW4oKSB7XG4gICAgY29uc29sZS5sb2coXCJCdWlsZCBJbmZvOlwiLGdldEJ1aWxkSW5mbygpKTtcbiAgICAvLyBBc3luYyBsb2FkIGRhdGFcbiAgICBjb25zdCBbXG4gICAgICAgIGxhc3RVcGRhdGUsXG4gICAgICAgIHZhY2NpbmF0aW9uc1RpbWVTZXJpZXMsXG4gICAgICAgIGRlbGl2ZXJ5VGltZVNlcmllc1xuICAgIF0gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgIGZldGNoTWV0YWRhdGEoKSxcbiAgICAgICAgbG9hZFZhY2NpbmF0aW9uVGltZVNlcmllcygpLFxuICAgICAgICBsb2FkRGVsaXZlcnlUaW1lU2VyaWVzKClcbiAgICBdKTtcblxuICAgIGNvbnN0IGNvbWJpbmVkVGltZVNlcmllcyA9IGNvbWJpbmVUaW1lU2VyaWVzKHZhY2NpbmF0aW9uc1RpbWVTZXJpZXMsIGRlbGl2ZXJ5VGltZVNlcmllcyk7XG4gICAgY29uc3QgdGltZVNlcmllcyA9IGNhbGN1bGF0ZUF2ZXJhZ2VzKGNvbWJpbmVkVGltZVNlcmllcyk7XG4gICAgY29uc3Qgd2Vla2x5U2VyaWVzID0gY2FsY3VsYXRlV2Vla2x5RGF0YSh0aW1lU2VyaWVzKTtcblxuICAgIGNvbnN0IGQgPSBnZXRDdXJyZW50RGF0YSh0aW1lU2VyaWVzKTtcblxuICAgIHJlbmRlcih7XG4gICAgICAgIGxhc3RVcGRhdGU6IGxhc3RVcGRhdGUsXG4gICAgICAgIHJlbWFpbmluZ1ZhY2NUaW1lOiBjYWxjdWxhdGVUYWJsZShkKSxcbiAgICAgICAgY2hhcnRDb25maWd1cmF0aW9uczogW1xuICAgICAgICAgICAgZ2V0VmFjY0NoYXJ0Q29uZmlnKHRpbWVTZXJpZXMpLFxuICAgICAgICAgICAgZ2V0V2Vla2x5Q2hhcnRDb25maWcod2Vla2x5U2VyaWVzKSxcbiAgICAgICAgICAgIGdldFdlZWtseUNoYXJ0QnlWYWNjaW5lQ29uZmlnKHdlZWtseVNlcmllcyksXG4gICAgICAgICAgICBnZXREb3Nlc0NoYXJ0Q29uZmlnKHRpbWVTZXJpZXMsIGxhc3RVcGRhdGUpLFxuICAgICAgICAgICAgZ2V0RXN0aW1hdGlvbkNoYXJ0Q29uZmlnKHRpbWVTZXJpZXMpLFxuICAgICAgICAgICAgZ2V0VmFjY1JhdGlvQ2hhcnRDb25maWcodGltZVNlcmllcylcbiAgICAgICAgXVxuICAgIH0pO1xufVxuXG5ydW5Bc3luYyhtYWluLCBcIm1haW5cIik7IiwiXG5pbXBvcnQgcGFyc2UgZnJvbSAnY3N2LXBhcnNlJztcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcbmltcG9ydCB7IGNvbmZpZywgRGF0YVNvdXJjZSB9IGZyb20gJy4vY29uc3QnO1xuaW1wb3J0IHsgRGVsaXZlcnlUaW1lU2VyaWVzRGF0YVBvaW50LCBNZXRhZGF0YSwgVmFjY2luYXRpb25UaW1lU2VyaWVzRGF0YVBvaW50IH0gZnJvbSAnLi9tb2RlbCc7XG5pbXBvcnQgeyB0aW1lU2VyaWVzUG9pbnRTb3J0IH0gZnJvbSAnLi91dGlsJztcblxuYXN5bmMgZnVuY3Rpb24gZmV0Y2hDU1ZUZXh0KG5hbWU6IERhdGFTb3VyY2UpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKGAke2NvbmZpZy5kYXRhUGF0aH0vJHtuYW1lfS50c3ZgLCB7fSk7XG4gICAgY29uc3QgYm9keSA9IGF3YWl0IHJlcy50ZXh0KCk7XG4gICAgcmV0dXJuIGJvZHk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGZldGNoQ1NWKG5hbWU6IERhdGFTb3VyY2UpOiBQcm9taXNlPHBhcnNlLlBhcnNlcj4ge1xuICAgIGNvbnN0IGNzdiA9IGF3YWl0IGZldGNoQ1NWVGV4dChuYW1lKTtcbiAgICByZXR1cm4gcGFyc2UoY3N2LCB7XG4gICAgICAgIGRlbGltaXRlcjogXCJcXHRcIixcbiAgICAgICAgY29sdW1uczogdHJ1ZVxuICAgIH0pO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZmV0Y2hNZXRhZGF0YSgpOiBQcm9taXNlPE1ldGFkYXRhPiB7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goYCR7Y29uZmlnLmRhdGFQYXRofS8ke2NvbmZpZy5tZXRhZGF0YVBhdGh9YCwge30pO1xuICAgIGNvbnN0IGpzb24gPSBhd2FpdCByZXMuanNvbigpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHZhY2NpbmF0aW9uc0xhc3RVcGRhdGVkOiBtb21lbnQoanNvbi52YWNjaW5hdGlvbnNMYXN0VXBkYXRlZCkudXRjT2Zmc2V0KDEyMCksXG4gICAgICAgIGRlbGl2ZXJ5TGFzdFVwZGF0ZWQ6IG1vbWVudChqc29uLmRlbGl2ZXJ5TGFzdFVwZGF0ZWQpLnV0Y09mZnNldCgxMjApLFxuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGxvYWRWYWNjaW5hdGlvblRpbWVTZXJpZXMoKTogUHJvbWlzZTxWYWNjaW5hdGlvblRpbWVTZXJpZXNEYXRhUG9pbnRbXT4ge1xuICAgIGNvbnN0IHBhcnNlciA9IGF3YWl0IGZldGNoQ1NWKERhdGFTb3VyY2UuVmFjY2luYXRpb25zVGltZVNlcmllcyk7XG4gICAgY29uc3QgdGltZVNlcmllczogVmFjY2luYXRpb25UaW1lU2VyaWVzRGF0YVBvaW50W10gPSBbXTtcbiAgICBmb3IgYXdhaXQgKGNvbnN0IHJlY29yZCBvZiBwYXJzZXIpIHtcbiAgICAgICAgdGltZVNlcmllcy5wdXNoKHtcbiAgICAgICAgICAgIGRhdGU6IG1vbWVudChyZWNvcmRbXCJkYXRlXCJdKSxcbiAgICAgICAgICAgIHRvdGFsVmFjY2luZURvc2VzOiBwYXJzZUludChyZWNvcmRbXCJkb3Nlbl9rdW11bGF0aXZcIl0pLFxuICAgICAgICAgICAgcGVvcGxlVmFjY2luYXRlZDogcGFyc2VJbnQocmVjb3JkW1wiZG9zZW5fZGlmZmVyZW56X3p1bV92b3J0YWdcIl0pLFxuICAgICAgICAgICAgcGVvcGxlRmlyc3REb3NlOiBwYXJzZUludChyZWNvcmRbXCJkb3Nlbl9lcnN0X2RpZmZlcmVuel96dW1fdm9ydGFnXCJdKSxcbiAgICAgICAgICAgIHBlb3BsZVNlY29uZERvc2U6IHBhcnNlSW50KHJlY29yZFtcImRvc2VuX3p3ZWl0X2RpZmZlcmVuel96dW1fdm9ydGFnXCJdKSxcbiAgICAgICAgICAgIHRvdGFsUGVvcGxlRmlyc3REb3NlOiBwYXJzZUludChyZWNvcmRbXCJwZXJzb25lbl9lcnN0X2t1bXVsYXRpdlwiXSksXG4gICAgICAgICAgICB0b3RhbFBlb3BsZUZ1bGx5VmFjY2luYXRlZDogcGFyc2VJbnQocmVjb3JkW1wicGVyc29uZW5fdm9sbF9rdW11bGF0aXZcIl0pXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB0aW1lU2VyaWVzLnNvcnQodGltZVNlcmllc1BvaW50U29ydCk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsb2FkRGVsaXZlcnlUaW1lU2VyaWVzKCk6IFByb21pc2U8RGVsaXZlcnlUaW1lU2VyaWVzRGF0YVBvaW50W10+IHtcbiAgICBjb25zdCBwYXJzZXIgPSBhd2FpdCBmZXRjaENTVihEYXRhU291cmNlLkRlbGl2ZXJpZXNUaW1lU2VyaWVzKTtcbiAgICBjb25zdCB0aW1lU2VyaWVzOiBEZWxpdmVyeVRpbWVTZXJpZXNEYXRhUG9pbnRbXSA9IFtdO1xuICAgIGZvciBhd2FpdCAoY29uc3QgcmVjb3JkIG9mIHBhcnNlcikge1xuICAgICAgICBjb25zdCBkYXRlID0gbW9tZW50KHJlY29yZFtcImRhdGVcIl0pO1xuICAgICAgICBjb25zdCB2YWNjaW5lTmFtZSA9IHJlY29yZFtcImltcGZzdG9mZlwiXTtcbiAgICAgICAgY29uc3QgZG9zZXNEZWxpdmVyZWQgPSBwYXJzZUludChyZWNvcmRbXCJkb3NlblwiXSk7XG4gICAgICAgIGxldCBkcCA9IHRpbWVTZXJpZXMuZmluZChwID0+IHAuZGF0ZS5pc1NhbWUoZGF0ZSkpO1xuXG4gICAgICAgIGlmKCFkcCkge1xuICAgICAgICAgICAgZHAgPSB7XG4gICAgICAgICAgICAgICAgZGF0ZTogZGF0ZSxcbiAgICAgICAgICAgICAgICBkb3Nlc0RlbGl2ZXJlZDogMCxcbiAgICAgICAgICAgICAgICBhc3RyYURvc2VzRGVsaXZlcmVkOiAwLFxuICAgICAgICAgICAgICAgIGNvbWlybmF0eURvc2VzRGVsaXZlcmVkOiAwLFxuICAgICAgICAgICAgICAgIGpvaG5zb25Eb3Nlc0RlbGl2ZXJlZDogMCxcbiAgICAgICAgICAgICAgICBtb2Rlcm5hRG9zZXNEZWxpdmVyZWQ6IDBcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aW1lU2VyaWVzLnB1c2goZHApO1xuICAgICAgICB9XG4gICAgICAgIGRwLmRvc2VzRGVsaXZlcmVkICs9IGRvc2VzRGVsaXZlcmVkO1xuICAgICAgICBzd2l0Y2godmFjY2luZU5hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJjb21pcm5hdHlcIjpcbiAgICAgICAgICAgICAgICBkcC5jb21pcm5hdHlEb3Nlc0RlbGl2ZXJlZCArPSBkb3Nlc0RlbGl2ZXJlZDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJhc3RyYVwiOlxuICAgICAgICAgICAgICAgIGRwLmFzdHJhRG9zZXNEZWxpdmVyZWQgKz0gZG9zZXNEZWxpdmVyZWQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiam9obnNvblwiOlxuICAgICAgICAgICAgICAgIGRwLmpvaG5zb25Eb3Nlc0RlbGl2ZXJlZCArPSBkb3Nlc0RlbGl2ZXJlZDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJtb2Rlcm5hXCI6XG4gICAgICAgICAgICAgICAgZHAubW9kZXJuYURvc2VzRGVsaXZlcmVkICs9IGRvc2VzRGVsaXZlcmVkO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRpbWVTZXJpZXMuc29ydCh0aW1lU2VyaWVzUG9pbnRTb3J0KTtcbn0iLCJpbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgTmFubyBmcm9tICduYW5vLWpzeCc7XG5pbXBvcnQgeyBDaGFydENvbXBvbmVudCwgQ2hhcnRQcm9wcyB9IGZyb20gJy4vY2hhcnQnO1xuaW1wb3J0IHsgTWV0YWRhdGEsIFJlbWFpbmluZ1ZhY2NpbmF0aW9uVGltZSB9IGZyb20gJy4vbW9kZWwnO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyKGRhdGE6IEFwcFByb3BzKSB7XG5cbiAgICBjb25zdCBBcHAgPSAocHJvcHM6IEFwcFByb3BzKSA9PiAoXG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8cD48Yj5MYXN0IFVwZGF0ZTo8L2I+IHtwcm9wcy5sYXN0VXBkYXRlLnZhY2NpbmF0aW9uc0xhc3RVcGRhdGVkLmZvcm1hdChcImxsbGxcIil9ICh7cHJvcHMubGFzdFVwZGF0ZS52YWNjaW5hdGlvbnNMYXN0VXBkYXRlZC5mcm9tTm93KCl9KTwvcD5cbiAgICAgICAgICAgIDxoMj5SZW1haW5pbmcgVmFjY2luYXRpb24gVGltZSBFc3RpbWF0aW9uczwvaDI+XG4gICAgICAgICAgICA8dGFibGU+XG4gICAgICAgICAgICAgICAgPHRoZWFkPlxuICAgICAgICAgICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8dGg+RXN0aW1hdGlvbjwvdGg+XG4gICAgICAgICAgICAgICAgICAgICAgICA8dGg+UmVtYWluaW5nIHRpbWU8L3RoPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkRhdGU8L3RoPlxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgICAgIDwvdGhlYWQ+XG4gICAgICAgICAgICAgICAgPHRib2R5PlxuICAgICAgICAgICAgICAgICAgICB7cHJvcHMucmVtYWluaW5nVmFjY1RpbWUubWFwKCh0KSA9PiAoXG4gICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9e3QubWVhbmluZ2Z1bD9cIlwiOlwiZ3JleVwifT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+e3QudGl0bGV9e3QubWVhbmluZ2Z1bD9cIlwiOlwiKlwifTxici8+PHNtYWxsPnt0LnN1YnRpdGxlfTwvc21hbGw+PC90ZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+e01hdGgucm91bmQodC5kYXlzKX0gZGF5czxici8+PHNtYWxsPm9yIHtNYXRoLmZsb29yKHQuZGF5cyAvIDMwKX0gbW9udGhzIGFuZCB7TWF0aC5yb3VuZCh0LmRheXMgLSAzMCpNYXRoLmZsb29yKHQuZGF5cyAvIDMwKSl9IGRheXM8L3NtYWxsPjwvdGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnttb21lbnQoKS5hZGQodC5kYXlzLCAnZGF5cycpLmZvcm1hdChcImRkZCwgbGxcIil9PC90ZD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgICAgIDwvdGJvZHk+XG4gICAgICAgICAgICA8L3RhYmxlPlxuICAgICAgICAgICAgPHAgY2xhc3M9XCJyZW1hcmtcIj48aT5SZW1hcms6PC9pPiBUaGUgY2FsY3VsYXRpb24gb2YgdGhlIGxpc3RlZCBkYXRlcyBhcmUgYmFzZWQgb24gdGhlIGFzc3VtcHRpb24gdGhhdCB0aGUgNy1kYXkgYXZlcmFnZXMgcmVtYWluIHN0ZWFkeS4gSXQgZG9lcyBub3QgdGFrZSBvdGhlciBmYWN0b3JzIGludG8gYWNjb3VudCwgc3VjaCBhcyBhZ2UgcmVzdHJpY3Rpb25zIG9mIHZhY2NpbmVzLiB7KHByb3BzLnJlbWFpbmluZ1ZhY2NUaW1lLmV2ZXJ5KHQgPT4gIXQubWVhbmluZ2Z1bCkpP1wiXCI6PHNtYWxsPjxici8+KiBUaGlzIGVzdGltYXRpb24gaXMgbGlrZWx5IG5vdCBtZWFuaW5nZnVsIGF0IHRoZSBtb21lbnQgZHVlIHRvIHRoZSBoaWdoIG51bWJlciBvZiBzZWNvbmQgZG9zZXMgaW4gY29tcGFyaXNvbiB0aGUgbnVtYmVyIG9mIGZpcnN0IGRvc2VzLjwvc21hbGw+fTwvcD5cblxuICAgICAgICAgICAge3Byb3BzLmNoYXJ0Q29uZmlndXJhdGlvbnMubWFwKChjKSA9PiAoXG4gICAgICAgICAgICAgICAgPENoYXJ0Q29tcG9uZW50IHsuLi5jfT48L0NoYXJ0Q29tcG9uZW50PlxuICAgICAgICAgICAgKSl9XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG5cbiAgICBOYW5vLnJlbmRlcihcbiAgICAgICAgQXBwKGRhdGEpLFxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvbnRlbnRcIilcbiAgICApO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFwcFByb3BzIHtcbiAgICBsYXN0VXBkYXRlOiBNZXRhZGF0YSxcbiAgICByZW1haW5pbmdWYWNjVGltZTogUmVtYWluaW5nVmFjY2luYXRpb25UaW1lW10sXG4gICAgY2hhcnRDb25maWd1cmF0aW9uczogQ2hhcnRQcm9wc1tdLFxufSIsImltcG9ydCBtb21lbnQgZnJvbSBcIm1vbWVudFwiO1xuaW1wb3J0IHsgZ2V0QnVpbGRJbmZvIH0gZnJvbSBcIi4vY29uc3RcIjtcbmltcG9ydCB7IEJhc2VUaW1lU2VyaWVzRGF0YVBvaW50IH0gZnJvbSBcIi4vbW9kZWxcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGF2ZXJhZ2UoYXJyOiBudW1iZXJbXSkge1xuICAgIHJldHVybiBhcnIucmVkdWNlKChwLCBjKSA9PiBwICsgYywgMCkgLyBhcnIubGVuZ3RoO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGltZVNlcmllc1BvaW50U29ydChhOiBCYXNlVGltZVNlcmllc0RhdGFQb2ludCwgYjogQmFzZVRpbWVTZXJpZXNEYXRhUG9pbnQpIHtcbiAgICByZXR1cm4gYS5kYXRlLmRpZmYoYi5kYXRlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvZyhtc2c6IHN0cmluZywgZXJyOiBFcnJvciB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZCkge1xuICAgIGNvbnNvbGUubG9nKG1zZywgZXJyKTtcbiAgICBjb25zdCBiID0gZ2V0QnVpbGRJbmZvKCk7XG4gICAgaWYoYi5sb2dUYXJnZXQpIHtcbiAgICAgICAgZmV0Y2goYGh0dHBzOi8vJHtiLmxvZ1RhcmdldH0vYXBpL2xvZ2h0dHB0cmlnZ2VyYCwge21ldGhvZDogJ1BPU1QnLCBib2R5OiBKU09OLnN0cmluZ2lmeSh7YnVpbGQ6IGIsIG1zZywgZXJyb3I6IGVycj8uc3RhY2sgfSksIG1vZGU6ICdjb3JzJyB9KVxuICAgIH1cbn1cblxuZnVuY3Rpb24gZXJyb3JIYW5kbGVyKG5hbWU6IHN0cmluZywgcmVhc29uOiBhbnkpIHtcbiAgICBsb2coYCR7bmFtZX0gZmFpbGVkLmAsIHJlYXNvbik7XG4gICAgY29uc3QgY29udGVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY29udGVudFwiKTtcbiAgICBpZiAoY29udGVudCkge1xuICAgICAgICBjb25zdCBlcnJvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICAgICAgICBlcnJvci5jbGFzc05hbWUgPSBcImVycm9yXCI7XG4gICAgICAgIGVycm9yLmlubmVyVGV4dCA9IFwiU29ycnksIGFuIGVycm9yIG9jY3VycmVkIHdoaWxlIGxvYWRpbmcgZGF0YS4gUGxlYXNlIGNvbWUgYmFjayBsYXRlci5cIjtcbiAgICAgICAgY29udGVudC5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgY29udGVudC5hcHBlbmRDaGlsZChlcnJvcik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzdWNjZXNzKG5hbWU6IHN0cmluZywgc3RhcnRUaW1lOiBtb21lbnQuTW9tZW50KSB7XG4gICAgY29uc3QgZGlmZiA9IG1vbWVudCgpLmRpZmYoc3RhcnRUaW1lKTtcbiAgICBsb2coYCR7bmFtZX0gZmluaXNoZWQgYWZ0ZXIgJHtkaWZmfSBtcy5gKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJ1bkFzeW5jKGZ1bmM6ICgpID0+IFByb21pc2U8dm9pZD4sIG5hbWU6IHN0cmluZyl7XG4gICAgY29uc3Qgc3RhcnRUaW1lID0gbW9tZW50KCk7XG4gICAgZnVuYygpXG4gICAgICAgIC50aGVuKCgpID0+IHN1Y2Nlc3MobmFtZSwgc3RhcnRUaW1lKSlcbiAgICAgICAgLmNhdGNoKChyZWFzb24pID0+IGVycm9ySGFuZGxlcihuYW1lLCByZWFzb24pKTtcbn0iXSwic291cmNlUm9vdCI6IiJ9