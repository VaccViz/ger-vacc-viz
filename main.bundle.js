(self.webpackChunkger_vac_viz=self.webpackChunkger_vac_viz||[]).push([[179],{6700:(e,t,a)=>{var s={"./af":2786,"./af.js":2786,"./ar":867,"./ar-dz":4130,"./ar-dz.js":4130,"./ar-kw":6135,"./ar-kw.js":6135,"./ar-ly":6440,"./ar-ly.js":6440,"./ar-ma":7702,"./ar-ma.js":7702,"./ar-sa":6040,"./ar-sa.js":6040,"./ar-tn":7100,"./ar-tn.js":7100,"./ar.js":867,"./az":1083,"./az.js":1083,"./be":9808,"./be.js":9808,"./bg":8338,"./bg.js":8338,"./bm":7438,"./bm.js":7438,"./bn":8905,"./bn-bd":6225,"./bn-bd.js":6225,"./bn.js":8905,"./bo":1560,"./bo.js":1560,"./br":1278,"./br.js":1278,"./bs":622,"./bs.js":622,"./ca":2468,"./ca.js":2468,"./cs":5822,"./cs.js":5822,"./cv":877,"./cv.js":877,"./cy":7373,"./cy.js":7373,"./da":4780,"./da.js":4780,"./de":9740,"./de-at":217,"./de-at.js":217,"./de-ch":894,"./de-ch.js":894,"./de.js":9740,"./dv":5300,"./dv.js":5300,"./el":837,"./el.js":837,"./en-au":8348,"./en-au.js":8348,"./en-ca":7925,"./en-ca.js":7925,"./en-gb":2243,"./en-gb.js":2243,"./en-ie":6436,"./en-ie.js":6436,"./en-il":7207,"./en-il.js":7207,"./en-in":4175,"./en-in.js":4175,"./en-nz":6319,"./en-nz.js":6319,"./en-sg":1662,"./en-sg.js":1662,"./eo":2915,"./eo.js":2915,"./es":5655,"./es-do":5251,"./es-do.js":5251,"./es-mx":6112,"./es-mx.js":6112,"./es-us":1146,"./es-us.js":1146,"./es.js":5655,"./et":5603,"./et.js":5603,"./eu":7763,"./eu.js":7763,"./fa":6959,"./fa.js":6959,"./fi":1897,"./fi.js":1897,"./fil":2549,"./fil.js":2549,"./fo":4694,"./fo.js":4694,"./fr":4470,"./fr-ca":3049,"./fr-ca.js":3049,"./fr-ch":2330,"./fr-ch.js":2330,"./fr.js":4470,"./fy":5044,"./fy.js":5044,"./ga":9295,"./ga.js":9295,"./gd":2101,"./gd.js":2101,"./gl":8794,"./gl.js":8794,"./gom-deva":7884,"./gom-deva.js":7884,"./gom-latn":3168,"./gom-latn.js":3168,"./gu":5349,"./gu.js":5349,"./he":4206,"./he.js":4206,"./hi":94,"./hi.js":94,"./hr":316,"./hr.js":316,"./hu":2138,"./hu.js":2138,"./hy-am":1423,"./hy-am.js":1423,"./id":9218,"./id.js":9218,"./is":135,"./is.js":135,"./it":626,"./it-ch":150,"./it-ch.js":150,"./it.js":626,"./ja":9183,"./ja.js":9183,"./jv":4286,"./jv.js":4286,"./ka":2105,"./ka.js":2105,"./kk":7772,"./kk.js":7772,"./km":8758,"./km.js":8758,"./kn":9282,"./kn.js":9282,"./ko":3730,"./ko.js":3730,"./ku":1408,"./ku.js":1408,"./ky":3291,"./ky.js":3291,"./lb":6841,"./lb.js":6841,"./lo":5466,"./lo.js":5466,"./lt":7010,"./lt.js":7010,"./lv":7595,"./lv.js":7595,"./me":9861,"./me.js":9861,"./mi":5493,"./mi.js":5493,"./mk":5966,"./mk.js":5966,"./ml":7341,"./ml.js":7341,"./mn":5115,"./mn.js":5115,"./mr":370,"./mr.js":370,"./ms":9847,"./ms-my":1237,"./ms-my.js":1237,"./ms.js":9847,"./mt":2126,"./mt.js":2126,"./my":6165,"./my.js":6165,"./nb":4924,"./nb.js":4924,"./ne":6744,"./ne.js":6744,"./nl":3901,"./nl-be":9814,"./nl-be.js":9814,"./nl.js":3901,"./nn":3877,"./nn.js":3877,"./oc-lnc":2135,"./oc-lnc.js":2135,"./pa-in":5858,"./pa-in.js":5858,"./pl":4495,"./pl.js":4495,"./pt":9520,"./pt-br":7971,"./pt-br.js":7971,"./pt.js":9520,"./ro":6459,"./ro.js":6459,"./ru":1793,"./ru.js":1793,"./sd":950,"./sd.js":950,"./se":490,"./se.js":490,"./si":124,"./si.js":124,"./sk":4249,"./sk.js":4249,"./sl":4985,"./sl.js":4985,"./sq":1104,"./sq.js":1104,"./sr":9131,"./sr-cyrl":9915,"./sr-cyrl.js":9915,"./sr.js":9131,"./ss":5893,"./ss.js":5893,"./sv":8760,"./sv.js":8760,"./sw":1172,"./sw.js":1172,"./ta":7333,"./ta.js":7333,"./te":3110,"./te.js":3110,"./tet":2095,"./tet.js":2095,"./tg":7321,"./tg.js":7321,"./th":9041,"./th.js":9041,"./tk":9005,"./tk.js":9005,"./tl-ph":5768,"./tl-ph.js":5768,"./tlh":9444,"./tlh.js":9444,"./tr":2397,"./tr.js":2397,"./tzl":8254,"./tzl.js":8254,"./tzm":1106,"./tzm-latn":699,"./tzm-latn.js":699,"./tzm.js":1106,"./ug-cn":9288,"./ug-cn.js":9288,"./uk":7691,"./uk.js":7691,"./ur":3795,"./ur.js":3795,"./uz":6791,"./uz-latn":588,"./uz-latn.js":588,"./uz.js":6791,"./vi":5666,"./vi.js":5666,"./x-pseudo":4378,"./x-pseudo.js":4378,"./yo":5805,"./yo.js":5805,"./zh-cn":3839,"./zh-cn.js":3839,"./zh-hk":5726,"./zh-hk.js":5726,"./zh-mo":9807,"./zh-mo.js":9807,"./zh-tw":4152,"./zh-tw.js":4152};function o(e){var t=n(e);return a(t)}function n(e){if(!a.o(s,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return s[e]}o.keys=function(){return Object.keys(s)},o.resolve=n,e.exports=o,o.id=6700},204:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.calculateTable=t.getCurrentData=t.calculateWeeklyData=t.calculateAverages=t.combineTimeSeries=void 0;const s=a(9882),o=a(3970);function n(e,t){var a;let s=null!==(a=null==e?void 0:e.date)&&void 0!==a?a:null==t?void 0:t.date;return e&&t&&(s=e.date.valueOf()<t.date.valueOf()?e.date:t.date),s}function i(e,t,a){const o=t>6?t-6:0,n=e.map(a).slice(o,t+1);return s.average(n)}function r(e){return e.slice(-1)[0]}t.combineTimeSeries=function(e,t){const a=[];let s,o;for(;;){s||(s=e.shift()),o||(o=t.shift());const i=n(o,s);if(void 0===i)break;const r={date:i,peopleFirstDose:0,peopleSecondDose:0,peopleVaccinated:0,totalVaccineDoses:0,totalPeopleFirstDose:0,totalPeopleFullyVaccinated:0,modernaDosesDelivered:0,astraDosesDelivered:0,comirnatyDosesDelivered:0,johnsonDosesDelivered:0,dosesDelivered:0};(null==s?void 0:s.date.valueOf())===i.valueOf()&&(r.peopleFirstDose=s.peopleFirstDose,r.peopleSecondDose=s.peopleSecondDose,r.totalVaccineDoses=s.totalVaccineDoses,r.peopleVaccinated=s.peopleVaccinated,r.totalPeopleFirstDose=s.totalPeopleFirstDose,r.totalPeopleFullyVaccinated=s.totalPeopleFullyVaccinated,s=null),(null==o?void 0:o.date.valueOf())===i.valueOf()&&(r.dosesDelivered=o.dosesDelivered,r.astraDosesDelivered=o.astraDosesDelivered,r.comirnatyDosesDelivered=o.comirnatyDosesDelivered,r.johnsonDosesDelivered=o.johnsonDosesDelivered,r.modernaDosesDelivered=o.modernaDosesDelivered,o=null),a.push(r)}return a},t.calculateAverages=function(e){const t=[];let a=0;for(const[s,o]of e.entries())a+=o.dosesDelivered,t.push(Object.assign(Object.assign({},o),{totalDosesDelivered:a,averageDoses:i(e,s,(e=>e.peopleVaccinated)),averageFirstDoses:i(e,s,(e=>e.peopleFirstDose)),averageSecondDoses:i(e,s,(e=>e.peopleSecondDose)),dosesAvailable:a-o.totalVaccineDoses}));return t},t.calculateWeeklyData=function(e){let t=[],a=null;for(const s of e)a&&s.date.isSame(a.date,"W")||(a={date:s.date,peopleFirstDose:0,peopleSecondDose:0,peopleVaccinated:0,dosesDelivered:0,astraDosesDelivered:0,comirnatyDosesDelired:0,johnsonDosesDelivered:0,modernaDosesDelivered:0},t.push(a)),a.peopleFirstDose+=s.peopleFirstDose,a.peopleSecondDose+=s.peopleSecondDose,a.dosesDelivered+=s.dosesDelivered,a.peopleVaccinated+=s.peopleVaccinated,a.astraDosesDelivered+=s.astraDosesDelivered,a.comirnatyDosesDelired+=s.comirnatyDosesDelivered,a.johnsonDosesDelivered+=s.johnsonDosesDelivered,a.modernaDosesDelivered+=s.modernaDosesDelivered;return 0==r(e).date.day()?t:t.slice(0,t.length-1)},t.getCurrentData=r,t.calculateTable=function(e){const t=o.config.population,a=!(.9*e.averageSecondDoses>e.averageFirstDoses);return[{title:"70% first dose administered",subtitle:"based on first dose 7-day average and remaining first doses",days:(.7*t-e.totalPeopleFirstDose)/e.averageFirstDoses,meaningful:!0},{title:"100% first dose administered",subtitle:"based on the first dose 7-day average and remaining first doses",days:(t-e.totalPeopleFirstDose)/e.averageFirstDoses,meaningful:a},{title:"70% fully vaccinated",subtitle:"based on the second dose 7-day average and remaining second doses",days:(.7*t-e.totalPeopleFullyVaccinated)/e.averageSecondDoses,meaningful:a},{title:"Fully vaccinated",subtitle:"based on the 7-day average of total doses and remaining overall doses",days:(2*t-e.totalVaccineDoses)/e.averageDoses,meaningful:!0},{title:"Fully vaccinated",subtitle:"based on the second dose 7-day average and remaining second doses",days:(t-e.totalPeopleFullyVaccinated)/e.averageSecondDoses,meaningful:a}]}},398:function(e,t,a){"use strict";var s=this&&this.__createBinding||(Object.create?function(e,t,a,s){void 0===s&&(s=a),Object.defineProperty(e,s,{enumerable:!0,get:function(){return t[a]}})}:function(e,t,a,s){void 0===s&&(s=a),e[s]=t[a]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var a in e)"default"!==a&&Object.prototype.hasOwnProperty.call(e,a)&&s(t,e,a);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.ChartComponent=void 0;const i=a(2181),r=n(a(1978));i.Chart.register(i.ArcElement,i.LineElement,i.BarElement,i.PointElement,i.BarController,i.LineController,i.LinearScale,i.TimeScale,i.TimeSeriesScale,i.CategoryScale,i.Filler,i.Legend,i.Title,i.Tooltip);class l extends r.Component{buildChartConfig(e){return{type:"bar",data:{labels:e.labels,datasets:e.datasets},options:{responsive:!0,aspectRatio:this.getAspectRatio(),scales:{x:{display:!0,title:{display:!0,text:e.xTitle}},y:{display:!0,title:{display:!0,text:e.yTitle}}}}}}getAspectRatio(){return window.innerWidth<800&&window.innerWidth<window.innerHeight?1:2}updateAspectRatio(){this.chart&&(this.chart.options.aspectRatio=this.getAspectRatio(),this.chart.update())}drawChart(){var e=this.getCanvas().getContext("2d");if(!e)throw new Error("Couldn't get canvas context.");const t=this.buildChartConfig(this.props);this.chart=new i.Chart(e,t),window.addEventListener("resize",(()=>this.updateAspectRatio()))}getCanvas(){return this.elements[0].querySelector("canvas")}didMount(){this.drawChart()}render(){return r.default.h("div",null,r.default.h("h2",null,this.props.title),this.props.subtitle?r.default.h("p",{class:"subtitle"},this.props.subtitle):"",r.default.h("canvas",{width:"200",height:"100"}),this.props.remark?r.default.h("p",{class:"remark"},r.default.h("i",null,"Remark:")," ",this.props.remark):"")}}t.ChartComponent=l},1711:function(e,t,a){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.getVaccRatioChartConfig=t.getWeeklyChartByVaccineConfig=t.getEstimationChartConfig=t.getWeeklyChartConfig=t.getDosesChartConfig=t.getVaccChartConfig=void 0;const o=s(a(381)),n=a(3970);var i;function r(e){return{borderColor:`rgba(${e}, 1)`,backgroundColor:`rgba(${e}, 0.4)`}}!function(e){e.Blue="25, 130, 196",e.DarkRed="143, 0, 5",e.Red="255, 89, 94",e.Yellow="255, 202, 58",e.Green="138, 201, 38",e.Purple="106, 76, 147"}(i||(i={}));const l=e=>e.map((e=>o.default(e.date).format("ddd, MMM DD")));function d(e,t,a){return Object.assign(Object.assign({label:e,data:t},r(a)),{fill:!1,tension:.4,type:"line"})}function c(e,t,a){return Object.assign(Object.assign({label:e,data:t},r(a)),{type:"line"})}function u(e,t,a){return Object.assign({label:e,data:t},r(a))}t.getVaccChartConfig=function(e){const t=[d("7-day Average Vaccinations",e.map((e=>e.averageDoses)),i.Purple),d("7-day Average First Dose",e.map((e=>e.averageFirstDoses)),i.Blue),d("7-day Average Second Dose",e.map((e=>e.averageSecondDoses)),i.Green),u("Daily Vaccinations",e.map((e=>e.peopleVaccinated)),i.Yellow)];return{title:"Vaccinations",labels:l(e),yTitle:"Number of Vaccinations",datasets:t}},t.getDosesChartConfig=function(e,t){const a=[d("Available Doses",e.map((e=>e.dosesAvailable)),i.DarkRed),u("Daily Deliveries",e.map((e=>e.dosesDelivered)),i.Red)];return{title:"Deliveries of Doses",remark:`Deliveries will be updated on Mondays only. The last update was ${t.deliveryLastUpdated.fromNow()}.`,labels:l(e),yTitle:"Number of Doses",datasets:a}},t.getWeeklyChartConfig=function(e){const t=[c("People Vaccinated",e.map((e=>e.peopleVaccinated)),i.Purple),c("First Dose",e.map((e=>e.peopleFirstDose)),i.Green),c("Second Dose",e.map((e=>e.peopleSecondDose)),i.Blue),u("Doses Delivered",e.map((e=>e.dosesDelivered)),i.Red)];return{title:"Weekly Vaccinations and Deliveries",labels:e.map((e=>o.default(e.date).format("W"))),yTitle:"Number of Doses",xTitle:"ISO Week",datasets:t}},t.getEstimationChartConfig=function(e){const t=n.config.population,a=[d("70% first dose administered",(e=e.filter((e=>e.date.isAfter(o.default("2021-05-14"))))).map((e=>(.7*t-e.totalPeopleFirstDose)/e.averageFirstDoses)),i.Purple),d("70% fully vaccinated",e.map((e=>(.7*t-e.totalPeopleFullyVaccinated)/e.averageSecondDoses)),i.Blue),d("Fully vaccinated",e.map((e=>(2*t-e.totalVaccineDoses)/e.averageDoses)),i.Green)];return{title:"Remaining Vaccination Time Estimations",labels:l(e),yTitle:"Days",datasets:a}},t.getWeeklyChartByVaccineConfig=function(e){const t=[u("BioNTech/Pfizer",e.map((e=>e.comirnatyDosesDelired)),i.Purple),u("AstraZeneca",e.map((e=>e.astraDosesDelivered)),i.Green),u("Moderna",e.map((e=>e.modernaDosesDelivered)),i.Blue),u("Johnson & Johnson",e.map((e=>e.johnsonDosesDelivered)),i.Red)];return{title:"Weekly Vaccine Deliveries",labels:e.map((e=>o.default(e.date).format("W"))),yTitle:"Number of Doses",xTitle:"ISO Week",datasets:t}},t.getVaccRatioChartConfig=function(e){const t=[d("Ratio of Administered Doses on that Day",(e=e.filter((e=>e.date.isAfter(o.default("2021-02-01"))))).map((e=>e.peopleFirstDose/e.peopleSecondDose)),i.Purple),d("Ratio on Weekly Average (Smoothed Ratio)",e.map((e=>e.averageFirstDoses/e.averageSecondDoses)),i.Yellow)];return{title:"Ratio of First to Second Dose Vaccinations",subtitle:"Number of people who received their first dose for every second dose administered.",labels:l(e),yTitle:"Ratio",datasets:t}}},3970:(e,t)=>{"use strict";var a;Object.defineProperty(t,"__esModule",{value:!0}),t.getBuildInfo=t.DataSource=t.config=void 0,t.config={dataPath:"https://impfdashboard.de/static/data",metadataPath:"metadata.json",population:83166711},(a=t.DataSource||(t.DataSource={})).VaccinationsTimeSeries="germany_vaccinations_timeseries_v2",a.DeliveriesTimeSeries="germany_deliveries_timeseries_v2",t.getBuildInfo=function(){return{buildUser:"runner",logTarget:"vacc-log.azurewebsites.net",version:"b16bb3f",branch:"master",lastCommit:"2021-08-25T14:33:28+02:00"}}},3607:function(e,t,a){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=a(447),n=a(204),i=a(3058),r=a(1711),l=s(a(381)),d=a(3970),c=a(9882),u=l.default();(async function(){console.log("Build Info:",d.getBuildInfo());const[e,t,a]=await Promise.all([o.fetchMetadata(),o.loadVaccinationTimeSeries(),o.loadDeliveryTimeSeries()]),s=n.combineTimeSeries(t,a),l=n.calculateAverages(s),c=n.calculateWeeklyData(l),u=n.getCurrentData(l);i.render({lastUpdate:e,remainingVaccTime:n.calculateTable(u),chartConfigurations:[r.getVaccChartConfig(l),r.getWeeklyChartConfig(c),r.getWeeklyChartByVaccineConfig(c),r.getDosesChartConfig(l,e),r.getEstimationChartConfig(l),r.getVaccRatioChartConfig(l)]})})().then((()=>function(){const e=l.default().diff(u);c.log(`main finished after ${e} ms.`)}())).catch((e=>function(e){c.log("main failed.",e);const t=document.getElementById("content");if(t){const e=document.createElement("p");e.className="error",e.innerText="Sorry, an error occurred while loading data. Please come back later.",t.innerHTML="",t.appendChild(e)}}(e)))},447:function(e,t,a){"use strict";var s=this&&this.__asyncValues||function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,a=e[Symbol.asyncIterator];return a?a.call(e):(e="function"==typeof __values?__values(e):e[Symbol.iterator](),t={},s("next"),s("throw"),s("return"),t[Symbol.asyncIterator]=function(){return this},t);function s(a){t[a]=e[a]&&function(t){return new Promise((function(s,o){!function(e,t,a,s){Promise.resolve(s).then((function(t){e({value:t,done:a})}),t)}(s,o,(t=e[a](t)).done,t.value)}))}}},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.loadDeliveryTimeSeries=t.loadVaccinationTimeSeries=t.fetchMetadata=void 0;const n=o(a(3572)),i=o(a(381)),r=a(3970),l=a(9882);async function d(e){const t=await async function(e){const t=await fetch(`${r.config.dataPath}/${e}.tsv`,{});return await t.text()}(e);return n.default(t,{delimiter:"\t",columns:!0})}t.fetchMetadata=async function(){const e=await fetch(`${r.config.dataPath}/${r.config.metadataPath}`,{}),t=await e.json();return{vaccinationsLastUpdated:i.default(t.vaccinationsLastUpdated).utcOffset(120),deliveryLastUpdated:i.default(t.deliveryLastUpdated).utcOffset(120)}},t.loadVaccinationTimeSeries=async function(){var e,t;const a=await d(r.DataSource.VaccinationsTimeSeries),o=[];try{for(var n,c=s(a);!(n=await c.next()).done;){const e=n.value;o.push({date:i.default(e.date),totalVaccineDoses:parseInt(e.dosen_kumulativ),peopleVaccinated:parseInt(e.dosen_differenz_zum_vortag),peopleFirstDose:parseInt(e.dosen_erst_differenz_zum_vortag),peopleSecondDose:parseInt(e.dosen_zweit_differenz_zum_vortag),totalPeopleFirstDose:parseInt(e.personen_erst_kumulativ),totalPeopleFullyVaccinated:parseInt(e.personen_voll_kumulativ)})}}catch(t){e={error:t}}finally{try{n&&!n.done&&(t=c.return)&&await t.call(c)}finally{if(e)throw e.error}}return o.sort(l.timeSeriesPointSort)},t.loadDeliveryTimeSeries=async function(){var e,t;const a=await d(r.DataSource.DeliveriesTimeSeries),o=[];try{for(var n,c=s(a);!(n=await c.next()).done;){const e=n.value,t=i.default(e.date),a=e.impfstoff,s=parseInt(e.dosen);let r=o.find((e=>e.date.isSame(t)));switch(r||(r={date:t,dosesDelivered:0,astraDosesDelivered:0,comirnatyDosesDelivered:0,johnsonDosesDelivered:0,modernaDosesDelivered:0},o.push(r)),r.dosesDelivered+=s,a){case"comirnaty":r.comirnatyDosesDelivered+=s;break;case"astra":r.astraDosesDelivered+=s;break;case"johnson":r.johnsonDosesDelivered+=s;break;case"moderna":r.modernaDosesDelivered+=s}}}catch(t){e={error:t}}finally{try{n&&!n.done&&(t=c.return)&&await t.call(c)}finally{if(e)throw e.error}}return o.sort(l.timeSeriesPointSort)}},3058:function(e,t,a){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.render=void 0;const o=s(a(381)),n=s(a(1978)),i=a(398);t.render=function(e){var t;n.default.render((t=e,n.default.h("div",null,n.default.h("p",null,n.default.h("b",null,"Last Update:")," ",t.lastUpdate.vaccinationsLastUpdated.format("llll")," (",t.lastUpdate.vaccinationsLastUpdated.fromNow(),")"),n.default.h("h2",null,"Remaining Vaccination Time Estimations"),n.default.h("table",null,n.default.h("thead",null,n.default.h("tr",null,n.default.h("th",null,"Estimation"),n.default.h("th",null,"Remaining time"),n.default.h("th",null,"Date"))),n.default.h("tbody",null,t.remainingVaccTime.map((e=>n.default.h("tr",{class:e.meaningful?"":"grey"},n.default.h("td",null,e.title,e.meaningful?"":"*",n.default.h("br",null),n.default.h("small",null,e.subtitle)),n.default.h("td",null,Math.round(e.days)," days",n.default.h("br",null),n.default.h("small",null,"or ",Math.floor(e.days/30)," months and ",Math.round(e.days-30*Math.floor(e.days/30))," days")),n.default.h("td",null,o.default().add(e.days,"days").format("ddd, ll"))))))),n.default.h("p",{class:"remark"},n.default.h("i",null,"Remark:")," The calculation of the listed dates are based on the assumption that the 7-day averages remain steady. It does not take other factors into account, such as age restrictions of vaccines. ",t.remainingVaccTime.every((e=>!e.meaningful))?"":n.default.h("small",null,n.default.h("br",null),"* This estimation is likely not meaningful at the moment due to the high number of second doses in comparison the number of first doses.")),t.chartConfigurations.map((e=>n.default.h(i.ChartComponent,Object.assign({},e)))))),document.getElementById("content"))}},9882:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.log=t.timeSeriesPointSort=t.average=void 0;const s=a(3970);t.average=function(e){return e.reduce(((e,t)=>e+t),0)/e.length},t.timeSeriesPointSort=function(e,t){return e.date.diff(t.date)},t.log=function(e,t){console.log(e,t);const a=s.getBuildInfo();a.logTarget&&fetch(`https://${a.logTarget}/api/loghttptrigger`,{method:"POST",body:JSON.stringify({build:a,msg:e,error:null==t?void 0:t.stack}),mode:"cors"})}}},e=>{"use strict";e.O(0,[216],(()=>(3607,e(e.s=3607)))),e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZXItdmFjLXZpei8vaG9tZS9ydW5uZXIvd29yay9nZXItdmFjYy12aXovZ2VyLXZhY2Mtdml6L25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlfHN5bmN8L15cXC5cXC8uKiQvIiwid2VicGFjazovL2dlci12YWMtdml6Ly4vc3JjL2NhbGN1bGF0aW9uLnRzIiwid2VicGFjazovL2dlci12YWMtdml6Ly4vc3JjL2NoYXJ0LnRzeCIsIndlYnBhY2s6Ly9nZXItdmFjLXZpei8uL3NyYy9jaGFydENvbmZpZ3MudHMiLCJ3ZWJwYWNrOi8vZ2VyLXZhYy12aXovLi9zcmMvY29uc3QudHMiLCJ3ZWJwYWNrOi8vZ2VyLXZhYy12aXovLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vZ2VyLXZhYy12aXovLi9zcmMvbG9hZGVyLnRzIiwid2VicGFjazovL2dlci12YWMtdml6Ly4vc3JjL3JlbmRlci50c3giLCJ3ZWJwYWNrOi8vZ2VyLXZhYy12aXovLi9zcmMvdXRpbC50cyJdLCJuYW1lcyI6WyJtYXAiLCJ3ZWJwYWNrQ29udGV4dCIsInJlcSIsImlkIiwid2VicGFja0NvbnRleHRSZXNvbHZlIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm8iLCJlIiwiRXJyb3IiLCJjb2RlIiwia2V5cyIsIk9iamVjdCIsInJlc29sdmUiLCJtb2R1bGUiLCJleHBvcnRzIiwibWluRGF0ZSIsInBvaW50MSIsInBvaW50MiIsInJlc3VsdCIsImRhdGUiLCJ2YWx1ZU9mIiwiY2FsY0F2ZXJhZ2VGaWVsZCIsImlucHV0IiwiaSIsInNlbGVjdG9yIiwiaTAiLCJsYXN0N0RheXMiLCJzbGljZSIsImF2ZXJhZ2UiLCJnZXRDdXJyZW50RGF0YSIsInRzIiwidmFjY1RTIiwiZGVsaXZlcnlUUyIsImN1cnJlbnRWYWNjIiwiY3VycmVudERlbGl2ZXJ5Iiwic2hpZnQiLCJ1bmRlZmluZWQiLCJkYXRhIiwicGVvcGxlRmlyc3REb3NlIiwicGVvcGxlU2Vjb25kRG9zZSIsInBlb3BsZVZhY2NpbmF0ZWQiLCJ0b3RhbFZhY2NpbmVEb3NlcyIsInRvdGFsUGVvcGxlRmlyc3REb3NlIiwidG90YWxQZW9wbGVGdWxseVZhY2NpbmF0ZWQiLCJtb2Rlcm5hRG9zZXNEZWxpdmVyZWQiLCJhc3RyYURvc2VzRGVsaXZlcmVkIiwiY29taXJuYXR5RG9zZXNEZWxpdmVyZWQiLCJqb2huc29uRG9zZXNEZWxpdmVyZWQiLCJkb3Nlc0RlbGl2ZXJlZCIsInB1c2giLCJ0b3RhbERvc2VzRGVsaXZlcmVkIiwia2V5IiwidmFsdWUiLCJlbnRyaWVzIiwiYXZlcmFnZURvc2VzIiwidCIsImF2ZXJhZ2VGaXJzdERvc2VzIiwiYXZlcmFnZVNlY29uZERvc2VzIiwiZG9zZXNBdmFpbGFibGUiLCJkYWlseVRpbWVTZXJpZXMiLCJjdXJyZW50V2VlayIsImRheSIsImlzU2FtZSIsImNvbWlybmF0eURvc2VzRGVsaXJlZCIsImxlbmd0aCIsImQiLCJwb3B1bGF0aW9uIiwiY29uZmlnIiwic2Vjb25kRG9zZU1lYW5pbmdmdWwiLCJ0aXRsZSIsInN1YnRpdGxlIiwiZGF5cyIsIm1lYW5pbmdmdWwiLCJDaGFydCIsInJlZ2lzdGVyIiwiQXJjRWxlbWVudCIsIkxpbmVFbGVtZW50IiwiQmFyRWxlbWVudCIsIlBvaW50RWxlbWVudCIsIkJhckNvbnRyb2xsZXIiLCJMaW5lQ29udHJvbGxlciIsIkxpbmVhclNjYWxlIiwiVGltZVNjYWxlIiwiVGltZVNlcmllc1NjYWxlIiwiQ2F0ZWdvcnlTY2FsZSIsIkZpbGxlciIsIkxlZ2VuZCIsIlRpdGxlIiwiVG9vbHRpcCIsIkNoYXJ0Q29tcG9uZW50IiwiQ29tcG9uZW50IiwicCIsInR5cGUiLCJsYWJlbHMiLCJkYXRhc2V0cyIsIm9wdGlvbnMiLCJyZXNwb25zaXZlIiwiYXNwZWN0UmF0aW8iLCJ0aGlzIiwiZ2V0QXNwZWN0UmF0aW8iLCJzY2FsZXMiLCJ4IiwiZGlzcGxheSIsInRleHQiLCJ4VGl0bGUiLCJ5IiwieVRpdGxlIiwid2luZG93IiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwiY2hhcnQiLCJ1cGRhdGUiLCJkb3Nlc0N0eCIsImdldENhbnZhcyIsImdldENvbnRleHQiLCJidWlsZENoYXJ0Q29uZmlnIiwicHJvcHMiLCJhZGRFdmVudExpc3RlbmVyIiwidXBkYXRlQXNwZWN0UmF0aW8iLCJlbGVtZW50cyIsInF1ZXJ5U2VsZWN0b3IiLCJkcmF3Q2hhcnQiLCJjbGFzcyIsIndpZHRoIiwiaGVpZ2h0IiwicmVtYXJrIiwiQ2hhcnRDb2xvcnMiLCJjaGFydENvbG9yIiwiYyIsImJvcmRlckNvbG9yIiwiYmFja2dyb3VuZENvbG9yIiwidHNMYWJlbHMiLCJmb3JtYXQiLCJjTGluZUNoYXJ0IiwibGFiZWwiLCJjb2xvciIsImZpbGwiLCJ0ZW5zaW9uIiwibGluZUNoYXJ0IiwiYmFyQ2hhcnQiLCJQdXJwbGUiLCJCbHVlIiwiR3JlZW4iLCJZZWxsb3ciLCJtZXRhZGF0YSIsIkRhcmtSZWQiLCJSZWQiLCJkZWxpdmVyeUxhc3RVcGRhdGVkIiwiZnJvbU5vdyIsIndzIiwidyIsImZpbHRlciIsImlzQWZ0ZXIiLCJEYXRhU291cmNlIiwiZGF0YVBhdGgiLCJtZXRhZGF0YVBhdGgiLCJzdGFydFRpbWUiLCJhc3luYyIsImNvbnNvbGUiLCJsb2ciLCJnZXRCdWlsZEluZm8iLCJsYXN0VXBkYXRlIiwidmFjY2luYXRpb25zVGltZVNlcmllcyIsImRlbGl2ZXJ5VGltZVNlcmllcyIsIlByb21pc2UiLCJhbGwiLCJmZXRjaE1ldGFkYXRhIiwibG9hZFZhY2NpbmF0aW9uVGltZVNlcmllcyIsImxvYWREZWxpdmVyeVRpbWVTZXJpZXMiLCJjb21iaW5lZFRpbWVTZXJpZXMiLCJjb21iaW5lVGltZVNlcmllcyIsInRpbWVTZXJpZXMiLCJjYWxjdWxhdGVBdmVyYWdlcyIsIndlZWtseVNlcmllcyIsImNhbGN1bGF0ZVdlZWtseURhdGEiLCJyZW5kZXIiLCJyZW1haW5pbmdWYWNjVGltZSIsImNhbGN1bGF0ZVRhYmxlIiwiY2hhcnRDb25maWd1cmF0aW9ucyIsImdldFZhY2NDaGFydENvbmZpZyIsImdldFdlZWtseUNoYXJ0Q29uZmlnIiwiZ2V0V2Vla2x5Q2hhcnRCeVZhY2NpbmVDb25maWciLCJnZXREb3Nlc0NoYXJ0Q29uZmlnIiwiZ2V0RXN0aW1hdGlvbkNoYXJ0Q29uZmlnIiwiZ2V0VmFjY1JhdGlvQ2hhcnRDb25maWciLCJtYWluIiwidGhlbiIsImRpZmYiLCJzdWNjZXNzIiwiY2F0Y2giLCJyZWFzb24iLCJjb250ZW50IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImVycm9yIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsImlubmVyVGV4dCIsImlubmVySFRNTCIsImFwcGVuZENoaWxkIiwiZXJyb3JIYW5kbGVyIiwiZmV0Y2hDU1YiLCJuYW1lIiwiY3N2IiwicmVzIiwiZmV0Y2giLCJmZXRjaENTVlRleHQiLCJkZWxpbWl0ZXIiLCJjb2x1bW5zIiwianNvbiIsInZhY2NpbmF0aW9uc0xhc3RVcGRhdGVkIiwidXRjT2Zmc2V0IiwicGFyc2VyIiwiVmFjY2luYXRpb25zVGltZVNlcmllcyIsInJlY29yZCIsInBhcnNlSW50Iiwic29ydCIsInRpbWVTZXJpZXNQb2ludFNvcnQiLCJEZWxpdmVyaWVzVGltZVNlcmllcyIsInZhY2NpbmVOYW1lIiwiZHAiLCJmaW5kIiwiTWF0aCIsInJvdW5kIiwiZmxvb3IiLCJhZGQiLCJldmVyeSIsImFyciIsInJlZHVjZSIsImEiLCJiIiwibXNnIiwiZXJyIiwibG9nVGFyZ2V0IiwibWV0aG9kIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJidWlsZCIsInN0YWNrIiwibW9kZSJdLCJtYXBwaW5ncyI6IjRGQUFBLElBQUlBLEVBQU0sQ0FDVCxPQUFRLEtBQ1IsVUFBVyxLQUNYLE9BQVEsSUFDUixVQUFXLEtBQ1gsYUFBYyxLQUNkLFVBQVcsS0FDWCxhQUFjLEtBQ2QsVUFBVyxLQUNYLGFBQWMsS0FDZCxVQUFXLEtBQ1gsYUFBYyxLQUNkLFVBQVcsS0FDWCxhQUFjLEtBQ2QsVUFBVyxLQUNYLGFBQWMsS0FDZCxVQUFXLElBQ1gsT0FBUSxLQUNSLFVBQVcsS0FDWCxPQUFRLEtBQ1IsVUFBVyxLQUNYLE9BQVEsS0FDUixVQUFXLEtBQ1gsT0FBUSxLQUNSLFVBQVcsS0FDWCxPQUFRLEtBQ1IsVUFBVyxLQUNYLGFBQWMsS0FDZCxVQUFXLEtBQ1gsT0FBUSxLQUNSLFVBQVcsS0FDWCxPQUFRLEtBQ1IsVUFBVyxLQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsT0FBUSxLQUNSLFVBQVcsS0FDWCxPQUFRLEtBQ1IsVUFBVyxLQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsT0FBUSxLQUNSLFVBQVcsS0FDWCxPQUFRLEtBQ1IsVUFBVyxLQUNYLE9BQVEsS0FDUixVQUFXLElBQ1gsYUFBYyxJQUNkLFVBQVcsSUFDWCxhQUFjLElBQ2QsVUFBVyxLQUNYLE9BQVEsS0FDUixVQUFXLEtBQ1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxVQUFXLEtBQ1gsYUFBYyxLQUNkLFVBQVcsS0FDWCxhQUFjLEtBQ2QsVUFBVyxLQUNYLGFBQWMsS0FDZCxVQUFXLEtBQ1gsYUFBYyxLQUNkLFVBQVcsS0FDWCxhQUFjLEtBQ2QsVUFBVyxLQUNYLGFBQWMsS0FDZCxVQUFXLEtBQ1gsYUFBYyxLQUNkLFVBQVcsS0FDWCxhQUFjLEtBQ2QsT0FBUSxLQUNSLFVBQVcsS0FDWCxPQUFRLEtBQ1IsVUFBVyxLQUNYLGFBQWMsS0FDZCxVQUFXLEtBQ1gsYUFBYyxLQUNkLFVBQVcsS0FDWCxhQUFjLEtBQ2QsVUFBVyxLQUNYLE9BQVEsS0FDUixVQUFXLEtBQ1gsT0FBUSxLQUNSLFVBQVcsS0FDWCxPQUFRLEtBQ1IsVUFBVyxLQUNYLE9BQVEsS0FDUixVQUFXLEtBQ1gsUUFBUyxLQUNULFdBQVksS0FDWixPQUFRLEtBQ1IsVUFBVyxLQUNYLE9BQVEsS0FDUixVQUFXLEtBQ1gsYUFBYyxLQUNkLFVBQVcsS0FDWCxhQUFjLEtBQ2QsVUFBVyxLQUNYLE9BQVEsS0FDUixVQUFXLEtBQ1gsT0FBUSxLQUNSLFVBQVcsS0FDWCxPQUFRLEtBQ1IsVUFBVyxLQUNYLE9BQVEsS0FDUixVQUFXLEtBQ1gs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QVd5QixFQUFFRywrQkFBZ0MsQ0FBQ0MsT0FBUSxPQUFRQyxLQUFNQyxLQUFLQyxVQUFVLENBQUNDLE1BQU9SLEVBQUdDLE1BQUtyQyxNQUFPc0MsYUFBRyxFQUFIQSxFQUFLTyxRQUFVQyxLQUFNLFkiLCJmaWxlIjoibWFpbi5idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbWFwID0ge1xuXHRcIi4vYWZcIjogMjc4Nixcblx0XCIuL2FmLmpzXCI6IDI3ODYsXG5cdFwiLi9hclwiOiA4NjcsXG5cdFwiLi9hci1kelwiOiA0MTMwLFxuXHRcIi4vYXItZHouanNcIjogNDEzMCxcblx0XCIuL2FyLWt3XCI6IDYxMzUsXG5cdFwiLi9hci1rdy5qc1wiOiA2MTM1LFxuXHRcIi4vYXItbHlcIjogNjQ0MCxcblx0XCIuL2FyLWx5LmpzXCI6IDY0NDAsXG5cdFwiLi9hci1tYVwiOiA3NzAyLFxuXHRcIi4vYXItbWEuanNcIjogNzcwMixcblx0XCIuL2FyLXNhXCI6IDYwNDAsXG5cdFwiLi9hci1zYS5qc1wiOiA2MDQwLFxuXHRcIi4vYXItdG5cIjogNzEwMCxcblx0XCIuL2FyLXRuLmpzXCI6IDcxMDAsXG5cdFwiLi9hci5qc1wiOiA4NjcsXG5cdFwiLi9helwiOiAxMDgzLFxuXHRcIi4vYXouanNcIjogMTA4Myxcblx0XCIuL2JlXCI6IDk4MDgsXG5cdFwiLi9iZS5qc1wiOiA5ODA4LFxuXHRcIi4vYmdcIjogODMzOCxcblx0XCIuL2JnLmpzXCI6IDgzMzgsXG5cdFwiLi9ibVwiOiA3NDM4LFxuXHRcIi4vYm0uanNcIjogNzQzOCxcblx0XCIuL2JuXCI6IDg5MDUsXG5cdFwiLi9ibi1iZFwiOiA2MjI1LFxuXHRcIi4vYm4tYmQuanNcIjogNjIyNSxcblx0XCIuL2JuLmpzXCI6IDg5MDUsXG5cdFwiLi9ib1wiOiAxNTYwLFxuXHRcIi4vYm8uanNcIjogMTU2MCxcblx0XCIuL2JyXCI6IDEyNzgsXG5cdFwiLi9ici5qc1wiOiAxMjc4LFxuXHRcIi4vYnNcIjogNjIyLFxuXHRcIi4vYnMuanNcIjogNjIyLFxuXHRcIi4vY2FcIjogMjQ2OCxcblx0XCIuL2NhLmpzXCI6IDI0NjgsXG5cdFwiLi9jc1wiOiA1ODIyLFxuXHRcIi4vY3MuanNcIjogNTgyMixcblx0XCIuL2N2XCI6IDg3Nyxcblx0XCIuL2N2LmpzXCI6IDg3Nyxcblx0XCIuL2N5XCI6IDczNzMsXG5cdFwiLi9jeS5qc1wiOiA3MzczLFxuXHRcIi4vZGFcIjogNDc4MCxcblx0XCIuL2RhLmpzXCI6IDQ3ODAsXG5cdFwiLi9kZVwiOiA5NzQwLFxuXHRcIi4vZGUtYXRcIjogMjE3LFxuXHRcIi4vZGUtYXQuanNcIjogMjE3LFxuXHRcIi4vZGUtY2hcIjogODk0LFxuXHRcIi4vZGUtY2guanNcIjogODk0LFxuXHRcIi4vZGUuanNcIjogOTc0MCxcblx0XCIuL2R2XCI6IDUzMDAsXG5cdFwiLi9kdi5qc1wiOiA1MzAwLFxuXHRcIi4vZWxcIjogODM3LFxuXHRcIi4vZWwuanNcIjogODM3LFxuXHRcIi4vZW4tYXVcIjogODM0OCxcblx0XCIuL2VuLWF1LmpzXCI6IDgzNDgsXG5cdFwiLi9lbi1jYVwiOiA3OTI1LFxuXHRcIi4vZW4tY2EuanNcIjogNzkyNSxcblx0XCIuL2VuLWdiXCI6IDIyNDMsXG5cdFwiLi9lbi1nYi5qc1wiOiAyMjQzLFxuXHRcIi4vZW4taWVcIjogNjQzNixcblx0XCIuL2VuLWllLmpzXCI6IDY0MzYsXG5cdFwiLi9lbi1pbFwiOiA3MjA3LFxuXHRcIi4vZW4taWwuanNcIjogNzIwNyxcblx0XCIuL2VuLWluXCI6IDQxNzUsXG5cdFwiLi9lbi1pbi5qc1wiOiA0MTc1LFxuXHRcIi4vZW4tbnpcIjogNjMxOSxcblx0XCIuL2VuLW56LmpzXCI6IDYzMTksXG5cdFwiLi9lbi1zZ1wiOiAxNjYyLFxuXHRcIi4vZW4tc2cuanNcIjogMTY2Mixcblx0XCIuL2VvXCI6IDI5MTUsXG5cdFwiLi9lby5qc1wiOiAyOTE1LFxuXHRcIi4vZXNcIjogNTY1NSxcblx0XCIuL2VzLWRvXCI6IDUyNTEsXG5cdFwiLi9lcy1kby5qc1wiOiA1MjUxLFxuXHRcIi4vZXMtbXhcIjogNjExMixcblx0XCIuL2VzLW14LmpzXCI6IDYxMTIsXG5cdFwiLi9lcy11c1wiOiAxMTQ2LFxuXHRcIi4vZXMtdXMuanNcIjogMTE0Nixcblx0XCIuL2VzLmpzXCI6IDU2NTUsXG5cdFwiLi9ldFwiOiA1NjAzLFxuXHRcIi4vZXQuanNcIjogNTYwMyxcblx0XCIuL2V1XCI6IDc3NjMsXG5cdFwiLi9ldS5qc1wiOiA3NzYzLFxuXHRcIi4vZmFcIjogNjk1OSxcblx0XCIuL2ZhLmpzXCI6IDY5NTksXG5cdFwiLi9maVwiOiAxODk3LFxuXHRcIi4vZmkuanNcIjogMTg5Nyxcblx0XCIuL2ZpbFwiOiAyNTQ5LFxuXHRcIi4vZmlsLmpzXCI6IDI1NDksXG5cdFwiLi9mb1wiOiA0Njk0LFxuXHRcIi4vZm8uanNcIjogNDY5NCxcblx0XCIuL2ZyXCI6IDQ0NzAsXG5cdFwiLi9mci1jYVwiOiAzMDQ5LFxuXHRcIi4vZnItY2EuanNcIjogMzA0OSxcblx0XCIuL2ZyLWNoXCI6IDIzMzAsXG5cdFwiLi9mci1jaC5qc1wiOiAyMzMwLFxuXHRcIi4vZnIuanNcIjogNDQ3MCxcblx0XCIuL2Z5XCI6IDUwNDQsXG5cdFwiLi9meS5qc1wiOiA1MDQ0LFxuXHRcIi4vZ2FcIjogOTI5NSxcblx0XCIuL2dhLmpzXCI6IDkyOTUsXG5cdFwiLi9nZFwiOiAyMTAxLFxuXHRcIi4vZ2QuanNcIjogMjEwMSxcblx0XCIuL2dsXCI6IDg3OTQsXG5cdFwiLi9nbC5qc1wiOiA4Nzk0LFxuXHRcIi4vZ29tLWRldmFcIjogNzg4NCxcblx0XCIuL2dvbS1kZXZhLmpzXCI6IDc4ODQsXG5cdFwiLi9nb20tbGF0blwiOiAzMTY4LFxuXHRcIi4vZ29tLWxhdG4uanNcIjogMzE2OCxcblx0XCIuL2d1XCI6IDUzNDksXG5cdFwiLi9ndS5qc1wiOiA1MzQ5LFxuXHRcIi4vaGVcIjogNDIwNixcblx0XCIuL2hlLmpzXCI6IDQyMDYsXG5cdFwiLi9oaVwiOiA5NCxcblx0XCIuL2hpLmpzXCI6IDk0LFxuXHRcIi4vaHJcIjogMzE2LFxuXHRcIi4vaHIuanNcIjogMzE2LFxuXHRcIi4vaHVcIjogMjEzOCxcblx0XCIuL2h1LmpzXCI6IDIxMzgsXG5cdFwiLi9oeS1hbVwiOiAxNDIzLFxuXHRcIi4vaHktYW0uanNcIjogMTQyMyxcblx0XCIuL2lkXCI6IDkyMTgsXG5cdFwiLi9pZC5qc1wiOiA5MjE4LFxuXHRcIi4vaXNcIjogMTM1LFxuXHRcIi4vaXMuanNcIjogMTM1LFxuXHRcIi4vaXRcIjogNjI2LFxuXHRcIi4vaXQtY2hcIjogMTUwLFxuXHRcIi4vaXQtY2guanNcIjogMTUwLFxuXHRcIi4vaXQuanNcIjogNjI2LFxuXHRcIi4vamFcIjogOTE4Myxcblx0XCIuL2phLmpzXCI6IDkxODMsXG5cdFwiLi9qdlwiOiA0Mjg2LFxuXHRcIi4vanYuanNcIjogNDI4Nixcblx0XCIuL2thXCI6IDIxMDUsXG5cdFwiLi9rYS5qc1wiOiAyMTA1LFxuXHRcIi4va2tcIjogNzc3Mixcblx0XCIuL2trLmpzXCI6IDc3NzIsXG5cdFwiLi9rbVwiOiA4NzU4LFxuXHRcIi4va20uanNcIjogODc1OCxcblx0XCIuL2tuXCI6IDkyODIsXG5cdFwiLi9rbi5qc1wiOiA5MjgyLFxuXHRcIi4va29cIjogMzczMCxcblx0XCIuL2tvLmpzXCI6IDM3MzAsXG5cdFwiLi9rdVwiOiAxNDA4LFxuXHRcIi4va3UuanNcIjogMTQwOCxcblx0XCIuL2t5XCI6IDMyOTEsXG5cdFwiLi9reS5qc1wiOiAzMjkxLFxuXHRcIi4vbGJcIjogNjg0MSxcblx0XCIuL2xiLmpzXCI6IDY4NDEsXG5cdFwiLi9sb1wiOiA1NDY2LFxuXHRcIi4vbG8uanNcIjogNTQ2Nixcblx0XCIuL2x0XCI6IDcwMTAsXG5cdFwiLi9sdC5qc1wiOiA3MDEwLFxuXHRcIi4vbHZcIjogNzU5NSxcblx0XCIuL2x2LmpzXCI6IDc1OTUsXG5cdFwiLi9tZVwiOiA5ODYxLFxuXHRcIi4vbWUuanNcIjogOTg2MSxcblx0XCIuL21pXCI6IDU0OTMsXG5cdFwiLi9taS5qc1wiOiA1NDkzLFxuXHRcIi4vbWtcIjogNTk2Nixcblx0XCIuL21rLmpzXCI6IDU5NjYsXG5cdFwiLi9tbFwiOiA3MzQxLFxuXHRcIi4vbWwuanNcIjogNzM0MSxcblx0XCIuL21uXCI6IDUxMTUsXG5cdFwiLi9tbi5qc1wiOiA1MTE1LFxuXHRcIi4vbXJcIjogMzcwLFxuXHRcIi4vbXIuanNcIjogMzcwLFxuXHRcIi4vbXNcIjogOTg0Nyxcblx0XCIuL21zLW15XCI6IDEyMzcsXG5cdFwiLi9tcy1teS5qc1wiOiAxMjM3LFxuXHRcIi4vbXMuanNcIjogOTg0Nyxcblx0XCIuL210XCI6IDIxMjYsXG5cdFwiLi9tdC5qc1wiOiAyMTI2LFxuXHRcIi4vbXlcIjogNjE2NSxcblx0XCIuL215LmpzXCI6IDYxNjUsXG5cdFwiLi9uYlwiOiA0OTI0LFxuXHRcIi4vbmIuanNcIjogNDkyNCxcblx0XCIuL25lXCI6IDY3NDQsXG5cdFwiLi9uZS5qc1wiOiA2NzQ0LFxuXHRcIi4vbmxcIjogMzkwMSxcblx0XCIuL25sLWJlXCI6IDk4MTQsXG5cdFwiLi9ubC1iZS5qc1wiOiA5ODE0LFxuXHRcIi4vbmwuanNcIjogMzkwMSxcblx0XCIuL25uXCI6IDM4NzcsXG5cdFwiLi9ubi5qc1wiOiAzODc3LFxuXHRcIi4vb2MtbG5jXCI6IDIxMzUsXG5cdFwiLi9vYy1sbmMuanNcIjogMjEzNSxcblx0XCIuL3BhLWluXCI6IDU4NTgsXG5cdFwiLi9wYS1pbi5qc1wiOiA1ODU4LFxuXHRcIi4vcGxcIjogNDQ5NSxcblx0XCIuL3BsLmpzXCI6IDQ0OTUsXG5cdFwiLi9wdFwiOiA5NTIwLFxuXHRcIi4vcHQtYnJcIjogNzk3MSxcblx0XCIuL3B0LWJyLmpzXCI6IDc5NzEsXG5cdFwiLi9wdC5qc1wiOiA5NTIwLFxuXHRcIi4vcm9cIjogNjQ1OSxcblx0XCIuL3JvLmpzXCI6IDY0NTksXG5cdFwiLi9ydVwiOiAxNzkzLFxuXHRcIi4vcnUuanNcIjogMTc5Myxcblx0XCIuL3NkXCI6IDk1MCxcblx0XCIuL3NkLmpzXCI6IDk1MCxcblx0XCIuL3NlXCI6IDQ5MCxcblx0XCIuL3NlLmpzXCI6IDQ5MCxcblx0XCIuL3NpXCI6IDEyNCxcblx0XCIuL3NpLmpzXCI6IDEyNCxcblx0XCIuL3NrXCI6IDQyNDksXG5cdFwiLi9zay5qc1wiOiA0MjQ5LFxuXHRcIi4vc2xcIjogNDk4NSxcblx0XCIuL3NsLmpzXCI6IDQ5ODUsXG5cdFwiLi9zcVwiOiAxMTA0LFxuXHRcIi4vc3EuanNcIjogMTEwNCxcblx0XCIuL3NyXCI6IDkxMzEsXG5cdFwiLi9zci1jeXJsXCI6IDk5MTUsXG5cdFwiLi9zci1jeXJsLmpzXCI6IDk5MTUsXG5cdFwiLi9zci5qc1wiOiA5MTMxLFxuXHRcIi4vc3NcIjogNTg5Myxcblx0XCIuL3NzLmpzXCI6IDU4OTMsXG5cdFwiLi9zdlwiOiA4NzYwLFxuXHRcIi4vc3YuanNcIjogODc2MCxcblx0XCIuL3N3XCI6IDExNzIsXG5cdFwiLi9zdy5qc1wiOiAxMTcyLFxuXHRcIi4vdGFcIjogNzMzMyxcblx0XCIuL3RhLmpzXCI6IDczMzMsXG5cdFwiLi90ZVwiOiAzMTEwLFxuXHRcIi4vdGUuanNcIjogMzExMCxcblx0XCIuL3RldFwiOiAyMDk1LFxuXHRcIi4vdGV0LmpzXCI6IDIwOTUsXG5cdFwiLi90Z1wiOiA3MzIxLFxuXHRcIi4vdGcuanNcIjogNzMyMSxcblx0XCIuL3RoXCI6IDkwNDEsXG5cdFwiLi90aC5qc1wiOiA5MDQxLFxuXHRcIi4vdGtcIjogOTAwNSxcblx0XCIuL3RrLmpzXCI6IDkwMDUsXG5cdFwiLi90bC1waFwiOiA1NzY4LFxuXHRcIi4vdGwtcGguanNcIjogNTc2OCxcblx0XCIuL3RsaFwiOiA5NDQ0LFxuXHRcIi4vdGxoLmpzXCI6IDk0NDQsXG5cdFwiLi90clwiOiAyMzk3LFxuXHRcIi4vdHIuanNcIjogMjM5Nyxcblx0XCIuL3R6bFwiOiA4MjU0LFxuXHRcIi4vdHpsLmpzXCI6IDgyNTQsXG5cdFwiLi90em1cIjogMTEwNixcblx0XCIuL3R6bS1sYXRuXCI6IDY5OSxcblx0XCIuL3R6bS1sYXRuLmpzXCI6IDY5OSxcblx0XCIuL3R6bS5qc1wiOiAxMTA2LFxuXHRcIi4vdWctY25cIjogOTI4OCxcblx0XCIuL3VnLWNuLmpzXCI6IDkyODgsXG5cdFwiLi91a1wiOiA3NjkxLFxuXHRcIi4vdWsuanNcIjogNzY5MSxcblx0XCIuL3VyXCI6IDM3OTUsXG5cdFwiLi91ci5qc1wiOiAzNzk1LFxuXHRcIi4vdXpcIjogNjc5MSxcblx0XCIuL3V6LWxhdG5cIjogNTg4LFxuXHRcIi4vdXotbGF0bi5qc1wiOiA1ODgsXG5cdFwiLi91ei5qc1wiOiA2NzkxLFxuXHRcIi4vdmlcIjogNTY2Nixcblx0XCIuL3ZpLmpzXCI6IDU2NjYsXG5cdFwiLi94LXBzZXVkb1wiOiA0Mzc4LFxuXHRcIi4veC1wc2V1ZG8uanNcIjogNDM3OCxcblx0XCIuL3lvXCI6IDU4MDUsXG5cdFwiLi95by5qc1wiOiA1ODA1LFxuXHRcIi4vemgtY25cIjogMzgzOSxcblx0XCIuL3poLWNuLmpzXCI6IDM4MzksXG5cdFwiLi96aC1oa1wiOiA1NzI2LFxuXHRcIi4vemgtaGsuanNcIjogNTcyNixcblx0XCIuL3poLW1vXCI6IDk4MDcsXG5cdFwiLi96aC1tby5qc1wiOiA5ODA3LFxuXHRcIi4vemgtdHdcIjogNDE1Mixcblx0XCIuL3poLXR3LmpzXCI6IDQxNTJcbn07XG5cblxuZnVuY3Rpb24gd2VicGFja0NvbnRleHQocmVxKSB7XG5cdHZhciBpZCA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpO1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhpZCk7XG59XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSB7XG5cdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8obWFwLCByZXEpKSB7XG5cdFx0dmFyIGUgPSBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInXCIpO1xuXHRcdGUuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcblx0XHR0aHJvdyBlO1xuXHR9XG5cdHJldHVybiBtYXBbcmVxXTtcbn1cbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSA2NzAwOyIsImltcG9ydCB7IGF2ZXJhZ2UgfSBmcm9tICcuL3V0aWwnO1xuaW1wb3J0IHsgUmVtYWluaW5nVmFjY2luYXRpb25UaW1lIH0gZnJvbSAnLi9yZW5kZXInO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi9jb25zdCc7XG5pbXBvcnQgeyBCYXNlVGltZVNlcmllc0RhdGFQb2ludCwgQ29tYmluZWRUaW1lU2VyaWVzRGF0YVBvaW50LCBEZWxpdmVyeVRpbWVTZXJpZXNEYXRhUG9pbnQsIFRpbWVTZXJpZXMsIFRpbWVTZXJpZXNEYXRhUG9pbnQsIFZhY2NpbmF0aW9uVGltZVNlcmllc0RhdGFQb2ludCwgV2Vla1N1bW1hcnkgfSBmcm9tICcuL21vZGVsJztcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBvbGRlc3QgRGF0ZSBmcm9tIGJvdGggcG9pbnRzIG9yIHVuZGVmaW5lZC5cbiAqL1xuZnVuY3Rpb24gbWluRGF0ZShwb2ludDE6IEJhc2VUaW1lU2VyaWVzRGF0YVBvaW50IHwgdW5kZWZpbmVkLCBwb2ludDI6IEJhc2VUaW1lU2VyaWVzRGF0YVBvaW50IHwgdW5kZWZpbmVkKSB7XG4gICAgbGV0IHJlc3VsdCA9IHBvaW50MT8uZGF0ZSA/PyBwb2ludDI/LmRhdGU7XG5cbiAgICBpZihwb2ludDEgJiYgcG9pbnQyKSB7XG4gICAgICAgIGlmKHBvaW50MS5kYXRlLnZhbHVlT2YoKSA8IHBvaW50Mi5kYXRlLnZhbHVlT2YoKSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gcG9pbnQxLmRhdGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQgPSBwb2ludDIuZGF0ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tYmluZVRpbWVTZXJpZXModmFjY1RTOiBWYWNjaW5hdGlvblRpbWVTZXJpZXNEYXRhUG9pbnRbXSwgZGVsaXZlcnlUUzogRGVsaXZlcnlUaW1lU2VyaWVzRGF0YVBvaW50W10pIHtcbiAgICBjb25zdCByZXN1bHQ6IENvbWJpbmVkVGltZVNlcmllc0RhdGFQb2ludFtdID0gW107XG5cbiAgICBsZXQgY3VycmVudFZhY2MgPSB1bmRlZmluZWQ7XG4gICAgbGV0IGN1cnJlbnREZWxpdmVyeSA9IHVuZGVmaW5lZDtcbiAgICBkbyB7XG4gICAgICAgIGlmKCFjdXJyZW50VmFjYykge1xuICAgICAgICAgICAgY3VycmVudFZhY2MgPSB2YWNjVFMuc2hpZnQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZighY3VycmVudERlbGl2ZXJ5KSB7XG4gICAgICAgICAgICBjdXJyZW50RGVsaXZlcnkgPSBkZWxpdmVyeVRTLnNoaWZ0KCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGF0ZSA9IG1pbkRhdGUoY3VycmVudERlbGl2ZXJ5LCBjdXJyZW50VmFjYyk7XG4gICAgICAgIGlmKGRhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBkYXRhOiBDb21iaW5lZFRpbWVTZXJpZXNEYXRhUG9pbnQgPSB7XG4gICAgICAgICAgICBkYXRlOiBkYXRlLFxuXG4gICAgICAgICAgICBwZW9wbGVGaXJzdERvc2U6IDAsXG4gICAgICAgICAgICBwZW9wbGVTZWNvbmREb3NlOiAwLFxuICAgICAgICAgICAgcGVvcGxlVmFjY2luYXRlZDogMCxcbiAgICAgICAgICAgIHRvdGFsVmFjY2luZURvc2VzOiAwLFxuICAgICAgICAgICAgdG90YWxQZW9wbGVGaXJzdERvc2U6IDAsXG4gICAgICAgICAgICB0b3RhbFBlb3BsZUZ1bGx5VmFjY2luYXRlZDogMCxcbiAgICAgICAgICAgIG1vZGVybmFEb3Nlc0RlbGl2ZXJlZDogMCxcbiAgICAgICAgICAgIGFzdHJhRG9zZXNEZWxpdmVyZWQ6IDAsXG4gICAgICAgICAgICBjb21pcm5hdHlEb3Nlc0RlbGl2ZXJlZDogMCxcbiAgICAgICAgICAgIGpvaG5zb25Eb3Nlc0RlbGl2ZXJlZDogMCxcblxuICAgICAgICAgICAgZG9zZXNEZWxpdmVyZWQ6IDBcbiAgICAgICAgfTtcblxuICAgICAgICBpZihjdXJyZW50VmFjYz8uZGF0ZS52YWx1ZU9mKCkgPT09IGRhdGUudmFsdWVPZigpKSB7XG4gICAgICAgICAgICBkYXRhLnBlb3BsZUZpcnN0RG9zZSA9IGN1cnJlbnRWYWNjLnBlb3BsZUZpcnN0RG9zZSxcbiAgICAgICAgICAgIGRhdGEucGVvcGxlU2Vjb25kRG9zZSA9IGN1cnJlbnRWYWNjLnBlb3BsZVNlY29uZERvc2UsXG4gICAgICAgICAgICBkYXRhLnRvdGFsVmFjY2luZURvc2VzID0gY3VycmVudFZhY2MudG90YWxWYWNjaW5lRG9zZXMsXG4gICAgICAgICAgICBkYXRhLnBlb3BsZVZhY2NpbmF0ZWQgPSBjdXJyZW50VmFjYy5wZW9wbGVWYWNjaW5hdGVkO1xuICAgICAgICAgICAgZGF0YS50b3RhbFBlb3BsZUZpcnN0RG9zZSA9IGN1cnJlbnRWYWNjLnRvdGFsUGVvcGxlRmlyc3REb3NlLFxuICAgICAgICAgICAgZGF0YS50b3RhbFBlb3BsZUZ1bGx5VmFjY2luYXRlZCA9IGN1cnJlbnRWYWNjLnRvdGFsUGVvcGxlRnVsbHlWYWNjaW5hdGVkLFxuICAgICAgICAgICAgY3VycmVudFZhY2MgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmKGN1cnJlbnREZWxpdmVyeT8uZGF0ZS52YWx1ZU9mKCkgPT09IGRhdGUudmFsdWVPZigpKSB7XG4gICAgICAgICAgICBkYXRhLmRvc2VzRGVsaXZlcmVkID0gY3VycmVudERlbGl2ZXJ5LmRvc2VzRGVsaXZlcmVkO1xuICAgICAgICAgICAgZGF0YS5hc3RyYURvc2VzRGVsaXZlcmVkID0gY3VycmVudERlbGl2ZXJ5LmFzdHJhRG9zZXNEZWxpdmVyZWQ7XG4gICAgICAgICAgICBkYXRhLmNvbWlybmF0eURvc2VzRGVsaXZlcmVkID0gY3VycmVudERlbGl2ZXJ5LmNvbWlybmF0eURvc2VzRGVsaXZlcmVkO1xuICAgICAgICAgICAgZGF0YS5qb2huc29uRG9zZXNEZWxpdmVyZWQgPSBjdXJyZW50RGVsaXZlcnkuam9obnNvbkRvc2VzRGVsaXZlcmVkO1xuICAgICAgICAgICAgZGF0YS5tb2Rlcm5hRG9zZXNEZWxpdmVyZWQgPSBjdXJyZW50RGVsaXZlcnkubW9kZXJuYURvc2VzRGVsaXZlcmVkO1xuICAgICAgICAgICAgY3VycmVudERlbGl2ZXJ5ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQucHVzaChkYXRhKTtcblxuICAgIH0gd2hpbGUodHJ1ZSk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlQXZlcmFnZXMoaW5wdXQ6IENvbWJpbmVkVGltZVNlcmllc0RhdGFQb2ludFtdKTogVGltZVNlcmllcyB7XG4gICAgY29uc3QgcmVzdWx0OiBUaW1lU2VyaWVzID0gW107XG4gICAgbGV0IHRvdGFsRG9zZXNEZWxpdmVyZWQgPSAwO1xuXG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgaW5wdXQuZW50cmllcygpKSB7XG4gICAgICAgIHRvdGFsRG9zZXNEZWxpdmVyZWQgKz0gdmFsdWUuZG9zZXNEZWxpdmVyZWQ7XG4gICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgIC4uLnZhbHVlLFxuICAgICAgICAgICAgdG90YWxEb3Nlc0RlbGl2ZXJlZDogdG90YWxEb3Nlc0RlbGl2ZXJlZCxcbiAgICAgICAgICAgIGF2ZXJhZ2VEb3NlczogY2FsY0F2ZXJhZ2VGaWVsZChpbnB1dCwga2V5LCB0ID0+IHQucGVvcGxlVmFjY2luYXRlZCksXG4gICAgICAgICAgICBhdmVyYWdlRmlyc3REb3NlczogY2FsY0F2ZXJhZ2VGaWVsZChpbnB1dCwga2V5LCB0ID0+IHQucGVvcGxlRmlyc3REb3NlKSxcbiAgICAgICAgICAgIGF2ZXJhZ2VTZWNvbmREb3NlczogY2FsY0F2ZXJhZ2VGaWVsZChpbnB1dCwga2V5LCB0ID0+IHQucGVvcGxlU2Vjb25kRG9zZSksXG4gICAgICAgICAgICBkb3Nlc0F2YWlsYWJsZTogdG90YWxEb3Nlc0RlbGl2ZXJlZCAtIHZhbHVlLnRvdGFsVmFjY2luZURvc2VzXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGNhbGNBdmVyYWdlRmllbGQoaW5wdXQ6IENvbWJpbmVkVGltZVNlcmllc0RhdGFQb2ludFtdLCBpOiBudW1iZXIsIHNlbGVjdG9yOiAodDogQ29tYmluZWRUaW1lU2VyaWVzRGF0YVBvaW50KSA9PiBudW1iZXIpIHtcbiAgICBjb25zdCBpMCA9IGkgPiA2ID8gaSAtIDYgOiAwO1xuICAgIGNvbnN0IGxhc3Q3RGF5cyA9IGlucHV0Lm1hcChzZWxlY3Rvcikuc2xpY2UoaTAsIGkrMSk7XG4gICAgcmV0dXJuIGF2ZXJhZ2UobGFzdDdEYXlzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZVdlZWtseURhdGEoZGFpbHlUaW1lU2VyaWVzOiBUaW1lU2VyaWVzKTogV2Vla1N1bW1hcnlbXSB7XG4gICAgbGV0IHJlc3VsdDogV2Vla1N1bW1hcnlbXSA9IFtdO1xuICAgIGxldCBjdXJyZW50V2VlazogV2Vla1N1bW1hcnkgfCBudWxsID0gbnVsbDtcbiAgICBmb3IoY29uc3QgZGF5IG9mIGRhaWx5VGltZVNlcmllcykge1xuICAgICAgICBpZighY3VycmVudFdlZWsgfHwgIWRheS5kYXRlLmlzU2FtZShjdXJyZW50V2Vlay5kYXRlLCAnVycpKSB7XG4gICAgICAgICAgICBjdXJyZW50V2VlayA9IHtcbiAgICAgICAgICAgICAgICBkYXRlOiBkYXkuZGF0ZSxcbiAgICAgICAgICAgICAgICBwZW9wbGVGaXJzdERvc2U6IDAsXG4gICAgICAgICAgICAgICAgcGVvcGxlU2Vjb25kRG9zZTogMCxcbiAgICAgICAgICAgICAgICBwZW9wbGVWYWNjaW5hdGVkOiAwLFxuICAgICAgICAgICAgICAgIGRvc2VzRGVsaXZlcmVkOiAwLFxuICAgICAgICAgICAgICAgIGFzdHJhRG9zZXNEZWxpdmVyZWQ6IDAsXG4gICAgICAgICAgICAgICAgY29taXJuYXR5RG9zZXNEZWxpcmVkOiAwLFxuICAgICAgICAgICAgICAgIGpvaG5zb25Eb3Nlc0RlbGl2ZXJlZDogMCxcbiAgICAgICAgICAgICAgICBtb2Rlcm5hRG9zZXNEZWxpdmVyZWQ6IDBcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXN1bHQucHVzaChjdXJyZW50V2Vlayk7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudFdlZWsucGVvcGxlRmlyc3REb3NlICs9IGRheS5wZW9wbGVGaXJzdERvc2U7XG4gICAgICAgIGN1cnJlbnRXZWVrLnBlb3BsZVNlY29uZERvc2UgKz0gZGF5LnBlb3BsZVNlY29uZERvc2U7XG4gICAgICAgIGN1cnJlbnRXZWVrLmRvc2VzRGVsaXZlcmVkICs9IGRheS5kb3Nlc0RlbGl2ZXJlZDtcbiAgICAgICAgY3VycmVudFdlZWsucGVvcGxlVmFjY2luYXRlZCArPSBkYXkucGVvcGxlVmFjY2luYXRlZDtcbiAgICAgICAgY3VycmVudFdlZWsuYXN0cmFEb3Nlc0RlbGl2ZXJlZCArPSBkYXkuYXN0cmFEb3Nlc0RlbGl2ZXJlZDtcbiAgICAgICAgY3VycmVudFdlZWsuY29taXJuYXR5RG9zZXNEZWxpcmVkICs9IGRheS5jb21pcm5hdHlEb3Nlc0RlbGl2ZXJlZDtcbiAgICAgICAgY3VycmVudFdlZWsuam9obnNvbkRvc2VzRGVsaXZlcmVkICs9IGRheS5qb2huc29uRG9zZXNEZWxpdmVyZWQ7XG4gICAgICAgIGN1cnJlbnRXZWVrLm1vZGVybmFEb3Nlc0RlbGl2ZXJlZCArPSBkYXkubW9kZXJuYURvc2VzRGVsaXZlcmVkO1xuICAgIH1cblxuICAgIC8vIHNob3cgb25seSBmdWxsIHdlZWtzOlxuICAgIHJldHVybiBnZXRDdXJyZW50RGF0YShkYWlseVRpbWVTZXJpZXMpLmRhdGUuZGF5KCkgPT0gMCA/XG4gICAgcmVzdWx0IDogcmVzdWx0LnNsaWNlKDAscmVzdWx0Lmxlbmd0aC0xKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEN1cnJlbnREYXRhKHRzOiBUaW1lU2VyaWVzKSB7XG4gICAgcmV0dXJuICB0cy5zbGljZSgtMSlbMF07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVUYWJsZShkOiBUaW1lU2VyaWVzRGF0YVBvaW50KTogUmVtYWluaW5nVmFjY2luYXRpb25UaW1lW10ge1xuICAgIGNvbnN0IHBvcHVsYXRpb24gPSBjb25maWcucG9wdWxhdGlvbjtcblxuICAgIGNvbnN0IHNlY29uZERvc2VNZWFuaW5nZnVsID0gIShkLmF2ZXJhZ2VTZWNvbmREb3NlcyowLjkgPiBkLmF2ZXJhZ2VGaXJzdERvc2VzKTtcblxuICAgIGNvbnN0IHJlc3VsdCA9IFtcbiAgICAgICAge1xuICAgICAgICAgICAgdGl0bGU6IFwiNzAlIGZpcnN0IGRvc2UgYWRtaW5pc3RlcmVkXCIsXG4gICAgICAgICAgICBzdWJ0aXRsZTogXCJiYXNlZCBvbiBmaXJzdCBkb3NlIDctZGF5IGF2ZXJhZ2UgYW5kIHJlbWFpbmluZyBmaXJzdCBkb3Nlc1wiLFxuICAgICAgICAgICAgZGF5czogKHBvcHVsYXRpb24gICogMC43ICAtIGQudG90YWxQZW9wbGVGaXJzdERvc2UpIC8gZC5hdmVyYWdlRmlyc3REb3NlcyxcbiAgICAgICAgICAgIG1lYW5pbmdmdWw6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgdGl0bGU6IFwiMTAwJSBmaXJzdCBkb3NlIGFkbWluaXN0ZXJlZFwiLFxuICAgICAgICAgICAgc3VidGl0bGU6IFwiYmFzZWQgb24gdGhlIGZpcnN0IGRvc2UgNy1kYXkgYXZlcmFnZSBhbmQgcmVtYWluaW5nIGZpcnN0IGRvc2VzXCIsXG4gICAgICAgICAgICBkYXlzOiAocG9wdWxhdGlvbiAtIGQudG90YWxQZW9wbGVGaXJzdERvc2UpIC8gZC5hdmVyYWdlRmlyc3REb3NlcyxcbiAgICAgICAgICAgIG1lYW5pbmdmdWw6IHNlY29uZERvc2VNZWFuaW5nZnVsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRpdGxlOiBcIjcwJSBmdWxseSB2YWNjaW5hdGVkXCIsXG4gICAgICAgICAgICBzdWJ0aXRsZTogXCJiYXNlZCBvbiB0aGUgc2Vjb25kIGRvc2UgNy1kYXkgYXZlcmFnZSBhbmQgcmVtYWluaW5nIHNlY29uZCBkb3Nlc1wiLFxuICAgICAgICAgICAgLy8gVE9ETzogdGhpcyB1bm5lY2Vzc2FyeSBpbXByZWNpc2VseSBiZWNhdXNlIGl0IGRvZXMgbm90IHRha2UgdmFjY2luZXMgaW50byBhY2NvdW50IHdoaWNoIHJlcXVpcmVzIG9ubHkgb25lIGRvc2VcbiAgICAgICAgICAgIGRheXM6IChwb3B1bGF0aW9uICogMC43IC0gZC50b3RhbFBlb3BsZUZ1bGx5VmFjY2luYXRlZCkgLyBkLmF2ZXJhZ2VTZWNvbmREb3NlcyxcbiAgICAgICAgICAgIG1lYW5pbmdmdWw6IHNlY29uZERvc2VNZWFuaW5nZnVsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRpdGxlOiBcIkZ1bGx5IHZhY2NpbmF0ZWRcIixcbiAgICAgICAgICAgIHN1YnRpdGxlOiBcImJhc2VkIG9uIHRoZSA3LWRheSBhdmVyYWdlIG9mIHRvdGFsIGRvc2VzIGFuZCByZW1haW5pbmcgb3ZlcmFsbCBkb3Nlc1wiLFxuICAgICAgICAgICAgLy8gVE9ETzogdGhpcyB1bm5lY2Vzc2FyeSBpbXByZWNpc2VseSBiZWNhdXNlIGl0IGRvZXMgbm90IHRha2UgdmFjY2luZXMgaW50byBhY2NvdW50IHdoaWNoIHJlcXVpcmVzIG9ubHkgb25lIGRvc2VcbiAgICAgICAgICAgIGRheXM6IChwb3B1bGF0aW9uICogMiAtIGQudG90YWxWYWNjaW5lRG9zZXMpIC8gZC5hdmVyYWdlRG9zZXMsXG4gICAgICAgICAgICBtZWFuaW5nZnVsOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRpdGxlOiBcIkZ1bGx5IHZhY2NpbmF0ZWRcIixcbiAgICAgICAgICAgIHN1YnRpdGxlOiBcImJhc2VkIG9uIHRoZSBzZWNvbmQgZG9zZSA3LWRheSBhdmVyYWdlIGFuZCByZW1haW5pbmcgc2Vjb25kIGRvc2VzXCIsXG4gICAgICAgICAgICBkYXlzOiAocG9wdWxhdGlvbiAtIGQudG90YWxQZW9wbGVGdWxseVZhY2NpbmF0ZWQpIC8gZC5hdmVyYWdlU2Vjb25kRG9zZXMsXG4gICAgICAgICAgICBtZWFuaW5nZnVsOiBzZWNvbmREb3NlTWVhbmluZ2Z1bFxuICAgICAgICB9LFxuICAgIF07XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsIlxuaW1wb3J0IHtcbiAgICBDaGFydCxcbiAgICBBcmNFbGVtZW50LFxuICAgIExpbmVFbGVtZW50LFxuICAgIEJhckVsZW1lbnQsXG4gICAgUG9pbnRFbGVtZW50LFxuICAgIEJhckNvbnRyb2xsZXIsXG4gICAgTGluZUNvbnRyb2xsZXIsXG4gICAgTGluZWFyU2NhbGUsXG4gICAgVGltZVNjYWxlLFxuICAgIFRpbWVTZXJpZXNTY2FsZSxcbiAgICBDYXRlZ29yeVNjYWxlLFxuICAgIEZpbGxlcixcbiAgICBMZWdlbmQsXG4gICAgVGl0bGUsXG4gICAgVG9vbHRpcCxcbiAgICBDaGFydENvbmZpZ3VyYXRpb24sXG4gICAgQ2hhcnREYXRhc2V0IH0gZnJvbSAnY2hhcnQuanMnO1xuaW1wb3J0IE5hbm8sIHsgQ29tcG9uZW50IH0gZnJvbSAnbmFuby1qc3gnO1xuXG5DaGFydC5yZWdpc3RlcihcbiAgICBBcmNFbGVtZW50LFxuICAgIExpbmVFbGVtZW50LFxuICAgIEJhckVsZW1lbnQsXG4gICAgUG9pbnRFbGVtZW50LFxuICAgIEJhckNvbnRyb2xsZXIsXG4gICAgTGluZUNvbnRyb2xsZXIsXG4gICAgTGluZWFyU2NhbGUsXG4gICAgVGltZVNjYWxlLFxuICAgIFRpbWVTZXJpZXNTY2FsZSxcbiAgICBDYXRlZ29yeVNjYWxlLFxuICAgIEZpbGxlcixcbiAgICBMZWdlbmQsXG4gICAgVGl0bGUsXG4gICAgVG9vbHRpcFxuKTtcblxuXG5leHBvcnQgaW50ZXJmYWNlIENoYXJ0UHJvcHMge1xuICAgIHRpdGxlOiBzdHJpbmcsXG4gICAgc3VidGl0bGU/OiBzdHJpbmcsXG4gICAgcmVtYXJrPzogc3RyaW5nLFxuICAgIGxhYmVsczogc3RyaW5nW10sXG4gICAgeVRpdGxlOiBzdHJpbmcsXG4gICAgeFRpdGxlPzogc3RyaW5nLFxuICAgIGRhdGFzZXRzOiBDaGFydERhdGFzZXRbXVxufVxuXG5leHBvcnQgY2xhc3MgQ2hhcnRDb21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQ8Q2hhcnRQcm9wcz4ge1xuICAgIGNoYXJ0PzogQ2hhcnQ7XG5cbiAgICBidWlsZENoYXJ0Q29uZmlnKHA6IENoYXJ0UHJvcHMpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgICAgIGxhYmVsczogcC5sYWJlbHMsXG4gICAgICAgICAgICBkYXRhc2V0czogcC5kYXRhc2V0c1xuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGNvbmZpZzogQ2hhcnRDb25maWd1cmF0aW9uID0ge1xuICAgICAgICAgICAgdHlwZTogJ2JhcicsXG4gICAgICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNpdmU6IHRydWUsXG4gICAgICAgICAgICAgICAgYXNwZWN0UmF0aW86IHRoaXMuZ2V0QXNwZWN0UmF0aW8oKSxcbiAgICAgICAgICAgICAgICBzY2FsZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgeDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBwLnhUaXRsZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB5OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHAueVRpdGxlXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBjb25maWc7XG4gICAgfVxuXG4gICAgZ2V0QXNwZWN0UmF0aW8oKSB7XG4gICAgICAgIGlmKHdpbmRvdy5pbm5lcldpZHRoIDwgODAwICYmIHdpbmRvdy5pbm5lcldpZHRoIDwgd2luZG93LmlubmVySGVpZ2h0KSB7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXNwb25zaXZlIHVwZGF0ZSBvZiB0aGUgYXNwZWN0IHJhdGlvLCBzbyB0aGF0IHRoZSBjaGFydCBpcyByZWFkYWJsZSBvbiBzbWFsbCBkZXZpY2VzIGluIGxhbmRzY2FwZSBhbmQgcG9ydHJhaXQgbW9kZS5cbiAgICAgKi9cbiAgICB1cGRhdGVBc3BlY3RSYXRpbygpIHtcbiAgICAgICAgaWYodGhpcy5jaGFydCkge1xuICAgICAgICAgICAgdGhpcy5jaGFydC5vcHRpb25zLmFzcGVjdFJhdGlvID0gdGhpcy5nZXRBc3BlY3RSYXRpbygpO1xuICAgICAgICAgICAgdGhpcy5jaGFydC51cGRhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRyYXdDaGFydCgpIHtcbiAgICAgICAgdmFyIGRvc2VzQ3R4ID0gdGhpcy5nZXRDYW52YXMoKS5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgICBpZighZG9zZXNDdHgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGdldCBjYW52YXMgY29udGV4dC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29uZmlnID0gdGhpcy5idWlsZENoYXJ0Q29uZmlnKHRoaXMucHJvcHMpXG4gICAgICAgIHRoaXMuY2hhcnQgPSBuZXcgQ2hhcnQoZG9zZXNDdHgsIGNvbmZpZyk7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCAoKSA9PiB0aGlzLnVwZGF0ZUFzcGVjdFJhdGlvKCkpO1xuICAgIH1cblxuICAgIGdldENhbnZhcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudHNbMF0ucXVlcnlTZWxlY3RvcihcImNhbnZhc1wiKSBhcyBIVE1MQ2FudmFzRWxlbWVudDtcbiAgICB9XG5cbiAgICBkaWRNb3VudCgpIHtcbiAgICAgICAgdGhpcy5kcmF3Q2hhcnQoKTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGgyPnt0aGlzLnByb3BzLnRpdGxlfTwvaDI+XG4gICAgICAgICAgICB7dGhpcy5wcm9wcy5zdWJ0aXRsZSA/ICg8cCBjbGFzcz1cInN1YnRpdGxlXCI+e3RoaXMucHJvcHMuc3VidGl0bGV9PC9wPik6IFwiXCJ9XG4gICAgICAgICAgICA8Y2FudmFzIHdpZHRoPVwiMjAwXCIgaGVpZ2h0PVwiMTAwXCI+PC9jYW52YXM+XG4gICAgICAgICAgICB7dGhpcy5wcm9wcy5yZW1hcmsgPyAoPHAgY2xhc3M9XCJyZW1hcmtcIj48aT5SZW1hcms6PC9pPiB7dGhpcy5wcm9wcy5yZW1hcmt9PC9wPik6IFwiXCJ9XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBDaGFydERhdGFzZXQgfSBmcm9tICdjaGFydC5qcyc7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgeyBDaGFydFByb3BzIH0gZnJvbSAnLi9jaGFydCc7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuL2NvbnN0JztcbmltcG9ydCB7IE1ldGFkYXRhLCBUaW1lU2VyaWVzLCBXZWVrU3VtbWFyeSB9IGZyb20gJy4vbW9kZWwnO1xuXG5lbnVtIENoYXJ0Q29sb3JzIHtcbiAgICBCbHVlID0gXCIyNSwgMTMwLCAxOTZcIixcbiAgICBEYXJrUmVkID0gXCIxNDMsIDAsIDVcIixcbiAgICBSZWQgPSBcIjI1NSwgODksIDk0XCIsXG4gICAgWWVsbG93ID0gXCIyNTUsIDIwMiwgNThcIixcbiAgICBHcmVlbiA9IFwiMTM4LCAyMDEsIDM4XCIsXG4gICAgUHVycGxlID0gXCIxMDYsIDc2LCAxNDdcIixcbn1cblxuZnVuY3Rpb24gY2hhcnRDb2xvcihjOiBDaGFydENvbG9ycykge1xuICAgIHJldHVybiB7XG4gICAgICAgIGJvcmRlckNvbG9yOiBgcmdiYSgke2N9LCAxKWAsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogYHJnYmEoJHtjfSwgMC40KWAsXG4gICAgfVxufVxuXG5jb25zdCB0c0xhYmVscyA9ICh0czogVGltZVNlcmllcykgPT4gdHMubWFwKHQgPT4gbW9tZW50KHQuZGF0ZSkuZm9ybWF0KFwiZGRkLCBNTU0gRERcIikpO1xuXG5mdW5jdGlvbiBjTGluZUNoYXJ0KGxhYmVsOiBzdHJpbmcsIGRhdGE6IG51bWJlcltdLCBjb2xvcjogQ2hhcnRDb2xvcnMpOiBDaGFydERhdGFzZXQge1xuICAgIHJldHVybiB7XG4gICAgICAgIGxhYmVsLFxuICAgICAgICBkYXRhLFxuICAgICAgICAuLi5jaGFydENvbG9yKGNvbG9yKSxcbiAgICAgICAgZmlsbDogZmFsc2UsXG4gICAgICAgIHRlbnNpb246IDAuNCxcbiAgICAgICAgdHlwZTogJ2xpbmUnXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gbGluZUNoYXJ0KGxhYmVsOiBzdHJpbmcsIGRhdGE6IG51bWJlcltdLCBjb2xvcjogQ2hhcnRDb2xvcnMpOiBDaGFydERhdGFzZXQge1xuICAgIHJldHVybiB7XG4gICAgICAgIGxhYmVsLFxuICAgICAgICBkYXRhLFxuICAgICAgICAuLi5jaGFydENvbG9yKGNvbG9yKSxcbiAgICAgICAgdHlwZTogJ2xpbmUnXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gYmFyQ2hhcnQobGFiZWw6IHN0cmluZywgZGF0YTogbnVtYmVyW10sIGNvbG9yOiBDaGFydENvbG9ycyk6IENoYXJ0RGF0YXNldCB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbGFiZWwsXG4gICAgICAgIGRhdGEsXG4gICAgICAgIC4uLmNoYXJ0Q29sb3IoY29sb3IpLFxuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFZhY2NDaGFydENvbmZpZyh0czogVGltZVNlcmllcyk6IENoYXJ0UHJvcHMge1xuICAgIGNvbnN0IGRhdGFzZXRzOiBDaGFydERhdGFzZXRbXSA9IFtcbiAgICAgICAgY0xpbmVDaGFydChcIjctZGF5IEF2ZXJhZ2UgVmFjY2luYXRpb25zXCIsIHRzLm1hcCh0ID0+IHQuYXZlcmFnZURvc2VzKSwgQ2hhcnRDb2xvcnMuUHVycGxlKSxcbiAgICAgICAgY0xpbmVDaGFydChcIjctZGF5IEF2ZXJhZ2UgRmlyc3QgRG9zZVwiLCB0cy5tYXAodCA9PiB0LmF2ZXJhZ2VGaXJzdERvc2VzKSwgQ2hhcnRDb2xvcnMuQmx1ZSksXG4gICAgICAgIGNMaW5lQ2hhcnQoXCI3LWRheSBBdmVyYWdlIFNlY29uZCBEb3NlXCIsIHRzLm1hcCh0ID0+IHQuYXZlcmFnZVNlY29uZERvc2VzKSwgQ2hhcnRDb2xvcnMuR3JlZW4pLFxuICAgICAgICBiYXJDaGFydChcIkRhaWx5IFZhY2NpbmF0aW9uc1wiLCB0cy5tYXAodCA9PiB0LnBlb3BsZVZhY2NpbmF0ZWQpLCBDaGFydENvbG9ycy5ZZWxsb3cpLFxuICAgIF07XG5cbiAgICByZXR1cm4ge1xuICAgICAgICB0aXRsZTogXCJWYWNjaW5hdGlvbnNcIixcbiAgICAgICAgbGFiZWxzOiB0c0xhYmVscyh0cyksXG4gICAgICAgIHlUaXRsZTogXCJOdW1iZXIgb2YgVmFjY2luYXRpb25zXCIsXG4gICAgICAgIGRhdGFzZXRzXG4gICAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldERvc2VzQ2hhcnRDb25maWcodHM6IFRpbWVTZXJpZXMsIG1ldGFkYXRhOiBNZXRhZGF0YSkge1xuICAgIGNvbnN0IGRhdGFzZXRzOiBDaGFydERhdGFzZXRbXSA9IFtcbiAgICAgICAgY0xpbmVDaGFydChcIkF2YWlsYWJsZSBEb3Nlc1wiLCB0cy5tYXAodCA9PiB0LmRvc2VzQXZhaWxhYmxlKSwgQ2hhcnRDb2xvcnMuRGFya1JlZCksXG4gICAgICAgIGJhckNoYXJ0KFwiRGFpbHkgRGVsaXZlcmllc1wiLCB0cy5tYXAodCA9PiB0LmRvc2VzRGVsaXZlcmVkKSwgQ2hhcnRDb2xvcnMuUmVkKSxcbiAgICBdO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgdGl0bGU6IFwiRGVsaXZlcmllcyBvZiBEb3Nlc1wiLFxuICAgICAgICByZW1hcms6IGBEZWxpdmVyaWVzIHdpbGwgYmUgdXBkYXRlZCBvbiBNb25kYXlzIG9ubHkuIFRoZSBsYXN0IHVwZGF0ZSB3YXMgJHttZXRhZGF0YS5kZWxpdmVyeUxhc3RVcGRhdGVkLmZyb21Ob3coKX0uYCxcbiAgICAgICAgbGFiZWxzOiB0c0xhYmVscyh0cyksXG4gICAgICAgIHlUaXRsZTogXCJOdW1iZXIgb2YgRG9zZXNcIixcbiAgICAgICAgZGF0YXNldHNcbiAgICB9O1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRXZWVrbHlDaGFydENvbmZpZyh3czogV2Vla1N1bW1hcnlbXSkge1xuICAgIGNvbnN0IGRhdGFzZXRzOiBDaGFydERhdGFzZXRbXSA9IFtcbiAgICAgICAgbGluZUNoYXJ0KFwiUGVvcGxlIFZhY2NpbmF0ZWRcIiwgd3MubWFwKHQgPT4gdC5wZW9wbGVWYWNjaW5hdGVkKSwgQ2hhcnRDb2xvcnMuUHVycGxlKSxcbiAgICAgICAgbGluZUNoYXJ0KFwiRmlyc3QgRG9zZVwiLCB3cy5tYXAodCA9PiB0LnBlb3BsZUZpcnN0RG9zZSksIENoYXJ0Q29sb3JzLkdyZWVuKSxcbiAgICAgICAgbGluZUNoYXJ0KFwiU2Vjb25kIERvc2VcIiwgd3MubWFwKHQgPT4gdC5wZW9wbGVTZWNvbmREb3NlKSwgQ2hhcnRDb2xvcnMuQmx1ZSksXG4gICAgICAgIGJhckNoYXJ0KFwiRG9zZXMgRGVsaXZlcmVkXCIsIHdzLm1hcCh0ID0+IHQuZG9zZXNEZWxpdmVyZWQpLCBDaGFydENvbG9ycy5SZWQpLFxuICAgIF07XG5cbiAgICByZXR1cm4ge1xuICAgICAgICB0aXRsZTogXCJXZWVrbHkgVmFjY2luYXRpb25zIGFuZCBEZWxpdmVyaWVzXCIsXG4gICAgICAgIGxhYmVsczogd3MubWFwKHcgPT4gbW9tZW50KHcuZGF0ZSkuZm9ybWF0KFwiV1wiKSksXG4gICAgICAgIHlUaXRsZTogXCJOdW1iZXIgb2YgRG9zZXNcIixcbiAgICAgICAgeFRpdGxlOiBcIklTTyBXZWVrXCIsXG4gICAgICAgIGRhdGFzZXRzXG4gICAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEVzdGltYXRpb25DaGFydENvbmZpZyh0czogVGltZVNlcmllcyk6IENoYXJ0UHJvcHMge1xuICAgIGNvbnN0IHBvcHVsYXRpb24gPSBjb25maWcucG9wdWxhdGlvbjtcbiAgICB0cyA9IHRzLmZpbHRlcihwID0+IHAuZGF0ZS5pc0FmdGVyKG1vbWVudChcIjIwMjEtMDUtMTRcIikpKSAvLyB3YXMgMDUtMDFcblxuICAgIC8vIFRPRE86IEltcG9ydCBmcm9tIGNhbGN1bGF0aW9uP1xuICAgIGNvbnN0IGRhdGFzZXRzOiBDaGFydERhdGFzZXRbXSA9IFtcbiAgICAgICAgY0xpbmVDaGFydChcIjcwJSBmaXJzdCBkb3NlIGFkbWluaXN0ZXJlZFwiLCB0cy5tYXAoZCA9PiAocG9wdWxhdGlvbiAgKiAwLjcgIC0gZC50b3RhbFBlb3BsZUZpcnN0RG9zZSkgLyBkLmF2ZXJhZ2VGaXJzdERvc2VzKSwgQ2hhcnRDb2xvcnMuUHVycGxlKSxcbiAgICAgICAgY0xpbmVDaGFydChcIjcwJSBmdWxseSB2YWNjaW5hdGVkXCIsIHRzLm1hcChkID0+IChwb3B1bGF0aW9uICogMC43IC0gZC50b3RhbFBlb3BsZUZ1bGx5VmFjY2luYXRlZCkgLyBkLmF2ZXJhZ2VTZWNvbmREb3NlcyksIENoYXJ0Q29sb3JzLkJsdWUpLFxuICAgICAgICBjTGluZUNoYXJ0KFwiRnVsbHkgdmFjY2luYXRlZFwiLCB0cy5tYXAoZCA9PiAocG9wdWxhdGlvbiAqIDIgLSBkLnRvdGFsVmFjY2luZURvc2VzKSAvIGQuYXZlcmFnZURvc2VzKSwgQ2hhcnRDb2xvcnMuR3JlZW4pLFxuICAgIF07XG5cbiAgICByZXR1cm4ge1xuICAgICAgICB0aXRsZTogXCJSZW1haW5pbmcgVmFjY2luYXRpb24gVGltZSBFc3RpbWF0aW9uc1wiLFxuICAgICAgICBsYWJlbHM6IHRzTGFiZWxzKHRzKSxcbiAgICAgICAgeVRpdGxlOiBcIkRheXNcIixcbiAgICAgICAgZGF0YXNldHNcbiAgICB9O1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRXZWVrbHlDaGFydEJ5VmFjY2luZUNvbmZpZyh3czogV2Vla1N1bW1hcnlbXSkge1xuICAgIGNvbnN0IGRhdGFzZXRzOiBDaGFydERhdGFzZXRbXSA9IFtcbiAgICAgICAgYmFyQ2hhcnQoXCJCaW9OVGVjaC9QZml6ZXJcIiwgd3MubWFwKHQgPT4gdC5jb21pcm5hdHlEb3Nlc0RlbGlyZWQpLCBDaGFydENvbG9ycy5QdXJwbGUpLFxuICAgICAgICBiYXJDaGFydChcIkFzdHJhWmVuZWNhXCIsIHdzLm1hcCh0ID0+IHQuYXN0cmFEb3Nlc0RlbGl2ZXJlZCksIENoYXJ0Q29sb3JzLkdyZWVuKSxcbiAgICAgICAgYmFyQ2hhcnQoXCJNb2Rlcm5hXCIsIHdzLm1hcCh0ID0+IHQubW9kZXJuYURvc2VzRGVsaXZlcmVkKSwgQ2hhcnRDb2xvcnMuQmx1ZSksXG4gICAgICAgIGJhckNoYXJ0KFwiSm9obnNvbiAmIEpvaG5zb25cIiwgd3MubWFwKHQgPT4gdC5qb2huc29uRG9zZXNEZWxpdmVyZWQpLCBDaGFydENvbG9ycy5SZWQpLFxuICAgIF07XG5cbiAgICByZXR1cm4ge1xuICAgICAgICB0aXRsZTogXCJXZWVrbHkgVmFjY2luZSBEZWxpdmVyaWVzXCIsXG4gICAgICAgIGxhYmVsczogd3MubWFwKHcgPT4gbW9tZW50KHcuZGF0ZSkuZm9ybWF0KFwiV1wiKSksXG4gICAgICAgIHlUaXRsZTogXCJOdW1iZXIgb2YgRG9zZXNcIixcbiAgICAgICAgeFRpdGxlOiBcIklTTyBXZWVrXCIsXG4gICAgICAgIGRhdGFzZXRzXG4gICAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFZhY2NSYXRpb0NoYXJ0Q29uZmlnKHRzOiBUaW1lU2VyaWVzKTogQ2hhcnRQcm9wcyB7XG4gICAgdHMgPSB0cy5maWx0ZXIocCA9PiBwLmRhdGUuaXNBZnRlcihtb21lbnQoXCIyMDIxLTAyLTAxXCIpKSlcbiAgICBjb25zdCBkYXRhc2V0czogQ2hhcnREYXRhc2V0W10gPSBbXG4gICAgICAgIGNMaW5lQ2hhcnQoXCJSYXRpbyBvZiBBZG1pbmlzdGVyZWQgRG9zZXMgb24gdGhhdCBEYXlcIixcbiAgICAgICAgICAgIHRzLm1hcCh0ID0+IHQucGVvcGxlRmlyc3REb3NlIC8gdC5wZW9wbGVTZWNvbmREb3NlKSxcbiAgICAgICAgICAgIENoYXJ0Q29sb3JzLlB1cnBsZSksXG5cbiAgICAgICAgICAgIGNMaW5lQ2hhcnQoXCJSYXRpbyBvbiBXZWVrbHkgQXZlcmFnZSAoU21vb3RoZWQgUmF0aW8pXCIsXG4gICAgICAgICAgICB0cy5tYXAodCA9PiB0LmF2ZXJhZ2VGaXJzdERvc2VzIC8gdC5hdmVyYWdlU2Vjb25kRG9zZXMpLFxuICAgICAgICAgICAgQ2hhcnRDb2xvcnMuWWVsbG93KSxcbiAgICBdO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgdGl0bGU6IFwiUmF0aW8gb2YgRmlyc3QgdG8gU2Vjb25kIERvc2UgVmFjY2luYXRpb25zXCIsXG4gICAgICAgIHN1YnRpdGxlOiBcIk51bWJlciBvZiBwZW9wbGUgd2hvIHJlY2VpdmVkIHRoZWlyIGZpcnN0IGRvc2UgZm9yIGV2ZXJ5IHNlY29uZCBkb3NlIGFkbWluaXN0ZXJlZC5cIixcbiAgICAgICAgbGFiZWxzOiB0c0xhYmVscyh0cyksXG4gICAgICAgIHlUaXRsZTogXCJSYXRpb1wiLFxuICAgICAgICBkYXRhc2V0c1xuICAgIH07XG59IiwiXG5leHBvcnQgY29uc3QgY29uZmlnID0ge1xuICAgIGRhdGFQYXRoOiBcImh0dHBzOi8vaW1wZmRhc2hib2FyZC5kZS9zdGF0aWMvZGF0YVwiLFxuICAgIG1ldGFkYXRhUGF0aDogXCJtZXRhZGF0YS5qc29uXCIsXG4gICAgcG9wdWxhdGlvbjogODMxNjY3MTFcbn07XG5cbmV4cG9ydCBlbnVtIERhdGFTb3VyY2Uge1xuICAgIFZhY2NpbmF0aW9uc1RpbWVTZXJpZXMgPSBcImdlcm1hbnlfdmFjY2luYXRpb25zX3RpbWVzZXJpZXNfdjJcIixcbiAgICBEZWxpdmVyaWVzVGltZVNlcmllcyA9IFwiZ2VybWFueV9kZWxpdmVyaWVzX3RpbWVzZXJpZXNfdjJcIixcbn1cblxuZGVjbGFyZSB2YXIgX19CVUlMRElORk9fX186IGFueTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEJ1aWxkSW5mbygpIHtcbiAgICByZXR1cm4gX19CVUlMRElORk9fX187XG59XG4iLCJpbXBvcnQgeyBmZXRjaE1ldGFkYXRhLCBsb2FkRGVsaXZlcnlUaW1lU2VyaWVzLCBsb2FkVmFjY2luYXRpb25UaW1lU2VyaWVzIH0gZnJvbSAnLi9sb2FkZXInO1xuaW1wb3J0IHsgZ2V0Q3VycmVudERhdGEsIGNhbGN1bGF0ZVRhYmxlLCBjb21iaW5lVGltZVNlcmllcywgY2FsY3VsYXRlQXZlcmFnZXMsIGNhbGN1bGF0ZVdlZWtseURhdGEgfSBmcm9tICcuL2NhbGN1bGF0aW9uJztcbmltcG9ydCB7IHJlbmRlciB9IGZyb20gJy4vcmVuZGVyJztcbmltcG9ydCB7IGdldERvc2VzQ2hhcnRDb25maWcsIGdldFZhY2NDaGFydENvbmZpZywgZ2V0V2Vla2x5Q2hhcnRDb25maWcsIGdldEVzdGltYXRpb25DaGFydENvbmZpZywgZ2V0V2Vla2x5Q2hhcnRCeVZhY2NpbmVDb25maWcsIGdldFZhY2NSYXRpb0NoYXJ0Q29uZmlnIH0gZnJvbSAnLi9jaGFydENvbmZpZ3MnO1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0IHsgZ2V0QnVpbGRJbmZvIH0gZnJvbSAnLi9jb25zdCc7XG5pbXBvcnQgeyBsb2cgfSBmcm9tICcuL3V0aWwnO1xuXG5hc3luYyBmdW5jdGlvbiBtYWluKCkge1xuICAgIGNvbnNvbGUubG9nKFwiQnVpbGQgSW5mbzpcIixnZXRCdWlsZEluZm8oKSk7XG4gICAgLy8gQXN5bmMgbG9hZCBkYXRhXG4gICAgY29uc3QgW1xuICAgICAgICBsYXN0VXBkYXRlLFxuICAgICAgICB2YWNjaW5hdGlvbnNUaW1lU2VyaWVzLFxuICAgICAgICBkZWxpdmVyeVRpbWVTZXJpZXNcbiAgICBdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICBmZXRjaE1ldGFkYXRhKCksXG4gICAgICAgIGxvYWRWYWNjaW5hdGlvblRpbWVTZXJpZXMoKSxcbiAgICAgICAgbG9hZERlbGl2ZXJ5VGltZVNlcmllcygpXG4gICAgXSk7XG5cbiAgICBjb25zdCBjb21iaW5lZFRpbWVTZXJpZXMgPSBjb21iaW5lVGltZVNlcmllcyh2YWNjaW5hdGlvbnNUaW1lU2VyaWVzLCBkZWxpdmVyeVRpbWVTZXJpZXMpO1xuICAgIGNvbnN0IHRpbWVTZXJpZXMgPSBjYWxjdWxhdGVBdmVyYWdlcyhjb21iaW5lZFRpbWVTZXJpZXMpO1xuICAgIGNvbnN0IHdlZWtseVNlcmllcyA9IGNhbGN1bGF0ZVdlZWtseURhdGEodGltZVNlcmllcyk7XG5cbiAgICBjb25zdCBkID0gZ2V0Q3VycmVudERhdGEodGltZVNlcmllcyk7XG5cbiAgICByZW5kZXIoe1xuICAgICAgICBsYXN0VXBkYXRlOiBsYXN0VXBkYXRlLFxuICAgICAgICByZW1haW5pbmdWYWNjVGltZTogY2FsY3VsYXRlVGFibGUoZCksXG4gICAgICAgIGNoYXJ0Q29uZmlndXJhdGlvbnM6IFtcbiAgICAgICAgICAgIGdldFZhY2NDaGFydENvbmZpZyh0aW1lU2VyaWVzKSxcbiAgICAgICAgICAgIGdldFdlZWtseUNoYXJ0Q29uZmlnKHdlZWtseVNlcmllcyksXG4gICAgICAgICAgICBnZXRXZWVrbHlDaGFydEJ5VmFjY2luZUNvbmZpZyh3ZWVrbHlTZXJpZXMpLFxuICAgICAgICAgICAgZ2V0RG9zZXNDaGFydENvbmZpZyh0aW1lU2VyaWVzLCBsYXN0VXBkYXRlKSxcbiAgICAgICAgICAgIGdldEVzdGltYXRpb25DaGFydENvbmZpZyh0aW1lU2VyaWVzKSxcbiAgICAgICAgICAgIGdldFZhY2NSYXRpb0NoYXJ0Q29uZmlnKHRpbWVTZXJpZXMpXG4gICAgICAgIF1cbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gZXJyb3JIYW5kbGVyKHJlYXNvbjogYW55KSB7XG4gICAgbG9nKFwibWFpbiBmYWlsZWQuXCIsIHJlYXNvbik7XG4gICAgY29uc3QgY29udGVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY29udGVudFwiKTtcbiAgICBpZiAoY29udGVudCkge1xuICAgICAgICBjb25zdCBlcnJvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICAgICAgICBlcnJvci5jbGFzc05hbWUgPSBcImVycm9yXCI7XG4gICAgICAgIGVycm9yLmlubmVyVGV4dCA9IFwiU29ycnksIGFuIGVycm9yIG9jY3VycmVkIHdoaWxlIGxvYWRpbmcgZGF0YS4gUGxlYXNlIGNvbWUgYmFjayBsYXRlci5cIjtcbiAgICAgICAgY29udGVudC5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgY29udGVudC5hcHBlbmRDaGlsZChlcnJvcik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzdWNjZXNzKCkge1xuICAgIGNvbnN0IGRpZmYgPSBtb21lbnQoKS5kaWZmKHN0YXJ0VGltZSk7XG4gICAgbG9nKGBtYWluIGZpbmlzaGVkIGFmdGVyICR7ZGlmZn0gbXMuYCk7XG59XG5cbmNvbnN0IHN0YXJ0VGltZSA9IG1vbWVudCgpO1xubWFpbigpXG4gICAgLnRoZW4oKCkgPT4gc3VjY2VzcygpKVxuICAgIC5jYXRjaCgocmVhc29uKSA9PiBlcnJvckhhbmRsZXIocmVhc29uKSk7XG5cbiIsIlxuaW1wb3J0IHBhcnNlIGZyb20gJ2Nzdi1wYXJzZSc7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgeyBjb25maWcsIERhdGFTb3VyY2UgfSBmcm9tICcuL2NvbnN0JztcbmltcG9ydCB7IERlbGl2ZXJ5VGltZVNlcmllc0RhdGFQb2ludCwgTWV0YWRhdGEsIFZhY2NpbmF0aW9uVGltZVNlcmllc0RhdGFQb2ludCB9IGZyb20gJy4vbW9kZWwnO1xuaW1wb3J0IHsgdGltZVNlcmllc1BvaW50U29ydCB9IGZyb20gJy4vdXRpbCc7XG5cbmFzeW5jIGZ1bmN0aW9uIGZldGNoQ1NWVGV4dChuYW1lOiBEYXRhU291cmNlKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaChgJHtjb25maWcuZGF0YVBhdGh9LyR7bmFtZX0udHN2YCwge30pO1xuICAgIGNvbnN0IGJvZHkgPSBhd2FpdCByZXMudGV4dCgpO1xuICAgIHJldHVybiBib2R5O1xufVxuXG5hc3luYyBmdW5jdGlvbiBmZXRjaENTVihuYW1lOiBEYXRhU291cmNlKTogUHJvbWlzZTxwYXJzZS5QYXJzZXI+IHtcbiAgICBjb25zdCBjc3YgPSBhd2FpdCBmZXRjaENTVlRleHQobmFtZSk7XG4gICAgcmV0dXJuIHBhcnNlKGNzdiwge1xuICAgICAgICBkZWxpbWl0ZXI6IFwiXFx0XCIsXG4gICAgICAgIGNvbHVtbnM6IHRydWVcbiAgICB9KTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZldGNoTWV0YWRhdGEoKTogUHJvbWlzZTxNZXRhZGF0YT4ge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKGAke2NvbmZpZy5kYXRhUGF0aH0vJHtjb25maWcubWV0YWRhdGFQYXRofWAsIHt9KTtcbiAgICBjb25zdCBqc29uID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgICByZXR1cm4ge1xuICAgICAgICB2YWNjaW5hdGlvbnNMYXN0VXBkYXRlZDogbW9tZW50KGpzb24udmFjY2luYXRpb25zTGFzdFVwZGF0ZWQpLnV0Y09mZnNldCgxMjApLFxuICAgICAgICBkZWxpdmVyeUxhc3RVcGRhdGVkOiBtb21lbnQoanNvbi5kZWxpdmVyeUxhc3RVcGRhdGVkKS51dGNPZmZzZXQoMTIwKSxcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsb2FkVmFjY2luYXRpb25UaW1lU2VyaWVzKCk6IFByb21pc2U8VmFjY2luYXRpb25UaW1lU2VyaWVzRGF0YVBvaW50W10+IHtcbiAgICBjb25zdCBwYXJzZXIgPSBhd2FpdCBmZXRjaENTVihEYXRhU291cmNlLlZhY2NpbmF0aW9uc1RpbWVTZXJpZXMpO1xuICAgIGNvbnN0IHRpbWVTZXJpZXM6IFZhY2NpbmF0aW9uVGltZVNlcmllc0RhdGFQb2ludFtdID0gW107XG4gICAgZm9yIGF3YWl0IChjb25zdCByZWNvcmQgb2YgcGFyc2VyKSB7XG4gICAgICAgIHRpbWVTZXJpZXMucHVzaCh7XG4gICAgICAgICAgICBkYXRlOiBtb21lbnQocmVjb3JkW1wiZGF0ZVwiXSksXG4gICAgICAgICAgICB0b3RhbFZhY2NpbmVEb3NlczogcGFyc2VJbnQocmVjb3JkW1wiZG9zZW5fa3VtdWxhdGl2XCJdKSxcbiAgICAgICAgICAgIHBlb3BsZVZhY2NpbmF0ZWQ6IHBhcnNlSW50KHJlY29yZFtcImRvc2VuX2RpZmZlcmVuel96dW1fdm9ydGFnXCJdKSxcbiAgICAgICAgICAgIHBlb3BsZUZpcnN0RG9zZTogcGFyc2VJbnQocmVjb3JkW1wiZG9zZW5fZXJzdF9kaWZmZXJlbnpfenVtX3ZvcnRhZ1wiXSksXG4gICAgICAgICAgICBwZW9wbGVTZWNvbmREb3NlOiBwYXJzZUludChyZWNvcmRbXCJkb3Nlbl96d2VpdF9kaWZmZXJlbnpfenVtX3ZvcnRhZ1wiXSksXG4gICAgICAgICAgICB0b3RhbFBlb3BsZUZpcnN0RG9zZTogcGFyc2VJbnQocmVjb3JkW1wicGVyc29uZW5fZXJzdF9rdW11bGF0aXZcIl0pLFxuICAgICAgICAgICAgdG90YWxQZW9wbGVGdWxseVZhY2NpbmF0ZWQ6IHBhcnNlSW50KHJlY29yZFtcInBlcnNvbmVuX3ZvbGxfa3VtdWxhdGl2XCJdKVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGltZVNlcmllcy5zb3J0KHRpbWVTZXJpZXNQb2ludFNvcnQpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbG9hZERlbGl2ZXJ5VGltZVNlcmllcygpOiBQcm9taXNlPERlbGl2ZXJ5VGltZVNlcmllc0RhdGFQb2ludFtdPiB7XG4gICAgY29uc3QgcGFyc2VyID0gYXdhaXQgZmV0Y2hDU1YoRGF0YVNvdXJjZS5EZWxpdmVyaWVzVGltZVNlcmllcyk7XG4gICAgY29uc3QgdGltZVNlcmllczogRGVsaXZlcnlUaW1lU2VyaWVzRGF0YVBvaW50W10gPSBbXTtcbiAgICBmb3IgYXdhaXQgKGNvbnN0IHJlY29yZCBvZiBwYXJzZXIpIHtcbiAgICAgICAgY29uc3QgZGF0ZSA9IG1vbWVudChyZWNvcmRbXCJkYXRlXCJdKTtcbiAgICAgICAgY29uc3QgdmFjY2luZU5hbWUgPSByZWNvcmRbXCJpbXBmc3RvZmZcIl07XG4gICAgICAgIGNvbnN0IGRvc2VzRGVsaXZlcmVkID0gcGFyc2VJbnQocmVjb3JkW1wiZG9zZW5cIl0pO1xuICAgICAgICBsZXQgZHAgPSB0aW1lU2VyaWVzLmZpbmQocCA9PiBwLmRhdGUuaXNTYW1lKGRhdGUpKTtcblxuICAgICAgICBpZighZHApIHtcbiAgICAgICAgICAgIGRwID0ge1xuICAgICAgICAgICAgICAgIGRhdGU6IGRhdGUsXG4gICAgICAgICAgICAgICAgZG9zZXNEZWxpdmVyZWQ6IDAsXG4gICAgICAgICAgICAgICAgYXN0cmFEb3Nlc0RlbGl2ZXJlZDogMCxcbiAgICAgICAgICAgICAgICBjb21pcm5hdHlEb3Nlc0RlbGl2ZXJlZDogMCxcbiAgICAgICAgICAgICAgICBqb2huc29uRG9zZXNEZWxpdmVyZWQ6IDAsXG4gICAgICAgICAgICAgICAgbW9kZXJuYURvc2VzRGVsaXZlcmVkOiAwXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGltZVNlcmllcy5wdXNoKGRwKTtcbiAgICAgICAgfVxuICAgICAgICBkcC5kb3Nlc0RlbGl2ZXJlZCArPSBkb3Nlc0RlbGl2ZXJlZDtcbiAgICAgICAgc3dpdGNoKHZhY2NpbmVOYW1lKSB7XG4gICAgICAgICAgICBjYXNlIFwiY29taXJuYXR5XCI6XG4gICAgICAgICAgICAgICAgZHAuY29taXJuYXR5RG9zZXNEZWxpdmVyZWQgKz0gZG9zZXNEZWxpdmVyZWQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiYXN0cmFcIjpcbiAgICAgICAgICAgICAgICBkcC5hc3RyYURvc2VzRGVsaXZlcmVkICs9IGRvc2VzRGVsaXZlcmVkO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImpvaG5zb25cIjpcbiAgICAgICAgICAgICAgICBkcC5qb2huc29uRG9zZXNEZWxpdmVyZWQgKz0gZG9zZXNEZWxpdmVyZWQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwibW9kZXJuYVwiOlxuICAgICAgICAgICAgICAgIGRwLm1vZGVybmFEb3Nlc0RlbGl2ZXJlZCArPSBkb3Nlc0RlbGl2ZXJlZDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aW1lU2VyaWVzLnNvcnQodGltZVNlcmllc1BvaW50U29ydCk7XG59IiwiaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0IE5hbm8gZnJvbSAnbmFuby1qc3gnO1xuaW1wb3J0IHsgQ2hhcnRDb21wb25lbnQsIENoYXJ0UHJvcHMgfSBmcm9tICcuL2NoYXJ0JztcbmltcG9ydCB7IE1ldGFkYXRhIH0gZnJvbSAnLi9tb2RlbCc7XG5cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXIoZGF0YTogQXBwUHJvcHMpIHtcblxuICAgIGNvbnN0IEFwcCA9IChwcm9wczogQXBwUHJvcHMpID0+IChcbiAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxwPjxiPkxhc3QgVXBkYXRlOjwvYj4ge3Byb3BzLmxhc3RVcGRhdGUudmFjY2luYXRpb25zTGFzdFVwZGF0ZWQuZm9ybWF0KFwibGxsbFwiKX0gKHtwcm9wcy5sYXN0VXBkYXRlLnZhY2NpbmF0aW9uc0xhc3RVcGRhdGVkLmZyb21Ob3coKX0pPC9wPlxuICAgICAgICAgICAgPGgyPlJlbWFpbmluZyBWYWNjaW5hdGlvbiBUaW1lIEVzdGltYXRpb25zPC9oMj5cbiAgICAgICAgICAgIDx0YWJsZT5cbiAgICAgICAgICAgICAgICA8dGhlYWQ+XG4gICAgICAgICAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Fc3RpbWF0aW9uPC90aD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5SZW1haW5pbmcgdGltZTwvdGg+XG4gICAgICAgICAgICAgICAgICAgICAgICA8dGg+RGF0ZTwvdGg+XG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICAgICAgPC90aGVhZD5cbiAgICAgICAgICAgICAgICA8dGJvZHk+XG4gICAgICAgICAgICAgICAgICAgIHtwcm9wcy5yZW1haW5pbmdWYWNjVGltZS5tYXAoKHQpID0+IChcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz17dC5tZWFuaW5nZnVsP1wiXCI6XCJncmV5XCJ9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57dC50aXRsZX17dC5tZWFuaW5nZnVsP1wiXCI6XCIqXCJ9PGJyLz48c21hbGw+e3Quc3VidGl0bGV9PC9zbWFsbD48L3RkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57TWF0aC5yb3VuZCh0LmRheXMpfSBkYXlzPGJyLz48c21hbGw+b3Ige01hdGguZmxvb3IodC5kYXlzIC8gMzApfSBtb250aHMgYW5kIHtNYXRoLnJvdW5kKHQuZGF5cyAtIDMwKk1hdGguZmxvb3IodC5kYXlzIC8gMzApKX0gZGF5czwvc21hbGw+PC90ZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+e21vbWVudCgpLmFkZCh0LmRheXMsICdkYXlzJykuZm9ybWF0KFwiZGRkLCBsbFwiKX08L3RkPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICAgICAgPC90Ym9keT5cbiAgICAgICAgICAgIDwvdGFibGU+XG4gICAgICAgICAgICA8cCBjbGFzcz1cInJlbWFya1wiPjxpPlJlbWFyazo8L2k+IFRoZSBjYWxjdWxhdGlvbiBvZiB0aGUgbGlzdGVkIGRhdGVzIGFyZSBiYXNlZCBvbiB0aGUgYXNzdW1wdGlvbiB0aGF0IHRoZSA3LWRheSBhdmVyYWdlcyByZW1haW4gc3RlYWR5LiBJdCBkb2VzIG5vdCB0YWtlIG90aGVyIGZhY3RvcnMgaW50byBhY2NvdW50LCBzdWNoIGFzIGFnZSByZXN0cmljdGlvbnMgb2YgdmFjY2luZXMuIHsocHJvcHMucmVtYWluaW5nVmFjY1RpbWUuZXZlcnkodCA9PiAhdC5tZWFuaW5nZnVsKSk/XCJcIjo8c21hbGw+PGJyLz4qIFRoaXMgZXN0aW1hdGlvbiBpcyBsaWtlbHkgbm90IG1lYW5pbmdmdWwgYXQgdGhlIG1vbWVudCBkdWUgdG8gdGhlIGhpZ2ggbnVtYmVyIG9mIHNlY29uZCBkb3NlcyBpbiBjb21wYXJpc29uIHRoZSBudW1iZXIgb2YgZmlyc3QgZG9zZXMuPC9zbWFsbD59PC9wPlxuXG4gICAgICAgICAgICB7cHJvcHMuY2hhcnRDb25maWd1cmF0aW9ucy5tYXAoKGMpID0+IChcbiAgICAgICAgICAgICAgICA8Q2hhcnRDb21wb25lbnQgey4uLmN9PjwvQ2hhcnRDb21wb25lbnQ+XG4gICAgICAgICAgICApKX1cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcblxuICAgIE5hbm8ucmVuZGVyKFxuICAgICAgICBBcHAoZGF0YSksXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY29udGVudFwiKVxuICAgICk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVtYWluaW5nVmFjY2luYXRpb25UaW1lIHtcbiAgICB0aXRsZTogc3RyaW5nLFxuICAgIHN1YnRpdGxlOiBzdHJpbmcsXG4gICAgZGF5czogbnVtYmVyLFxuICAgIG1lYW5pbmdmdWw6IGJvb2xlYW5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBBcHBQcm9wcyB7XG4gICAgbGFzdFVwZGF0ZTogTWV0YWRhdGEsXG4gICAgcmVtYWluaW5nVmFjY1RpbWU6IFJlbWFpbmluZ1ZhY2NpbmF0aW9uVGltZVtdLFxuICAgIGNoYXJ0Q29uZmlndXJhdGlvbnM6IENoYXJ0UHJvcHNbXSxcbn0iLCJpbXBvcnQgeyBnZXRCdWlsZEluZm8gfSBmcm9tIFwiLi9jb25zdFwiO1xuaW1wb3J0IHsgQmFzZVRpbWVTZXJpZXNEYXRhUG9pbnQgfSBmcm9tIFwiLi9tb2RlbFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gYXZlcmFnZShhcnI6IG51bWJlcltdKSB7XG4gICAgcmV0dXJuIGFyci5yZWR1Y2UoKHAsIGMpID0+IHAgKyBjLCAwKSAvIGFyci5sZW5ndGg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0aW1lU2VyaWVzUG9pbnRTb3J0KGE6IEJhc2VUaW1lU2VyaWVzRGF0YVBvaW50LCBiOiBCYXNlVGltZVNlcmllc0RhdGFQb2ludCkge1xuICAgIHJldHVybiBhLmRhdGUuZGlmZihiLmRhdGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9nKG1zZzogc3RyaW5nLCBlcnI6IEVycm9yIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkKSB7XG4gICAgY29uc29sZS5sb2cobXNnLCBlcnIpO1xuICAgIGNvbnN0IGIgPSBnZXRCdWlsZEluZm8oKTtcbiAgICBpZihiLmxvZ1RhcmdldCkge1xuICAgICAgICBmZXRjaChgaHR0cHM6Ly8ke2IubG9nVGFyZ2V0fS9hcGkvbG9naHR0cHRyaWdnZXJgLCB7bWV0aG9kOiAnUE9TVCcsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtidWlsZDogYiwgbXNnLCBlcnJvcjogZXJyPy5zdGFjayB9KSwgbW9kZTogJ2NvcnMnIH0pXG4gICAgfVxufSJdLCJzb3VyY2VSb290IjoiIn0=