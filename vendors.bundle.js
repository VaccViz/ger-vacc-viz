/*! For license information please see vendors.bundle.js.LICENSE.txt */
(self.webpackChunkger_vac_viz=self.webpackChunkger_vac_viz||[]).push([[216],{9742:(e,t)=>{"use strict";t.byteLength=function(e){var t=d(e),n=t[0],i=t[1];return 3*(n+i)/4-i},t.toByteArray=function(e){var t,n,r=d(e),a=r[0],o=r[1],l=new s(function(e,t,n){return 3*(t+n)/4-n}(0,a,o)),u=0,h=o>0?a-4:a;for(n=0;n<h;n+=4)t=i[e.charCodeAt(n)]<<18|i[e.charCodeAt(n+1)]<<12|i[e.charCodeAt(n+2)]<<6|i[e.charCodeAt(n+3)],l[u++]=t>>16&255,l[u++]=t>>8&255,l[u++]=255&t;return 2===o&&(t=i[e.charCodeAt(n)]<<2|i[e.charCodeAt(n+1)]>>4,l[u++]=255&t),1===o&&(t=i[e.charCodeAt(n)]<<10|i[e.charCodeAt(n+1)]<<4|i[e.charCodeAt(n+2)]>>2,l[u++]=t>>8&255,l[u++]=255&t),l},t.fromByteArray=function(e){for(var t,i=e.length,s=i%3,r=[],a=16383,o=0,d=i-s;o<d;o+=a)r.push(l(e,o,o+a>d?d:o+a));return 1===s?(t=e[i-1],r.push(n[t>>2]+n[t<<4&63]+"==")):2===s&&(t=(e[i-2]<<8)+e[i-1],r.push(n[t>>10]+n[t>>4&63]+n[t<<2&63]+"=")),r.join("")};for(var n=[],i=[],s="undefined"!=typeof Uint8Array?Uint8Array:Array,r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,o=r.length;a<o;++a)n[a]=r[a],i[r.charCodeAt(a)]=a;function d(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function l(e,t,i){for(var s,r,a=[],o=t;o<i;o+=3)s=(e[o]<<16&16711680)+(e[o+1]<<8&65280)+(255&e[o+2]),a.push(n[(r=s)>>18&63]+n[r>>12&63]+n[r>>6&63]+n[63&r]);return a.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},8764:(e,t,n)=>{"use strict";const i=n(9742),s=n(645),r="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;t.Buffer=d,t.SlowBuffer=function(e){return+e!=e&&(e=0),d.alloc(+e)},t.INSPECT_MAX_BYTES=50;const a=2147483647;function o(e){if(e>a)throw new RangeError('The value "'+e+'" is invalid for option "size"');const t=new Uint8Array(e);return Object.setPrototypeOf(t,d.prototype),t}function d(e,t,n){if("number"==typeof e){if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return h(e)}return l(e,t,n)}function l(e,t,n){if("string"==typeof e)return function(e,t){if("string"==typeof t&&""!==t||(t="utf8"),!d.isEncoding(t))throw new TypeError("Unknown encoding: "+t);const n=0|f(e,t);let i=o(n);const s=i.write(e,t);return s!==n&&(i=i.slice(0,s)),i}(e,t);if(ArrayBuffer.isView(e))return function(e){if(G(e,Uint8Array)){const t=new Uint8Array(e);return _(t.buffer,t.byteOffset,t.byteLength)}return c(e)}(e);if(null==e)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(G(e,ArrayBuffer)||e&&G(e.buffer,ArrayBuffer))return _(e,t,n);if("undefined"!=typeof SharedArrayBuffer&&(G(e,SharedArrayBuffer)||e&&G(e.buffer,SharedArrayBuffer)))return _(e,t,n);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');const i=e.valueOf&&e.valueOf();if(null!=i&&i!==e)return d.from(i,t,n);const s=function(e){if(d.isBuffer(e)){const t=0|m(e.length),n=o(t);return 0===n.length||e.copy(n,0,0,t),n}return void 0!==e.length?"number"!=typeof e.length||K(e.length)?o(0):c(e):"Buffer"===e.type&&Array.isArray(e.data)?c(e.data):void 0}(e);if(s)return s;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return d.from(e[Symbol.toPrimitive]("string"),t,n);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function u(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function h(e){return u(e),o(e<0?0:0|m(e))}function c(e){const t=e.length<0?0:0|m(e.length),n=o(t);for(let i=0;i<t;i+=1)n[i]=255&e[i];return n}function _(e,t,n){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(n||0))throw new RangeError('"length" is outside of buffer bounds');let i;return i=void 0===t&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,t):new Uint8Array(e,t,n),Object.setPrototypeOf(i,d.prototype),i}function m(e){if(e>=a)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a.toString(16)+" bytes");return 0|e}function f(e,t){if(d.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||G(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);const n=e.length,i=arguments.length>2&&!0===arguments[2];if(!i&&0===n)return 0;let s=!1;for(;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":return J(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return $(e).length;default:if(s)return i?-1:J(e).length;t=(""+t).toLowerCase(),s=!0}}function p(e,t,n){let i=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return O(this,t,n);case"utf8":case"utf-8":return D(this,t,n);case"ascii":return T(this,t,n);case"latin1":case"binary":return S(this,t,n);case"base64":return k(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return H(this,t,n);default:if(i)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),i=!0}}function g(e,t,n){const i=e[t];e[t]=e[n],e[n]=i}function y(e,t,n,i,s){if(0===e.length)return-1;if("string"==typeof n?(i=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),K(n=+n)&&(n=s?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(s)return-1;n=e.length-1}else if(n<0){if(!s)return-1;n=0}if("string"==typeof t&&(t=d.from(t,i)),d.isBuffer(t))return 0===t.length?-1:M(e,t,n,i,s);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?s?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):M(e,[t],n,i,s);throw new TypeError("val must be string, number or Buffer")}function M(e,t,n,i,s){let r,a=1,o=e.length,d=t.length;if(void 0!==i&&("ucs2"===(i=String(i).toLowerCase())||"ucs-2"===i||"utf16le"===i||"utf-16le"===i)){if(e.length<2||t.length<2)return-1;a=2,o/=2,d/=2,n/=2}function l(e,t){return 1===a?e[t]:e.readUInt16BE(t*a)}if(s){let i=-1;for(r=n;r<o;r++)if(l(e,r)===l(t,-1===i?0:r-i)){if(-1===i&&(i=r),r-i+1===d)return i*a}else-1!==i&&(r-=r-i),i=-1}else for(n+d>o&&(n=o-d),r=n;r>=0;r--){let n=!0;for(let i=0;i<d;i++)if(l(e,r+i)!==l(t,i)){n=!1;break}if(n)return r}return-1}function b(e,t,n,i){n=Number(n)||0;const s=e.length-n;i?(i=Number(i))>s&&(i=s):i=s;const r=t.length;let a;for(i>r/2&&(i=r/2),a=0;a<i;++a){const i=parseInt(t.substr(2*a,2),16);if(K(i))return a;e[n+a]=i}return a}function L(e,t,n,i){return q(J(t,e.length-n),e,n,i)}function v(e,t,n,i){return q(function(e){const t=[];for(let n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,i)}function w(e,t,n,i){return q($(t),e,n,i)}function Y(e,t,n,i){return q(function(e,t){let n,i,s;const r=[];for(let a=0;a<e.length&&!((t-=2)<0);++a)n=e.charCodeAt(a),i=n>>8,s=n%256,r.push(s),r.push(i);return r}(t,e.length-n),e,n,i)}function k(e,t,n){return 0===t&&n===e.length?i.fromByteArray(e):i.fromByteArray(e.slice(t,n))}function D(e,t,n){n=Math.min(e.length,n);const i=[];let s=t;for(;s<n;){const t=e[s];let r=null,a=t>239?4:t>223?3:t>191?2:1;if(s+a<=n){let n,i,o,d;switch(a){case 1:t<128&&(r=t);break;case 2:n=e[s+1],128==(192&n)&&(d=(31&t)<<6|63&n,d>127&&(r=d));break;case 3:n=e[s+1],i=e[s+2],128==(192&n)&&128==(192&i)&&(d=(15&t)<<12|(63&n)<<6|63&i,d>2047&&(d<55296||d>57343)&&(r=d));break;case 4:n=e[s+1],i=e[s+2],o=e[s+3],128==(192&n)&&128==(192&i)&&128==(192&o)&&(d=(15&t)<<18|(63&n)<<12|(63&i)<<6|63&o,d>65535&&d<1114112&&(r=d))}}null===r?(r=65533,a=1):r>65535&&(r-=65536,i.push(r>>>10&1023|55296),r=56320|1023&r),i.push(r),s+=a}return function(e){const t=e.length;if(t<=x)return String.fromCharCode.apply(String,e);let n="",i=0;for(;i<t;)n+=String.fromCharCode.apply(String,e.slice(i,i+=x));return n}(i)}t.kMaxLength=a,d.TYPED_ARRAY_SUPPORT=function(){try{const e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),d.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(d.prototype,"parent",{enumerable:!0,get:function(){if(d.isBuffer(this))return this.buffer}}),Object.defineProperty(d.prototype,"offset",{enumerable:!0,get:function(){if(d.isBuffer(this))return this.byteOffset}}),d.poolSize=8192,d.from=function(e,t,n){return l(e,t,n)},Object.setPrototypeOf(d.prototype,Uint8Array.prototype),Object.setPrototypeOf(d,Uint8Array),d.alloc=function(e,t,n){return function(e,t,n){return u(e),e<=0?o(e):void 0!==t?"string"==typeof n?o(e).fill(t,n):o(e).fill(t):o(e)}(e,t,n)},d.allocUnsafe=function(e){return h(e)},d.allocUnsafeSlow=function(e){return h(e)},d.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==d.prototype},d.compare=function(e,t){if(G(e,Uint8Array)&&(e=d.from(e,e.offset,e.byteLength)),G(t,Uint8Array)&&(t=d.from(t,t.offset,t.byteLength)),!d.isBuffer(e)||!d.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;let n=e.length,i=t.length;for(let s=0,r=Math.min(n,i);s<r;++s)if(e[s]!==t[s]){n=e[s],i=t[s];break}return n<i?-1:i<n?1:0},d.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},d.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return d.alloc(0);let n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;const i=d.allocUnsafe(t);let s=0;for(n=0;n<e.length;++n){let t=e[n];if(G(t,Uint8Array))s+t.length>i.length?(d.isBuffer(t)||(t=d.from(t)),t.copy(i,s)):Uint8Array.prototype.set.call(i,t,s);else{if(!d.isBuffer(t))throw new TypeError('"list" argument must be an Array of Buffers');t.copy(i,s)}s+=t.length}return i},d.byteLength=f,d.prototype._isBuffer=!0,d.prototype.swap16=function(){const e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let t=0;t<e;t+=2)g(this,t,t+1);return this},d.prototype.swap32=function(){const e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let t=0;t<e;t+=4)g(this,t,t+3),g(this,t+1,t+2);return this},d.prototype.swap64=function(){const e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let t=0;t<e;t+=8)g(this,t,t+7),g(this,t+1,t+6),g(this,t+2,t+5),g(this,t+3,t+4);return this},d.prototype.toString=function(){const e=this.length;return 0===e?"":0===arguments.length?D(this,0,e):p.apply(this,arguments)},d.prototype.toLocaleString=d.prototype.toString,d.prototype.equals=function(e){if(!d.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===d.compare(this,e)},d.prototype.inspect=function(){let e="";const n=t.INSPECT_MAX_BYTES;return e=this.toString("hex",0,n).replace(/(.{2})/g,"$1 ").trim(),this.length>n&&(e+=" ... "),"<Buffer "+e+">"},r&&(d.prototype[r]=d.prototype.inspect),d.prototype.compare=function(e,t,n,i,s){if(G(e,Uint8Array)&&(e=d.from(e,e.offset,e.byteLength)),!d.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===i&&(i=0),void 0===s&&(s=this.length),t<0||n>e.length||i<0||s>this.length)throw new RangeError("out of range index");if(i>=s&&t>=n)return 0;if(i>=s)return-1;if(t>=n)return 1;if(this===e)return 0;let r=(s>>>=0)-(i>>>=0),a=(n>>>=0)-(t>>>=0);const o=Math.min(r,a),l=this.slice(i,s),u=e.slice(t,n);for(let e=0;e<o;++e)if(l[e]!==u[e]){r=l[e],a=u[e];break}return r<a?-1:a<r?1:0},d.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},d.prototype.indexOf=function(e,t,n){return y(this,e,t,n,!0)},d.prototype.lastIndexOf=function(e,t,n){return y(this,e,t,n,!1)},d.prototype.write=function(e,t,n,i){if(void 0===t)i="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)i=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(n)?(n>>>=0,void 0===i&&(i="utf8")):(i=n,n=void 0)}const s=this.length-t;if((void 0===n||n>s)&&(n=s),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");i||(i="utf8");let r=!1;for(;;)switch(i){case"hex":return b(this,e,t,n);case"utf8":case"utf-8":return L(this,e,t,n);case"ascii":case"latin1":case"binary":return v(this,e,t,n);case"base64":return w(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return Y(this,e,t,n);default:if(r)throw new TypeError("Unknown encoding: "+i);i=(""+i).toLowerCase(),r=!0}},d.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const x=4096;function T(e,t,n){let i="";n=Math.min(e.length,n);for(let s=t;s<n;++s)i+=String.fromCharCode(127&e[s]);return i}function S(e,t,n){let i="";n=Math.min(e.length,n);for(let s=t;s<n;++s)i+=String.fromCharCode(e[s]);return i}function O(e,t,n){const i=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>i)&&(n=i);let s="";for(let i=t;i<n;++i)s+=Z[e[i]];return s}function H(e,t,n){const i=e.slice(t,n);let s="";for(let e=0;e<i.length-1;e+=2)s+=String.fromCharCode(i[e]+256*i[e+1]);return s}function j(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function E(e,t,n,i,s,r){if(!d.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>s||t<r)throw new RangeError('"value" argument is out of bounds');if(n+i>e.length)throw new RangeError("Index out of range")}function P(e,t,n,i,s){z(t,i,s,e,n,7);let r=Number(t&BigInt(4294967295));e[n++]=r,r>>=8,e[n++]=r,r>>=8,e[n++]=r,r>>=8,e[n++]=r;let a=Number(t>>BigInt(32)&BigInt(4294967295));return e[n++]=a,a>>=8,e[n++]=a,a>>=8,e[n++]=a,a>>=8,e[n++]=a,n}function A(e,t,n,i,s){z(t,i,s,e,n,7);let r=Number(t&BigInt(4294967295));e[n+7]=r,r>>=8,e[n+6]=r,r>>=8,e[n+5]=r,r>>=8,e[n+4]=r;let a=Number(t>>BigInt(32)&BigInt(4294967295));return e[n+3]=a,a>>=8,e[n+2]=a,a>>=8,e[n+1]=a,a>>=8,e[n]=a,n+8}function R(e,t,n,i,s,r){if(n+i>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function C(e,t,n,i,r){return t=+t,n>>>=0,r||R(e,0,n,4),s.write(e,t,n,i,23,4),n+4}function I(e,t,n,i,r){return t=+t,n>>>=0,r||R(e,0,n,8),s.write(e,t,n,i,52,8),n+8}d.prototype.slice=function(e,t){const n=this.length;(e=~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e);const i=this.subarray(e,t);return Object.setPrototypeOf(i,d.prototype),i},d.prototype.readUintLE=d.prototype.readUIntLE=function(e,t,n){e>>>=0,t>>>=0,n||j(e,t,this.length);let i=this[e],s=1,r=0;for(;++r<t&&(s*=256);)i+=this[e+r]*s;return i},d.prototype.readUintBE=d.prototype.readUIntBE=function(e,t,n){e>>>=0,t>>>=0,n||j(e,t,this.length);let i=this[e+--t],s=1;for(;t>0&&(s*=256);)i+=this[e+--t]*s;return i},d.prototype.readUint8=d.prototype.readUInt8=function(e,t){return e>>>=0,t||j(e,1,this.length),this[e]},d.prototype.readUint16LE=d.prototype.readUInt16LE=function(e,t){return e>>>=0,t||j(e,2,this.length),this[e]|this[e+1]<<8},d.prototype.readUint16BE=d.prototype.readUInt16BE=function(e,t){return e>>>=0,t||j(e,2,this.length),this[e]<<8|this[e+1]},d.prototype.readUint32LE=d.prototype.readUInt32LE=function(e,t){return e>>>=0,t||j(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},d.prototype.readUint32BE=d.prototype.readUInt32BE=function(e,t){return e>>>=0,t||j(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},d.prototype.readBigUInt64LE=X((function(e){B(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||V(e,this.length-8);const i=t+256*this[++e]+65536*this[++e]+this[++e]*2**24,s=this[++e]+256*this[++e]+65536*this[++e]+n*2**24;return BigInt(i)+(BigInt(s)<<BigInt(32))})),d.prototype.readBigUInt64BE=X((function(e){B(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||V(e,this.length-8);const i=t*2**24+65536*this[++e]+256*this[++e]+this[++e],s=this[++e]*2**24+65536*this[++e]+256*this[++e]+n;return(BigInt(i)<<BigInt(32))+BigInt(s)})),d.prototype.readIntLE=function(e,t,n){e>>>=0,t>>>=0,n||j(e,t,this.length);let i=this[e],s=1,r=0;for(;++r<t&&(s*=256);)i+=this[e+r]*s;return s*=128,i>=s&&(i-=Math.pow(2,8*t)),i},d.prototype.readIntBE=function(e,t,n){e>>>=0,t>>>=0,n||j(e,t,this.length);let i=t,s=1,r=this[e+--i];for(;i>0&&(s*=256);)r+=this[e+--i]*s;return s*=128,r>=s&&(r-=Math.pow(2,8*t)),r},d.prototype.readInt8=function(e,t){return e>>>=0,t||j(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},d.prototype.readInt16LE=function(e,t){e>>>=0,t||j(e,2,this.length);const n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},d.prototype.readInt16BE=function(e,t){e>>>=0,t||j(e,2,this.length);const n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},d.prototype.readInt32LE=function(e,t){return e>>>=0,t||j(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},d.prototype.readInt32BE=function(e,t){return e>>>=0,t||j(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},d.prototype.readBigInt64LE=X((function(e){B(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||V(e,this.length-8);const i=this[e+4]+256*this[e+5]+65536*this[e+6]+(n<<24);return(BigInt(i)<<BigInt(32))+BigInt(t+256*this[++e]+65536*this[++e]+this[++e]*2**24)})),d.prototype.readBigInt64BE=X((function(e){B(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||V(e,this.length-8);const i=(t<<24)+65536*this[++e]+256*this[++e]+this[++e];return(BigInt(i)<<BigInt(32))+BigInt(this[++e]*2**24+65536*this[++e]+256*this[++e]+n)})),d.prototype.readFloatLE=function(e,t){return e>>>=0,t||j(e,4,this.length),s.read(this,e,!0,23,4)},d.prototype.readFloatBE=function(e,t){return e>>>=0,t||j(e,4,this.length),s.read(this,e,!1,23,4)},d.prototype.readDoubleLE=function(e,t){return e>>>=0,t||j(e,8,this.length),s.read(this,e,!0,52,8)},d.prototype.readDoubleBE=function(e,t){return e>>>=0,t||j(e,8,this.length),s.read(this,e,!1,52,8)},d.prototype.writeUintLE=d.prototype.writeUIntLE=function(e,t,n,i){e=+e,t>>>=0,n>>>=0,i||E(this,e,t,n,Math.pow(2,8*n)-1,0);let s=1,r=0;for(this[t]=255&e;++r<n&&(s*=256);)this[t+r]=e/s&255;return t+n},d.prototype.writeUintBE=d.prototype.writeUIntBE=function(e,t,n,i){e=+e,t>>>=0,n>>>=0,i||E(this,e,t,n,Math.pow(2,8*n)-1,0);let s=n-1,r=1;for(this[t+s]=255&e;--s>=0&&(r*=256);)this[t+s]=e/r&255;return t+n},d.prototype.writeUint8=d.prototype.writeUInt8=function(e,t,n){return e=+e,t>>>=0,n||E(this,e,t,1,255,0),this[t]=255&e,t+1},d.prototype.writeUint16LE=d.prototype.writeUInt16LE=function(e,t,n){return e=+e,t>>>=0,n||E(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},d.prototype.writeUint16BE=d.prototype.writeUInt16BE=function(e,t,n){return e=+e,t>>>=0,n||E(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},d.prototype.writeUint32LE=d.prototype.writeUInt32LE=function(e,t,n){return e=+e,t>>>=0,n||E(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},d.prototype.writeUint32BE=d.prototype.writeUInt32BE=function(e,t,n){return e=+e,t>>>=0,n||E(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},d.prototype.writeBigUInt64LE=X((function(e,t=0){return P(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),d.prototype.writeBigUInt64BE=X((function(e,t=0){return A(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),d.prototype.writeIntLE=function(e,t,n,i){if(e=+e,t>>>=0,!i){const i=Math.pow(2,8*n-1);E(this,e,t,n,i-1,-i)}let s=0,r=1,a=0;for(this[t]=255&e;++s<n&&(r*=256);)e<0&&0===a&&0!==this[t+s-1]&&(a=1),this[t+s]=(e/r>>0)-a&255;return t+n},d.prototype.writeIntBE=function(e,t,n,i){if(e=+e,t>>>=0,!i){const i=Math.pow(2,8*n-1);E(this,e,t,n,i-1,-i)}let s=n-1,r=1,a=0;for(this[t+s]=255&e;--s>=0&&(r*=256);)e<0&&0===a&&0!==this[t+s+1]&&(a=1),this[t+s]=(e/r>>0)-a&255;return t+n},d.prototype.writeInt8=function(e,t,n){return e=+e,t>>>=0,n||E(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},d.prototype.writeInt16LE=function(e,t,n){return e=+e,t>>>=0,n||E(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},d.prototype.writeInt16BE=function(e,t,n){return e=+e,t>>>=0,n||E(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},d.prototype.writeInt32LE=function(e,t,n){return e=+e,t>>>=0,n||E(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},d.prototype.writeInt32BE=function(e,t,n){return e=+e,t>>>=0,n||E(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},d.prototype.writeBigInt64LE=X((function(e,t=0){return P(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),d.prototype.writeBigInt64BE=X((function(e,t=0){return A(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),d.prototype.writeFloatLE=function(e,t,n){return C(this,e,t,!0,n)},d.prototype.writeFloatBE=function(e,t,n){return C(this,e,t,!1,n)},d.prototype.writeDoubleLE=function(e,t,n){return I(this,e,t,!0,n)},d.prototype.writeDoubleBE=function(e,t,n){return I(this,e,t,!1,n)},d.prototype.copy=function(e,t,n,i){if(!d.isBuffer(e))throw new TypeError("argument should be a Buffer");if(n||(n=0),i||0===i||(i=this.length),t>=e.length&&(t=e.length),t||(t=0),i>0&&i<n&&(i=n),i===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("Index out of range");if(i<0)throw new RangeError("sourceEnd out of bounds");i>this.length&&(i=this.length),e.length-t<i-n&&(i=e.length-t+n);const s=i-n;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,n,i):Uint8Array.prototype.set.call(e,this.subarray(n,i),t),s},d.prototype.fill=function(e,t,n,i){if("string"==typeof e){if("string"==typeof t?(i=t,t=0,n=this.length):"string"==typeof n&&(i=n,n=this.length),void 0!==i&&"string"!=typeof i)throw new TypeError("encoding must be a string");if("string"==typeof i&&!d.isEncoding(i))throw new TypeError("Unknown encoding: "+i);if(1===e.length){const t=e.charCodeAt(0);("utf8"===i&&t<128||"latin1"===i)&&(e=t)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;let s;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(s=t;s<n;++s)this[s]=e;else{const r=d.isBuffer(e)?e:d.from(e,i),a=r.length;if(0===a)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(s=0;s<n-t;++s)this[s+t]=r[s%a]}return this};const W={};function N(e,t,n){W[e]=class extends n{constructor(){super(),Object.defineProperty(this,"message",{value:t.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${e}]`,this.stack,delete this.name}get code(){return e}set code(e){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:e,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}}}function F(e){let t="",n=e.length;const i="-"===e[0]?1:0;for(;n>=i+4;n-=3)t=`_${e.slice(n-3,n)}${t}`;return`${e.slice(0,n)}${t}`}function z(e,t,n,i,s,r){if(e>n||e<t){const i="bigint"==typeof t?"n":"";let s;throw s=r>3?0===t||t===BigInt(0)?`>= 0${i} and < 2${i} ** ${8*(r+1)}${i}`:`>= -(2${i} ** ${8*(r+1)-1}${i}) and < 2 ** ${8*(r+1)-1}${i}`:`>= ${t}${i} and <= ${n}${i}`,new W.ERR_OUT_OF_RANGE("value",s,e)}!function(e,t,n){B(t,"offset"),void 0!==e[t]&&void 0!==e[t+n]||V(t,e.length-(n+1))}(i,s,r)}function B(e,t){if("number"!=typeof e)throw new W.ERR_INVALID_ARG_TYPE(t,"number",e)}function V(e,t,n){if(Math.floor(e)!==e)throw B(e,n),new W.ERR_OUT_OF_RANGE(n||"offset","an integer",e);if(t<0)throw new W.ERR_BUFFER_OUT_OF_BOUNDS;throw new W.ERR_OUT_OF_RANGE(n||"offset",`>= ${n?1:0} and <= ${t}`,e)}N("ERR_BUFFER_OUT_OF_BOUNDS",(function(e){return e?`${e} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),N("ERR_INVALID_ARG_TYPE",(function(e,t){return`The "${e}" argument must be of type number. Received type ${typeof t}`}),TypeError),N("ERR_OUT_OF_RANGE",(function(e,t,n){let i=`The value of "${e}" is out of range.`,s=n;return Number.isInteger(n)&&Math.abs(n)>2**32?s=F(String(n)):"bigint"==typeof n&&(s=String(n),(n>BigInt(2)**BigInt(32)||n<-(BigInt(2)**BigInt(32)))&&(s=F(s)),s+="n"),i+=` It must be ${t}. Received ${s}`,i}),RangeError);const U=/[^+/0-9A-Za-z-_]/g;function J(e,t){let n;t=t||1/0;const i=e.length;let s=null;const r=[];for(let a=0;a<i;++a){if(n=e.charCodeAt(a),n>55295&&n<57344){if(!s){if(n>56319){(t-=3)>-1&&r.push(239,191,189);continue}if(a+1===i){(t-=3)>-1&&r.push(239,191,189);continue}s=n;continue}if(n<56320){(t-=3)>-1&&r.push(239,191,189),s=n;continue}n=65536+(s-55296<<10|n-56320)}else s&&(t-=3)>-1&&r.push(239,191,189);if(s=null,n<128){if((t-=1)<0)break;r.push(n)}else if(n<2048){if((t-=2)<0)break;r.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;r.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;r.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return r}function $(e){return i.toByteArray(function(e){if((e=(e=e.split("=")[0]).trim().replace(U,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function q(e,t,n,i){let s;for(s=0;s<i&&!(s+n>=t.length||s>=e.length);++s)t[s+n]=e[s];return s}function G(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function K(e){return e!=e}const Z=function(){const e="0123456789abcdef",t=new Array(256);for(let n=0;n<16;++n){const i=16*n;for(let s=0;s<16;++s)t[i+s]=e[n]+e[s]}return t}();function X(e){return"undefined"==typeof BigInt?Q:e}function Q(){throw new Error("BigInt not supported")}},2181:(e,t,n)=>{"use strict";n.r(t),n.d(t,{Animation:()=>dn,Animations:()=>un,ArcElement:()=>hs,BarController:()=>Hn,BarElement:()=>xs,BasePlatform:()=>di,BasicPlatform:()=>li,BubbleController:()=>jn,CategoryScale:()=>fr,Chart:()=>rs,DatasetController:()=>vn,Decimation:()=>Hs,DomPlatform:()=>vi,DoughnutController:()=>En,Element:()=>Yi,Filler:()=>$s,Interaction:()=>Gn,Legend:()=>Ks,LineController:()=>Pn,LineElement:()=>Ms,LinearScale:()=>yr,LogarithmicScale:()=>br,PieController:()=>Rn,PointElement:()=>Ls,PolarAreaController:()=>An,RadarController:()=>Cn,RadialLinearScale:()=>xr,Scale:()=>Pi,ScatterController:()=>In,SubTitle:()=>er,Ticks:()=>Di,TimeScale:()=>Ar,TimeSeriesScale:()=>Cr,Title:()=>Xs,Tooltip:()=>_r,_adapters:()=>zn,_detectPlatform:()=>wi,animator:()=>rn,controllers:()=>Wn,defaults:()=>Ie,elements:()=>Ts,layouts:()=>oi,plugins:()=>mr,registerables:()=>Wr,registry:()=>Ri,scales:()=>Ir});const i="undefined"==typeof window?function(e){return e()}:window.requestAnimationFrame;function s(e,t,n){const s=n||(e=>Array.prototype.slice.call(e));let r=!1,a=[];return function(...n){a=s(n),r||(r=!0,i.call(window,(()=>{r=!1,e.apply(t,a)})))}}const r=e=>"start"===e?"left":"end"===e?"right":"center",a=(e,t,n)=>"start"===e?t:"end"===e?n:(t+n)/2;function o(){}const d=function(){let e=0;return function(){return e++}}();function l(e){return null==e}function u(e){if(Array.isArray&&Array.isArray(e))return!0;const t=Object.prototype.toString.call(e);return"[object"===t.substr(0,7)&&"Array]"===t.substr(-6)}function h(e){return null!==e&&"[object Object]"===Object.prototype.toString.call(e)}const c=e=>("number"==typeof e||e instanceof Number)&&isFinite(+e);function _(e,t){return c(e)?e:t}function m(e,t){return void 0===e?t:e}const f=(e,t)=>"string"==typeof e&&e.endsWith("%")?parseFloat(e)/100*t:+e;function p(e,t,n){if(e&&"function"==typeof e.call)return e.apply(n,t)}function g(e,t,n,i){let s,r,a;if(u(e))if(r=e.length,i)for(s=r-1;s>=0;s--)t.call(n,e[s],s);else for(s=0;s<r;s++)t.call(n,e[s],s);else if(h(e))for(a=Object.keys(e),r=a.length,s=0;s<r;s++)t.call(n,e[a[s]],a[s])}function y(e,t){let n,i,s,r;if(!e||!t||e.length!==t.length)return!1;for(n=0,i=e.length;n<i;++n)if(s=e[n],r=t[n],s.datasetIndex!==r.datasetIndex||s.index!==r.index)return!1;return!0}function M(e){if(u(e))return e.map(M);if(h(e)){const t=Object.create(null),n=Object.keys(e),i=n.length;let s=0;for(;s<i;++s)t[n[s]]=M(e[n[s]]);return t}return e}function b(e){return-1===["__proto__","prototype","constructor"].indexOf(e)}function L(e,t,n,i){if(!b(e))return;const s=t[e],r=n[e];h(s)&&h(r)?v(s,r,i):t[e]=M(r)}function v(e,t,n){const i=u(t)?t:[t],s=i.length;if(!h(e))return e;const r=(n=n||{}).merger||L;for(let a=0;a<s;++a){if(!h(t=i[a]))continue;const s=Object.keys(t);for(let i=0,a=s.length;i<a;++i)r(s[i],e,t,n)}return e}function w(e,t){return v(e,t,{merger:Y})}function Y(e,t,n){if(!b(e))return;const i=t[e],s=n[e];h(i)&&h(s)?w(i,s):Object.prototype.hasOwnProperty.call(t,e)||(t[e]=M(s))}function k(e,t){const n=e.indexOf(".",t);return-1===n?e.length:n}function D(e,t){if(""===t)return e;let n=0,i=k(t,n);for(;e&&i>n;)e=e[t.substr(n,i-n)],n=i+1,i=k(t,n);return e}function x(e){return e.charAt(0).toUpperCase()+e.slice(1)}const T=e=>void 0!==e,S=e=>"function"==typeof e,O=Math.PI,H=2*O,j=H+O,E=Number.POSITIVE_INFINITY,P=O/180,A=O/2,R=O/4,C=2*O/3,I=Math.log10,W=Math.sign;function N(e){const t=Math.round(e);e=z(e,t,e/1e3)?t:e;const n=Math.pow(10,Math.floor(I(e))),i=e/n;return(i<=1?1:i<=2?2:i<=5?5:10)*n}function F(e){return!isNaN(parseFloat(e))&&isFinite(e)}function z(e,t,n){return Math.abs(e-t)<n}function B(e,t,n){let i,s,r;for(i=0,s=e.length;i<s;i++)r=e[i][n],isNaN(r)||(t.min=Math.min(t.min,r),t.max=Math.max(t.max,r))}function V(e){return e*(O/180)}function U(e){return e*(180/O)}function J(e){if(!c(e))return;let t=1,n=0;for(;Math.round(e*t)/t!==e;)t*=10,n++;return n}function $(e,t){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))}function q(e,t){return(e-t+j)%H-O}function G(e){return(e%H+H)%H}function K(e,t,n,i){const s=G(e),r=G(t),a=G(n),o=G(r-s),d=G(a-s),l=G(s-r),u=G(s-a);return s===r||s===a||i&&r===a||o>d&&l<u}function Z(e,t,n){return Math.max(t,Math.min(n,e))}const X=e=>0===e||1===e,Q=(e,t,n)=>-Math.pow(2,10*(e-=1))*Math.sin((e-t)*H/n),ee=(e,t,n)=>Math.pow(2,-10*e)*Math.sin((e-t)*H/n)+1,te={linear:e=>e,easeInQuad:e=>e*e,easeOutQuad:e=>-e*(e-2),easeInOutQuad:e=>(e/=.5)<1?.5*e*e:-.5*(--e*(e-2)-1),easeInCubic:e=>e*e*e,easeOutCubic:e=>(e-=1)*e*e+1,easeInOutCubic:e=>(e/=.5)<1?.5*e*e*e:.5*((e-=2)*e*e+2),easeInQuart:e=>e*e*e*e,easeOutQuart:e=>-((e-=1)*e*e*e-1),easeInOutQuart:e=>(e/=.5)<1?.5*e*e*e*e:-.5*((e-=2)*e*e*e-2),easeInQuint:e=>e*e*e*e*e,easeOutQuint:e=>(e-=1)*e*e*e*e+1,easeInOutQuint:e=>(e/=.5)<1?.5*e*e*e*e*e:.5*((e-=2)*e*e*e*e+2),easeInSine:e=>1-Math.cos(e*A),easeOutSine:e=>Math.sin(e*A),easeInOutSine:e=>-.5*(Math.cos(O*e)-1),easeInExpo:e=>0===e?0:Math.pow(2,10*(e-1)),easeOutExpo:e=>1===e?1:1-Math.pow(2,-10*e),easeInOutExpo:e=>X(e)?e:e<.5?.5*Math.pow(2,10*(2*e-1)):.5*(2-Math.pow(2,-10*(2*e-1))),easeInCirc:e=>e>=1?e:-(Math.sqrt(1-e*e)-1),easeOutCirc:e=>Math.sqrt(1-(e-=1)*e),easeInOutCirc:e=>(e/=.5)<1?-.5*(Math.sqrt(1-e*e)-1):.5*(Math.sqrt(1-(e-=2)*e)+1),easeInElastic:e=>X(e)?e:Q(e,.075,.3),easeOutElastic:e=>X(e)?e:ee(e,.075,.3),easeInOutElastic(e){const t=.1125;return X(e)?e:e<.5?.5*Q(2*e,t,.45):.5+.5*ee(2*e-1,t,.45)},easeInBack(e){const t=1.70158;return e*e*((t+1)*e-t)},easeOutBack(e){const t=1.70158;return(e-=1)*e*((t+1)*e+t)+1},easeInOutBack(e){let t=1.70158;return(e/=.5)<1?e*e*((1+(t*=1.525))*e-t)*.5:.5*((e-=2)*e*((1+(t*=1.525))*e+t)+2)},easeInBounce:e=>1-te.easeOutBounce(1-e),easeOutBounce(e){const t=7.5625,n=2.75;return e<1/n?t*e*e:e<2/n?t*(e-=1.5/n)*e+.75:e<2.5/n?t*(e-=2.25/n)*e+.9375:t*(e-=2.625/n)*e+.984375},easeInOutBounce:e=>e<.5?.5*te.easeInBounce(2*e):.5*te.easeOutBounce(2*e-1)+.5},ne={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},ie="0123456789ABCDEF",se=e=>ie[15&e],re=e=>ie[(240&e)>>4]+ie[15&e],ae=e=>(240&e)>>4==(15&e);function oe(e){return e+.5|0}const de=(e,t,n)=>Math.max(Math.min(e,n),t);function le(e){return de(oe(2.55*e),0,255)}function ue(e){return de(oe(255*e),0,255)}function he(e){return de(oe(e/2.55)/100,0,1)}function ce(e){return de(oe(100*e),0,100)}const _e=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/,me=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function fe(e,t,n){const i=t*Math.min(n,1-n),s=(t,s=(t+e/30)%12)=>n-i*Math.max(Math.min(s-3,9-s,1),-1);return[s(0),s(8),s(4)]}function pe(e,t,n){const i=(i,s=(i+e/60)%6)=>n-n*t*Math.max(Math.min(s,4-s,1),0);return[i(5),i(3),i(1)]}function ge(e,t,n){const i=fe(e,1,.5);let s;for(t+n>1&&(s=1/(t+n),t*=s,n*=s),s=0;s<3;s++)i[s]*=1-t-n,i[s]+=t;return i}function ye(e){const t=e.r/255,n=e.g/255,i=e.b/255,s=Math.max(t,n,i),r=Math.min(t,n,i),a=(s+r)/2;let o,d,l;return s!==r&&(l=s-r,d=a>.5?l/(2-s-r):l/(s+r),o=s===t?(n-i)/l+(n<i?6:0):s===n?(i-t)/l+2:(t-n)/l+4,o=60*o+.5),[0|o,d||0,a]}function Me(e,t,n,i){return(Array.isArray(t)?e(t[0],t[1],t[2]):e(t,n,i)).map(ue)}function be(e,t,n){return Me(fe,e,t,n)}function Le(e){return(e%360+360)%360}const ve={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},we={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};let Ye;function ke(e,t,n){if(e){let i=ye(e);i[t]=Math.max(0,Math.min(i[t]+i[t]*n,0===t?360:1)),i=be(i),e.r=i[0],e.g=i[1],e.b=i[2]}}function De(e,t){return e?Object.assign(t||{},e):e}function xe(e){var t={r:0,g:0,b:0,a:255};return Array.isArray(e)?e.length>=3&&(t={r:e[0],g:e[1],b:e[2],a:255},e.length>3&&(t.a=ue(e[3]))):(t=De(e,{r:0,g:0,b:0,a:1})).a=ue(t.a),t}function Te(e){return"r"===e.charAt(0)?function(e){const t=_e.exec(e);let n,i,s,r=255;if(t){if(t[7]!==n){const e=+t[7];r=255&(t[8]?le(e):255*e)}return n=+t[1],i=+t[3],s=+t[5],n=255&(t[2]?le(n):n),i=255&(t[4]?le(i):i),s=255&(t[6]?le(s):s),{r:n,g:i,b:s,a:r}}}(e):function(e){const t=me.exec(e);let n,i=255;if(!t)return;t[5]!==n&&(i=t[6]?le(+t[5]):ue(+t[5]));const s=Le(+t[2]),r=+t[3]/100,a=+t[4]/100;return n="hwb"===t[1]?function(e,t,n){return Me(ge,e,t,n)}(s,r,a):"hsv"===t[1]?function(e,t,n){return Me(pe,e,t,n)}(s,r,a):be(s,r,a),{r:n[0],g:n[1],b:n[2],a:i}}(e)}class Se{constructor(e){if(e instanceof Se)return e;const t=typeof e;let n;var i,s,r;"object"===t?n=xe(e):"string"===t&&(r=(i=e).length,"#"===i[0]&&(4===r||5===r?s={r:255&17*ne[i[1]],g:255&17*ne[i[2]],b:255&17*ne[i[3]],a:5===r?17*ne[i[4]]:255}:7!==r&&9!==r||(s={r:ne[i[1]]<<4|ne[i[2]],g:ne[i[3]]<<4|ne[i[4]],b:ne[i[5]]<<4|ne[i[6]],a:9===r?ne[i[7]]<<4|ne[i[8]]:255})),n=s||function(e){Ye||(Ye=function(){const e={},t=Object.keys(we),n=Object.keys(ve);let i,s,r,a,o;for(i=0;i<t.length;i++){for(a=o=t[i],s=0;s<n.length;s++)r=n[s],o=o.replace(r,ve[r]);r=parseInt(we[a],16),e[o]=[r>>16&255,r>>8&255,255&r]}return e}(),Ye.transparent=[0,0,0,0]);const t=Ye[e.toLowerCase()];return t&&{r:t[0],g:t[1],b:t[2],a:4===t.length?t[3]:255}}(e)||Te(e)),this._rgb=n,this._valid=!!n}get valid(){return this._valid}get rgb(){var e=De(this._rgb);return e&&(e.a=he(e.a)),e}set rgb(e){this._rgb=xe(e)}rgbString(){return this._valid?(e=this._rgb)&&(e.a<255?`rgba(${e.r}, ${e.g}, ${e.b}, ${he(e.a)})`:`rgb(${e.r}, ${e.g}, ${e.b})`):this._rgb;var e}hexString(){return this._valid?(e=this._rgb,t=function(e){return ae(e.r)&&ae(e.g)&&ae(e.b)&&ae(e.a)}(e)?se:re,e?"#"+t(e.r)+t(e.g)+t(e.b)+(e.a<255?t(e.a):""):e):this._rgb;var e,t}hslString(){return this._valid?function(e){if(!e)return;const t=ye(e),n=t[0],i=ce(t[1]),s=ce(t[2]);return e.a<255?`hsla(${n}, ${i}%, ${s}%, ${he(e.a)})`:`hsl(${n}, ${i}%, ${s}%)`}(this._rgb):this._rgb}mix(e,t){const n=this;if(e){const i=n.rgb,s=e.rgb;let r;const a=t===r?.5:t,o=2*a-1,d=i.a-s.a,l=((o*d==-1?o:(o+d)/(1+o*d))+1)/2;r=1-l,i.r=255&l*i.r+r*s.r+.5,i.g=255&l*i.g+r*s.g+.5,i.b=255&l*i.b+r*s.b+.5,i.a=a*i.a+(1-a)*s.a,n.rgb=i}return n}clone(){return new Se(this.rgb)}alpha(e){return this._rgb.a=ue(e),this}clearer(e){return this._rgb.a*=1-e,this}greyscale(){const e=this._rgb,t=oe(.3*e.r+.59*e.g+.11*e.b);return e.r=e.g=e.b=t,this}opaquer(e){return this._rgb.a*=1+e,this}negate(){const e=this._rgb;return e.r=255-e.r,e.g=255-e.g,e.b=255-e.b,this}lighten(e){return ke(this._rgb,2,e),this}darken(e){return ke(this._rgb,2,-e),this}saturate(e){return ke(this._rgb,1,e),this}desaturate(e){return ke(this._rgb,1,-e),this}rotate(e){return function(e,t){var n=ye(e);n[0]=Le(n[0]+t),n=be(n),e.r=n[0],e.g=n[1],e.b=n[2]}(this._rgb,e),this}}function Oe(e){return new Se(e)}const He=e=>e instanceof CanvasGradient||e instanceof CanvasPattern;function je(e){return He(e)?e:Oe(e)}function Ee(e){return He(e)?e:Oe(e).saturate(.5).darken(.1).hexString()}const Pe=Object.create(null),Ae=Object.create(null);function Re(e,t){if(!t)return e;const n=t.split(".");for(let t=0,i=n.length;t<i;++t){const i=n[t];e=e[i]||(e[i]=Object.create(null))}return e}function Ce(e,t,n){return"string"==typeof t?v(Re(e,t),n):v(Re(e,""),t)}var Ie=new class{constructor(e){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=e=>e.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(e,t)=>Ee(t.backgroundColor),this.hoverBorderColor=(e,t)=>Ee(t.borderColor),this.hoverColor=(e,t)=>Ee(t.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.describe(e)}set(e,t){return Ce(this,e,t)}get(e){return Re(this,e)}describe(e,t){return Ce(Ae,e,t)}override(e,t){return Ce(Pe,e,t)}route(e,t,n,i){const s=Re(this,e),r=Re(this,n),a="_"+t;Object.defineProperties(s,{[a]:{value:s[t],writable:!0},[t]:{enumerable:!0,get(){const e=this[a],t=r[i];return h(e)?Object.assign({},t,e):m(e,t)},set(e){this[a]=e}}})}}({_scriptable:e=>!e.startsWith("on"),_indexable:e=>"events"!==e,hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}});function We(e,t,n,i,s){let r=t[s];return r||(r=t[s]=e.measureText(s).width,n.push(s)),r>i&&(i=r),i}function Ne(e,t,n,i){let s=(i=i||{}).data=i.data||{},r=i.garbageCollect=i.garbageCollect||[];i.font!==t&&(s=i.data={},r=i.garbageCollect=[],i.font=t),e.save(),e.font=t;let a=0;const o=n.length;let d,l,h,c,_;for(d=0;d<o;d++)if(c=n[d],null!=c&&!0!==u(c))a=We(e,s,r,a,c);else if(u(c))for(l=0,h=c.length;l<h;l++)_=c[l],null==_||u(_)||(a=We(e,s,r,a,_));e.restore();const m=r.length/2;if(m>n.length){for(d=0;d<m;d++)delete s[r[d]];r.splice(0,m)}return a}function Fe(e,t,n){const i=e.currentDevicePixelRatio,s=0!==n?Math.max(n/2,.5):0;return Math.round((t-s)*i)/i+s}function ze(e,t){(t=t||e.getContext("2d")).save(),t.resetTransform(),t.clearRect(0,0,e.width,e.height),t.restore()}function Be(e,t,n,i){let s,r,a,o,d;const l=t.pointStyle,u=t.rotation,h=t.radius;let c=(u||0)*P;if(l&&"object"==typeof l&&(s=l.toString(),"[object HTMLImageElement]"===s||"[object HTMLCanvasElement]"===s))return e.save(),e.translate(n,i),e.rotate(c),e.drawImage(l,-l.width/2,-l.height/2,l.width,l.height),void e.restore();if(!(isNaN(h)||h<=0)){switch(e.beginPath(),l){default:e.arc(n,i,h,0,H),e.closePath();break;case"triangle":e.moveTo(n+Math.sin(c)*h,i-Math.cos(c)*h),c+=C,e.lineTo(n+Math.sin(c)*h,i-Math.cos(c)*h),c+=C,e.lineTo(n+Math.sin(c)*h,i-Math.cos(c)*h),e.closePath();break;case"rectRounded":d=.516*h,o=h-d,r=Math.cos(c+R)*o,a=Math.sin(c+R)*o,e.arc(n-r,i-a,d,c-O,c-A),e.arc(n+a,i-r,d,c-A,c),e.arc(n+r,i+a,d,c,c+A),e.arc(n-a,i+r,d,c+A,c+O),e.closePath();break;case"rect":if(!u){o=Math.SQRT1_2*h,e.rect(n-o,i-o,2*o,2*o);break}c+=R;case"rectRot":r=Math.cos(c)*h,a=Math.sin(c)*h,e.moveTo(n-r,i-a),e.lineTo(n+a,i-r),e.lineTo(n+r,i+a),e.lineTo(n-a,i+r),e.closePath();break;case"crossRot":c+=R;case"cross":r=Math.cos(c)*h,a=Math.sin(c)*h,e.moveTo(n-r,i-a),e.lineTo(n+r,i+a),e.moveTo(n+a,i-r),e.lineTo(n-a,i+r);break;case"star":r=Math.cos(c)*h,a=Math.sin(c)*h,e.moveTo(n-r,i-a),e.lineTo(n+r,i+a),e.moveTo(n+a,i-r),e.lineTo(n-a,i+r),c+=R,r=Math.cos(c)*h,a=Math.sin(c)*h,e.moveTo(n-r,i-a),e.lineTo(n+r,i+a),e.moveTo(n+a,i-r),e.lineTo(n-a,i+r);break;case"line":r=Math.cos(c)*h,a=Math.sin(c)*h,e.moveTo(n-r,i-a),e.lineTo(n+r,i+a);break;case"dash":e.moveTo(n,i),e.lineTo(n+Math.cos(c)*h,i+Math.sin(c)*h)}e.fill(),t.borderWidth>0&&e.stroke()}}function Ve(e,t,n){return n=n||.5,!t||e&&e.x>t.left-n&&e.x<t.right+n&&e.y>t.top-n&&e.y<t.bottom+n}function Ue(e,t){e.save(),e.beginPath(),e.rect(t.left,t.top,t.right-t.left,t.bottom-t.top),e.clip()}function Je(e){e.restore()}function $e(e,t,n,i,s){if(!t)return e.lineTo(n.x,n.y);if("middle"===s){const i=(t.x+n.x)/2;e.lineTo(i,t.y),e.lineTo(i,n.y)}else"after"===s!=!!i?e.lineTo(t.x,n.y):e.lineTo(n.x,t.y);e.lineTo(n.x,n.y)}function qe(e,t,n,i){if(!t)return e.lineTo(n.x,n.y);e.bezierCurveTo(i?t.cp1x:t.cp2x,i?t.cp1y:t.cp2y,i?n.cp2x:n.cp1x,i?n.cp2y:n.cp1y,n.x,n.y)}function Ge(e,t,n,i,s,r={}){const a=u(t)?t:[t],o=r.strokeWidth>0&&""!==r.strokeColor;let d,h;for(e.save(),e.font=s.string,function(e,t){t.translation&&e.translate(t.translation[0],t.translation[1]),l(t.rotation)||e.rotate(t.rotation),t.color&&(e.fillStyle=t.color),t.textAlign&&(e.textAlign=t.textAlign),t.textBaseline&&(e.textBaseline=t.textBaseline)}(e,r),d=0;d<a.length;++d)h=a[d],o&&(r.strokeColor&&(e.strokeStyle=r.strokeColor),l(r.strokeWidth)||(e.lineWidth=r.strokeWidth),e.strokeText(h,n,i,r.maxWidth)),e.fillText(h,n,i,r.maxWidth),Ke(e,n,i,h,r),i+=s.lineHeight;e.restore()}function Ke(e,t,n,i,s){if(s.strikethrough||s.underline){const r=e.measureText(i),a=t-r.actualBoundingBoxLeft,o=t+r.actualBoundingBoxRight,d=n-r.actualBoundingBoxAscent,l=n+r.actualBoundingBoxDescent,u=s.strikethrough?(d+l)/2:l;e.strokeStyle=e.fillStyle,e.beginPath(),e.lineWidth=s.decorationWidth||2,e.moveTo(a,u),e.lineTo(o,u),e.stroke()}}function Ze(e,t){const{x:n,y:i,w:s,h:r,radius:a}=t;e.arc(n+a.topLeft,i+a.topLeft,a.topLeft,-A,O,!0),e.lineTo(n,i+r-a.bottomLeft),e.arc(n+a.bottomLeft,i+r-a.bottomLeft,a.bottomLeft,O,A,!0),e.lineTo(n+s-a.bottomRight,i+r),e.arc(n+s-a.bottomRight,i+r-a.bottomRight,a.bottomRight,A,0,!0),e.lineTo(n+s,i+a.topRight),e.arc(n+s-a.topRight,i+a.topRight,a.topRight,0,-A,!0),e.lineTo(n+a.topLeft,i)}const Xe=new RegExp(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/),Qe=new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);function et(e,t){const n=(""+e).match(Xe);if(!n||"normal"===n[1])return 1.2*t;switch(e=+n[2],n[3]){case"px":return e;case"%":e/=100}return t*e}function tt(e,t){const n={},i=h(t),s=i?Object.keys(t):t,r=h(e)?i?n=>m(e[n],e[t[n]]):t=>e[t]:()=>e;for(const e of s)n[e]=+r(e)||0;return n}function nt(e){return tt(e,{top:"y",right:"x",bottom:"y",left:"x"})}function it(e){return tt(e,["topLeft","topRight","bottomLeft","bottomRight"])}function st(e){const t=nt(e);return t.width=t.left+t.right,t.height=t.top+t.bottom,t}function rt(e,t){e=e||{},t=t||Ie.font;let n=m(e.size,t.size);"string"==typeof n&&(n=parseInt(n,10));let i=m(e.style,t.style);i&&!(""+i).match(Qe)&&(console.warn('Invalid font style specified: "'+i+'"'),i="");const s={family:m(e.family,t.family),lineHeight:et(m(e.lineHeight,t.lineHeight),n),size:n,style:i,weight:m(e.weight,t.weight),string:""};return s.string=function(e){return!e||l(e.size)||l(e.family)?null:(e.style?e.style+" ":"")+(e.weight?e.weight+" ":"")+e.size+"px "+e.family}(s),s}function at(e,t,n,i){let s,r,a,o=!0;for(s=0,r=e.length;s<r;++s)if(a=e[s],void 0!==a&&(void 0!==t&&"function"==typeof a&&(a=a(t),o=!1),void 0!==n&&u(a)&&(a=a[n%a.length],o=!1),void 0!==a))return i&&!o&&(i.cacheable=!1),a}function ot(e,t){return Object.assign(Object.create(e),t)}function dt(e,t,n){n=n||(n=>e[n]<t);let i,s=e.length-1,r=0;for(;s-r>1;)i=r+s>>1,n(i)?r=i:s=i;return{lo:r,hi:s}}const lt=(e,t,n)=>dt(e,n,(i=>e[i][t]<n)),ut=(e,t,n)=>dt(e,n,(i=>e[i][t]>=n)),ht=["push","pop","shift","splice","unshift"];function ct(e,t){const n=e._chartjs;if(!n)return;const i=n.listeners,s=i.indexOf(t);-1!==s&&i.splice(s,1),i.length>0||(ht.forEach((t=>{delete e[t]})),delete e._chartjs)}function _t(e){const t=new Set;let n,i;for(n=0,i=e.length;n<i;++n)t.add(e[n]);return t.size===i?e:Array.from(t)}function mt(e,t=[""],n=e,i,s=(()=>e[0])){T(i)||(i=kt("_fallback",e));const r={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:e,_rootScopes:n,_fallback:i,_getTarget:s,override:s=>mt([s,...e],t,n,i)};return new Proxy(r,{deleteProperty:(t,n)=>(delete t[n],delete t._keys,delete e[0][n],!0),get:(n,i)=>Mt(n,i,(()=>function(e,t,n,i){let s;for(const r of t)if(s=kt(gt(r,e),n),T(s))return yt(e,s)?wt(n,i,e,s):s}(i,t,e,n))),getOwnPropertyDescriptor:(e,t)=>Reflect.getOwnPropertyDescriptor(e._scopes[0],t),getPrototypeOf:()=>Reflect.getPrototypeOf(e[0]),has:(e,t)=>Dt(e).includes(t),ownKeys:e=>Dt(e),set:(e,t,n)=>((e._storage||(e._storage=s()))[t]=n,delete e[t],delete e._keys,!0)})}function ft(e,t,n,i){const s={_cacheable:!1,_proxy:e,_context:t,_subProxy:n,_stack:new Set,_descriptors:pt(e,i),setContext:t=>ft(e,t,n,i),override:s=>ft(e.override(s),t,n,i)};return new Proxy(s,{deleteProperty:(t,n)=>(delete t[n],delete e[n],!0),get:(e,t,n)=>Mt(e,t,(()=>function(e,t,n){const{_proxy:i,_context:s,_subProxy:r,_descriptors:a}=e;let o=i[t];return S(o)&&a.isScriptable(t)&&(o=function(e,t,n,i){const{_proxy:s,_context:r,_subProxy:a,_stack:o}=n;if(o.has(e))throw new Error("Recursion detected: "+Array.from(o).join("->")+"->"+e);return o.add(e),t=t(r,a||i),o.delete(e),h(t)&&(t=wt(s._scopes,s,e,t)),t}(t,o,e,n)),u(o)&&o.length&&(o=function(e,t,n,i){const{_proxy:s,_context:r,_subProxy:a,_descriptors:o}=n;if(T(r.index)&&i(e))t=t[r.index%t.length];else if(h(t[0])){const n=t,i=s._scopes.filter((e=>e!==n));t=[];for(const d of n){const n=wt(i,s,e,d);t.push(ft(n,r,a&&a[e],o))}}return t}(t,o,e,a.isIndexable)),yt(t,o)&&(o=ft(o,s,r&&r[t],a)),o}(e,t,n))),getOwnPropertyDescriptor:(t,n)=>t._descriptors.allKeys?Reflect.has(e,n)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(e,n),getPrototypeOf:()=>Reflect.getPrototypeOf(e),has:(t,n)=>Reflect.has(e,n),ownKeys:()=>Reflect.ownKeys(e),set:(t,n,i)=>(e[n]=i,delete t[n],!0)})}function pt(e,t={scriptable:!0,indexable:!0}){const{_scriptable:n=t.scriptable,_indexable:i=t.indexable,_allKeys:s=t.allKeys}=e;return{allKeys:s,scriptable:n,indexable:i,isScriptable:S(n)?n:()=>n,isIndexable:S(i)?i:()=>i}}const gt=(e,t)=>e?e+x(t):t,yt=(e,t)=>h(t)&&"adapters"!==e;function Mt(e,t,n){if(Object.prototype.hasOwnProperty.call(e,t))return e[t];const i=n();return e[t]=i,i}function bt(e,t,n){return S(e)?e(t,n):e}const Lt=(e,t)=>!0===e?t:"string"==typeof e?D(t,e):void 0;function vt(e,t,n,i){for(const s of t){const t=Lt(n,s);if(t){e.add(t);const s=bt(t._fallback,n,t);if(T(s)&&s!==n&&s!==i)return s}else if(!1===t&&T(i)&&n!==i)return null}return!1}function wt(e,t,n,i){const s=t._rootScopes,r=bt(t._fallback,n,i),a=[...e,...s],o=new Set;o.add(i);let d=Yt(o,a,n,r||n);return null!==d&&(!T(r)||r===n||(d=Yt(o,a,r,d),null!==d))&&mt(Array.from(o),[""],s,r,(()=>function(e,t,n){const i=e._getTarget();t in i||(i[t]={});const s=i[t];return u(s)&&h(n)?n:s}(t,n,i)))}function Yt(e,t,n,i){for(;n;)n=vt(e,t,n,i);return n}function kt(e,t){for(const n of t){if(!n)continue;const t=n[e];if(T(t))return t}}function Dt(e){let t=e._keys;return t||(t=e._keys=function(e){const t=new Set;for(const n of e)for(const e of Object.keys(n).filter((e=>!e.startsWith("_"))))t.add(e);return Array.from(t)}(e._scopes)),t}const xt=Number.EPSILON||1e-14,Tt=(e,t)=>t<e.length&&!e[t].skip&&e[t],St=e=>"x"===e?"y":"x";function Ot(e,t,n,i){const s=e.skip?t:e,r=t,a=n.skip?t:n,o=$(r,s),d=$(a,r);let l=o/(o+d),u=d/(o+d);l=isNaN(l)?0:l,u=isNaN(u)?0:u;const h=i*l,c=i*u;return{previous:{x:r.x-h*(a.x-s.x),y:r.y-h*(a.y-s.y)},next:{x:r.x+c*(a.x-s.x),y:r.y+c*(a.y-s.y)}}}function Ht(e,t,n){return Math.max(Math.min(e,n),t)}function jt(e,t,n,i,s){let r,a,o,d;if(t.spanGaps&&(e=e.filter((e=>!e.skip))),"monotone"===t.cubicInterpolationMode)!function(e,t="x"){const n=St(t),i=e.length,s=Array(i).fill(0),r=Array(i);let a,o,d,l=Tt(e,0);for(a=0;a<i;++a)if(o=d,d=l,l=Tt(e,a+1),d){if(l){const e=l[t]-d[t];s[a]=0!==e?(l[n]-d[n])/e:0}r[a]=o?l?W(s[a-1])!==W(s[a])?0:(s[a-1]+s[a])/2:s[a-1]:s[a]}!function(e,t,n){const i=e.length;let s,r,a,o,d,l=Tt(e,0);for(let u=0;u<i-1;++u)d=l,l=Tt(e,u+1),d&&l&&(z(t[u],0,xt)?n[u]=n[u+1]=0:(s=n[u]/t[u],r=n[u+1]/t[u],o=Math.pow(s,2)+Math.pow(r,2),o<=9||(a=3/Math.sqrt(o),n[u]=s*a*t[u],n[u+1]=r*a*t[u])))}(e,s,r),function(e,t,n="x"){const i=St(n),s=e.length;let r,a,o,d=Tt(e,0);for(let l=0;l<s;++l){if(a=o,o=d,d=Tt(e,l+1),!o)continue;const s=o[n],u=o[i];a&&(r=(s-a[n])/3,o[`cp1${n}`]=s-r,o[`cp1${i}`]=u-r*t[l]),d&&(r=(d[n]-s)/3,o[`cp2${n}`]=s+r,o[`cp2${i}`]=u+r*t[l])}}(e,r,t)}(e,s);else{let n=i?e[e.length-1]:e[0];for(r=0,a=e.length;r<a;++r)o=e[r],d=Ot(n,o,e[Math.min(r+1,a-(i?0:1))%a],t.tension),o.cp1x=d.previous.x,o.cp1y=d.previous.y,o.cp2x=d.next.x,o.cp2y=d.next.y,n=o}t.capBezierPoints&&function(e,t){let n,i,s,r,a,o=Ve(e[0],t);for(n=0,i=e.length;n<i;++n)a=r,r=o,o=n<i-1&&Ve(e[n+1],t),r&&(s=e[n],a&&(s.cp1x=Ht(s.cp1x,t.left,t.right),s.cp1y=Ht(s.cp1y,t.top,t.bottom)),o&&(s.cp2x=Ht(s.cp2x,t.left,t.right),s.cp2y=Ht(s.cp2y,t.top,t.bottom)))}(e,n)}function Et(){return"undefined"!=typeof window&&"undefined"!=typeof document}function Pt(e){let t=e.parentNode;return t&&"[object ShadowRoot]"===t.toString()&&(t=t.host),t}function At(e,t,n){let i;return"string"==typeof e?(i=parseInt(e,10),-1!==e.indexOf("%")&&(i=i/100*t.parentNode[n])):i=e,i}const Rt=e=>window.getComputedStyle(e,null),Ct=["top","right","bottom","left"];function It(e,t,n){const i={};n=n?"-"+n:"";for(let s=0;s<4;s++){const r=Ct[s];i[r]=parseFloat(e[t+"-"+r+n])||0}return i.width=i.left+i.right,i.height=i.top+i.bottom,i}function Wt(e,t){const{canvas:n,currentDevicePixelRatio:i}=t,s=Rt(n),r="border-box"===s.boxSizing,a=It(s,"padding"),o=It(s,"border","width"),{x:d,y:l,box:u}=function(e,t){const n=e.native||e,i=n.touches,s=i&&i.length?i[0]:n,{offsetX:r,offsetY:a}=s;let o,d,l=!1;if(((e,t,n)=>(e>0||t>0)&&(!n||!n.shadowRoot))(r,a,n.target))o=r,d=a;else{const e=t.getBoundingClientRect();o=s.clientX-e.left,d=s.clientY-e.top,l=!0}return{x:o,y:d,box:l}}(e,n),h=a.left+(u&&o.left),c=a.top+(u&&o.top);let{width:_,height:m}=t;return r&&(_-=a.width+o.width,m-=a.height+o.height),{x:Math.round((d-h)/_*n.width/i),y:Math.round((l-c)/m*n.height/i)}}const Nt=e=>Math.round(10*e)/10;function Ft(e,t,n){const i=t||1,s=Math.floor(e.height*i),r=Math.floor(e.width*i);e.height=s/i,e.width=r/i;const a=e.canvas;return a.style&&(n||!a.style.height&&!a.style.width)&&(a.style.height=`${e.height}px`,a.style.width=`${e.width}px`),(e.currentDevicePixelRatio!==i||a.height!==s||a.width!==r)&&(e.currentDevicePixelRatio=i,a.height=s,a.width=r,e.ctx.setTransform(i,0,0,i,0,0),!0)}const zt=function(){let e=!1;try{const t={get passive(){return e=!0,!1}};window.addEventListener("test",null,t),window.removeEventListener("test",null,t)}catch(e){}return e}();function Bt(e,t){const n=function(e,t){return Rt(e).getPropertyValue(t)}(e,t),i=n&&n.match(/^(\d+)(\.\d+)?px$/);return i?+i[1]:void 0}function Vt(e,t,n,i){return{x:e.x+n*(t.x-e.x),y:e.y+n*(t.y-e.y)}}function Ut(e,t,n,i){return{x:e.x+n*(t.x-e.x),y:"middle"===i?n<.5?e.y:t.y:"after"===i?n<1?e.y:t.y:n>0?t.y:e.y}}function Jt(e,t,n,i){const s={x:e.cp2x,y:e.cp2y},r={x:t.cp1x,y:t.cp1y},a=Vt(e,s,n),o=Vt(s,r,n),d=Vt(r,t,n),l=Vt(a,o,n),u=Vt(o,d,n);return Vt(l,u,n)}const $t=new Map;function qt(e,t,n){return function(e,t){t=t||{};const n=e+JSON.stringify(t);let i=$t.get(n);return i||(i=new Intl.NumberFormat(e,t),$t.set(n,i)),i}(t,n).format(e)}function Gt(e,t,n){return e?function(e,t){return{x:n=>e+e+t-n,setWidth(e){t=e},textAlign:e=>"center"===e?e:"right"===e?"left":"right",xPlus:(e,t)=>e-t,leftForLtr:(e,t)=>e-t}}(t,n):{x:e=>e,setWidth(e){},textAlign:e=>e,xPlus:(e,t)=>e+t,leftForLtr:(e,t)=>e}}function Kt(e,t){let n,i;"ltr"!==t&&"rtl"!==t||(n=e.canvas.style,i=[n.getPropertyValue("direction"),n.getPropertyPriority("direction")],n.setProperty("direction",t,"important"),e.prevTextDirection=i)}function Zt(e,t){void 0!==t&&(delete e.prevTextDirection,e.canvas.style.setProperty("direction",t[0],t[1]))}function Xt(e){return"angle"===e?{between:K,compare:q,normalize:G}:{between:(e,t,n)=>e>=Math.min(t,n)&&e<=Math.max(n,t),compare:(e,t)=>e-t,normalize:e=>e}}function Qt({start:e,end:t,count:n,loop:i,style:s}){return{start:e%n,end:t%n,loop:i&&(t-e+1)%n==0,style:s}}function en(e,t,n){if(!n)return[e];const{property:i,start:s,end:r}=n,a=t.length,{compare:o,between:d,normalize:l}=Xt(i),{start:u,end:h,loop:c,style:_}=function(e,t,n){const{property:i,start:s,end:r}=n,{between:a,normalize:o}=Xt(i),d=t.length;let l,u,{start:h,end:c,loop:_}=e;if(_){for(h+=d,c+=d,l=0,u=d;l<u&&a(o(t[h%d][i]),s,r);++l)h--,c--;h%=d,c%=d}return c<h&&(c+=d),{start:h,end:c,loop:_,style:e.style}}(e,t,n),m=[];let f,p,g,y=!1,M=null;for(let e=u,n=u;e<=h;++e)p=t[e%a],p.skip||(f=l(p[i]),f!==g&&(y=d(f,s,r),null===M&&(y||d(s,g,f)&&0!==o(s,g))&&(M=0===o(f,s)?e:n),null!==M&&(!y||0===o(r,f)||d(r,g,f))&&(m.push(Qt({start:M,end:e,loop:c,count:a,style:_})),M=null),n=e,g=f));return null!==M&&m.push(Qt({start:M,end:h,loop:c,count:a,style:_})),m}function tn(e,t){const n=[],i=e.segments;for(let s=0;s<i.length;s++){const r=en(i[s],e.points,t);r.length&&n.push(...r)}return n}function nn(e){return{backgroundColor:e.backgroundColor,borderCapStyle:e.borderCapStyle,borderDash:e.borderDash,borderDashOffset:e.borderDashOffset,borderJoinStyle:e.borderJoinStyle,borderWidth:e.borderWidth,borderColor:e.borderColor}}function sn(e,t){return t&&JSON.stringify(e)!==JSON.stringify(t)}var rn=new class{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(e,t,n,i){const s=t.listeners[i],r=t.duration;s.forEach((i=>i({chart:e,initial:t.initial,numSteps:r,currentStep:Math.min(n-t.start,r)})))}_refresh(){this._request||(this._running=!0,this._request=i.call(window,(()=>{this._update(),this._request=null,this._running&&this._refresh()})))}_update(e=Date.now()){let t=0;this._charts.forEach(((n,i)=>{if(!n.running||!n.items.length)return;const s=n.items;let r,a=s.length-1,o=!1;for(;a>=0;--a)r=s[a],r._active?(r._total>n.duration&&(n.duration=r._total),r.tick(e),o=!0):(s[a]=s[s.length-1],s.pop());o&&(i.draw(),this._notify(i,n,e,"progress")),s.length||(n.running=!1,this._notify(i,n,e,"complete"),n.initial=!1),t+=s.length})),this._lastDate=e,0===t&&(this._running=!1)}_getAnims(e){const t=this._charts;let n=t.get(e);return n||(n={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},t.set(e,n)),n}listen(e,t,n){this._getAnims(e).listeners[t].push(n)}add(e,t){t&&t.length&&this._getAnims(e).items.push(...t)}has(e){return this._getAnims(e).items.length>0}start(e){const t=this._charts.get(e);t&&(t.running=!0,t.start=Date.now(),t.duration=t.items.reduce(((e,t)=>Math.max(e,t._duration)),0),this._refresh())}running(e){if(!this._running)return!1;const t=this._charts.get(e);return!!(t&&t.running&&t.items.length)}stop(e){const t=this._charts.get(e);if(!t||!t.items.length)return;const n=t.items;let i=n.length-1;for(;i>=0;--i)n[i].cancel();t.items=[],this._notify(e,t,Date.now(),"complete")}remove(e){return this._charts.delete(e)}};const an="transparent",on={boolean:(e,t,n)=>n>.5?t:e,color(e,t,n){const i=je(e||an),s=i.valid&&je(t||an);return s&&s.valid?s.mix(i,n).hexString():t},number:(e,t,n)=>e+(t-e)*n};class dn{constructor(e,t,n,i){const s=t[n];i=at([e.to,i,s,e.from]);const r=at([e.from,s,i]);this._active=!0,this._fn=e.fn||on[e.type||typeof r],this._easing=te[e.easing]||te.linear,this._start=Math.floor(Date.now()+(e.delay||0)),this._duration=this._total=Math.floor(e.duration),this._loop=!!e.loop,this._target=t,this._prop=n,this._from=r,this._to=i,this._promises=void 0}active(){return this._active}update(e,t,n){if(this._active){this._notify(!1);const i=this._target[this._prop],s=n-this._start,r=this._duration-s;this._start=n,this._duration=Math.floor(Math.max(r,e.duration)),this._total+=s,this._loop=!!e.loop,this._to=at([e.to,t,i,e.from]),this._from=at([e.from,i,t])}}cancel(){this._active&&(this.tick(Date.now()),this._active=!1,this._notify(!1))}tick(e){const t=e-this._start,n=this._duration,i=this._prop,s=this._from,r=this._loop,a=this._to;let o;if(this._active=s!==a&&(r||t<n),!this._active)return this._target[i]=a,void this._notify(!0);t<0?this._target[i]=s:(o=t/n%2,o=r&&o>1?2-o:o,o=this._easing(Math.min(1,Math.max(0,o))),this._target[i]=this._fn(s,a,o))}wait(){const e=this._promises||(this._promises=[]);return new Promise(((t,n)=>{e.push({res:t,rej:n})}))}_notify(e){const t=e?"res":"rej",n=this._promises||[];for(let e=0;e<n.length;e++)n[e][t]()}}Ie.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0});const ln=Object.keys(Ie.animation);Ie.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:e=>"onProgress"!==e&&"onComplete"!==e&&"fn"!==e}),Ie.set("animations",{colors:{type:"color",properties:["color","borderColor","backgroundColor"]},numbers:{type:"number",properties:["x","y","borderWidth","radius","tension"]}}),Ie.describe("animations",{_fallback:"animation"}),Ie.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:e=>0|e}}}});class un{constructor(e,t){this._chart=e,this._properties=new Map,this.configure(t)}configure(e){if(!h(e))return;const t=this._properties;Object.getOwnPropertyNames(e).forEach((n=>{const i=e[n];if(!h(i))return;const s={};for(const e of ln)s[e]=i[e];(u(i.properties)&&i.properties||[n]).forEach((e=>{e!==n&&t.has(e)||t.set(e,s)}))}))}_animateOptions(e,t){const n=t.options,i=function(e,t){if(!t)return;let n=e.options;if(n)return n.$shared&&(e.options=n=Object.assign({},n,{$shared:!1,$animations:{}})),n;e.options=t}(e,n);if(!i)return[];const s=this._createAnimations(i,n);return n.$shared&&function(e,t){const n=[],i=Object.keys(t);for(let t=0;t<i.length;t++){const s=e[i[t]];s&&s.active()&&n.push(s.wait())}return Promise.all(n)}(e.options.$animations,n).then((()=>{e.options=n}),(()=>{})),s}_createAnimations(e,t){const n=this._properties,i=[],s=e.$animations||(e.$animations={}),r=Object.keys(t),a=Date.now();let o;for(o=r.length-1;o>=0;--o){const d=r[o];if("$"===d.charAt(0))continue;if("options"===d){i.push(...this._animateOptions(e,t));continue}const l=t[d];let u=s[d];const h=n.get(d);if(u){if(h&&u.active()){u.update(h,l,a);continue}u.cancel()}h&&h.duration?(s[d]=u=new dn(h,e,d,l),i.push(u)):e[d]=l}return i}update(e,t){if(0===this._properties.size)return void Object.assign(e,t);const n=this._createAnimations(e,t);return n.length?(rn.add(this._chart,n),!0):void 0}}function hn(e,t){const n=e&&e.options||{},i=n.reverse,s=void 0===n.min?t:0,r=void 0===n.max?t:0;return{start:i?r:s,end:i?s:r}}function cn(e,t){const n=[],i=e._getSortedDatasetMetas(t);let s,r;for(s=0,r=i.length;s<r;++s)n.push(i[s].index);return n}function _n(e,t,n,i={}){const s=e.keys,r="single"===i.mode;let a,o,d,l;if(null!==t){for(a=0,o=s.length;a<o;++a){if(d=+s[a],d===n){if(i.all)continue;break}l=e.values[d],c(l)&&(r||0===t||W(t)===W(l))&&(t+=l)}return t}}function mn(e,t){const n=e&&e.options.stacked;return n||void 0===n&&void 0!==t.stack}function fn(e,t,n){const i=e[t]||(e[t]={});return i[n]||(i[n]={})}function pn(e,t,n,i){for(const s of t.getMatchingVisibleMetas(i).reverse()){const t=e[s.index];if(n&&t>0||!n&&t<0)return s.index}return null}function gn(e,t){const{chart:n,_cachedMeta:i}=e,s=n._stacks||(n._stacks={}),{iScale:r,vScale:a,index:o}=i,d=r.axis,l=a.axis,u=function(e,t,n){return`${e.id}.${t.id}.${n.stack||n.type}`}(r,a,i),h=t.length;let c;for(let e=0;e<h;++e){const n=t[e],{[d]:r,[l]:h}=n;c=(n._stacks||(n._stacks={}))[l]=fn(s,u,r),c[o]=h,c._top=pn(c,a,!0,i.type),c._bottom=pn(c,a,!1,i.type)}}function yn(e,t){const n=e.scales;return Object.keys(n).filter((e=>n[e].axis===t)).shift()}function Mn(e,t){const n=e.controller.index,i=e.vScale&&e.vScale.axis;if(i){t=t||e._parsed;for(const e of t){const t=e._stacks;if(!t||void 0===t[i]||void 0===t[i][n])return;delete t[i][n]}}}const bn=e=>"reset"===e||"none"===e,Ln=(e,t)=>t?e:Object.assign({},e);class vn{constructor(e,t){this.chart=e,this._ctx=e.ctx,this.index=t,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.$context=void 0,this._syncList=[],this.initialize()}initialize(){const e=this._cachedMeta;this.configure(),this.linkScales(),e._stacked=mn(e.vScale,e),this.addElements()}updateIndex(e){this.index!==e&&Mn(this._cachedMeta),this.index=e}linkScales(){const e=this.chart,t=this._cachedMeta,n=this.getDataset(),i=(e,t,n,i)=>"x"===e?t:"r"===e?i:n,s=t.xAxisID=m(n.xAxisID,yn(e,"x")),r=t.yAxisID=m(n.yAxisID,yn(e,"y")),a=t.rAxisID=m(n.rAxisID,yn(e,"r")),o=t.indexAxis,d=t.iAxisID=i(o,s,r,a),l=t.vAxisID=i(o,r,s,a);t.xScale=this.getScaleForId(s),t.yScale=this.getScaleForId(r),t.rScale=this.getScaleForId(a),t.iScale=this.getScaleForId(d),t.vScale=this.getScaleForId(l)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(e){return this.chart.scales[e]}_getOtherScale(e){const t=this._cachedMeta;return e===t.iScale?t.vScale:t.iScale}reset(){this._update("reset")}_destroy(){const e=this._cachedMeta;this._data&&ct(this._data,this),e._stacked&&Mn(e)}_dataCheck(){const e=this.getDataset(),t=e.data||(e.data=[]),n=this._data;if(h(t))this._data=function(e){const t=Object.keys(e),n=new Array(t.length);let i,s,r;for(i=0,s=t.length;i<s;++i)r=t[i],n[i]={x:r,y:e[r]};return n}(t);else if(n!==t){if(n){ct(n,this);const e=this._cachedMeta;Mn(e),e._parsed=[]}t&&Object.isExtensible(t)&&(this,(i=t)._chartjs?i._chartjs.listeners.push(this):(Object.defineProperty(i,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[this]}}),ht.forEach((e=>{const t="_onData"+x(e),n=i[e];Object.defineProperty(i,e,{configurable:!0,enumerable:!1,value(...e){const s=n.apply(this,e);return i._chartjs.listeners.forEach((n=>{"function"==typeof n[t]&&n[t](...e)})),s}})})))),this._syncList=[],this._data=t}var i}addElements(){const e=this._cachedMeta;this._dataCheck(),this.datasetElementType&&(e.dataset=new this.datasetElementType)}buildOrUpdateElements(e){const t=this._cachedMeta,n=this.getDataset();let i=!1;this._dataCheck();const s=t._stacked;t._stacked=mn(t.vScale,t),t.stack!==n.stack&&(i=!0,Mn(t),t.stack=n.stack),this._resyncElements(e),(i||s!==t._stacked)&&gn(this,t._parsed)}configure(){const e=this.chart.config,t=e.datasetScopeKeys(this._type),n=e.getOptionScopes(this.getDataset(),t,!0);this.options=e.createResolver(n,this.getContext()),this._parsing=this.options.parsing}parse(e,t){const{_cachedMeta:n,_data:i}=this,{iScale:s,_stacked:r}=n,a=s.axis;let o,d,l,c=0===e&&t===i.length||n._sorted,_=e>0&&n._parsed[e-1];if(!1===this._parsing)n._parsed=i,n._sorted=!0,l=i;else{l=u(i[e])?this.parseArrayData(n,i,e,t):h(i[e])?this.parseObjectData(n,i,e,t):this.parsePrimitiveData(n,i,e,t);const s=()=>null===d[a]||_&&d[a]<_[a];for(o=0;o<t;++o)n._parsed[o+e]=d=l[o],c&&(s()&&(c=!1),_=d);n._sorted=c}r&&gn(this,l)}parsePrimitiveData(e,t,n,i){const{iScale:s,vScale:r}=e,a=s.axis,o=r.axis,d=s.getLabels(),l=s===r,u=new Array(i);let h,c,_;for(h=0,c=i;h<c;++h)_=h+n,u[h]={[a]:l||s.parse(d[_],_),[o]:r.parse(t[_],_)};return u}parseArrayData(e,t,n,i){const{xScale:s,yScale:r}=e,a=new Array(i);let o,d,l,u;for(o=0,d=i;o<d;++o)l=o+n,u=t[l],a[o]={x:s.parse(u[0],l),y:r.parse(u[1],l)};return a}parseObjectData(e,t,n,i){const{xScale:s,yScale:r}=e,{xAxisKey:a="x",yAxisKey:o="y"}=this._parsing,d=new Array(i);let l,u,h,c;for(l=0,u=i;l<u;++l)h=l+n,c=t[h],d[l]={x:s.parse(D(c,a),h),y:r.parse(D(c,o),h)};return d}getParsed(e){return this._cachedMeta._parsed[e]}getDataElement(e){return this._cachedMeta.data[e]}applyStack(e,t,n){const i=this.chart,s=this._cachedMeta,r=t[e.axis];return _n({keys:cn(i,!0),values:t._stacks[e.axis]},r,s.index,{mode:n})}updateRangeFromParsed(e,t,n,i){const s=n[t.axis];let r=null===s?NaN:s;const a=i&&n._stacks[t.axis];i&&a&&(i.values=a,r=_n(i,s,this._cachedMeta.index)),e.min=Math.min(e.min,r),e.max=Math.max(e.max,r)}getMinMax(e,t){const n=this._cachedMeta,i=n._parsed,s=n._sorted&&e===n.iScale,r=i.length,a=this._getOtherScale(e),o=((e,t,n)=>e&&!t.hidden&&t._stacked&&{keys:cn(n,!0),values:null})(t,n,this.chart),d={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:l,max:u}=function(e){const{min:t,max:n,minDefined:i,maxDefined:s}=e.getUserBounds();return{min:i?t:Number.NEGATIVE_INFINITY,max:s?n:Number.POSITIVE_INFINITY}}(a);let h,_;function m(){_=i[h];const t=_[a.axis];return!c(_[e.axis])||l>t||u<t}for(h=0;h<r&&(m()||(this.updateRangeFromParsed(d,e,_,o),!s));++h);if(s)for(h=r-1;h>=0;--h)if(!m()){this.updateRangeFromParsed(d,e,_,o);break}return d}getAllParsedValues(e){const t=this._cachedMeta._parsed,n=[];let i,s,r;for(i=0,s=t.length;i<s;++i)r=t[i][e.axis],c(r)&&n.push(r);return n}getMaxOverflow(){return!1}getLabelAndValue(e){const t=this._cachedMeta,n=t.iScale,i=t.vScale,s=this.getParsed(e);return{label:n?""+n.getLabelForValue(s[n.axis]):"",value:i?""+i.getLabelForValue(s[i.axis]):""}}_update(e){const t=this._cachedMeta;this.configure(),this._cachedDataOpts={},this.update(e||"default"),t._clip=function(e){let t,n,i,s;return h(e)?(t=e.top,n=e.right,i=e.bottom,s=e.left):t=n=i=s=e,{top:t,right:n,bottom:i,left:s,disabled:!1===e}}(m(this.options.clip,function(e,t,n){if(!1===n)return!1;const i=hn(e,n),s=hn(t,n);return{top:s.end,right:i.end,bottom:s.start,left:i.start}}(t.xScale,t.yScale,this.getMaxOverflow())))}update(e){}draw(){const e=this._ctx,t=this.chart,n=this._cachedMeta,i=n.data||[],s=t.chartArea,r=[],a=this._drawStart||0,o=this._drawCount||i.length-a;let d;for(n.dataset&&n.dataset.draw(e,s,a,o),d=a;d<a+o;++d){const t=i[d];t.hidden||(t.active?r.push(t):t.draw(e,s))}for(d=0;d<r.length;++d)r[d].draw(e,s)}getStyle(e,t){const n=t?"active":"default";return void 0===e&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(n):this.resolveDataElementOptions(e||0,n)}getContext(e,t,n){const i=this.getDataset();let s;if(e>=0&&e<this._cachedMeta.data.length){const t=this._cachedMeta.data[e];s=t.$context||(t.$context=function(e,t,n){return ot(e,{active:!1,dataIndex:t,parsed:void 0,raw:void 0,element:n,index:t,mode:"default",type:"data"})}(this.getContext(),e,t)),s.parsed=this.getParsed(e),s.raw=i.data[e],s.index=s.dataIndex=e}else s=this.$context||(this.$context=function(e,t){return ot(e,{active:!1,dataset:void 0,datasetIndex:t,index:t,mode:"default",type:"dataset"})}(this.chart.getContext(),this.index)),s.dataset=i,s.index=s.datasetIndex=this.index;return s.active=!!t,s.mode=n,s}resolveDatasetElementOptions(e){return this._resolveElementOptions(this.datasetElementType.id,e)}resolveDataElementOptions(e,t){return this._resolveElementOptions(this.dataElementType.id,t,e)}_resolveElementOptions(e,t="default",n){const i="active"===t,s=this._cachedDataOpts,r=e+"-"+t,a=s[r],o=this.enableOptionSharing&&T(n);if(a)return Ln(a,o);const d=this.chart.config,l=d.datasetElementScopeKeys(this._type,e),u=i?[`${e}Hover`,"hover",e,""]:[e,""],h=d.getOptionScopes(this.getDataset(),l),c=Object.keys(Ie.elements[e]),_=d.resolveNamedOptions(h,c,(()=>this.getContext(n,i)),u);return _.$shared&&(_.$shared=o,s[r]=Object.freeze(Ln(_,o))),_}_resolveAnimations(e,t,n){const i=this.chart,s=this._cachedDataOpts,r=`animation-${t}`,a=s[r];if(a)return a;let o;if(!1!==i.options.animation){const i=this.chart.config,s=i.datasetAnimationScopeKeys(this._type,t),r=i.getOptionScopes(this.getDataset(),s);o=i.createResolver(r,this.getContext(e,n,t))}const d=new un(i,o&&o.animations);return o&&o._cacheable&&(s[r]=Object.freeze(d)),d}getSharedOptions(e){if(e.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},e))}includeOptions(e,t){return!t||bn(e)||this.chart._animationsDisabled}updateElement(e,t,n,i){bn(i)?Object.assign(e,n):this._resolveAnimations(t,i).update(e,n)}updateSharedOptions(e,t,n){e&&!bn(t)&&this._resolveAnimations(void 0,t).update(e,n)}_setStyle(e,t,n,i){e.active=i;const s=this.getStyle(t,i);this._resolveAnimations(t,n,i).update(e,{options:!i&&this.getSharedOptions(s)||s})}removeHoverStyle(e,t,n){this._setStyle(e,n,"active",!1)}setHoverStyle(e,t,n){this._setStyle(e,n,"active",!0)}_removeDatasetHoverStyle(){const e=this._cachedMeta.dataset;e&&this._setStyle(e,void 0,"active",!1)}_setDatasetHoverStyle(){const e=this._cachedMeta.dataset;e&&this._setStyle(e,void 0,"active",!0)}_resyncElements(e){const t=this._data,n=this._cachedMeta.data;for(const[e,t,n]of this._syncList)this[e](t,n);this._syncList=[];const i=n.length,s=t.length,r=Math.min(s,i);r&&this.parse(0,r),s>i?this._insertElements(i,s-i,e):s<i&&this._removeElements(s,i-s)}_insertElements(e,t,n=!0){const i=this._cachedMeta,s=i.data,r=e+t;let a;const o=e=>{for(e.length+=t,a=e.length-1;a>=r;a--)e[a]=e[a-t]};for(o(s),a=e;a<r;++a)s[a]=new this.dataElementType;this._parsing&&o(i._parsed),this.parse(e,t),n&&this.updateElements(s,e,t,"reset")}updateElements(e,t,n,i){}_removeElements(e,t){const n=this._cachedMeta;if(this._parsing){const i=n._parsed.splice(e,t);n._stacked&&Mn(n,i)}n.data.splice(e,t)}_sync(e){if(this._parsing)this._syncList.push(e);else{const[t,n,i]=e;this[t](n,i)}}_onDataPush(){const e=arguments.length;this._sync(["_insertElements",this.getDataset().data.length-e,e])}_onDataPop(){this._sync(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._sync(["_removeElements",0,1])}_onDataSplice(e,t){this._sync(["_removeElements",e,t]),this._sync(["_insertElements",e,arguments.length-2])}_onDataUnshift(){this._sync(["_insertElements",0,arguments.length])}}function wn(e){const t=e.iScale,n=function(e,t){if(!e._cache.$bar){const n=e.getMatchingVisibleMetas(t);let i=[];for(let t=0,s=n.length;t<s;t++)i=i.concat(n[t].controller.getAllParsedValues(e));e._cache.$bar=_t(i.sort(((e,t)=>e-t)))}return e._cache.$bar}(t,e.type);let i,s,r,a,o=t._length;const d=()=>{32767!==r&&-32768!==r&&(T(a)&&(o=Math.min(o,Math.abs(r-a)||o)),a=r)};for(i=0,s=n.length;i<s;++i)r=t.getPixelForValue(n[i]),d();for(a=void 0,i=0,s=t.ticks.length;i<s;++i)r=t.getPixelForTick(i),d();return o}function Yn(e,t,n,i){return u(e)?function(e,t,n,i){const s=n.parse(e[0],i),r=n.parse(e[1],i),a=Math.min(s,r),o=Math.max(s,r);let d=a,l=o;Math.abs(a)>Math.abs(o)&&(d=o,l=a),t[n.axis]=l,t._custom={barStart:d,barEnd:l,start:s,end:r,min:a,max:o}}(e,t,n,i):t[n.axis]=n.parse(e,i),t}function kn(e,t,n,i){const s=e.iScale,r=e.vScale,a=s.getLabels(),o=s===r,d=[];let l,u,h,c;for(l=n,u=n+i;l<u;++l)c=t[l],h={},h[s.axis]=o||s.parse(a[l],l),d.push(Yn(c,h,r,l));return d}function Dn(e){return e&&void 0!==e.barStart&&void 0!==e.barEnd}function xn(e,t,n,i){let s=t.borderSkipped;const r={};if(!s)return void(e.borderSkipped=r);const{start:a,end:o,reverse:d,top:l,bottom:u}=function(e){let t,n,i,s,r;return e.horizontal?(t=e.base>e.x,n="left",i="right"):(t=e.base<e.y,n="bottom",i="top"),t?(s="end",r="start"):(s="start",r="end"),{start:n,end:i,reverse:t,top:s,bottom:r}}(e);"middle"===s&&n&&(e.enableBorderRadius=!0,(n._top||0)===i?s=l:(n._bottom||0)===i?s=u:(r[Tn(u,a,o,d)]=!0,s=l)),r[Tn(s,a,o,d)]=!0,e.borderSkipped=r}function Tn(e,t,n,i){var s,r,a;return i?(a=n,e=Sn(e=(s=e)===(r=t)?a:s===a?r:s,n,t)):e=Sn(e,t,n),e}function Sn(e,t,n){return"start"===e?t:"end"===e?n:e}function On(e,{inflateAmount:t},n){e.inflateAmount="auto"===t?1===n?.33:0:t}vn.defaults={},vn.prototype.datasetElementType=null,vn.prototype.dataElementType=null;class Hn extends vn{parsePrimitiveData(e,t,n,i){return kn(e,t,n,i)}parseArrayData(e,t,n,i){return kn(e,t,n,i)}parseObjectData(e,t,n,i){const{iScale:s,vScale:r}=e,{xAxisKey:a="x",yAxisKey:o="y"}=this._parsing,d="x"===s.axis?a:o,l="x"===r.axis?a:o,u=[];let h,c,_,m;for(h=n,c=n+i;h<c;++h)m=t[h],_={},_[s.axis]=s.parse(D(m,d),h),u.push(Yn(D(m,l),_,r,h));return u}updateRangeFromParsed(e,t,n,i){super.updateRangeFromParsed(e,t,n,i);const s=n._custom;s&&t===this._cachedMeta.vScale&&(e.min=Math.min(e.min,s.min),e.max=Math.max(e.max,s.max))}getMaxOverflow(){return 0}getLabelAndValue(e){const t=this._cachedMeta,{iScale:n,vScale:i}=t,s=this.getParsed(e),r=s._custom,a=Dn(r)?"["+r.start+", "+r.end+"]":""+i.getLabelForValue(s[i.axis]);return{label:""+n.getLabelForValue(s[n.axis]),value:a}}initialize(){this.enableOptionSharing=!0,super.initialize(),this._cachedMeta.stack=this.getDataset().stack}update(e){const t=this._cachedMeta;this.updateElements(t.data,0,t.data.length,e)}updateElements(e,t,n,i){const s="reset"===i,{index:r,_cachedMeta:{vScale:a}}=this,o=a.getBasePixel(),d=a.isHorizontal(),u=this._getRuler(),h=this.resolveDataElementOptions(t,i),c=this.getSharedOptions(h),_=this.includeOptions(i,c);this.updateSharedOptions(c,i,h);for(let h=t;h<t+n;h++){const t=this.getParsed(h),n=s||l(t[a.axis])?{base:o,head:o}:this._calculateBarValuePixels(h),m=this._calculateBarIndexPixels(h,u),f=(t._stacks||{})[a.axis],p={horizontal:d,base:n.base,enableBorderRadius:!f||Dn(t._custom)||r===f._top||r===f._bottom,x:d?n.head:m.center,y:d?m.center:n.head,height:d?m.size:Math.abs(n.size),width:d?Math.abs(n.size):m.size};_&&(p.options=c||this.resolveDataElementOptions(h,e[h].active?"active":i));const g=p.options||e[h].options;xn(p,g,f,r),On(p,g,u.ratio),this.updateElement(e[h],h,p,i)}}_getStacks(e,t){const n=this._cachedMeta.iScale,i=n.getMatchingVisibleMetas(this._type),s=n.options.stacked,r=i.length,a=[];let o,d;for(o=0;o<r;++o)if(d=i[o],d.controller.options.grouped){if(void 0!==t){const e=d.controller.getParsed(t)[d.controller._cachedMeta.vScale.axis];if(l(e)||isNaN(e))continue}if((!1===s||-1===a.indexOf(d.stack)||void 0===s&&void 0===d.stack)&&a.push(d.stack),d.index===e)break}return a.length||a.push(void 0),a}_getStackCount(e){return this._getStacks(void 0,e).length}_getStackIndex(e,t,n){const i=this._getStacks(e,n),s=void 0!==t?i.indexOf(t):-1;return-1===s?i.length-1:s}_getRuler(){const e=this.options,t=this._cachedMeta,n=t.iScale,i=[];let s,r;for(s=0,r=t.data.length;s<r;++s)i.push(n.getPixelForValue(this.getParsed(s)[n.axis],s));const a=e.barThickness;return{min:a||wn(t),pixels:i,start:n._startPixel,end:n._endPixel,stackCount:this._getStackCount(),scale:n,grouped:e.grouped,ratio:a?1:e.categoryPercentage*e.barPercentage}}_calculateBarValuePixels(e){const{_cachedMeta:{vScale:t,_stacked:n},options:{base:i,minBarLength:s}}=this,r=i||0,a=this.getParsed(e),o=a._custom,d=Dn(o);let u,h,c=a[t.axis],_=0,m=n?this.applyStack(t,a,n):c;m!==c&&(_=m-c,m=c),d&&(c=o.barStart,m=o.barEnd-o.barStart,0!==c&&W(c)!==W(o.barEnd)&&(_=0),_+=c);const f=l(i)||d?_:i;let p=t.getPixelForValue(f);if(u=this.chart.getDataVisibility(e)?t.getPixelForValue(_+m):p,h=u-p,Math.abs(h)<s&&(h=function(e,t,n){return 0!==e?W(e):(t.isHorizontal()?1:-1)*(t.min>=n?1:-1)}(h,t,r)*s,c===r&&(p-=h/2),u=p+h),p===t.getPixelForValue(r)){const e=W(h)*t.getLineWidthForValue(r)/2;p+=e,h-=e}return{size:h,base:p,head:u,center:u+h/2}}_calculateBarIndexPixels(e,t){const n=t.scale,i=this.options,s=i.skipNull,r=m(i.maxBarThickness,1/0);let a,o;if(t.grouped){const n=s?this._getStackCount(e):t.stackCount,d="flex"===i.barThickness?function(e,t,n,i){const s=t.pixels,r=s[e];let a=e>0?s[e-1]:null,o=e<s.length-1?s[e+1]:null;const d=n.categoryPercentage;null===a&&(a=r-(null===o?t.end-t.start:o-r)),null===o&&(o=r+r-a);const l=r-(r-Math.min(a,o))/2*d;return{chunk:Math.abs(o-a)/2*d/i,ratio:n.barPercentage,start:l}}(e,t,i,n):function(e,t,n,i){const s=n.barThickness;let r,a;return l(s)?(r=t.min*n.categoryPercentage,a=n.barPercentage):(r=s*i,a=1),{chunk:r/i,ratio:a,start:t.pixels[e]-r/2}}(e,t,i,n),u=this._getStackIndex(this.index,this._cachedMeta.stack,s?e:void 0);a=d.start+d.chunk*u+d.chunk/2,o=Math.min(r,d.chunk*d.ratio)}else a=n.getPixelForValue(this.getParsed(e)[n.axis],e),o=Math.min(r,t.min*t.ratio);return{base:a-o/2,head:a+o/2,center:a,size:o}}draw(){const e=this._cachedMeta,t=e.vScale,n=e.data,i=n.length;let s=0;for(;s<i;++s)null!==this.getParsed(s)[t.axis]&&n[s].draw(this._ctx)}}Hn.id="bar",Hn.defaults={datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}},Hn.overrides={scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}};class jn extends vn{initialize(){this.enableOptionSharing=!0,super.initialize()}parsePrimitiveData(e,t,n,i){const s=super.parsePrimitiveData(e,t,n,i);for(let e=0;e<s.length;e++)s[e]._custom=this.resolveDataElementOptions(e+n).radius;return s}parseArrayData(e,t,n,i){const s=super.parseArrayData(e,t,n,i);for(let e=0;e<s.length;e++){const i=t[n+e];s[e]._custom=m(i[2],this.resolveDataElementOptions(e+n).radius)}return s}parseObjectData(e,t,n,i){const s=super.parseObjectData(e,t,n,i);for(let e=0;e<s.length;e++){const i=t[n+e];s[e]._custom=m(i&&i.r&&+i.r,this.resolveDataElementOptions(e+n).radius)}return s}getMaxOverflow(){const e=this._cachedMeta.data;let t=0;for(let n=e.length-1;n>=0;--n)t=Math.max(t,e[n].size(this.resolveDataElementOptions(n))/2);return t>0&&t}getLabelAndValue(e){const t=this._cachedMeta,{xScale:n,yScale:i}=t,s=this.getParsed(e),r=n.getLabelForValue(s.x),a=i.getLabelForValue(s.y),o=s._custom;return{label:t.label,value:"("+r+", "+a+(o?", "+o:"")+")"}}update(e){const t=this._cachedMeta.data;this.updateElements(t,0,t.length,e)}updateElements(e,t,n,i){const s="reset"===i,{iScale:r,vScale:a}=this._cachedMeta,o=this.resolveDataElementOptions(t,i),d=this.getSharedOptions(o),l=this.includeOptions(i,d),u=r.axis,h=a.axis;for(let o=t;o<t+n;o++){const t=e[o],n=!s&&this.getParsed(o),d={},c=d[u]=s?r.getPixelForDecimal(.5):r.getPixelForValue(n[u]),_=d[h]=s?a.getBasePixel():a.getPixelForValue(n[h]);d.skip=isNaN(c)||isNaN(_),l&&(d.options=this.resolveDataElementOptions(o,t.active?"active":i),s&&(d.options.radius=0)),this.updateElement(t,o,d,i)}this.updateSharedOptions(d,i,o)}resolveDataElementOptions(e,t){const n=this.getParsed(e);let i=super.resolveDataElementOptions(e,t);i.$shared&&(i=Object.assign({},i,{$shared:!1}));const s=i.radius;return"active"!==t&&(i.radius=0),i.radius+=m(n&&n._custom,s),i}}jn.id="bubble",jn.defaults={datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}},jn.overrides={scales:{x:{type:"linear"},y:{type:"linear"}},plugins:{tooltip:{callbacks:{title:()=>""}}}};class En extends vn{constructor(e,t){super(e,t),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(e,t){const n=this.getDataset().data,i=this._cachedMeta;if(!1===this._parsing)i._parsed=n;else{let s,r,a=e=>+n[e];if(h(n[e])){const{key:e="value"}=this._parsing;a=t=>+D(n[t],e)}for(s=e,r=e+t;s<r;++s)i._parsed[s]=a(s)}}_getRotation(){return V(this.options.rotation-90)}_getCircumference(){return V(this.options.circumference)}_getRotationExtents(){let e=H,t=-H;for(let n=0;n<this.chart.data.datasets.length;++n)if(this.chart.isDatasetVisible(n)){const i=this.chart.getDatasetMeta(n).controller,s=i._getRotation(),r=i._getCircumference();e=Math.min(e,s),t=Math.max(t,s+r)}return{rotation:e,circumference:t-e}}update(e){const t=this.chart,{chartArea:n}=t,i=this._cachedMeta,s=i.data,r=this.getMaxBorderWidth()+this.getMaxOffset(s)+this.options.spacing,a=Math.max((Math.min(n.width,n.height)-r)/2,0),o=Math.min((l=a,"string"==typeof(d=this.options.cutout)&&d.endsWith("%")?parseFloat(d)/100:d/l),1);var d,l;const u=this._getRingWeight(this.index),{circumference:h,rotation:c}=this._getRotationExtents(),{ratioX:_,ratioY:m,offsetX:p,offsetY:g}=function(e,t,n){let i=1,s=1,r=0,a=0;if(t<H){const o=e,d=o+t,l=Math.cos(o),u=Math.sin(o),h=Math.cos(d),c=Math.sin(d),_=(e,t,i)=>K(e,o,d,!0)?1:Math.max(t,t*n,i,i*n),m=(e,t,i)=>K(e,o,d,!0)?-1:Math.min(t,t*n,i,i*n),f=_(0,l,h),p=_(A,u,c),g=m(O,l,h),y=m(O+A,u,c);i=(f-g)/2,s=(p-y)/2,r=-(f+g)/2,a=-(p+y)/2}return{ratioX:i,ratioY:s,offsetX:r,offsetY:a}}(c,h,o),y=(n.width-r)/_,M=(n.height-r)/m,b=Math.max(Math.min(y,M)/2,0),L=f(this.options.radius,b),v=(L-Math.max(L*o,0))/this._getVisibleDatasetWeightTotal();this.offsetX=p*L,this.offsetY=g*L,i.total=this.calculateTotal(),this.outerRadius=L-v*this._getRingWeightOffset(this.index),this.innerRadius=Math.max(this.outerRadius-v*u,0),this.updateElements(s,0,s.length,e)}_circumference(e,t){const n=this.options,i=this._cachedMeta,s=this._getCircumference();return t&&n.animation.animateRotate||!this.chart.getDataVisibility(e)||null===i._parsed[e]||i.data[e].hidden?0:this.calculateCircumference(i._parsed[e]*s/H)}updateElements(e,t,n,i){const s="reset"===i,r=this.chart,a=r.chartArea,o=r.options.animation,d=(a.left+a.right)/2,l=(a.top+a.bottom)/2,u=s&&o.animateScale,h=u?0:this.innerRadius,c=u?0:this.outerRadius,_=this.resolveDataElementOptions(t,i),m=this.getSharedOptions(_),f=this.includeOptions(i,m);let p,g=this._getRotation();for(p=0;p<t;++p)g+=this._circumference(p,s);for(p=t;p<t+n;++p){const t=this._circumference(p,s),n=e[p],r={x:d+this.offsetX,y:l+this.offsetY,startAngle:g,endAngle:g+t,circumference:t,outerRadius:c,innerRadius:h};f&&(r.options=m||this.resolveDataElementOptions(p,n.active?"active":i)),g+=t,this.updateElement(n,p,r,i)}this.updateSharedOptions(m,i,_)}calculateTotal(){const e=this._cachedMeta,t=e.data;let n,i=0;for(n=0;n<t.length;n++){const s=e._parsed[n];null===s||isNaN(s)||!this.chart.getDataVisibility(n)||t[n].hidden||(i+=Math.abs(s))}return i}calculateCircumference(e){const t=this._cachedMeta.total;return t>0&&!isNaN(e)?H*(Math.abs(e)/t):0}getLabelAndValue(e){const t=this._cachedMeta,n=this.chart,i=n.data.labels||[],s=qt(t._parsed[e],n.options.locale);return{label:i[e]||"",value:s}}getMaxBorderWidth(e){let t=0;const n=this.chart;let i,s,r,a,o;if(!e)for(i=0,s=n.data.datasets.length;i<s;++i)if(n.isDatasetVisible(i)){r=n.getDatasetMeta(i),e=r.data,a=r.controller,a!==this&&a.configure();break}if(!e)return 0;for(i=0,s=e.length;i<s;++i)o=a.resolveDataElementOptions(i),"inner"!==o.borderAlign&&(t=Math.max(t,o.borderWidth||0,o.hoverBorderWidth||0));return t}getMaxOffset(e){let t=0;for(let n=0,i=e.length;n<i;++n){const e=this.resolveDataElementOptions(n);t=Math.max(t,e.offset||0,e.hoverOffset||0)}return t}_getRingWeightOffset(e){let t=0;for(let n=0;n<e;++n)this.chart.isDatasetVisible(n)&&(t+=this._getRingWeight(n));return t}_getRingWeight(e){return Math.max(m(this.chart.data.datasets[e].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}}En.id="doughnut",En.defaults={datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth","spacing"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",spacing:0,indexAxis:"r"},En.descriptors={_scriptable:e=>"spacing"!==e,_indexable:e=>"spacing"!==e},En.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(e){const t=e.data;if(t.labels.length&&t.datasets.length){const{labels:{pointStyle:n}}=e.legend.options;return t.labels.map(((t,i)=>{const s=e.getDatasetMeta(0).controller.getStyle(i);return{text:t,fillStyle:s.backgroundColor,strokeStyle:s.borderColor,lineWidth:s.borderWidth,pointStyle:n,hidden:!e.getDataVisibility(i),index:i}}))}return[]}},onClick(e,t,n){n.chart.toggleDataVisibility(t.index),n.chart.update()}},tooltip:{callbacks:{title:()=>"",label(e){let t=e.label;const n=": "+e.formattedValue;return u(t)?(t=t.slice(),t[0]+=n):t+=n,t}}}}};class Pn extends vn{initialize(){this.enableOptionSharing=!0,super.initialize()}update(e){const t=this._cachedMeta,{dataset:n,data:i=[],_dataset:s}=t,r=this.chart._animationsDisabled;let{start:a,count:o}=function(e,t,n){const i=t.length;let s=0,r=i;if(e._sorted){const{iScale:a,_parsed:o}=e,d=a.axis,{min:l,max:u,minDefined:h,maxDefined:c}=a.getUserBounds();h&&(s=Z(Math.min(lt(o,a.axis,l).lo,n?i:lt(t,d,a.getPixelForValue(l)).lo),0,i-1)),r=c?Z(Math.max(lt(o,a.axis,u).hi+1,n?0:lt(t,d,a.getPixelForValue(u)).hi+1),s,i)-s:i-s}return{start:s,count:r}}(t,i,r);this._drawStart=a,this._drawCount=o,function(e){const{xScale:t,yScale:n,_scaleRanges:i}=e,s={xmin:t.min,xmax:t.max,ymin:n.min,ymax:n.max};if(!i)return e._scaleRanges=s,!0;const r=i.xmin!==t.min||i.xmax!==t.max||i.ymin!==n.min||i.ymax!==n.max;return Object.assign(i,s),r}(t)&&(a=0,o=i.length),n._chart=this.chart,n._datasetIndex=this.index,n._decimated=!!s._decimated,n.points=i;const d=this.resolveDatasetElementOptions(e);this.options.showLine||(d.borderWidth=0),d.segment=this.options.segment,this.updateElement(n,void 0,{animated:!r,options:d},e),this.updateElements(i,a,o,e)}updateElements(e,t,n,i){const s="reset"===i,{iScale:r,vScale:a,_stacked:o,_dataset:d}=this._cachedMeta,u=this.resolveDataElementOptions(t,i),h=this.getSharedOptions(u),c=this.includeOptions(i,h),_=r.axis,m=a.axis,{spanGaps:f,segment:p}=this.options,g=F(f)?f:Number.POSITIVE_INFINITY,y=this.chart._animationsDisabled||s||"none"===i;let M=t>0&&this.getParsed(t-1);for(let u=t;u<t+n;++u){const t=e[u],n=this.getParsed(u),f=y?t:{},b=l(n[m]),L=f[_]=r.getPixelForValue(n[_],u),v=f[m]=s||b?a.getBasePixel():a.getPixelForValue(o?this.applyStack(a,n,o):n[m],u);f.skip=isNaN(L)||isNaN(v)||b,f.stop=u>0&&n[_]-M[_]>g,p&&(f.parsed=n,f.raw=d.data[u]),c&&(f.options=h||this.resolveDataElementOptions(u,t.active?"active":i)),y||this.updateElement(t,u,f,i),M=n}this.updateSharedOptions(h,i,u)}getMaxOverflow(){const e=this._cachedMeta,t=e.dataset,n=t.options&&t.options.borderWidth||0,i=e.data||[];if(!i.length)return n;const s=i[0].size(this.resolveDataElementOptions(0)),r=i[i.length-1].size(this.resolveDataElementOptions(i.length-1));return Math.max(n,s,r)/2}draw(){const e=this._cachedMeta;e.dataset.updateControlPoints(this.chart.chartArea,e.iScale.axis),super.draw()}}Pn.id="line",Pn.defaults={datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1},Pn.overrides={scales:{_index_:{type:"category"},_value_:{type:"linear"}}};class An extends vn{constructor(e,t){super(e,t),this.innerRadius=void 0,this.outerRadius=void 0}getLabelAndValue(e){const t=this._cachedMeta,n=this.chart,i=n.data.labels||[],s=qt(t._parsed[e].r,n.options.locale);return{label:i[e]||"",value:s}}update(e){const t=this._cachedMeta.data;this._updateRadius(),this.updateElements(t,0,t.length,e)}_updateRadius(){const e=this.chart,t=e.chartArea,n=e.options,i=Math.min(t.right-t.left,t.bottom-t.top),s=Math.max(i/2,0),r=(s-Math.max(n.cutoutPercentage?s/100*n.cutoutPercentage:1,0))/e.getVisibleDatasetCount();this.outerRadius=s-r*this.index,this.innerRadius=this.outerRadius-r}updateElements(e,t,n,i){const s="reset"===i,r=this.chart,a=this.getDataset(),o=r.options.animation,d=this._cachedMeta.rScale,l=d.xCenter,u=d.yCenter,h=d.getIndexAngle(0)-.5*O;let c,_=h;const m=360/this.countVisibleElements();for(c=0;c<t;++c)_+=this._computeAngle(c,i,m);for(c=t;c<t+n;c++){const t=e[c];let n=_,f=_+this._computeAngle(c,i,m),p=r.getDataVisibility(c)?d.getDistanceFromCenterForValue(a.data[c]):0;_=f,s&&(o.animateScale&&(p=0),o.animateRotate&&(n=f=h));const g={x:l,y:u,innerRadius:0,outerRadius:p,startAngle:n,endAngle:f,options:this.resolveDataElementOptions(c,t.active?"active":i)};this.updateElement(t,c,g,i)}}countVisibleElements(){const e=this.getDataset(),t=this._cachedMeta;let n=0;return t.data.forEach(((t,i)=>{!isNaN(e.data[i])&&this.chart.getDataVisibility(i)&&n++})),n}_computeAngle(e,t,n){return this.chart.getDataVisibility(e)?V(this.resolveDataElementOptions(e,t).angle||n):0}}An.id="polarArea",An.defaults={dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0},An.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(e){const t=e.data;if(t.labels.length&&t.datasets.length){const{labels:{pointStyle:n}}=e.legend.options;return t.labels.map(((t,i)=>{const s=e.getDatasetMeta(0).controller.getStyle(i);return{text:t,fillStyle:s.backgroundColor,strokeStyle:s.borderColor,lineWidth:s.borderWidth,pointStyle:n,hidden:!e.getDataVisibility(i),index:i}}))}return[]}},onClick(e,t,n){n.chart.toggleDataVisibility(t.index),n.chart.update()}},tooltip:{callbacks:{title:()=>"",label:e=>e.chart.data.labels[e.dataIndex]+": "+e.formattedValue}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}};class Rn extends En{}Rn.id="pie",Rn.defaults={cutout:0,rotation:0,circumference:360,radius:"100%"};class Cn extends vn{getLabelAndValue(e){const t=this._cachedMeta.vScale,n=this.getParsed(e);return{label:t.getLabels()[e],value:""+t.getLabelForValue(n[t.axis])}}update(e){const t=this._cachedMeta,n=t.dataset,i=t.data||[],s=t.iScale.getLabels();if(n.points=i,"resize"!==e){const t=this.resolveDatasetElementOptions(e);this.options.showLine||(t.borderWidth=0);const r={_loop:!0,_fullLoop:s.length===i.length,options:t};this.updateElement(n,void 0,r,e)}this.updateElements(i,0,i.length,e)}updateElements(e,t,n,i){const s=this.getDataset(),r=this._cachedMeta.rScale,a="reset"===i;for(let o=t;o<t+n;o++){const t=e[o],n=this.resolveDataElementOptions(o,t.active?"active":i),d=r.getPointPositionForValue(o,s.data[o]),l=a?r.xCenter:d.x,u=a?r.yCenter:d.y,h={x:l,y:u,angle:d.angle,skip:isNaN(l)||isNaN(u),options:n};this.updateElement(t,o,h,i)}}}Cn.id="radar",Cn.defaults={datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}},Cn.overrides={aspectRatio:1,scales:{r:{type:"radialLinear"}}};class In extends Pn{}In.id="scatter",In.defaults={showLine:!1,fill:!1},In.overrides={interaction:{mode:"point"},plugins:{tooltip:{callbacks:{title:()=>"",label:e=>"("+e.label+", "+e.formattedValue+")"}}},scales:{x:{type:"linear"},y:{type:"linear"}}};var Wn=Object.freeze({__proto__:null,BarController:Hn,BubbleController:jn,DoughnutController:En,LineController:Pn,PolarAreaController:An,PieController:Rn,RadarController:Cn,ScatterController:In});function Nn(){throw new Error("This method is not implemented: Check that a complete date adapter is provided.")}class Fn{constructor(e){this.options=e||{}}formats(){return Nn()}parse(e,t){return Nn()}format(e,t){return Nn()}add(e,t,n){return Nn()}diff(e,t,n){return Nn()}startOf(e,t,n){return Nn()}endOf(e,t){return Nn()}}Fn.override=function(e){Object.assign(Fn.prototype,e)};var zn={_date:Fn};function Bn(e,t){return"native"in e?{x:e.x,y:e.y}:Wt(e,t)}function Vn(e,t,n,i){const{controller:s,data:r,_sorted:a}=e,o=s._cachedMeta.iScale;if(o&&t===o.axis&&a&&r.length){const e=o._reversePixels?ut:lt;if(!i)return e(r,t,n);if(s._sharedOptions){const i=r[0],s="function"==typeof i.getRange&&i.getRange(t);if(s){const i=e(r,t,n-s),a=e(r,t,n+s);return{lo:i.lo,hi:a.hi}}}}return{lo:0,hi:r.length-1}}function Un(e,t,n,i,s){const r=e.getSortedVisibleDatasetMetas(),a=n[t];for(let e=0,n=r.length;e<n;++e){const{index:n,data:o}=r[e],{lo:d,hi:l}=Vn(r[e],t,a,s);for(let e=d;e<=l;++e){const t=o[e];t.skip||i(t,n,e)}}}function Jn(e,t,n,i){const s=[];return Ve(t,e.chartArea,e._minPadding)?(Un(e,n,t,(function(e,n,r){e.inRange(t.x,t.y,i)&&s.push({element:e,datasetIndex:n,index:r})}),!0),s):s}function $n(e,t,n,i,s){const r=function(e){const t=-1!==e.indexOf("x"),n=-1!==e.indexOf("y");return function(e,i){const s=t?Math.abs(e.x-i.x):0,r=n?Math.abs(e.y-i.y):0;return Math.sqrt(Math.pow(s,2)+Math.pow(r,2))}}(n);let a=Number.POSITIVE_INFINITY,o=[];return Ve(t,e.chartArea,e._minPadding)?(Un(e,n,t,(function(n,d,l){if(i&&!n.inRange(t.x,t.y,s))return;const u=n.getCenterPoint(s);if(!Ve(u,e.chartArea,e._minPadding)&&!n.inRange(t.x,t.y,s))return;const h=r(t,u);h<a?(o=[{element:n,datasetIndex:d,index:l}],a=h):h===a&&o.push({element:n,datasetIndex:d,index:l})})),o):o}function qn(e,t,n,i){const s=Bn(t,e),r=[],a=n.axis,o="x"===a?"inXRange":"inYRange";let d=!1;return function(e,t){const n=e.getSortedVisibleDatasetMetas();let i,s,r;for(let e=0,a=n.length;e<a;++e){({index:i,data:s}=n[e]);for(let e=0,n=s.length;e<n;++e)r=s[e],r.skip||t(r,i,e)}}(e,((e,t,n)=>{e[o](s[a],i)&&r.push({element:e,datasetIndex:t,index:n}),e.inRange(s.x,s.y,i)&&(d=!0)})),n.intersect&&!d?[]:r}var Gn={modes:{index(e,t,n,i){const s=Bn(t,e),r=n.axis||"x",a=n.intersect?Jn(e,s,r,i):$n(e,s,r,!1,i),o=[];return a.length?(e.getSortedVisibleDatasetMetas().forEach((e=>{const t=a[0].index,n=e.data[t];n&&!n.skip&&o.push({element:n,datasetIndex:e.index,index:t})})),o):[]},dataset(e,t,n,i){const s=Bn(t,e),r=n.axis||"xy";let a=n.intersect?Jn(e,s,r,i):$n(e,s,r,!1,i);if(a.length>0){const t=a[0].datasetIndex,n=e.getDatasetMeta(t).data;a=[];for(let e=0;e<n.length;++e)a.push({element:n[e],datasetIndex:t,index:e})}return a},point:(e,t,n,i)=>Jn(e,Bn(t,e),n.axis||"xy",i),nearest:(e,t,n,i)=>$n(e,Bn(t,e),n.axis||"xy",n.intersect,i),x:(e,t,n,i)=>(n.axis="x",qn(e,t,n,i)),y:(e,t,n,i)=>(n.axis="y",qn(e,t,n,i))}};const Kn=["left","top","right","bottom"];function Zn(e,t){return e.filter((e=>e.pos===t))}function Xn(e,t){return e.filter((e=>-1===Kn.indexOf(e.pos)&&e.box.axis===t))}function Qn(e,t){return e.sort(((e,n)=>{const i=t?n:e,s=t?e:n;return i.weight===s.weight?i.index-s.index:i.weight-s.weight}))}function ei(e,t,n,i){return Math.max(e[n],t[n])+Math.max(e[i],t[i])}function ti(e,t){e.top=Math.max(e.top,t.top),e.left=Math.max(e.left,t.left),e.bottom=Math.max(e.bottom,t.bottom),e.right=Math.max(e.right,t.right)}function ni(e,t,n,i){const{pos:s,box:r}=n,a=e.maxPadding;if(!h(s)){n.size&&(e[s]-=n.size);const t=i[n.stack]||{size:0,count:1};t.size=Math.max(t.size,n.horizontal?r.height:r.width),n.size=t.size/t.count,e[s]+=n.size}r.getPadding&&ti(a,r.getPadding());const o=Math.max(0,t.outerWidth-ei(a,e,"left","right")),d=Math.max(0,t.outerHeight-ei(a,e,"top","bottom")),l=o!==e.w,u=d!==e.h;return e.w=o,e.h=d,n.horizontal?{same:l,other:u}:{same:u,other:l}}function ii(e,t){const n=t.maxPadding;return function(e){const i={left:0,top:0,right:0,bottom:0};return e.forEach((e=>{i[e]=Math.max(t[e],n[e])})),i}(e?["left","right"]:["top","bottom"])}function si(e,t,n,i){const s=[];let r,a,o,d,l,u;for(r=0,a=e.length,l=0;r<a;++r){o=e[r],d=o.box,d.update(o.width||t.w,o.height||t.h,ii(o.horizontal,t));const{same:a,other:h}=ni(t,n,o,i);l|=a&&s.length,u=u||h,d.fullSize||s.push(o)}return l&&si(s,t,n,i)||u}function ri(e,t,n,i,s){e.top=n,e.left=t,e.right=t+i,e.bottom=n+s,e.width=i,e.height=s}function ai(e,t,n,i){const s=n.padding;let{x:r,y:a}=t;for(const o of e){const e=o.box,d=i[o.stack]||{count:1,placed:0,weight:1},l=o.stackWeight/d.weight||1;if(o.horizontal){const i=t.w*l,r=d.size||e.height;T(d.start)&&(a=d.start),e.fullSize?ri(e,s.left,a,n.outerWidth-s.right-s.left,r):ri(e,t.left+d.placed,a,i,r),d.start=a,d.placed+=i,a=e.bottom}else{const i=t.h*l,a=d.size||e.width;T(d.start)&&(r=d.start),e.fullSize?ri(e,r,s.top,a,n.outerHeight-s.bottom-s.top):ri(e,r,t.top+d.placed,a,i),d.start=r,d.placed+=i,r=e.right}}t.x=r,t.y=a}Ie.set("layout",{autoPadding:!0,padding:{top:0,right:0,bottom:0,left:0}});var oi={addBox(e,t){e.boxes||(e.boxes=[]),t.fullSize=t.fullSize||!1,t.position=t.position||"top",t.weight=t.weight||0,t._layers=t._layers||function(){return[{z:0,draw(e){t.draw(e)}}]},e.boxes.push(t)},removeBox(e,t){const n=e.boxes?e.boxes.indexOf(t):-1;-1!==n&&e.boxes.splice(n,1)},configure(e,t,n){t.fullSize=n.fullSize,t.position=n.position,t.weight=n.weight},update(e,t,n,i){if(!e)return;const s=st(e.options.layout.padding),r=Math.max(t-s.width,0),a=Math.max(n-s.height,0),o=function(e){const t=function(e){const t=[];let n,i,s,r,a,o;for(n=0,i=(e||[]).length;n<i;++n)s=e[n],({position:r,options:{stack:a,stackWeight:o=1}}=s),t.push({index:n,box:s,pos:r,horizontal:s.isHorizontal(),weight:s.weight,stack:a&&r+a,stackWeight:o});return t}(e),n=Qn(t.filter((e=>e.box.fullSize)),!0),i=Qn(Zn(t,"left"),!0),s=Qn(Zn(t,"right")),r=Qn(Zn(t,"top"),!0),a=Qn(Zn(t,"bottom")),o=Xn(t,"x"),d=Xn(t,"y");return{fullSize:n,leftAndTop:i.concat(r),rightAndBottom:s.concat(d).concat(a).concat(o),chartArea:Zn(t,"chartArea"),vertical:i.concat(s).concat(d),horizontal:r.concat(a).concat(o)}}(e.boxes),d=o.vertical,l=o.horizontal;g(e.boxes,(e=>{"function"==typeof e.beforeLayout&&e.beforeLayout()}));const u=d.reduce(((e,t)=>t.box.options&&!1===t.box.options.display?e:e+1),0)||1,h=Object.freeze({outerWidth:t,outerHeight:n,padding:s,availableWidth:r,availableHeight:a,vBoxMaxWidth:r/2/u,hBoxMaxHeight:a/2}),c=Object.assign({},s);ti(c,st(i));const _=Object.assign({maxPadding:c,w:r,h:a,x:s.left,y:s.top},s),m=function(e,t){const n=function(e){const t={};for(const n of e){const{stack:e,pos:i,stackWeight:s}=n;if(!e||!Kn.includes(i))continue;const r=t[e]||(t[e]={count:0,placed:0,weight:0,size:0});r.count++,r.weight+=s}return t}(e),{vBoxMaxWidth:i,hBoxMaxHeight:s}=t;let r,a,o;for(r=0,a=e.length;r<a;++r){o=e[r];const{fullSize:a}=o.box,d=n[o.stack],l=d&&o.stackWeight/d.weight;o.horizontal?(o.width=l?l*i:a&&t.availableWidth,o.height=s):(o.width=i,o.height=l?l*s:a&&t.availableHeight)}return n}(d.concat(l),h);si(o.fullSize,_,h,m),si(d,_,h,m),si(l,_,h,m)&&si(d,_,h,m),function(e){const t=e.maxPadding;function n(n){const i=Math.max(t[n]-e[n],0);return e[n]+=i,i}e.y+=n("top"),e.x+=n("left"),n("right"),n("bottom")}(_),ai(o.leftAndTop,_,h,m),_.x+=_.w,_.y+=_.h,ai(o.rightAndBottom,_,h,m),e.chartArea={left:_.left,top:_.top,right:_.left+_.w,bottom:_.top+_.h,height:_.h,width:_.w},g(o.chartArea,(t=>{const n=t.box;Object.assign(n,e.chartArea),n.update(_.w,_.h)}))}};class di{acquireContext(e,t){}releaseContext(e){return!1}addEventListener(e,t,n){}removeEventListener(e,t,n){}getDevicePixelRatio(){return 1}getMaximumSize(e,t,n,i){return t=Math.max(0,t||e.width),n=n||e.height,{width:t,height:Math.max(0,i?Math.floor(t/i):n)}}isAttached(e){return!0}updateConfig(e){}}class li extends di{acquireContext(e){return e&&e.getContext&&e.getContext("2d")||null}updateConfig(e){e.options.animation=!1}}const ui={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},hi=e=>null===e||""===e,ci=!!zt&&{passive:!0};function _i(e,t,n){e.canvas.removeEventListener(t,n,ci)}function mi(e,t,n){const i=e.canvas,s=new MutationObserver((e=>{for(const t of e)for(const e of t.addedNodes)if(e===i||e.contains(i))return n()}));return s.observe(document,{childList:!0,subtree:!0}),s}function fi(e,t,n){const i=e.canvas,s=new MutationObserver((e=>{for(const t of e)for(const e of t.removedNodes)if(e===i||e.contains(i))return n()}));return s.observe(document,{childList:!0,subtree:!0}),s}const pi=new Map;let gi=0;function yi(){const e=window.devicePixelRatio;e!==gi&&(gi=e,pi.forEach(((t,n)=>{n.currentDevicePixelRatio!==e&&t()})))}function Mi(e,t,n){const i=e.canvas,r=i&&Pt(i);if(!r)return;const a=s(((e,t)=>{const i=r.clientWidth;n(e,t),i<r.clientWidth&&n()}),window),o=new ResizeObserver((e=>{const t=e[0],n=t.contentRect.width,i=t.contentRect.height;0===n&&0===i||a(n,i)}));return o.observe(r),function(e,t){pi.size||window.addEventListener("resize",yi),pi.set(e,t)}(e,a),o}function bi(e,t,n){n&&n.disconnect(),"resize"===t&&function(e){pi.delete(e),pi.size||window.removeEventListener("resize",yi)}(e)}function Li(e,t,n){const i=e.canvas,r=s((t=>{null!==e.ctx&&n(function(e,t){const n=ui[e.type]||e.type,{x:i,y:s}=Wt(e,t);return{type:n,chart:t,native:e,x:void 0!==i?i:null,y:void 0!==s?s:null}}(t,e))}),e,(e=>{const t=e[0];return[t,t.offsetX,t.offsetY]}));return function(e,t,n){e.addEventListener(t,n,ci)}(i,t,r),r}class vi extends di{acquireContext(e,t){const n=e&&e.getContext&&e.getContext("2d");return n&&n.canvas===e?(function(e,t){const n=e.style,i=e.getAttribute("height"),s=e.getAttribute("width");if(e.$chartjs={initial:{height:i,width:s,style:{display:n.display,height:n.height,width:n.width}}},n.display=n.display||"block",n.boxSizing=n.boxSizing||"border-box",hi(s)){const t=Bt(e,"width");void 0!==t&&(e.width=t)}if(hi(i))if(""===e.style.height)e.height=e.width/(t||2);else{const t=Bt(e,"height");void 0!==t&&(e.height=t)}}(e,t),n):null}releaseContext(e){const t=e.canvas;if(!t.$chartjs)return!1;const n=t.$chartjs.initial;["height","width"].forEach((e=>{const i=n[e];l(i)?t.removeAttribute(e):t.setAttribute(e,i)}));const i=n.style||{};return Object.keys(i).forEach((e=>{t.style[e]=i[e]})),t.width=t.width,delete t.$chartjs,!0}addEventListener(e,t,n){this.removeEventListener(e,t);const i=e.$proxies||(e.$proxies={}),s={attach:mi,detach:fi,resize:Mi}[t]||Li;i[t]=s(e,t,n)}removeEventListener(e,t){const n=e.$proxies||(e.$proxies={}),i=n[t];i&&(({attach:bi,detach:bi,resize:bi}[t]||_i)(e,t,i),n[t]=void 0)}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(e,t,n,i){return function(e,t,n,i){const s=Rt(e),r=It(s,"margin"),a=At(s.maxWidth,e,"clientWidth")||E,o=At(s.maxHeight,e,"clientHeight")||E,d=function(e,t,n){let i,s;if(void 0===t||void 0===n){const r=Pt(e);if(r){const e=r.getBoundingClientRect(),a=Rt(r),o=It(a,"border","width"),d=It(a,"padding");t=e.width-d.width-o.width,n=e.height-d.height-o.height,i=At(a.maxWidth,r,"clientWidth"),s=At(a.maxHeight,r,"clientHeight")}else t=e.clientWidth,n=e.clientHeight}return{width:t,height:n,maxWidth:i||E,maxHeight:s||E}}(e,t,n);let{width:l,height:u}=d;if("content-box"===s.boxSizing){const e=It(s,"border","width"),t=It(s,"padding");l-=t.width+e.width,u-=t.height+e.height}return l=Math.max(0,l-r.width),u=Math.max(0,i?Math.floor(l/i):u-r.height),l=Nt(Math.min(l,a,d.maxWidth)),u=Nt(Math.min(u,o,d.maxHeight)),l&&!u&&(u=Nt(l/2)),{width:l,height:u}}(e,t,n,i)}isAttached(e){const t=Pt(e);return!(!t||!t.isConnected)}}function wi(e){return!Et()||"undefined"!=typeof OffscreenCanvas&&e instanceof OffscreenCanvas?li:vi}class Yi{constructor(){this.x=void 0,this.y=void 0,this.active=!1,this.options=void 0,this.$animations=void 0}tooltipPosition(e){const{x:t,y:n}=this.getProps(["x","y"],e);return{x:t,y:n}}hasValue(){return F(this.x)&&F(this.y)}getProps(e,t){const n=this.$animations;if(!t||!n)return this;const i={};return e.forEach((e=>{i[e]=n[e]&&n[e].active()?n[e]._to:this[e]})),i}}Yi.defaults={},Yi.defaultRoutes=void 0;const ki={values:e=>u(e)?e:""+e,numeric(e,t,n){if(0===e)return"0";const i=this.chart.options.locale;let s,r=e;if(n.length>1){const t=Math.max(Math.abs(n[0].value),Math.abs(n[n.length-1].value));(t<1e-4||t>1e15)&&(s="scientific"),r=function(e,t){let n=t.length>3?t[2].value-t[1].value:t[1].value-t[0].value;return Math.abs(n)>=1&&e!==Math.floor(e)&&(n=e-Math.floor(e)),n}(e,n)}const a=I(Math.abs(r)),o=Math.max(Math.min(-1*Math.floor(a),20),0),d={notation:s,minimumFractionDigits:o,maximumFractionDigits:o};return Object.assign(d,this.options.ticks.format),qt(e,i,d)},logarithmic(e,t,n){if(0===e)return"0";const i=e/Math.pow(10,Math.floor(I(e)));return 1===i||2===i||5===i?ki.numeric.call(this,e,t,n):""}};var Di={formatters:ki};function xi(e,t,n,i,s){const r=m(i,0),a=Math.min(m(s,e.length),e.length);let o,d,l,u=0;for(n=Math.ceil(n),s&&(o=s-i,n=o/Math.floor(o/n)),l=r;l<0;)u++,l=Math.round(r+u*n);for(d=Math.max(r,0);d<a;d++)d===l&&(t.push(e[d]),u++,l=Math.round(r+u*n))}Ie.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",grace:0,grid:{display:!0,lineWidth:1,drawBorder:!0,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(e,t)=>t.lineWidth,tickColor:(e,t)=>t.color,offset:!1,borderDash:[],borderDashOffset:0,borderWidth:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:Di.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),Ie.route("scale.ticks","color","","color"),Ie.route("scale.grid","color","","borderColor"),Ie.route("scale.grid","borderColor","","borderColor"),Ie.route("scale.title","color","","color"),Ie.describe("scale",{_fallback:!1,_scriptable:e=>!e.startsWith("before")&&!e.startsWith("after")&&"callback"!==e&&"parser"!==e,_indexable:e=>"borderDash"!==e&&"tickBorderDash"!==e}),Ie.describe("scales",{_fallback:"scale"}),Ie.describe("scale.ticks",{_scriptable:e=>"backdropPadding"!==e&&"callback"!==e,_indexable:e=>"backdropPadding"!==e});const Ti=(e,t,n)=>"top"===t||"left"===t?e[t]+n:e[t]-n;function Si(e,t){const n=[],i=e.length/t,s=e.length;let r=0;for(;r<s;r+=i)n.push(e[Math.floor(r)]);return n}function Oi(e,t,n){const i=e.ticks.length,s=Math.min(t,i-1),r=e._startPixel,a=e._endPixel,o=1e-6;let d,l=e.getPixelForTick(s);if(!(n&&(d=1===i?Math.max(l-r,a-l):0===t?(e.getPixelForTick(1)-l)/2:(l-e.getPixelForTick(s-1))/2,l+=s<t?d:-d,l<r-o||l>a+o)))return l}function Hi(e){return e.drawTicks?e.tickLength:0}function ji(e,t){if(!e.display)return 0;const n=rt(e.font,t),i=st(e.padding);return(u(e.text)?e.text.length:1)*n.lineHeight+i.height}function Ei(e,t,n){let i=r(e);return(n&&"right"!==t||!n&&"right"===t)&&(i=(e=>"left"===e?"right":"right"===e?"left":e)(i)),i}class Pi extends Yi{constructor(e){super(),this.id=e.id,this.type=e.type,this.options=void 0,this.ctx=e.ctx,this.chart=e.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(e){this.options=e.setContext(this.getContext()),this.axis=e.axis,this._userMin=this.parse(e.min),this._userMax=this.parse(e.max),this._suggestedMin=this.parse(e.suggestedMin),this._suggestedMax=this.parse(e.suggestedMax)}parse(e,t){return e}getUserBounds(){let{_userMin:e,_userMax:t,_suggestedMin:n,_suggestedMax:i}=this;return e=_(e,Number.POSITIVE_INFINITY),t=_(t,Number.NEGATIVE_INFINITY),n=_(n,Number.POSITIVE_INFINITY),i=_(i,Number.NEGATIVE_INFINITY),{min:_(e,n),max:_(t,i),minDefined:c(e),maxDefined:c(t)}}getMinMax(e){let t,{min:n,max:i,minDefined:s,maxDefined:r}=this.getUserBounds();if(s&&r)return{min:n,max:i};const a=this.getMatchingVisibleMetas();for(let o=0,d=a.length;o<d;++o)t=a[o].controller.getMinMax(this,e),s||(n=Math.min(n,t.min)),r||(i=Math.max(i,t.max));return n=r&&n>i?i:n,i=s&&n>i?n:i,{min:_(n,_(i,n)),max:_(i,_(n,i))}}getPadding(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){const e=this.chart.data;return this.options.labels||(this.isHorizontal()?e.xLabels:e.yLabels)||e.labels||[]}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){p(this.options.beforeUpdate,[this])}update(e,t,n){const{beginAtZero:i,grace:s,ticks:r}=this.options,a=r.sampleSize;this.beforeUpdate(),this.maxWidth=e,this.maxHeight=t,this._margins=n=Object.assign({left:0,right:0,top:0,bottom:0},n),this.ticks=null,this._labelSizes=null,this._gridLineItems=null,this._labelItems=null,this.beforeSetDimensions(),this.setDimensions(),this.afterSetDimensions(),this._maxLength=this.isHorizontal()?this.width+n.left+n.right:this.height+n.top+n.bottom,this._dataLimitsCached||(this.beforeDataLimits(),this.determineDataLimits(),this.afterDataLimits(),this._range=function(e,t,n){const{min:i,max:s}=e,r=f(t,(s-i)/2),a=(e,t)=>n&&0===e?0:e+t;return{min:a(i,-Math.abs(r)),max:a(s,r)}}(this,s,i),this._dataLimitsCached=!0),this.beforeBuildTicks(),this.ticks=this.buildTicks()||[],this.afterBuildTicks();const o=a<this.ticks.length;this._convertTicksToLabels(o?Si(this.ticks,a):this.ticks),this.configure(),this.beforeCalculateLabelRotation(),this.calculateLabelRotation(),this.afterCalculateLabelRotation(),r.display&&(r.autoSkip||"auto"===r.source)&&(this.ticks=function(e,t){const n=e.options.ticks,i=n.maxTicksLimit||function(e){const t=e.options.offset,n=e._tickSize(),i=e._length/n+(t?0:1),s=e._maxLength/n;return Math.floor(Math.min(i,s))}(e),s=n.major.enabled?function(e){const t=[];let n,i;for(n=0,i=e.length;n<i;n++)e[n].major&&t.push(n);return t}(t):[],r=s.length,a=s[0],o=s[r-1],d=[];if(r>i)return function(e,t,n,i){let s,r=0,a=n[0];for(i=Math.ceil(i),s=0;s<e.length;s++)s===a&&(t.push(e[s]),r++,a=n[r*i])}(t,d,s,r/i),d;const u=function(e,t,n){const i=function(e){const t=e.length;let n,i;if(t<2)return!1;for(i=e[0],n=1;n<t;++n)if(e[n]-e[n-1]!==i)return!1;return i}(e),s=t.length/n;if(!i)return Math.max(s,1);const r=function(e){const t=[],n=Math.sqrt(e);let i;for(i=1;i<n;i++)e%i==0&&(t.push(i),t.push(e/i));return n===(0|n)&&t.push(n),t.sort(((e,t)=>e-t)).pop(),t}(i);for(let e=0,t=r.length-1;e<t;e++){const t=r[e];if(t>s)return t}return Math.max(s,1)}(s,t,i);if(r>0){let e,n;const i=r>1?Math.round((o-a)/(r-1)):null;for(xi(t,d,u,l(i)?0:a-i,a),e=0,n=r-1;e<n;e++)xi(t,d,u,s[e],s[e+1]);return xi(t,d,u,o,l(i)?t.length:o+i),d}return xi(t,d,u),d}(this,this.ticks),this._labelSizes=null),o&&this._convertTicksToLabels(this.ticks),this.beforeFit(),this.fit(),this.afterFit(),this.afterUpdate()}configure(){let e,t,n=this.options.reverse;this.isHorizontal()?(e=this.left,t=this.right):(e=this.top,t=this.bottom,n=!n),this._startPixel=e,this._endPixel=t,this._reversePixels=n,this._length=t-e,this._alignToPixels=this.options.alignToPixels}afterUpdate(){p(this.options.afterUpdate,[this])}beforeSetDimensions(){p(this.options.beforeSetDimensions,[this])}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=0,this.right=this.width):(this.height=this.maxHeight,this.top=0,this.bottom=this.height),this.paddingLeft=0,this.paddingTop=0,this.paddingRight=0,this.paddingBottom=0}afterSetDimensions(){p(this.options.afterSetDimensions,[this])}_callHooks(e){this.chart.notifyPlugins(e,this.getContext()),p(this.options[e],[this])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){p(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(e){const t=this.options.ticks;let n,i,s;for(n=0,i=e.length;n<i;n++)s=e[n],s.label=p(t.callback,[s.value,n,e],this)}afterTickToLabelConversion(){p(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){p(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){const e=this.options,t=e.ticks,n=this.ticks.length,i=t.minRotation||0,s=t.maxRotation;let r,a,o,d=i;if(!this._isVisible()||!t.display||i>=s||n<=1||!this.isHorizontal())return void(this.labelRotation=i);const l=this._getLabelSizes(),u=l.widest.width,h=l.highest.height,c=Z(this.chart.width-u,0,this.maxWidth);r=e.offset?this.maxWidth/n:c/(n-1),u+6>r&&(r=c/(n-(e.offset?.5:1)),a=this.maxHeight-Hi(e.grid)-t.padding-ji(e.title,this.chart.options.font),o=Math.sqrt(u*u+h*h),d=U(Math.min(Math.asin(Z((l.highest.height+6)/r,-1,1)),Math.asin(Z(a/o,-1,1))-Math.asin(Z(h/o,-1,1)))),d=Math.max(i,Math.min(s,d))),this.labelRotation=d}afterCalculateLabelRotation(){p(this.options.afterCalculateLabelRotation,[this])}beforeFit(){p(this.options.beforeFit,[this])}fit(){const e={width:0,height:0},{chart:t,options:{ticks:n,title:i,grid:s}}=this,r=this._isVisible(),a=this.isHorizontal();if(r){const r=ji(i,t.options.font);if(a?(e.width=this.maxWidth,e.height=Hi(s)+r):(e.height=this.maxHeight,e.width=Hi(s)+r),n.display&&this.ticks.length){const{first:t,last:i,widest:s,highest:r}=this._getLabelSizes(),o=2*n.padding,d=V(this.labelRotation),l=Math.cos(d),u=Math.sin(d);if(a){const t=n.mirror?0:u*s.width+l*r.height;e.height=Math.min(this.maxHeight,e.height+t+o)}else{const t=n.mirror?0:l*s.width+u*r.height;e.width=Math.min(this.maxWidth,e.width+t+o)}this._calculatePadding(t,i,u,l)}}this._handleMargins(),a?(this.width=this._length=t.width-this._margins.left-this._margins.right,this.height=e.height):(this.width=e.width,this.height=this._length=t.height-this._margins.top-this._margins.bottom)}_calculatePadding(e,t,n,i){const{ticks:{align:s,padding:r},position:a}=this.options,o=0!==this.labelRotation,d="top"!==a&&"x"===this.axis;if(this.isHorizontal()){const a=this.getPixelForTick(0)-this.left,l=this.right-this.getPixelForTick(this.ticks.length-1);let u=0,h=0;o?d?(u=i*e.width,h=n*t.height):(u=n*e.height,h=i*t.width):"start"===s?h=t.width:"end"===s?u=e.width:(u=e.width/2,h=t.width/2),this.paddingLeft=Math.max((u-a+r)*this.width/(this.width-a),0),this.paddingRight=Math.max((h-l+r)*this.width/(this.width-l),0)}else{let n=t.height/2,i=e.height/2;"start"===s?(n=0,i=e.height):"end"===s&&(n=t.height,i=0),this.paddingTop=n+r,this.paddingBottom=i+r}}_handleMargins(){this._margins&&(this._margins.left=Math.max(this.paddingLeft,this._margins.left),this._margins.top=Math.max(this.paddingTop,this._margins.top),this._margins.right=Math.max(this.paddingRight,this._margins.right),this._margins.bottom=Math.max(this.paddingBottom,this._margins.bottom))}afterFit(){p(this.options.afterFit,[this])}isHorizontal(){const{axis:e,position:t}=this.options;return"top"===t||"bottom"===t||"x"===e}isFullSize(){return this.options.fullSize}_convertTicksToLabels(e){let t,n;for(this.beforeTickToLabelConversion(),this.generateTickLabels(e),t=0,n=e.length;t<n;t++)l(e[t].label)&&(e.splice(t,1),n--,t--);this.afterTickToLabelConversion()}_getLabelSizes(){let e=this._labelSizes;if(!e){const t=this.options.ticks.sampleSize;let n=this.ticks;t<n.length&&(n=Si(n,t)),this._labelSizes=e=this._computeLabelSizes(n,n.length)}return e}_computeLabelSizes(e,t){const{ctx:n,_longestTextCache:i}=this,s=[],r=[];let a,o,d,h,c,_,m,f,p,y,M,b=0,L=0;for(a=0;a<t;++a){if(h=e[a].label,c=this._resolveTickFontOptions(a),n.font=_=c.string,m=i[_]=i[_]||{data:{},gc:[]},f=c.lineHeight,p=y=0,l(h)||u(h)){if(u(h))for(o=0,d=h.length;o<d;++o)M=h[o],l(M)||u(M)||(p=We(n,m.data,m.gc,p,M),y+=f)}else p=We(n,m.data,m.gc,p,h),y=f;s.push(p),r.push(y),b=Math.max(p,b),L=Math.max(y,L)}!function(e,t){g(e,(e=>{const n=e.gc,i=n.length/2;let s;if(i>t){for(s=0;s<i;++s)delete e.data[n[s]];n.splice(0,i)}}))}(i,t);const v=s.indexOf(b),w=r.indexOf(L),Y=e=>({width:s[e]||0,height:r[e]||0});return{first:Y(0),last:Y(t-1),widest:Y(v),highest:Y(w),widths:s,heights:r}}getLabelForValue(e){return e}getPixelForValue(e,t){return NaN}getValueForPixel(e){}getPixelForTick(e){const t=this.ticks;return e<0||e>t.length-1?null:this.getPixelForValue(t[e].value)}getPixelForDecimal(e){this._reversePixels&&(e=1-e);const t=this._startPixel+e*this._length;return Z(this._alignToPixels?Fe(this.chart,t,0):t,-32768,32767)}getDecimalForPixel(e){const t=(e-this._startPixel)/this._length;return this._reversePixels?1-t:t}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){const{min:e,max:t}=this;return e<0&&t<0?t:e>0&&t>0?e:0}getContext(e){const t=this.ticks||[];if(e>=0&&e<t.length){const n=t[e];return n.$context||(n.$context=function(e,t,n){return ot(e,{tick:n,index:t,type:"tick"})}(this.getContext(),e,n))}return this.$context||(this.$context=ot(this.chart.getContext(),{scale:this,type:"scale"}))}_tickSize(){const e=this.options.ticks,t=V(this.labelRotation),n=Math.abs(Math.cos(t)),i=Math.abs(Math.sin(t)),s=this._getLabelSizes(),r=e.autoSkipPadding||0,a=s?s.widest.width+r:0,o=s?s.highest.height+r:0;return this.isHorizontal()?o*n>a*i?a/n:o/i:o*i<a*n?o/n:a/i}_isVisible(){const e=this.options.display;return"auto"!==e?!!e:this.getMatchingVisibleMetas().length>0}_computeGridLineItems(e){const t=this.axis,n=this.chart,i=this.options,{grid:s,position:r}=i,a=s.offset,o=this.isHorizontal(),d=this.ticks.length+(a?1:0),l=Hi(s),u=[],c=s.setContext(this.getContext()),_=c.drawBorder?c.borderWidth:0,f=_/2,p=function(e){return Fe(n,e,_)};let g,y,M,b,L,v,w,Y,k,D,x,T;if("top"===r)g=p(this.bottom),v=this.bottom-l,Y=g-f,D=p(e.top)+f,T=e.bottom;else if("bottom"===r)g=p(this.top),D=e.top,T=p(e.bottom)-f,v=g+f,Y=this.top+l;else if("left"===r)g=p(this.right),L=this.right-l,w=g-f,k=p(e.left)+f,x=e.right;else if("right"===r)g=p(this.left),k=e.left,x=p(e.right)-f,L=g+f,w=this.left+l;else if("x"===t){if("center"===r)g=p((e.top+e.bottom)/2+.5);else if(h(r)){const e=Object.keys(r)[0],t=r[e];g=p(this.chart.scales[e].getPixelForValue(t))}D=e.top,T=e.bottom,v=g+f,Y=v+l}else if("y"===t){if("center"===r)g=p((e.left+e.right)/2);else if(h(r)){const e=Object.keys(r)[0],t=r[e];g=p(this.chart.scales[e].getPixelForValue(t))}L=g-f,w=L-l,k=e.left,x=e.right}const S=m(i.ticks.maxTicksLimit,d),O=Math.max(1,Math.ceil(d/S));for(y=0;y<d;y+=O){const e=s.setContext(this.getContext(y)),t=e.lineWidth,i=e.color,r=s.borderDash||[],d=e.borderDashOffset,l=e.tickWidth,h=e.tickColor,c=e.tickBorderDash||[],_=e.tickBorderDashOffset;M=Oi(this,y,a),void 0!==M&&(b=Fe(n,M,t),o?L=w=k=x=b:v=Y=D=T=b,u.push({tx1:L,ty1:v,tx2:w,ty2:Y,x1:k,y1:D,x2:x,y2:T,width:t,color:i,borderDash:r,borderDashOffset:d,tickWidth:l,tickColor:h,tickBorderDash:c,tickBorderDashOffset:_}))}return this._ticksLength=d,this._borderValue=g,u}_computeLabelItems(e){const t=this.axis,n=this.options,{position:i,ticks:s}=n,r=this.isHorizontal(),a=this.ticks,{align:o,crossAlign:d,padding:l,mirror:c}=s,_=Hi(n.grid),m=_+l,f=c?-l:m,p=-V(this.labelRotation),g=[];let y,M,b,L,v,w,Y,k,D,x,T,S,O="middle";if("top"===i)w=this.bottom-f,Y=this._getXAxisLabelAlignment();else if("bottom"===i)w=this.top+f,Y=this._getXAxisLabelAlignment();else if("left"===i){const e=this._getYAxisLabelAlignment(_);Y=e.textAlign,v=e.x}else if("right"===i){const e=this._getYAxisLabelAlignment(_);Y=e.textAlign,v=e.x}else if("x"===t){if("center"===i)w=(e.top+e.bottom)/2+m;else if(h(i)){const e=Object.keys(i)[0],t=i[e];w=this.chart.scales[e].getPixelForValue(t)+m}Y=this._getXAxisLabelAlignment()}else if("y"===t){if("center"===i)v=(e.left+e.right)/2-m;else if(h(i)){const e=Object.keys(i)[0],t=i[e];v=this.chart.scales[e].getPixelForValue(t)}Y=this._getYAxisLabelAlignment(_).textAlign}"y"===t&&("start"===o?O="top":"end"===o&&(O="bottom"));const H=this._getLabelSizes();for(y=0,M=a.length;y<M;++y){b=a[y],L=b.label;const e=s.setContext(this.getContext(y));k=this.getPixelForTick(y)+s.labelOffset,D=this._resolveTickFontOptions(y),x=D.lineHeight,T=u(L)?L.length:1;const t=T/2,n=e.color,o=e.textStrokeColor,l=e.textStrokeWidth;let h;if(r?(v=k,S="top"===i?"near"===d||0!==p?-T*x+x/2:"center"===d?-H.highest.height/2-t*x+x:-H.highest.height+x/2:"near"===d||0!==p?x/2:"center"===d?H.highest.height/2-t*x:H.highest.height-T*x,c&&(S*=-1)):(w=k,S=(1-T)*x/2),e.showLabelBackdrop){const t=st(e.backdropPadding),n=H.heights[y],i=H.widths[y];let s=w+S-t.top,r=v-t.left;switch(O){case"middle":s-=n/2;break;case"bottom":s-=n}switch(Y){case"center":r-=i/2;break;case"right":r-=i}h={left:r,top:s,width:i+t.width,height:n+t.height,color:e.backdropColor}}g.push({rotation:p,label:L,font:D,color:n,strokeColor:o,strokeWidth:l,textOffset:S,textAlign:Y,textBaseline:O,translation:[v,w],backdrop:h})}return g}_getXAxisLabelAlignment(){const{position:e,ticks:t}=this.options;if(-V(this.labelRotation))return"top"===e?"left":"right";let n="center";return"start"===t.align?n="left":"end"===t.align&&(n="right"),n}_getYAxisLabelAlignment(e){const{position:t,ticks:{crossAlign:n,mirror:i,padding:s}}=this.options,r=e+s,a=this._getLabelSizes().widest.width;let o,d;return"left"===t?i?(d=this.right+s,"near"===n?o="left":"center"===n?(o="center",d+=a/2):(o="right",d+=a)):(d=this.right-r,"near"===n?o="right":"center"===n?(o="center",d-=a/2):(o="left",d=this.left)):"right"===t?i?(d=this.left+s,"near"===n?o="right":"center"===n?(o="center",d-=a/2):(o="left",d-=a)):(d=this.left+r,"near"===n?o="left":"center"===n?(o="center",d+=a/2):(o="right",d=this.right)):o="right",{textAlign:o,x:d}}_computeLabelArea(){if(this.options.ticks.mirror)return;const e=this.chart,t=this.options.position;return"left"===t||"right"===t?{top:0,left:this.left,bottom:e.height,right:this.right}:"top"===t||"bottom"===t?{top:this.top,left:0,bottom:this.bottom,right:e.width}:void 0}drawBackground(){const{ctx:e,options:{backgroundColor:t},left:n,top:i,width:s,height:r}=this;t&&(e.save(),e.fillStyle=t,e.fillRect(n,i,s,r),e.restore())}getLineWidthForValue(e){const t=this.options.grid;if(!this._isVisible()||!t.display)return 0;const n=this.ticks.findIndex((t=>t.value===e));return n>=0?t.setContext(this.getContext(n)).lineWidth:0}drawGrid(e){const t=this.options.grid,n=this.ctx,i=this._gridLineItems||(this._gridLineItems=this._computeGridLineItems(e));let s,r;const a=(e,t,i)=>{i.width&&i.color&&(n.save(),n.lineWidth=i.width,n.strokeStyle=i.color,n.setLineDash(i.borderDash||[]),n.lineDashOffset=i.borderDashOffset,n.beginPath(),n.moveTo(e.x,e.y),n.lineTo(t.x,t.y),n.stroke(),n.restore())};if(t.display)for(s=0,r=i.length;s<r;++s){const e=i[s];t.drawOnChartArea&&a({x:e.x1,y:e.y1},{x:e.x2,y:e.y2},e),t.drawTicks&&a({x:e.tx1,y:e.ty1},{x:e.tx2,y:e.ty2},{color:e.tickColor,width:e.tickWidth,borderDash:e.tickBorderDash,borderDashOffset:e.tickBorderDashOffset})}}drawBorder(){const{chart:e,ctx:t,options:{grid:n}}=this,i=n.setContext(this.getContext()),s=n.drawBorder?i.borderWidth:0;if(!s)return;const r=n.setContext(this.getContext(0)).lineWidth,a=this._borderValue;let o,d,l,u;this.isHorizontal()?(o=Fe(e,this.left,s)-s/2,d=Fe(e,this.right,r)+r/2,l=u=a):(l=Fe(e,this.top,s)-s/2,u=Fe(e,this.bottom,r)+r/2,o=d=a),t.save(),t.lineWidth=i.borderWidth,t.strokeStyle=i.borderColor,t.beginPath(),t.moveTo(o,l),t.lineTo(d,u),t.stroke(),t.restore()}drawLabels(e){if(!this.options.ticks.display)return;const t=this.ctx,n=this._computeLabelArea();n&&Ue(t,n);const i=this._labelItems||(this._labelItems=this._computeLabelItems(e));let s,r;for(s=0,r=i.length;s<r;++s){const e=i[s],n=e.font,r=e.label;e.backdrop&&(t.fillStyle=e.backdrop.color,t.fillRect(e.backdrop.left,e.backdrop.top,e.backdrop.width,e.backdrop.height)),Ge(t,r,0,e.textOffset,n,e)}n&&Je(t)}drawTitle(){const{ctx:e,options:{position:t,title:n,reverse:i}}=this;if(!n.display)return;const s=rt(n.font),r=st(n.padding),o=n.align;let d=s.lineHeight/2;"bottom"===t||"center"===t||h(t)?(d+=r.bottom,u(n.text)&&(d+=s.lineHeight*(n.text.length-1))):d+=r.top;const{titleX:l,titleY:c,maxWidth:_,rotation:m}=function(e,t,n,i){const{top:s,left:r,bottom:o,right:d,chart:l}=e,{chartArea:u,scales:c}=l;let _,m,f,p=0;const g=o-s,y=d-r;if(e.isHorizontal()){if(m=a(i,r,d),h(n)){const e=Object.keys(n)[0],i=n[e];f=c[e].getPixelForValue(i)+g-t}else f="center"===n?(u.bottom+u.top)/2+g-t:Ti(e,n,t);_=d-r}else{if(h(n)){const e=Object.keys(n)[0],i=n[e];m=c[e].getPixelForValue(i)-y+t}else m="center"===n?(u.left+u.right)/2-y+t:Ti(e,n,t);f=a(i,o,s),p="left"===n?-A:A}return{titleX:m,titleY:f,maxWidth:_,rotation:p}}(this,d,t,o);Ge(e,n.text,0,0,s,{color:n.color,maxWidth:_,rotation:m,textAlign:Ei(o,t,i),textBaseline:"middle",translation:[l,c]})}draw(e){this._isVisible()&&(this.drawBackground(),this.drawGrid(e),this.drawBorder(),this.drawTitle(),this.drawLabels(e))}_layers(){const e=this.options,t=e.ticks&&e.ticks.z||0,n=m(e.grid&&e.grid.z,-1);return this._isVisible()&&this.draw===Pi.prototype.draw?[{z:n,draw:e=>{this.drawBackground(),this.drawGrid(e),this.drawTitle()}},{z:n+1,draw:()=>{this.drawBorder()}},{z:t,draw:e=>{this.drawLabels(e)}}]:[{z:t,draw:e=>{this.draw(e)}}]}getMatchingVisibleMetas(e){const t=this.chart.getSortedVisibleDatasetMetas(),n=this.axis+"AxisID",i=[];let s,r;for(s=0,r=t.length;s<r;++s){const r=t[s];r[n]!==this.id||e&&r.type!==e||i.push(r)}return i}_resolveTickFontOptions(e){return rt(this.options.ticks.setContext(this.getContext(e)).font)}_maxDigits(){const e=this._resolveTickFontOptions(0).lineHeight;return(this.isHorizontal()?this.width:this.height)/e}}class Ai{constructor(e,t,n){this.type=e,this.scope=t,this.override=n,this.items=Object.create(null)}isForType(e){return Object.prototype.isPrototypeOf.call(this.type.prototype,e.prototype)}register(e){const t=Object.getPrototypeOf(e);let n;(function(e){return"id"in e&&"defaults"in e})(t)&&(n=this.register(t));const i=this.items,s=e.id,r=this.scope+"."+s;if(!s)throw new Error("class does not have id: "+e);return s in i||(i[s]=e,function(e,t,n){const i=v(Object.create(null),[n?Ie.get(n):{},Ie.get(t),e.defaults]);Ie.set(t,i),e.defaultRoutes&&function(e,t){Object.keys(t).forEach((n=>{const i=n.split("."),s=i.pop(),r=[e].concat(i).join("."),a=t[n].split("."),o=a.pop(),d=a.join(".");Ie.route(r,s,d,o)}))}(t,e.defaultRoutes),e.descriptors&&Ie.describe(t,e.descriptors)}(e,r,n),this.override&&Ie.override(e.id,e.overrides)),r}get(e){return this.items[e]}unregister(e){const t=this.items,n=e.id,i=this.scope;n in t&&delete t[n],i&&n in Ie[i]&&(delete Ie[i][n],this.override&&delete Pe[n])}}var Ri=new class{constructor(){this.controllers=new Ai(vn,"datasets",!0),this.elements=new Ai(Yi,"elements"),this.plugins=new Ai(Object,"plugins"),this.scales=new Ai(Pi,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...e){this._each("register",e)}remove(...e){this._each("unregister",e)}addControllers(...e){this._each("register",e,this.controllers)}addElements(...e){this._each("register",e,this.elements)}addPlugins(...e){this._each("register",e,this.plugins)}addScales(...e){this._each("register",e,this.scales)}getController(e){return this._get(e,this.controllers,"controller")}getElement(e){return this._get(e,this.elements,"element")}getPlugin(e){return this._get(e,this.plugins,"plugin")}getScale(e){return this._get(e,this.scales,"scale")}removeControllers(...e){this._each("unregister",e,this.controllers)}removeElements(...e){this._each("unregister",e,this.elements)}removePlugins(...e){this._each("unregister",e,this.plugins)}removeScales(...e){this._each("unregister",e,this.scales)}_each(e,t,n){[...t].forEach((t=>{const i=n||this._getRegistryForType(t);n||i.isForType(t)||i===this.plugins&&t.id?this._exec(e,i,t):g(t,(t=>{const i=n||this._getRegistryForType(t);this._exec(e,i,t)}))}))}_exec(e,t,n){const i=x(e);p(n["before"+i],[],n),t[e](n),p(n["after"+i],[],n)}_getRegistryForType(e){for(let t=0;t<this._typedRegistries.length;t++){const n=this._typedRegistries[t];if(n.isForType(e))return n}return this.plugins}_get(e,t,n){const i=t.get(e);if(void 0===i)throw new Error('"'+e+'" is not a registered '+n+".");return i}};class Ci{constructor(){this._init=[]}notify(e,t,n,i){"beforeInit"===t&&(this._init=this._createDescriptors(e,!0),this._notify(this._init,e,"install"));const s=i?this._descriptors(e).filter(i):this._descriptors(e),r=this._notify(s,e,t,n);return"destroy"===t&&(this._notify(s,e,"stop"),this._notify(this._init,e,"uninstall")),r}_notify(e,t,n,i){i=i||{};for(const s of e){const e=s.plugin;if(!1===p(e[n],[t,i,s.options],e)&&i.cancelable)return!1}return!0}invalidate(){l(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(e){if(this._cache)return this._cache;const t=this._cache=this._createDescriptors(e);return this._notifyStateChanges(e),t}_createDescriptors(e,t){const n=e&&e.config,i=m(n.options&&n.options.plugins,{}),s=function(e){const t=[],n=Object.keys(Ri.plugins.items);for(let e=0;e<n.length;e++)t.push(Ri.getPlugin(n[e]));const i=e.plugins||[];for(let e=0;e<i.length;e++){const n=i[e];-1===t.indexOf(n)&&t.push(n)}return t}(n);return!1!==i||t?function(e,t,n,i){const s=[],r=e.getContext();for(let a=0;a<t.length;a++){const o=t[a],d=Ii(n[o.id],i);null!==d&&s.push({plugin:o,options:Wi(e.config,o,d,r)})}return s}(e,s,i,t):[]}_notifyStateChanges(e){const t=this._oldCache||[],n=this._cache,i=(e,t)=>e.filter((e=>!t.some((t=>e.plugin.id===t.plugin.id))));this._notify(i(t,n),e,"stop"),this._notify(i(n,t),e,"start")}}function Ii(e,t){return t||!1!==e?!0===e?{}:e:null}function Wi(e,t,n,i){const s=e.pluginScopeKeys(t),r=e.getOptionScopes(n,s);return e.createResolver(r,i,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function Ni(e,t){const n=Ie.datasets[e]||{};return((t.datasets||{})[e]||{}).indexAxis||t.indexAxis||n.indexAxis||"x"}function Fi(e,t){return"x"===e||"y"===e?e:t.axis||("top"===(n=t.position)||"bottom"===n?"x":"left"===n||"right"===n?"y":void 0)||e.charAt(0).toLowerCase();var n}function zi(e){const t=e.options||(e.options={});t.plugins=m(t.plugins,{}),t.scales=function(e,t){const n=Pe[e.type]||{scales:{}},i=t.scales||{},s=Ni(e.type,t),r=Object.create(null),a=Object.create(null);return Object.keys(i).forEach((e=>{const t=i[e];if(!h(t))return console.error(`Invalid scale configuration for scale: ${e}`);if(t._proxy)return console.warn(`Ignoring resolver passed as options for scale: ${e}`);const o=Fi(e,t),d=function(e,t){return e===t?"_index_":"_value_"}(o,s),l=n.scales||{};r[o]=r[o]||e,a[e]=w(Object.create(null),[{axis:o},t,l[o],l[d]])})),e.data.datasets.forEach((n=>{const s=n.type||e.type,o=n.indexAxis||Ni(s,t),d=(Pe[s]||{}).scales||{};Object.keys(d).forEach((e=>{const t=function(e,t){let n=e;return"_index_"===e?n=t:"_value_"===e&&(n="x"===t?"y":"x"),n}(e,o),s=n[t+"AxisID"]||r[t]||t;a[s]=a[s]||Object.create(null),w(a[s],[{axis:t},i[s],d[e]])}))})),Object.keys(a).forEach((e=>{const t=a[e];w(t,[Ie.scales[t.type],Ie.scale])})),a}(e,t)}function Bi(e){return(e=e||{}).datasets=e.datasets||[],e.labels=e.labels||[],e}const Vi=new Map,Ui=new Set;function Ji(e,t){let n=Vi.get(e);return n||(n=t(),Vi.set(e,n),Ui.add(n)),n}const $i=(e,t,n)=>{const i=D(t,n);void 0!==i&&e.add(i)};class qi{constructor(e){this._config=function(e){return(e=e||{}).data=Bi(e.data),zi(e),e}(e),this._scopeCache=new Map,this._resolverCache=new Map}get platform(){return this._config.platform}get type(){return this._config.type}set type(e){this._config.type=e}get data(){return this._config.data}set data(e){this._config.data=Bi(e)}get options(){return this._config.options}set options(e){this._config.options=e}get plugins(){return this._config.plugins}update(){const e=this._config;this.clearCache(),zi(e)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(e){return Ji(e,(()=>[[`datasets.${e}`,""]]))}datasetAnimationScopeKeys(e,t){return Ji(`${e}.transition.${t}`,(()=>[[`datasets.${e}.transitions.${t}`,`transitions.${t}`],[`datasets.${e}`,""]]))}datasetElementScopeKeys(e,t){return Ji(`${e}-${t}`,(()=>[[`datasets.${e}.elements.${t}`,`datasets.${e}`,`elements.${t}`,""]]))}pluginScopeKeys(e){const t=e.id;return Ji(`${this.type}-plugin-${t}`,(()=>[[`plugins.${t}`,...e.additionalOptionScopes||[]]]))}_cachedScopes(e,t){const n=this._scopeCache;let i=n.get(e);return i&&!t||(i=new Map,n.set(e,i)),i}getOptionScopes(e,t,n){const{options:i,type:s}=this,r=this._cachedScopes(e,n),a=r.get(t);if(a)return a;const o=new Set;t.forEach((t=>{e&&(o.add(e),t.forEach((t=>$i(o,e,t)))),t.forEach((e=>$i(o,i,e))),t.forEach((e=>$i(o,Pe[s]||{},e))),t.forEach((e=>$i(o,Ie,e))),t.forEach((e=>$i(o,Ae,e)))}));const d=Array.from(o);return 0===d.length&&d.push(Object.create(null)),Ui.has(t)&&r.set(t,d),d}chartOptionScopes(){const{options:e,type:t}=this;return[e,Pe[t]||{},Ie.datasets[t]||{},{type:t},Ie,Ae]}resolveNamedOptions(e,t,n,i=[""]){const s={$shared:!0},{resolver:r,subPrefixes:a}=Gi(this._resolverCache,e,i);let o=r;(function(e,t){const{isScriptable:n,isIndexable:i}=pt(e);for(const s of t){const t=n(s),r=i(s),a=(r||t)&&e[s];if(t&&(S(a)||Ki(a))||r&&u(a))return!0}return!1})(r,t)&&(s.$shared=!1,o=ft(r,n=S(n)?n():n,this.createResolver(e,n,a)));for(const e of t)s[e]=o[e];return s}createResolver(e,t,n=[""],i){const{resolver:s}=Gi(this._resolverCache,e,n);return h(t)?ft(s,t,void 0,i):s}}function Gi(e,t,n){let i=e.get(t);i||(i=new Map,e.set(t,i));const s=n.join();let r=i.get(s);return r||(r={resolver:mt(t,n),subPrefixes:n.filter((e=>!e.toLowerCase().includes("hover")))},i.set(s,r)),r}const Ki=e=>h(e)&&Object.getOwnPropertyNames(e).reduce(((t,n)=>t||S(e[n])),!1),Zi=["top","bottom","left","right","chartArea"];function Xi(e,t){return"top"===e||"bottom"===e||-1===Zi.indexOf(e)&&"x"===t}function Qi(e,t){return function(n,i){return n[e]===i[e]?n[t]-i[t]:n[e]-i[e]}}function es(e){const t=e.chart,n=t.options.animation;t.notifyPlugins("afterRender"),p(n&&n.onComplete,[e],t)}function ts(e){const t=e.chart,n=t.options.animation;p(n&&n.onProgress,[e],t)}function ns(e){return Et()&&"string"==typeof e?e=document.getElementById(e):e&&e.length&&(e=e[0]),e&&e.canvas&&(e=e.canvas),e}const is={},ss=e=>{const t=ns(e);return Object.values(is).filter((e=>e.canvas===t)).pop()};class rs{constructor(e,t){const n=this.config=new qi(t),i=ns(e),s=ss(i);if(s)throw new Error("Canvas is already in use. Chart with ID '"+s.id+"' must be destroyed before the canvas can be reused.");const r=n.createResolver(n.chartOptionScopes(),this.getContext());this.platform=new(n.platform||wi(i)),this.platform.updateConfig(n);const a=this.platform.acquireContext(i,r.aspectRatio),o=a&&a.canvas,l=o&&o.height,u=o&&o.width;this.id=d(),this.ctx=a,this.canvas=o,this.width=u,this.height=l,this._options=r,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this._plugins=new Ci,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=function(e,t){let n;return function(...i){return t?(clearTimeout(n),n=setTimeout(e,t,i)):e.apply(this,i),t}}((e=>this.update(e)),r.resizeDelay||0),is[this.id]=this,a&&o?(rn.listen(this,"complete",es),rn.listen(this,"progress",ts),this._initialize(),this.attached&&this.update()):console.error("Failed to create chart: can't acquire context from the given item")}get aspectRatio(){const{options:{aspectRatio:e,maintainAspectRatio:t},width:n,height:i,_aspectRatio:s}=this;return l(e)?t&&s?s:i?n/i:null:e}get data(){return this.config.data}set data(e){this.config.data=e}get options(){return this._options}set options(e){this.config.options=e}_initialize(){return this.notifyPlugins("beforeInit"),this.options.responsive?this.resize():Ft(this,this.options.devicePixelRatio),this.bindEvents(),this.notifyPlugins("afterInit"),this}clear(){return ze(this.canvas,this.ctx),this}stop(){return rn.stop(this),this}resize(e,t){rn.running(this)?this._resizeBeforeDraw={width:e,height:t}:this._resize(e,t)}_resize(e,t){const n=this.options,i=this.canvas,s=n.maintainAspectRatio&&this.aspectRatio,r=this.platform.getMaximumSize(i,e,t,s),a=n.devicePixelRatio||this.platform.getDevicePixelRatio(),o=this.width?"resize":"attach";this.width=r.width,this.height=r.height,this._aspectRatio=this.aspectRatio,Ft(this,a,!0)&&(this.notifyPlugins("resize",{size:r}),p(n.onResize,[this,r],this),this.attached&&this._doResize(o)&&this.render())}ensureScalesHaveIDs(){g(this.options.scales||{},((e,t)=>{e.id=t}))}buildOrUpdateScales(){const e=this.options,t=e.scales,n=this.scales,i=Object.keys(n).reduce(((e,t)=>(e[t]=!1,e)),{});let s=[];t&&(s=s.concat(Object.keys(t).map((e=>{const n=t[e],i=Fi(e,n),s="r"===i,r="x"===i;return{options:n,dposition:s?"chartArea":r?"bottom":"left",dtype:s?"radialLinear":r?"category":"linear"}})))),g(s,(t=>{const s=t.options,r=s.id,a=Fi(r,s),o=m(s.type,t.dtype);void 0!==s.position&&Xi(s.position,a)===Xi(t.dposition)||(s.position=t.dposition),i[r]=!0;let d=null;r in n&&n[r].type===o?d=n[r]:(d=new(Ri.getScale(o))({id:r,type:o,ctx:this.ctx,chart:this}),n[d.id]=d),d.init(s,e)})),g(i,((e,t)=>{e||delete n[t]})),g(n,(e=>{oi.configure(this,e,e.options),oi.addBox(this,e)}))}_updateMetasets(){const e=this._metasets,t=this.data.datasets.length,n=e.length;if(e.sort(((e,t)=>e.index-t.index)),n>t){for(let e=t;e<n;++e)this._destroyDatasetMeta(e);e.splice(t,n-t)}this._sortedMetasets=e.slice(0).sort(Qi("order","index"))}_removeUnreferencedMetasets(){const{_metasets:e,data:{datasets:t}}=this;e.length>t.length&&delete this._stacks,e.forEach(((e,n)=>{0===t.filter((t=>t===e._dataset)).length&&this._destroyDatasetMeta(n)}))}buildOrUpdateControllers(){const e=[],t=this.data.datasets;let n,i;for(this._removeUnreferencedMetasets(),n=0,i=t.length;n<i;n++){const i=t[n];let s=this.getDatasetMeta(n);const r=i.type||this.config.type;if(s.type&&s.type!==r&&(this._destroyDatasetMeta(n),s=this.getDatasetMeta(n)),s.type=r,s.indexAxis=i.indexAxis||Ni(r,this.options),s.order=i.order||0,s.index=n,s.label=""+i.label,s.visible=this.isDatasetVisible(n),s.controller)s.controller.updateIndex(n),s.controller.linkScales();else{const t=Ri.getController(r),{datasetElementType:i,dataElementType:a}=Ie.datasets[r];Object.assign(t.prototype,{dataElementType:Ri.getElement(a),datasetElementType:i&&Ri.getElement(i)}),s.controller=new t(this,n),e.push(s.controller)}}return this._updateMetasets(),e}_resetElements(){g(this.data.datasets,((e,t)=>{this.getDatasetMeta(t).controller.reset()}),this)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(e){const t=this.config;t.update();const n=this._options=t.createResolver(t.chartOptionScopes(),this.getContext());g(this.scales,(e=>{oi.removeBox(this,e)}));const i=this._animationsDisabled=!n.animation;if(this.ensureScalesHaveIDs(),this.buildOrUpdateScales(),((e,t)=>{if(e.size!==t.size)return!1;for(const n of e)if(!t.has(n))return!1;return!0})(new Set(Object.keys(this._listeners)),new Set(n.events))&&!!this._responsiveListeners===n.responsive||(this.unbindEvents(),this.bindEvents()),this._plugins.invalidate(),!1===this.notifyPlugins("beforeUpdate",{mode:e,cancelable:!0}))return;const s=this.buildOrUpdateControllers();this.notifyPlugins("beforeElementsUpdate");let r=0;for(let e=0,t=this.data.datasets.length;e<t;e++){const{controller:t}=this.getDatasetMeta(e),n=!i&&-1===s.indexOf(t);t.buildOrUpdateElements(n),r=Math.max(+t.getMaxOverflow(),r)}r=this._minPadding=n.layout.autoPadding?r:0,this._updateLayout(r),i||g(s,(e=>{e.reset()})),this._updateDatasets(e),this.notifyPlugins("afterUpdate",{mode:e}),this._layers.sort(Qi("z","_idx")),this._lastEvent&&this._eventHandler(this._lastEvent,!0),this.render()}_updateLayout(e){if(!1===this.notifyPlugins("beforeLayout",{cancelable:!0}))return;oi.update(this,this.width,this.height,e);const t=this.chartArea,n=t.width<=0||t.height<=0;this._layers=[],g(this.boxes,(e=>{n&&"chartArea"===e.position||(e.configure&&e.configure(),this._layers.push(...e._layers()))}),this),this._layers.forEach(((e,t)=>{e._idx=t})),this.notifyPlugins("afterLayout")}_updateDatasets(e){if(!1!==this.notifyPlugins("beforeDatasetsUpdate",{mode:e,cancelable:!0})){for(let t=0,n=this.data.datasets.length;t<n;++t)this._updateDataset(t,S(e)?e({datasetIndex:t}):e);this.notifyPlugins("afterDatasetsUpdate",{mode:e})}}_updateDataset(e,t){const n=this.getDatasetMeta(e),i={meta:n,index:e,mode:t,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetUpdate",i)&&(n.controller._update(t),i.cancelable=!1,this.notifyPlugins("afterDatasetUpdate",i))}render(){!1!==this.notifyPlugins("beforeRender",{cancelable:!0})&&(rn.has(this)?this.attached&&!rn.running(this)&&rn.start(this):(this.draw(),es({chart:this})))}draw(){let e;if(this._resizeBeforeDraw){const{width:e,height:t}=this._resizeBeforeDraw;this._resize(e,t),this._resizeBeforeDraw=null}if(this.clear(),this.width<=0||this.height<=0)return;if(!1===this.notifyPlugins("beforeDraw",{cancelable:!0}))return;const t=this._layers;for(e=0;e<t.length&&t[e].z<=0;++e)t[e].draw(this.chartArea);for(this._drawDatasets();e<t.length;++e)t[e].draw(this.chartArea);this.notifyPlugins("afterDraw")}_getSortedDatasetMetas(e){const t=this._sortedMetasets,n=[];let i,s;for(i=0,s=t.length;i<s;++i){const s=t[i];e&&!s.visible||n.push(s)}return n}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){if(!1===this.notifyPlugins("beforeDatasetsDraw",{cancelable:!0}))return;const e=this.getSortedVisibleDatasetMetas();for(let t=e.length-1;t>=0;--t)this._drawDataset(e[t]);this.notifyPlugins("afterDatasetsDraw")}_drawDataset(e){const t=this.ctx,n=e._clip,i=!n.disabled,s=this.chartArea,r={meta:e,index:e.index,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetDraw",r)&&(i&&Ue(t,{left:!1===n.left?0:s.left-n.left,right:!1===n.right?this.width:s.right+n.right,top:!1===n.top?0:s.top-n.top,bottom:!1===n.bottom?this.height:s.bottom+n.bottom}),e.controller.draw(),i&&Je(t),r.cancelable=!1,this.notifyPlugins("afterDatasetDraw",r))}getElementsAtEventForMode(e,t,n,i){const s=Gn.modes[t];return"function"==typeof s?s(this,e,n,i):[]}getDatasetMeta(e){const t=this.data.datasets[e],n=this._metasets;let i=n.filter((e=>e&&e._dataset===t)).pop();return i||(i={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:t&&t.order||0,index:e,_dataset:t,_parsed:[],_sorted:!1},n.push(i)),i}getContext(){return this.$context||(this.$context=ot(null,{chart:this,type:"chart"}))}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(e){const t=this.data.datasets[e];if(!t)return!1;const n=this.getDatasetMeta(e);return"boolean"==typeof n.hidden?!n.hidden:!t.hidden}setDatasetVisibility(e,t){this.getDatasetMeta(e).hidden=!t}toggleDataVisibility(e){this._hiddenIndices[e]=!this._hiddenIndices[e]}getDataVisibility(e){return!this._hiddenIndices[e]}_updateVisibility(e,t,n){const i=n?"show":"hide",s=this.getDatasetMeta(e),r=s.controller._resolveAnimations(void 0,i);T(t)?(s.data[t].hidden=!n,this.update()):(this.setDatasetVisibility(e,n),r.update(s,{visible:n}),this.update((t=>t.datasetIndex===e?i:void 0)))}hide(e,t){this._updateVisibility(e,t,!1)}show(e,t){this._updateVisibility(e,t,!0)}_destroyDatasetMeta(e){const t=this._metasets[e];t&&t.controller&&t.controller._destroy(),delete this._metasets[e]}_stop(){let e,t;for(this.stop(),rn.remove(this),e=0,t=this.data.datasets.length;e<t;++e)this._destroyDatasetMeta(e)}destroy(){const{canvas:e,ctx:t}=this;this._stop(),this.config.clearCache(),e&&(this.unbindEvents(),ze(e,t),this.platform.releaseContext(t),this.canvas=null,this.ctx=null),this.notifyPlugins("destroy"),delete is[this.id]}toBase64Image(...e){return this.canvas.toDataURL(...e)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){const e=this._listeners,t=this.platform,n=(n,i)=>{t.addEventListener(this,n,i),e[n]=i},i=(e,t,n)=>{e.offsetX=t,e.offsetY=n,this._eventHandler(e)};g(this.options.events,(e=>n(e,i)))}bindResponsiveEvents(){this._responsiveListeners||(this._responsiveListeners={});const e=this._responsiveListeners,t=this.platform,n=(n,i)=>{t.addEventListener(this,n,i),e[n]=i},i=(n,i)=>{e[n]&&(t.removeEventListener(this,n,i),delete e[n])},s=(e,t)=>{this.canvas&&this.resize(e,t)};let r;const a=()=>{i("attach",a),this.attached=!0,this.resize(),n("resize",s),n("detach",r)};r=()=>{this.attached=!1,i("resize",s),this._stop(),this._resize(0,0),n("attach",a)},t.isAttached(this.canvas)?a():r()}unbindEvents(){g(this._listeners,((e,t)=>{this.platform.removeEventListener(this,t,e)})),this._listeners={},g(this._responsiveListeners,((e,t)=>{this.platform.removeEventListener(this,t,e)})),this._responsiveListeners=void 0}updateHoverStyle(e,t,n){const i=n?"set":"remove";let s,r,a,o;for("dataset"===t&&(s=this.getDatasetMeta(e[0].datasetIndex),s.controller["_"+i+"DatasetHoverStyle"]()),a=0,o=e.length;a<o;++a){r=e[a];const t=r&&this.getDatasetMeta(r.datasetIndex).controller;t&&t[i+"HoverStyle"](r.element,r.datasetIndex,r.index)}}getActiveElements(){return this._active||[]}setActiveElements(e){const t=this._active||[],n=e.map((({datasetIndex:e,index:t})=>{const n=this.getDatasetMeta(e);if(!n)throw new Error("No dataset found at index "+e);return{datasetIndex:e,element:n.data[t],index:t}}));!y(n,t)&&(this._active=n,this._updateHoverStyles(n,t))}notifyPlugins(e,t,n){return this._plugins.notify(this,e,t,n)}_updateHoverStyles(e,t,n){const i=this.options.hover,s=(e,t)=>e.filter((e=>!t.some((t=>e.datasetIndex===t.datasetIndex&&e.index===t.index)))),r=s(t,e),a=n?e:s(e,t);r.length&&this.updateHoverStyle(r,i.mode,!1),a.length&&i.mode&&this.updateHoverStyle(a,i.mode,!0)}_eventHandler(e,t){const n={event:e,replay:t,cancelable:!0},i=t=>(t.options.events||this.options.events).includes(e.native.type);if(!1===this.notifyPlugins("beforeEvent",n,i))return;const s=this._handleEvent(e,t);return n.cancelable=!1,this.notifyPlugins("afterEvent",n,i),(s||n.changed)&&this.render(),this}_handleEvent(e,t){const{_active:n=[],options:i}=this,s=i.hover,r=t;let a=[],o=!1,d=null;return"mouseout"!==e.type&&(a=this.getElementsAtEventForMode(e,s.mode,s,r),d="click"===e.type?this._lastEvent:e),this._lastEvent=null,Ve(e,this.chartArea,this._minPadding)&&(p(i.onHover,[e,a,this],this),"mouseup"!==e.type&&"click"!==e.type&&"contextmenu"!==e.type||p(i.onClick,[e,a,this],this)),o=!y(a,n),(o||t)&&(this._active=a,this._updateHoverStyles(a,n,t)),this._lastEvent=d,o}}const as=()=>g(rs.instances,(e=>e._plugins.invalidate())),os=!0;function ds(e,t,n){const{startAngle:i,pixelMargin:s,x:r,y:a,outerRadius:o,innerRadius:d}=t;let l=s/o;e.beginPath(),e.arc(r,a,o,i-l,n+l),d>s?(l=s/d,e.arc(r,a,d,n+l,i-l,!0)):e.arc(r,a,s,n+A,i-A),e.closePath(),e.clip()}function ls(e,t,n,i){return{x:n+e*Math.cos(t),y:i+e*Math.sin(t)}}function us(e,t,n,i,s){const{x:r,y:a,startAngle:o,pixelMargin:d,innerRadius:l}=t,u=Math.max(t.outerRadius+i+n-d,0),h=l>0?l+i+n+d:0;let c=0;const _=s-o;if(i){const e=((l>0?l-i:0)+(u>0?u-i:0))/2;c=(_-(0!==e?_*e/(e+i):_))/2}const m=(_-Math.max(.001,_*u-n/O)/u)/2,f=o+m+c,p=s-m-c,{outerStart:g,outerEnd:y,innerStart:M,innerEnd:b}=function(e,t,n,i){const s=tt(e.options.borderRadius,["outerStart","outerEnd","innerStart","innerEnd"]),r=(n-t)/2,a=Math.min(r,i*t/2),o=e=>{const t=(n-Math.min(r,e))*i/2;return Z(e,0,Math.min(r,t))};return{outerStart:o(s.outerStart),outerEnd:o(s.outerEnd),innerStart:Z(s.innerStart,0,a),innerEnd:Z(s.innerEnd,0,a)}}(t,h,u,p-f),L=u-g,v=u-y,w=f+g/L,Y=p-y/v,k=h+M,D=h+b,x=f+M/k,T=p-b/D;if(e.beginPath(),e.arc(r,a,u,w,Y),y>0){const t=ls(v,Y,r,a);e.arc(t.x,t.y,y,Y,p+A)}const S=ls(D,p,r,a);if(e.lineTo(S.x,S.y),b>0){const t=ls(D,T,r,a);e.arc(t.x,t.y,b,p+A,T+Math.PI)}if(e.arc(r,a,h,p-b/h,f+M/h,!0),M>0){const t=ls(k,x,r,a);e.arc(t.x,t.y,M,x+Math.PI,f-A)}const H=ls(L,f,r,a);if(e.lineTo(H.x,H.y),g>0){const t=ls(L,w,r,a);e.arc(t.x,t.y,g,f-A,w)}e.closePath()}Object.defineProperties(rs,{defaults:{enumerable:os,value:Ie},instances:{enumerable:os,value:is},overrides:{enumerable:os,value:Pe},registry:{enumerable:os,value:Ri},version:{enumerable:os,value:"3.6.0"},getChart:{enumerable:os,value:ss},register:{enumerable:os,value:(...e)=>{Ri.add(...e),as()}},unregister:{enumerable:os,value:(...e)=>{Ri.remove(...e),as()}}});class hs extends Yi{constructor(e){super(),this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,e&&Object.assign(this,e)}inRange(e,t,n){const i=this.getProps(["x","y"],n),{angle:s,distance:r}=function(e,t){const n=t.x-e.x,i=t.y-e.y,s=Math.sqrt(n*n+i*i);let r=Math.atan2(i,n);return r<-.5*O&&(r+=H),{angle:r,distance:s}}(i,{x:e,y:t}),{startAngle:a,endAngle:o,innerRadius:d,outerRadius:l,circumference:u}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],n),h=this.options.spacing/2;return(u>=H||K(s,a,o))&&r>=d+h&&r<=l+h}getCenterPoint(e){const{x:t,y:n,startAngle:i,endAngle:s,innerRadius:r,outerRadius:a}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius","circumference"],e),{offset:o,spacing:d}=this.options,l=(i+s)/2,u=(r+a+d+o)/2;return{x:t+Math.cos(l)*u,y:n+Math.sin(l)*u}}tooltipPosition(e){return this.getCenterPoint(e)}draw(e){const{options:t,circumference:n}=this,i=(t.offset||0)/2,s=(t.spacing||0)/2;if(this.pixelMargin="inner"===t.borderAlign?.33:0,this.fullCircles=n>H?Math.floor(n/H):0,0===n||this.innerRadius<0||this.outerRadius<0)return;e.save();let r=0;if(i){r=i/2;const t=(this.startAngle+this.endAngle)/2;e.translate(Math.cos(t)*r,Math.sin(t)*r),this.circumference>=O&&(r=i)}e.fillStyle=t.backgroundColor,e.strokeStyle=t.borderColor;const a=function(e,t,n,i){const{fullCircles:s,startAngle:r,circumference:a}=t;let o=t.endAngle;if(s){us(e,t,n,i,r+H);for(let t=0;t<s;++t)e.fill();isNaN(a)||(o=r+a%H,a%H==0&&(o+=H))}return us(e,t,n,i,o),e.fill(),o}(e,this,r,s);(function(e,t,n,i,s){const{options:r}=t,a="inner"===r.borderAlign;r.borderWidth&&(a?(e.lineWidth=2*r.borderWidth,e.lineJoin="round"):(e.lineWidth=r.borderWidth,e.lineJoin="bevel"),t.fullCircles&&function(e,t,n){const{x:i,y:s,startAngle:r,pixelMargin:a,fullCircles:o}=t,d=Math.max(t.outerRadius-a,0),l=t.innerRadius+a;let u;for(n&&ds(e,t,r+H),e.beginPath(),e.arc(i,s,l,r+H,r,!0),u=0;u<o;++u)e.stroke();for(e.beginPath(),e.arc(i,s,d,r,r+H),u=0;u<o;++u)e.stroke()}(e,t,a),a&&ds(e,t,s),us(e,t,n,i,s),e.stroke())})(e,this,r,s,a),e.restore()}}function cs(e,t,n=t){e.lineCap=m(n.borderCapStyle,t.borderCapStyle),e.setLineDash(m(n.borderDash,t.borderDash)),e.lineDashOffset=m(n.borderDashOffset,t.borderDashOffset),e.lineJoin=m(n.borderJoinStyle,t.borderJoinStyle),e.lineWidth=m(n.borderWidth,t.borderWidth),e.strokeStyle=m(n.borderColor,t.borderColor)}function _s(e,t,n){e.lineTo(n.x,n.y)}function ms(e,t,n={}){const i=e.length,{start:s=0,end:r=i-1}=n,{start:a,end:o}=t,d=Math.max(s,a),l=Math.min(r,o),u=s<a&&r<a||s>o&&r>o;return{count:i,start:d,loop:t.loop,ilen:l<d&&!u?i+l-d:l-d}}function fs(e,t,n,i){const{points:s,options:r}=t,{count:a,start:o,loop:d,ilen:l}=ms(s,n,i),u=function(e){return e.stepped?$e:e.tension||"monotone"===e.cubicInterpolationMode?qe:_s}(r);let h,c,_,{move:m=!0,reverse:f}=i||{};for(h=0;h<=l;++h)c=s[(o+(f?l-h:h))%a],c.skip||(m?(e.moveTo(c.x,c.y),m=!1):u(e,_,c,f,r.stepped),_=c);return d&&(c=s[(o+(f?l:0))%a],u(e,_,c,f,r.stepped)),!!d}function ps(e,t,n,i){const s=t.points,{count:r,start:a,ilen:o}=ms(s,n,i),{move:d=!0,reverse:l}=i||{};let u,h,c,_,m,f,p=0,g=0;const y=e=>(a+(l?o-e:e))%r,M=()=>{_!==m&&(e.lineTo(p,m),e.lineTo(p,_),e.lineTo(p,f))};for(d&&(h=s[y(0)],e.moveTo(h.x,h.y)),u=0;u<=o;++u){if(h=s[y(u)],h.skip)continue;const t=h.x,n=h.y,i=0|t;i===c?(n<_?_=n:n>m&&(m=n),p=(g*p+t)/++g):(M(),e.lineTo(t,n),c=i,g=0,_=m=n),f=n}M()}function gs(e){const t=e.options,n=t.borderDash&&t.borderDash.length;return e._decimated||e._loop||t.tension||"monotone"===t.cubicInterpolationMode||t.stepped||n?fs:ps}hs.id="arc",hs.defaults={borderAlign:"center",borderColor:"#fff",borderRadius:0,borderWidth:2,offset:0,spacing:0,angle:void 0},hs.defaultRoutes={backgroundColor:"backgroundColor"};const ys="function"==typeof Path2D;class Ms extends Yi{constructor(e){super(),this.animated=!0,this.options=void 0,this._chart=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,this._datasetIndex=void 0,e&&Object.assign(this,e)}updateControlPoints(e,t){const n=this.options;if((n.tension||"monotone"===n.cubicInterpolationMode)&&!n.stepped&&!this._pointsUpdated){const i=n.spanGaps?this._loop:this._fullLoop;jt(this._points,n,e,i,t),this._pointsUpdated=!0}}set points(e){this._points=e,delete this._segments,delete this._path,this._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=function(e,t){const n=e.points,i=e.options.spanGaps,s=n.length;if(!s)return[];const r=!!e._loop,{start:a,end:o}=function(e,t,n,i){let s=0,r=t-1;if(n&&!i)for(;s<t&&!e[s].skip;)s++;for(;s<t&&e[s].skip;)s++;for(s%=t,n&&(r+=s);r>s&&e[r%t].skip;)r--;return r%=t,{start:s,end:r}}(n,s,r,i);return function(e,t,n,i){return i&&i.setContext&&n?function(e,t,n,i){const s=e._chart.getContext(),r=nn(e.options),{_datasetIndex:a,options:{spanGaps:o}}=e,d=n.length,l=[];let u=r,h=t[0].start,c=h;function _(e,t,i,s){const r=o?-1:1;if(e!==t){for(e+=d;n[e%d].skip;)e-=r;for(;n[t%d].skip;)t+=r;e%d!=t%d&&(l.push({start:e%d,end:t%d,loop:i,style:s}),u=s,h=t%d)}}for(const e of t){h=o?h:e.start;let t,r=n[h%d];for(c=h+1;c<=e.end;c++){const o=n[c%d];t=nn(i.setContext(ot(s,{type:"segment",p0:r,p1:o,p0DataIndex:(c-1)%d,p1DataIndex:c%d,datasetIndex:a}))),sn(t,u)&&_(h,c-1,e.loop,u),r=o,u=t}h<c-1&&_(h,c-1,e.loop,u)}return l}(e,t,n,i):t}(e,!0===i?[{start:a,end:o,loop:r}]:function(e,t,n,i){const s=e.length,r=[];let a,o=t,d=e[t];for(a=t+1;a<=n;++a){const n=e[a%s];n.skip||n.stop?d.skip||(i=!1,r.push({start:t%s,end:(a-1)%s,loop:i}),t=o=n.stop?a:null):(o=a,d.skip&&(t=a)),d=n}return null!==o&&r.push({start:t%s,end:o%s,loop:i}),r}(n,a,o<a?o+s:o,!!e._fullLoop&&0===a&&o===s-1),n,t)}(this,this.options.segment))}first(){const e=this.segments,t=this.points;return e.length&&t[e[0].start]}last(){const e=this.segments,t=this.points,n=e.length;return n&&t[e[n-1].end]}interpolate(e,t){const n=this.options,i=e[t],s=this.points,r=tn(this,{property:t,start:i,end:i});if(!r.length)return;const a=[],o=function(e){return e.stepped?Ut:e.tension||"monotone"===e.cubicInterpolationMode?Jt:Vt}(n);let d,l;for(d=0,l=r.length;d<l;++d){const{start:l,end:u}=r[d],h=s[l],c=s[u];if(h===c){a.push(h);continue}const _=o(h,c,Math.abs((i-h[t])/(c[t]-h[t])),n.stepped);_[t]=e[t],a.push(_)}return 1===a.length?a[0]:a}pathSegment(e,t,n){return gs(this)(e,this,t,n)}path(e,t,n){const i=this.segments,s=gs(this);let r=this._loop;t=t||0,n=n||this.points.length-t;for(const a of i)r&=s(e,this,a,{start:t,end:t+n-1});return!!r}draw(e,t,n,i){const s=this.options||{};(this.points||[]).length&&s.borderWidth&&(e.save(),function(e,t,n,i){ys&&!t.options.segment?function(e,t,n,i){let s=t._path;s||(s=t._path=new Path2D,t.path(s,n,i)&&s.closePath()),cs(e,t.options),e.stroke(s)}(e,t,n,i):function(e,t,n,i){const{segments:s,options:r}=t,a=gs(t);for(const o of s)cs(e,r,o.style),e.beginPath(),a(e,t,o,{start:n,end:n+i-1})&&e.closePath(),e.stroke()}(e,t,n,i)}(e,this,n,i),e.restore()),this.animated&&(this._pointsUpdated=!1,this._path=void 0)}}function bs(e,t,n,i){const s=e.options,{[n]:r}=e.getProps([n],i);return Math.abs(t-r)<s.radius+s.hitRadius}Ms.id="line",Ms.defaults={borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0},Ms.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"},Ms.descriptors={_scriptable:!0,_indexable:e=>"borderDash"!==e&&"fill"!==e};class Ls extends Yi{constructor(e){super(),this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,e&&Object.assign(this,e)}inRange(e,t,n){const i=this.options,{x:s,y:r}=this.getProps(["x","y"],n);return Math.pow(e-s,2)+Math.pow(t-r,2)<Math.pow(i.hitRadius+i.radius,2)}inXRange(e,t){return bs(this,e,"x",t)}inYRange(e,t){return bs(this,e,"y",t)}getCenterPoint(e){const{x:t,y:n}=this.getProps(["x","y"],e);return{x:t,y:n}}size(e){let t=(e=e||this.options||{}).radius||0;return t=Math.max(t,t&&e.hoverRadius||0),2*(t+(t&&e.borderWidth||0))}draw(e,t){const n=this.options;this.skip||n.radius<.1||!Ve(this,t,this.size(n)/2)||(e.strokeStyle=n.borderColor,e.lineWidth=n.borderWidth,e.fillStyle=n.backgroundColor,Be(e,n,this.x,this.y))}getRange(){const e=this.options||{};return e.radius+e.hitRadius}}function vs(e,t){const{x:n,y:i,base:s,width:r,height:a}=e.getProps(["x","y","base","width","height"],t);let o,d,l,u,h;return e.horizontal?(h=a/2,o=Math.min(n,s),d=Math.max(n,s),l=i-h,u=i+h):(h=r/2,o=n-h,d=n+h,l=Math.min(i,s),u=Math.max(i,s)),{left:o,top:l,right:d,bottom:u}}function ws(e,t,n,i){return e?0:Z(t,n,i)}function Ys(e,t,n,i){const s=null===t,r=null===n,a=e&&!(s&&r)&&vs(e,i);return a&&(s||t>=a.left&&t<=a.right)&&(r||n>=a.top&&n<=a.bottom)}function ks(e,t){e.rect(t.x,t.y,t.w,t.h)}function Ds(e,t,n={}){const i=e.x!==n.x?-t:0,s=e.y!==n.y?-t:0,r=(e.x+e.w!==n.x+n.w?t:0)-i,a=(e.y+e.h!==n.y+n.h?t:0)-s;return{x:e.x+i,y:e.y+s,w:e.w+r,h:e.h+a,radius:e.radius}}Ls.id="point",Ls.defaults={borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0},Ls.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};class xs extends Yi{constructor(e){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,this.inflateAmount=void 0,e&&Object.assign(this,e)}draw(e){const{inflateAmount:t,options:{borderColor:n,backgroundColor:i}}=this,{inner:s,outer:r}=function(e){const t=vs(e),n=t.right-t.left,i=t.bottom-t.top,s=function(e,t,n){const i=e.options.borderWidth,s=e.borderSkipped,r=nt(i);return{t:ws(s.top,r.top,0,n),r:ws(s.right,r.right,0,t),b:ws(s.bottom,r.bottom,0,n),l:ws(s.left,r.left,0,t)}}(e,n/2,i/2),r=function(e,t,n){const{enableBorderRadius:i}=e.getProps(["enableBorderRadius"]),s=e.options.borderRadius,r=it(s),a=Math.min(t,n),o=e.borderSkipped,d=i||h(s);return{topLeft:ws(!d||o.top||o.left,r.topLeft,0,a),topRight:ws(!d||o.top||o.right,r.topRight,0,a),bottomLeft:ws(!d||o.bottom||o.left,r.bottomLeft,0,a),bottomRight:ws(!d||o.bottom||o.right,r.bottomRight,0,a)}}(e,n/2,i/2);return{outer:{x:t.left,y:t.top,w:n,h:i,radius:r},inner:{x:t.left+s.l,y:t.top+s.t,w:n-s.l-s.r,h:i-s.t-s.b,radius:{topLeft:Math.max(0,r.topLeft-Math.max(s.t,s.l)),topRight:Math.max(0,r.topRight-Math.max(s.t,s.r)),bottomLeft:Math.max(0,r.bottomLeft-Math.max(s.b,s.l)),bottomRight:Math.max(0,r.bottomRight-Math.max(s.b,s.r))}}}}(this),a=(o=r.radius).topLeft||o.topRight||o.bottomLeft||o.bottomRight?Ze:ks;var o;e.save(),r.w===s.w&&r.h===s.h||(e.beginPath(),a(e,Ds(r,t,s)),e.clip(),a(e,Ds(s,-t,r)),e.fillStyle=n,e.fill("evenodd")),e.beginPath(),a(e,Ds(s,t)),e.fillStyle=i,e.fill(),e.restore()}inRange(e,t,n){return Ys(this,e,t,n)}inXRange(e,t){return Ys(this,e,null,t)}inYRange(e,t){return Ys(this,null,e,t)}getCenterPoint(e){const{x:t,y:n,base:i,horizontal:s}=this.getProps(["x","y","base","horizontal"],e);return{x:s?(t+i)/2:t,y:s?n:(n+i)/2}}getRange(e){return"x"===e?this.width/2:this.height/2}}xs.id="bar",xs.defaults={borderSkipped:"start",borderWidth:0,borderRadius:0,inflateAmount:"auto",pointStyle:void 0},xs.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};var Ts=Object.freeze({__proto__:null,ArcElement:hs,LineElement:Ms,PointElement:Ls,BarElement:xs});function Ss(e){if(e._decimated){const t=e._data;delete e._decimated,delete e._data,Object.defineProperty(e,"data",{value:t})}}function Os(e){e.data.datasets.forEach((e=>{Ss(e)}))}var Hs={id:"decimation",defaults:{algorithm:"min-max",enabled:!1},beforeElementsUpdate:(e,t,n)=>{if(!n.enabled)return void Os(e);const i=e.width;e.data.datasets.forEach(((t,s)=>{const{_data:r,indexAxis:a}=t,o=e.getDatasetMeta(s),d=r||t.data;if("y"===at([a,e.options.indexAxis]))return;if("line"!==o.type)return;const u=e.scales[o.xAxisID];if("linear"!==u.type&&"time"!==u.type)return;if(e.options.parsing)return;let h,{start:c,count:_}=function(e,t){const n=t.length;let i,s=0;const{iScale:r}=e,{min:a,max:o,minDefined:d,maxDefined:l}=r.getUserBounds();return d&&(s=Z(lt(t,r.axis,a).lo,0,n-1)),i=l?Z(lt(t,r.axis,o).hi+1,s,n)-s:n-s,{start:s,count:i}}(o,d);if(_<=(n.threshold||4*i))Ss(t);else{switch(l(r)&&(t._data=d,delete t.data,Object.defineProperty(t,"data",{configurable:!0,enumerable:!0,get:function(){return this._decimated},set:function(e){this._data=e}})),n.algorithm){case"lttb":h=function(e,t,n,i,s){const r=s.samples||i;if(r>=n)return e.slice(t,t+n);const a=[],o=(n-2)/(r-2);let d=0;const l=t+n-1;let u,h,c,_,m,f=t;for(a[d++]=e[f],u=0;u<r-2;u++){let i,s=0,r=0;const l=Math.floor((u+1)*o)+1+t,p=Math.min(Math.floor((u+2)*o)+1,n)+t,g=p-l;for(i=l;i<p;i++)s+=e[i].x,r+=e[i].y;s/=g,r/=g;const y=Math.floor(u*o)+1+t,M=Math.min(Math.floor((u+1)*o)+1,n)+t,{x:b,y:L}=e[f];for(c=_=-1,i=y;i<M;i++)_=.5*Math.abs((b-s)*(e[i].y-L)-(b-e[i].x)*(r-L)),_>c&&(c=_,h=e[i],m=i);a[d++]=h,f=m}return a[d++]=e[l],a}(d,c,_,i,n);break;case"min-max":h=function(e,t,n,i){let s,r,a,o,d,u,h,c,_,m,f=0,p=0;const g=[],y=t+n-1,M=e[t].x,b=e[y].x-M;for(s=t;s<t+n;++s){r=e[s],a=(r.x-M)/b*i,o=r.y;const t=0|a;if(t===d)o<_?(_=o,u=s):o>m&&(m=o,h=s),f=(p*f+r.x)/++p;else{const n=s-1;if(!l(u)&&!l(h)){const t=Math.min(u,h),i=Math.max(u,h);t!==c&&t!==n&&g.push({...e[t],x:f}),i!==c&&i!==n&&g.push({...e[i],x:f})}s>0&&n!==c&&g.push(e[n]),g.push(r),d=t,p=0,_=m=o,u=h=c=s}}return g}(d,c,_,i);break;default:throw new Error(`Unsupported decimation algorithm '${n.algorithm}'`)}t._decimated=h}}))},destroy(e){Os(e)}};function js(e,t,n){const i=function(e){const t=e.options,n=t.fill;let i=m(n&&n.target,n);return void 0===i&&(i=!!t.backgroundColor),!1!==i&&null!==i&&(!0===i?"origin":i)}(e);if(h(i))return!isNaN(i.value)&&i;let s=parseFloat(i);return c(s)&&Math.floor(s)===s?("-"!==i[0]&&"+"!==i[0]||(s=t+s),!(s===t||s<0||s>=n)&&s):["origin","start","end","stack","shape"].indexOf(i)>=0&&i}class Es{constructor(e){this.x=e.x,this.y=e.y,this.radius=e.radius}pathSegment(e,t,n){const{x:i,y:s,radius:r}=this;return t=t||{start:0,end:H},e.arc(i,s,r,t.end,t.start,!0),!n.bounds}interpolate(e){const{x:t,y:n,radius:i}=this,s=e.angle;return{x:t+Math.cos(s)*i,y:n+Math.sin(s)*i,angle:s}}}function Ps(e,t,n){for(;t>e;t--){const e=n[t];if(!isNaN(e.x)&&!isNaN(e.y))break}return t}function As(e,t,n){const i=[];for(let s=0;s<n.length;s++){const r=n[s],{first:a,last:o,point:d}=Rs(r,t,"x");if(!(!d||a&&o))if(a)i.unshift(d);else if(e.push(d),!o)break}e.push(...i)}function Rs(e,t,n){const i=e.interpolate(t,n);if(!i)return{};const s=i[n],r=e.segments,a=e.points;let o=!1,d=!1;for(let e=0;e<r.length;e++){const t=r[e],i=a[t.start][n],l=a[t.end][n];if(s>=i&&s<=l){o=s===i,d=s===l;break}}return{first:o,last:d,point:i}}function Cs(e){const{chart:t,fill:n,line:i}=e;if(c(n))return function(e,t){const n=e.getDatasetMeta(t);return n&&e.isDatasetVisible(t)?n.dataset:null}(t,n);if("stack"===n)return function(e){const{scale:t,index:n,line:i}=e,s=[],r=i.segments,a=i.points,o=function(e,t){const n=[],i=e.getMatchingVisibleMetas("line");for(let e=0;e<i.length;e++){const s=i[e];if(s.index===t)break;s.hidden||n.unshift(s.dataset)}return n}(t,n);o.push(Is({x:null,y:t.bottom},i));for(let e=0;e<r.length;e++){const t=r[e];for(let e=t.start;e<=t.end;e++)As(s,a[e],o)}return new Ms({points:s,options:{}})}(e);if("shape"===n)return!0;const s=function(e){return(e.scale||{}).getPointPositionForValue?function(e){const{scale:t,fill:n}=e,i=t.options,s=t.getLabels().length,r=[],a=i.reverse?t.max:t.min,o=i.reverse?t.min:t.max;let d,l,u;if(u="start"===n?a:"end"===n?o:h(n)?n.value:t.getBaseValue(),i.grid.circular)return l=t.getPointPositionForValue(0,a),new Es({x:l.x,y:l.y,radius:t.getDistanceFromCenterForValue(u)});for(d=0;d<s;++d)r.push(t.getPointPositionForValue(d,u));return r}(e):function(e){const{scale:t={},fill:n}=e;let i,s=null;return"start"===n?s=t.bottom:"end"===n?s=t.top:h(n)?s=t.getPixelForValue(n.value):t.getBasePixel&&(s=t.getBasePixel()),c(s)?(i=t.isHorizontal(),{x:i?s:null,y:i?null:s}):null}(e)}(e);return s instanceof Es?s:Is(s,i)}function Is(e,t){let n=[],i=!1;return u(e)?(i=!0,n=e):n=function(e,t){const{x:n=null,y:i=null}=e||{},s=t.points,r=[];return t.segments.forEach((({start:e,end:t})=>{t=Ps(e,t,s);const a=s[e],o=s[t];null!==i?(r.push({x:a.x,y:i}),r.push({x:o.x,y:i})):null!==n&&(r.push({x:n,y:a.y}),r.push({x:n,y:o.y}))})),r}(e,t),n.length?new Ms({points:n,options:{tension:0},_loop:i,_fullLoop:i}):null}function Ws(e,t,n){let i=e[t].fill;const s=[t];let r;if(!n)return i;for(;!1!==i&&-1===s.indexOf(i);){if(!c(i))return i;if(r=e[i],!r)return!1;if(r.visible)return i;s.push(i),i=r.fill}return!1}function Ns(e,t,n){e.beginPath(),t.path(e),e.lineTo(t.last().x,n),e.lineTo(t.first().x,n),e.closePath(),e.clip()}function Fs(e,t,n,i){if(i)return;let s=t[e],r=n[e];return"angle"===e&&(s=G(s),r=G(r)),{property:e,start:s,end:r}}function zs(e,t,n,i){return e&&t?i(e[n],t[n]):e?e[n]:t?t[n]:0}function Bs(e,t,n){const{top:i,bottom:s}=t.chart.chartArea,{property:r,start:a,end:o}=n||{};"x"===r&&(e.beginPath(),e.rect(a,i,o-a,s-i),e.clip())}function Vs(e,t,n,i){const s=t.interpolate(n,i);s&&e.lineTo(s.x,s.y)}function Us(e,t){const{line:n,target:i,property:s,color:r,scale:a}=t,o=function(e,t,n){const i=e.segments,s=e.points,r=t.points,a=[];for(const e of i){let{start:i,end:o}=e;o=Ps(i,o,s);const d=Fs(n,s[i],s[o],e.loop);if(!t.segments){a.push({source:e,target:d,start:s[i],end:s[o]});continue}const l=tn(t,d);for(const t of l){const i=Fs(n,r[t.start],r[t.end],t.loop),o=en(e,s,i);for(const e of o)a.push({source:e,target:t,start:{[n]:zs(d,i,"start",Math.max)},end:{[n]:zs(d,i,"end",Math.min)}})}}return a}(n,i,s);for(const{source:t,target:d,start:l,end:u}of o){const{style:{backgroundColor:o=r}={}}=t,h=!0!==i;e.save(),e.fillStyle=o,Bs(e,a,h&&Fs(s,l,u)),e.beginPath();const c=!!n.pathSegment(e,t);let _;if(h){c?e.closePath():Vs(e,i,u,s);const t=!!i.pathSegment(e,d,{move:c,reverse:!0});_=c&&t,_||Vs(e,i,l,s)}e.closePath(),e.fill(_?"evenodd":"nonzero"),e.restore()}}function Js(e,t,n){const i=Cs(t),{line:s,scale:r,axis:a}=t,o=s.options,d=o.fill,l=o.backgroundColor,{above:u=l,below:h=l}=d||{};i&&s.points.length&&(Ue(e,n),function(e,t){const{line:n,target:i,above:s,below:r,area:a,scale:o}=t,d=n._loop?"angle":t.axis;e.save(),"x"===d&&r!==s&&(Ns(e,i,a.top),Us(e,{line:n,target:i,color:s,scale:o,property:d}),e.restore(),e.save(),Ns(e,i,a.bottom)),Us(e,{line:n,target:i,color:r,scale:o,property:d}),e.restore()}(e,{line:s,target:i,above:u,below:h,area:n,scale:r,axis:a}),Je(e))}var $s={id:"filler",afterDatasetsUpdate(e,t,n){const i=(e.data.datasets||[]).length,s=[];let r,a,o,d;for(a=0;a<i;++a)r=e.getDatasetMeta(a),o=r.dataset,d=null,o&&o.options&&o instanceof Ms&&(d={visible:e.isDatasetVisible(a),index:a,fill:js(o,a,i),chart:e,axis:r.controller.options.indexAxis,scale:r.vScale,line:o}),r.$filler=d,s.push(d);for(a=0;a<i;++a)d=s[a],d&&!1!==d.fill&&(d.fill=Ws(s,a,n.propagate))},beforeDraw(e,t,n){const i="beforeDraw"===n.drawTime,s=e.getSortedVisibleDatasetMetas(),r=e.chartArea;for(let t=s.length-1;t>=0;--t){const n=s[t].$filler;n&&(n.line.updateControlPoints(r,n.axis),i&&Js(e.ctx,n,r))}},beforeDatasetsDraw(e,t,n){if("beforeDatasetsDraw"!==n.drawTime)return;const i=e.getSortedVisibleDatasetMetas();for(let t=i.length-1;t>=0;--t){const n=i[t].$filler;n&&Js(e.ctx,n,e.chartArea)}},beforeDatasetDraw(e,t,n){const i=t.meta.$filler;i&&!1!==i.fill&&"beforeDatasetDraw"===n.drawTime&&Js(e.ctx,i,e.chartArea)},defaults:{propagate:!0,drawTime:"beforeDatasetDraw"}};const qs=(e,t)=>{let{boxHeight:n=t,boxWidth:i=t}=e;return e.usePointStyle&&(n=Math.min(n,t),i=Math.min(i,t)),{boxWidth:i,boxHeight:n,itemHeight:Math.max(t,n)}};class Gs extends Yi{constructor(e){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=e.chart,this.options=e.options,this.ctx=e.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(e,t,n){this.maxWidth=e,this.maxHeight=t,this._margins=n,this.setDimensions(),this.buildLabels(),this.fit()}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=this._margins.left,this.right=this.width):(this.height=this.maxHeight,this.top=this._margins.top,this.bottom=this.height)}buildLabels(){const e=this.options.labels||{};let t=p(e.generateLabels,[this.chart],this)||[];e.filter&&(t=t.filter((t=>e.filter(t,this.chart.data)))),e.sort&&(t=t.sort(((t,n)=>e.sort(t,n,this.chart.data)))),this.options.reverse&&t.reverse(),this.legendItems=t}fit(){const{options:e,ctx:t}=this;if(!e.display)return void(this.width=this.height=0);const n=e.labels,i=rt(n.font),s=i.size,r=this._computeTitleHeight(),{boxWidth:a,itemHeight:o}=qs(n,s);let d,l;t.font=i.string,this.isHorizontal()?(d=this.maxWidth,l=this._fitRows(r,s,a,o)+10):(l=this.maxHeight,d=this._fitCols(r,s,a,o)+10),this.width=Math.min(d,e.maxWidth||this.maxWidth),this.height=Math.min(l,e.maxHeight||this.maxHeight)}_fitRows(e,t,n,i){const{ctx:s,maxWidth:r,options:{labels:{padding:a}}}=this,o=this.legendHitBoxes=[],d=this.lineWidths=[0],l=i+a;let u=e;s.textAlign="left",s.textBaseline="middle";let h=-1,c=-l;return this.legendItems.forEach(((e,_)=>{const m=n+t/2+s.measureText(e.text).width;(0===_||d[d.length-1]+m+2*a>r)&&(u+=l,d[d.length-(_>0?0:1)]=0,c+=l,h++),o[_]={left:0,top:c,row:h,width:m,height:i},d[d.length-1]+=m+a})),u}_fitCols(e,t,n,i){const{ctx:s,maxHeight:r,options:{labels:{padding:a}}}=this,o=this.legendHitBoxes=[],d=this.columnSizes=[],l=r-e;let u=a,h=0,c=0,_=0,m=0;return this.legendItems.forEach(((e,r)=>{const f=n+t/2+s.measureText(e.text).width;r>0&&c+i+2*a>l&&(u+=h+a,d.push({width:h,height:c}),_+=h+a,m++,h=c=0),o[r]={left:_,top:c,col:m,width:f,height:i},h=Math.max(h,f),c+=i+a})),u+=h,d.push({width:h,height:c}),u}adjustHitBoxes(){if(!this.options.display)return;const e=this._computeTitleHeight(),{legendHitBoxes:t,options:{align:n,labels:{padding:i},rtl:s}}=this,r=Gt(s,this.left,this.width);if(this.isHorizontal()){let s=0,o=a(n,this.left+i,this.right-this.lineWidths[s]);for(const d of t)s!==d.row&&(s=d.row,o=a(n,this.left+i,this.right-this.lineWidths[s])),d.top+=this.top+e+i,d.left=r.leftForLtr(r.x(o),d.width),o+=d.width+i}else{let s=0,o=a(n,this.top+e+i,this.bottom-this.columnSizes[s].height);for(const d of t)d.col!==s&&(s=d.col,o=a(n,this.top+e+i,this.bottom-this.columnSizes[s].height)),d.top=o,d.left+=this.left+i,d.left=r.leftForLtr(r.x(d.left),d.width),o+=d.height+i}}isHorizontal(){return"top"===this.options.position||"bottom"===this.options.position}draw(){if(this.options.display){const e=this.ctx;Ue(e,this),this._draw(),Je(e)}}_draw(){const{options:e,columnSizes:t,lineWidths:n,ctx:i}=this,{align:s,labels:r}=e,o=Ie.color,d=Gt(e.rtl,this.left,this.width),l=rt(r.font),{color:u,padding:h}=r,c=l.size,_=c/2;let f;this.drawTitle(),i.textAlign=d.textAlign("left"),i.textBaseline="middle",i.lineWidth=.5,i.font=l.string;const{boxWidth:p,boxHeight:g,itemHeight:y}=qs(r,c),M=this.isHorizontal(),b=this._computeTitleHeight();f=M?{x:a(s,this.left+h,this.right-n[0]),y:this.top+h+b,line:0}:{x:this.left+h,y:a(s,this.top+b+h,this.bottom-t[0].height),line:0},Kt(this.ctx,e.textDirection);const L=y+h;this.legendItems.forEach(((v,w)=>{i.strokeStyle=v.fontColor||u,i.fillStyle=v.fontColor||u;const Y=i.measureText(v.text).width,k=d.textAlign(v.textAlign||(v.textAlign=r.textAlign)),D=p+_+Y;let x=f.x,T=f.y;d.setWidth(this.width),M?w>0&&x+D+h>this.right&&(T=f.y+=L,f.line++,x=f.x=a(s,this.left+h,this.right-n[f.line])):w>0&&T+L>this.bottom&&(x=f.x=x+t[f.line].width+h,f.line++,T=f.y=a(s,this.top+b+h,this.bottom-t[f.line].height)),function(e,t,n){if(isNaN(p)||p<=0||isNaN(g)||g<0)return;i.save();const s=m(n.lineWidth,1);if(i.fillStyle=m(n.fillStyle,o),i.lineCap=m(n.lineCap,"butt"),i.lineDashOffset=m(n.lineDashOffset,0),i.lineJoin=m(n.lineJoin,"miter"),i.lineWidth=s,i.strokeStyle=m(n.strokeStyle,o),i.setLineDash(m(n.lineDash,[])),r.usePointStyle){const r={radius:p*Math.SQRT2/2,pointStyle:n.pointStyle,rotation:n.rotation,borderWidth:s},a=d.xPlus(e,p/2);Be(i,r,a,t+_)}else{const r=t+Math.max((c-g)/2,0),a=d.leftForLtr(e,p),o=it(n.borderRadius);i.beginPath(),Object.values(o).some((e=>0!==e))?Ze(i,{x:a,y:r,w:p,h:g,radius:o}):i.rect(a,r,p,g),i.fill(),0!==s&&i.stroke()}i.restore()}(d.x(x),T,v),x=((e,t,n,i)=>e===(i?"left":"right")?n:"center"===e?(t+n)/2:t)(k,x+p+_,M?x+D:this.right,e.rtl),function(e,t,n){Ge(i,n.text,e,t+y/2,l,{strikethrough:n.hidden,textAlign:d.textAlign(n.textAlign)})}(d.x(x),T,v),M?f.x+=D+h:f.y+=L})),Zt(this.ctx,e.textDirection)}drawTitle(){const e=this.options,t=e.title,n=rt(t.font),i=st(t.padding);if(!t.display)return;const s=Gt(e.rtl,this.left,this.width),o=this.ctx,d=t.position,l=n.size/2,u=i.top+l;let h,c=this.left,_=this.width;if(this.isHorizontal())_=Math.max(...this.lineWidths),h=this.top+u,c=a(e.align,c,this.right-_);else{const t=this.columnSizes.reduce(((e,t)=>Math.max(e,t.height)),0);h=u+a(e.align,this.top,this.bottom-t-e.labels.padding-this._computeTitleHeight())}const m=a(d,c,c+_);o.textAlign=s.textAlign(r(d)),o.textBaseline="middle",o.strokeStyle=t.color,o.fillStyle=t.color,o.font=n.string,Ge(o,t.text,m,h,n)}_computeTitleHeight(){const e=this.options.title,t=rt(e.font),n=st(e.padding);return e.display?t.lineHeight+n.height:0}_getLegendItemAt(e,t){let n,i,s;if(e>=this.left&&e<=this.right&&t>=this.top&&t<=this.bottom)for(s=this.legendHitBoxes,n=0;n<s.length;++n)if(i=s[n],e>=i.left&&e<=i.left+i.width&&t>=i.top&&t<=i.top+i.height)return this.legendItems[n];return null}handleEvent(e){const t=this.options;if(!function(e,t){return!("mousemove"!==e||!t.onHover&&!t.onLeave)||!(!t.onClick||"click"!==e&&"mouseup"!==e)}(e.type,t))return;const n=this._getLegendItemAt(e.x,e.y);if("mousemove"===e.type){const r=this._hoveredItem,a=(s=n,null!==(i=r)&&null!==s&&i.datasetIndex===s.datasetIndex&&i.index===s.index);r&&!a&&p(t.onLeave,[e,r,this],this),this._hoveredItem=n,n&&!a&&p(t.onHover,[e,n,this],this)}else n&&p(t.onClick,[e,n,this],this);var i,s}}var Ks={id:"legend",_element:Gs,start(e,t,n){const i=e.legend=new Gs({ctx:e.ctx,options:n,chart:e});oi.configure(e,i,n),oi.addBox(e,i)},stop(e){oi.removeBox(e,e.legend),delete e.legend},beforeUpdate(e,t,n){const i=e.legend;oi.configure(e,i,n),i.options=n},afterUpdate(e){const t=e.legend;t.buildLabels(),t.adjustHitBoxes()},afterEvent(e,t){t.replay||e.legend.handleEvent(t.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(e,t,n){const i=t.datasetIndex,s=n.chart;s.isDatasetVisible(i)?(s.hide(i),t.hidden=!0):(s.show(i),t.hidden=!1)},onHover:null,onLeave:null,labels:{color:e=>e.chart.options.color,boxWidth:40,padding:10,generateLabels(e){const t=e.data.datasets,{labels:{usePointStyle:n,pointStyle:i,textAlign:s,color:r}}=e.legend.options;return e._getSortedDatasetMetas().map((e=>{const a=e.controller.getStyle(n?0:void 0),o=st(a.borderWidth);return{text:t[e.index].label,fillStyle:a.backgroundColor,fontColor:r,hidden:!e.visible,lineCap:a.borderCapStyle,lineDash:a.borderDash,lineDashOffset:a.borderDashOffset,lineJoin:a.borderJoinStyle,lineWidth:(o.width+o.height)/4,strokeStyle:a.borderColor,pointStyle:i||a.pointStyle,rotation:a.rotation,textAlign:s||a.textAlign,borderRadius:0,datasetIndex:e.index}}),this)}},title:{color:e=>e.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:e=>!e.startsWith("on"),labels:{_scriptable:e=>!["generateLabels","filter","sort"].includes(e)}}};class Zs extends Yi{constructor(e){super(),this.chart=e.chart,this.options=e.options,this.ctx=e.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(e,t){const n=this.options;if(this.left=0,this.top=0,!n.display)return void(this.width=this.height=this.right=this.bottom=0);this.width=this.right=e,this.height=this.bottom=t;const i=u(n.text)?n.text.length:1;this._padding=st(n.padding);const s=i*rt(n.font).lineHeight+this._padding.height;this.isHorizontal()?this.height=s:this.width=s}isHorizontal(){const e=this.options.position;return"top"===e||"bottom"===e}_drawArgs(e){const{top:t,left:n,bottom:i,right:s,options:r}=this,o=r.align;let d,l,u,h=0;return this.isHorizontal()?(l=a(o,n,s),u=t+e,d=s-n):("left"===r.position?(l=n+e,u=a(o,i,t),h=-.5*O):(l=s-e,u=a(o,t,i),h=.5*O),d=i-t),{titleX:l,titleY:u,maxWidth:d,rotation:h}}draw(){const e=this.ctx,t=this.options;if(!t.display)return;const n=rt(t.font),i=n.lineHeight/2+this._padding.top,{titleX:s,titleY:a,maxWidth:o,rotation:d}=this._drawArgs(i);Ge(e,t.text,0,0,n,{color:t.color,maxWidth:o,rotation:d,textAlign:r(t.align),textBaseline:"middle",translation:[s,a]})}}var Xs={id:"title",_element:Zs,start(e,t,n){!function(e,t){const n=new Zs({ctx:e.ctx,options:t,chart:e});oi.configure(e,n,t),oi.addBox(e,n),e.titleBlock=n}(e,n)},stop(e){const t=e.titleBlock;oi.removeBox(e,t),delete e.titleBlock},beforeUpdate(e,t,n){const i=e.titleBlock;oi.configure(e,i,n),i.options=n},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const Qs=new WeakMap;var er={id:"subtitle",start(e,t,n){const i=new Zs({ctx:e.ctx,options:n,chart:e});oi.configure(e,i,n),oi.addBox(e,i),Qs.set(e,i)},stop(e){oi.removeBox(e,Qs.get(e)),Qs.delete(e)},beforeUpdate(e,t,n){const i=Qs.get(e);oi.configure(e,i,n),i.options=n},defaults:{align:"center",display:!1,font:{weight:"normal"},fullSize:!0,padding:0,position:"top",text:"",weight:1500},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const tr={average(e){if(!e.length)return!1;let t,n,i=0,s=0,r=0;for(t=0,n=e.length;t<n;++t){const n=e[t].element;if(n&&n.hasValue()){const e=n.tooltipPosition();i+=e.x,s+=e.y,++r}}return{x:i/r,y:s/r}},nearest(e,t){if(!e.length)return!1;let n,i,s,r=t.x,a=t.y,o=Number.POSITIVE_INFINITY;for(n=0,i=e.length;n<i;++n){const i=e[n].element;if(i&&i.hasValue()){const e=$(t,i.getCenterPoint());e<o&&(o=e,s=i)}}if(s){const e=s.tooltipPosition();r=e.x,a=e.y}return{x:r,y:a}}};function nr(e,t){return t&&(u(t)?Array.prototype.push.apply(e,t):e.push(t)),e}function ir(e){return("string"==typeof e||e instanceof String)&&e.indexOf("\n")>-1?e.split("\n"):e}function sr(e,t){const{element:n,datasetIndex:i,index:s}=t,r=e.getDatasetMeta(i).controller,{label:a,value:o}=r.getLabelAndValue(s);return{chart:e,label:a,parsed:r.getParsed(s),raw:e.data.datasets[i].data[s],formattedValue:o,dataset:r.getDataset(),dataIndex:s,datasetIndex:i,element:n}}function rr(e,t){const n=e._chart.ctx,{body:i,footer:s,title:r}=e,{boxWidth:a,boxHeight:o}=t,d=rt(t.bodyFont),l=rt(t.titleFont),u=rt(t.footerFont),h=r.length,c=s.length,_=i.length,m=st(t.padding);let f=m.height,p=0,y=i.reduce(((e,t)=>e+t.before.length+t.lines.length+t.after.length),0);y+=e.beforeBody.length+e.afterBody.length,h&&(f+=h*l.lineHeight+(h-1)*t.titleSpacing+t.titleMarginBottom),y&&(f+=_*(t.displayColors?Math.max(o,d.lineHeight):d.lineHeight)+(y-_)*d.lineHeight+(y-1)*t.bodySpacing),c&&(f+=t.footerMarginTop+c*u.lineHeight+(c-1)*t.footerSpacing);let M=0;const b=function(e){p=Math.max(p,n.measureText(e).width+M)};return n.save(),n.font=l.string,g(e.title,b),n.font=d.string,g(e.beforeBody.concat(e.afterBody),b),M=t.displayColors?a+2+t.boxPadding:0,g(i,(e=>{g(e.before,b),g(e.lines,b),g(e.after,b)})),M=0,n.font=u.string,g(e.footer,b),n.restore(),p+=m.width,{width:p,height:f}}function ar(e,t,n,i){const{x:s,width:r}=n,{width:a,chartArea:{left:o,right:d}}=e;let l="center";return"center"===i?l=s<=(o+d)/2?"left":"right":s<=r/2?l="left":s>=a-r/2&&(l="right"),function(e,t,n,i){const{x:s,width:r}=i,a=n.caretSize+n.caretPadding;return"left"===e&&s+r+a>t.width||"right"===e&&s-r-a<0||void 0}(l,e,t,n)&&(l="center"),l}function or(e,t,n){const i=t.yAlign||function(e,t){const{y:n,height:i}=t;return n<i/2?"top":n>e.height-i/2?"bottom":"center"}(e,n);return{xAlign:t.xAlign||ar(e,t,n,i),yAlign:i}}function dr(e,t,n,i){const{caretSize:s,caretPadding:r,cornerRadius:a}=e,{xAlign:o,yAlign:d}=n,l=s+r,{topLeft:u,topRight:h,bottomLeft:c,bottomRight:_}=it(a);let m=function(e,t){let{x:n,width:i}=e;return"right"===t?n-=i:"center"===t&&(n-=i/2),n}(t,o);const f=function(e,t,n){let{y:i,height:s}=e;return"top"===t?i+=n:i-="bottom"===t?s+n:s/2,i}(t,d,l);return"center"===d?"left"===o?m+=l:"right"===o&&(m-=l):"left"===o?m-=Math.max(u,c)+r:"right"===o&&(m+=Math.max(h,_)+r),{x:Z(m,0,i.width-t.width),y:Z(f,0,i.height-t.height)}}function lr(e,t,n){const i=st(n.padding);return"center"===t?e.x+e.width/2:"right"===t?e.x+e.width-i.right:e.x+i.left}function ur(e){return nr([],ir(e))}function hr(e,t){const n=t&&t.dataset&&t.dataset.tooltip&&t.dataset.tooltip.callbacks;return n?e.override(n):e}class cr extends Yi{constructor(e){super(),this.opacity=0,this._active=[],this._chart=e._chart,this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.options=e.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(e){this.options=e,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){const e=this._cachedAnimations;if(e)return e;const t=this._chart,n=this.options.setContext(this.getContext()),i=n.enabled&&t.options.animation&&n.animations,s=new un(this._chart,i);return i._cacheable&&(this._cachedAnimations=Object.freeze(s)),s}getContext(){return this.$context||(this.$context=(this,ot(this._chart.getContext(),{tooltip:this,tooltipItems:this._tooltipItems,type:"tooltip"})))}getTitle(e,t){const{callbacks:n}=t,i=n.beforeTitle.apply(this,[e]),s=n.title.apply(this,[e]),r=n.afterTitle.apply(this,[e]);let a=[];return a=nr(a,ir(i)),a=nr(a,ir(s)),a=nr(a,ir(r)),a}getBeforeBody(e,t){return ur(t.callbacks.beforeBody.apply(this,[e]))}getBody(e,t){const{callbacks:n}=t,i=[];return g(e,(e=>{const t={before:[],lines:[],after:[]},s=hr(n,e);nr(t.before,ir(s.beforeLabel.call(this,e))),nr(t.lines,s.label.call(this,e)),nr(t.after,ir(s.afterLabel.call(this,e))),i.push(t)})),i}getAfterBody(e,t){return ur(t.callbacks.afterBody.apply(this,[e]))}getFooter(e,t){const{callbacks:n}=t,i=n.beforeFooter.apply(this,[e]),s=n.footer.apply(this,[e]),r=n.afterFooter.apply(this,[e]);let a=[];return a=nr(a,ir(i)),a=nr(a,ir(s)),a=nr(a,ir(r)),a}_createItems(e){const t=this._active,n=this._chart.data,i=[],s=[],r=[];let a,o,d=[];for(a=0,o=t.length;a<o;++a)d.push(sr(this._chart,t[a]));return e.filter&&(d=d.filter(((t,i,s)=>e.filter(t,i,s,n)))),e.itemSort&&(d=d.sort(((t,i)=>e.itemSort(t,i,n)))),g(d,(t=>{const n=hr(e.callbacks,t);i.push(n.labelColor.call(this,t)),s.push(n.labelPointStyle.call(this,t)),r.push(n.labelTextColor.call(this,t))})),this.labelColors=i,this.labelPointStyles=s,this.labelTextColors=r,this.dataPoints=d,d}update(e,t){const n=this.options.setContext(this.getContext()),i=this._active;let s,r=[];if(i.length){const e=tr[n.position].call(this,i,this._eventPosition);r=this._createItems(n),this.title=this.getTitle(r,n),this.beforeBody=this.getBeforeBody(r,n),this.body=this.getBody(r,n),this.afterBody=this.getAfterBody(r,n),this.footer=this.getFooter(r,n);const t=this._size=rr(this,n),a=Object.assign({},e,t),o=or(this._chart,n,a),d=dr(n,a,o,this._chart);this.xAlign=o.xAlign,this.yAlign=o.yAlign,s={opacity:1,x:d.x,y:d.y,width:t.width,height:t.height,caretX:e.x,caretY:e.y}}else 0!==this.opacity&&(s={opacity:0});this._tooltipItems=r,this.$context=void 0,s&&this._resolveAnimations().update(this,s),e&&n.external&&n.external.call(this,{chart:this._chart,tooltip:this,replay:t})}drawCaret(e,t,n,i){const s=this.getCaretPosition(e,n,i);t.lineTo(s.x1,s.y1),t.lineTo(s.x2,s.y2),t.lineTo(s.x3,s.y3)}getCaretPosition(e,t,n){const{xAlign:i,yAlign:s}=this,{caretSize:r,cornerRadius:a}=n,{topLeft:o,topRight:d,bottomLeft:l,bottomRight:u}=it(a),{x:h,y:c}=e,{width:_,height:m}=t;let f,p,g,y,M,b;return"center"===s?(M=c+m/2,"left"===i?(f=h,p=f-r,y=M+r,b=M-r):(f=h+_,p=f+r,y=M-r,b=M+r),g=f):(p="left"===i?h+Math.max(o,l)+r:"right"===i?h+_-Math.max(d,u)-r:this.caretX,"top"===s?(y=c,M=y-r,f=p-r,g=p+r):(y=c+m,M=y+r,f=p+r,g=p-r),b=y),{x1:f,x2:p,x3:g,y1:y,y2:M,y3:b}}drawTitle(e,t,n){const i=this.title,s=i.length;let r,a,o;if(s){const d=Gt(n.rtl,this.x,this.width);for(e.x=lr(this,n.titleAlign,n),t.textAlign=d.textAlign(n.titleAlign),t.textBaseline="middle",r=rt(n.titleFont),a=n.titleSpacing,t.fillStyle=n.titleColor,t.font=r.string,o=0;o<s;++o)t.fillText(i[o],d.x(e.x),e.y+r.lineHeight/2),e.y+=r.lineHeight+a,o+1===s&&(e.y+=n.titleMarginBottom-a)}}_drawColorBox(e,t,n,i,s){const r=this.labelColors[n],a=this.labelPointStyles[n],{boxHeight:o,boxWidth:d,boxPadding:l}=s,u=rt(s.bodyFont),h=lr(this,"left",s),c=i.x(h),_=o<u.lineHeight?(u.lineHeight-o)/2:0,m=t.y+_;if(s.usePointStyle){const t={radius:Math.min(d,o)/2,pointStyle:a.pointStyle,rotation:a.rotation,borderWidth:1},n=i.leftForLtr(c,d)+d/2,l=m+o/2;e.strokeStyle=s.multiKeyBackground,e.fillStyle=s.multiKeyBackground,Be(e,t,n,l),e.strokeStyle=r.borderColor,e.fillStyle=r.backgroundColor,Be(e,t,n,l)}else{e.lineWidth=r.borderWidth||1,e.strokeStyle=r.borderColor,e.setLineDash(r.borderDash||[]),e.lineDashOffset=r.borderDashOffset||0;const t=i.leftForLtr(c,d-l),n=i.leftForLtr(i.xPlus(c,1),d-l-2),a=it(r.borderRadius);Object.values(a).some((e=>0!==e))?(e.beginPath(),e.fillStyle=s.multiKeyBackground,Ze(e,{x:t,y:m,w:d,h:o,radius:a}),e.fill(),e.stroke(),e.fillStyle=r.backgroundColor,e.beginPath(),Ze(e,{x:n,y:m+1,w:d-2,h:o-2,radius:a}),e.fill()):(e.fillStyle=s.multiKeyBackground,e.fillRect(t,m,d,o),e.strokeRect(t,m,d,o),e.fillStyle=r.backgroundColor,e.fillRect(n,m+1,d-2,o-2))}e.fillStyle=this.labelTextColors[n]}drawBody(e,t,n){const{body:i}=this,{bodySpacing:s,bodyAlign:r,displayColors:a,boxHeight:o,boxWidth:d,boxPadding:l}=n,u=rt(n.bodyFont);let h=u.lineHeight,c=0;const _=Gt(n.rtl,this.x,this.width),m=function(n){t.fillText(n,_.x(e.x+c),e.y+h/2),e.y+=h+s},f=_.textAlign(r);let p,y,M,b,L,v,w;for(t.textAlign=r,t.textBaseline="middle",t.font=u.string,e.x=lr(this,f,n),t.fillStyle=n.bodyColor,g(this.beforeBody,m),c=a&&"right"!==f?"center"===r?d/2+l:d+2+l:0,b=0,v=i.length;b<v;++b){for(p=i[b],y=this.labelTextColors[b],t.fillStyle=y,g(p.before,m),M=p.lines,a&&M.length&&(this._drawColorBox(t,e,b,_,n),h=Math.max(u.lineHeight,o)),L=0,w=M.length;L<w;++L)m(M[L]),h=u.lineHeight;g(p.after,m)}c=0,h=u.lineHeight,g(this.afterBody,m),e.y-=s}drawFooter(e,t,n){const i=this.footer,s=i.length;let r,a;if(s){const o=Gt(n.rtl,this.x,this.width);for(e.x=lr(this,n.footerAlign,n),e.y+=n.footerMarginTop,t.textAlign=o.textAlign(n.footerAlign),t.textBaseline="middle",r=rt(n.footerFont),t.fillStyle=n.footerColor,t.font=r.string,a=0;a<s;++a)t.fillText(i[a],o.x(e.x),e.y+r.lineHeight/2),e.y+=r.lineHeight+n.footerSpacing}}drawBackground(e,t,n,i){const{xAlign:s,yAlign:r}=this,{x:a,y:o}=e,{width:d,height:l}=n,{topLeft:u,topRight:h,bottomLeft:c,bottomRight:_}=it(i.cornerRadius);t.fillStyle=i.backgroundColor,t.strokeStyle=i.borderColor,t.lineWidth=i.borderWidth,t.beginPath(),t.moveTo(a+u,o),"top"===r&&this.drawCaret(e,t,n,i),t.lineTo(a+d-h,o),t.quadraticCurveTo(a+d,o,a+d,o+h),"center"===r&&"right"===s&&this.drawCaret(e,t,n,i),t.lineTo(a+d,o+l-_),t.quadraticCurveTo(a+d,o+l,a+d-_,o+l),"bottom"===r&&this.drawCaret(e,t,n,i),t.lineTo(a+c,o+l),t.quadraticCurveTo(a,o+l,a,o+l-c),"center"===r&&"left"===s&&this.drawCaret(e,t,n,i),t.lineTo(a,o+u),t.quadraticCurveTo(a,o,a+u,o),t.closePath(),t.fill(),i.borderWidth>0&&t.stroke()}_updateAnimationTarget(e){const t=this._chart,n=this.$animations,i=n&&n.x,s=n&&n.y;if(i||s){const n=tr[e.position].call(this,this._active,this._eventPosition);if(!n)return;const r=this._size=rr(this,e),a=Object.assign({},n,this._size),o=or(t,e,a),d=dr(e,a,o,t);i._to===d.x&&s._to===d.y||(this.xAlign=o.xAlign,this.yAlign=o.yAlign,this.width=r.width,this.height=r.height,this.caretX=n.x,this.caretY=n.y,this._resolveAnimations().update(this,d))}}draw(e){const t=this.options.setContext(this.getContext());let n=this.opacity;if(!n)return;this._updateAnimationTarget(t);const i={width:this.width,height:this.height},s={x:this.x,y:this.y};n=Math.abs(n)<.001?0:n;const r=st(t.padding),a=this.title.length||this.beforeBody.length||this.body.length||this.afterBody.length||this.footer.length;t.enabled&&a&&(e.save(),e.globalAlpha=n,this.drawBackground(s,e,i,t),Kt(e,t.textDirection),s.y+=r.top,this.drawTitle(s,e,t),this.drawBody(s,e,t),this.drawFooter(s,e,t),Zt(e,t.textDirection),e.restore())}getActiveElements(){return this._active||[]}setActiveElements(e,t){const n=this._active,i=e.map((({datasetIndex:e,index:t})=>{const n=this._chart.getDatasetMeta(e);if(!n)throw new Error("Cannot find a dataset at index "+e);return{datasetIndex:e,element:n.data[t],index:t}})),s=!y(n,i),r=this._positionChanged(i,t);(s||r)&&(this._active=i,this._eventPosition=t,this.update(!0))}handleEvent(e,t){const n=this.options,i=this._active||[];let s=!1,r=[];"mouseout"!==e.type&&(r=this._chart.getElementsAtEventForMode(e,n.mode,n,t),n.reverse&&r.reverse());const a=this._positionChanged(r,e);return s=t||!y(r,i)||a,s&&(this._active=r,(n.enabled||n.external)&&(this._eventPosition={x:e.x,y:e.y},this.update(!0,t))),s}_positionChanged(e,t){const{caretX:n,caretY:i,options:s}=this,r=tr[s.position].call(this,e,t);return!1!==r&&(n!==r.x||i!==r.y)}}cr.positioners=tr;var _r={id:"tooltip",_element:cr,positioners:tr,afterInit(e,t,n){n&&(e.tooltip=new cr({_chart:e,options:n}))},beforeUpdate(e,t,n){e.tooltip&&e.tooltip.initialize(n)},reset(e,t,n){e.tooltip&&e.tooltip.initialize(n)},afterDraw(e){const t=e.tooltip,n={tooltip:t};!1!==e.notifyPlugins("beforeTooltipDraw",n)&&(t&&t.draw(e.ctx),e.notifyPlugins("afterTooltipDraw",n))},afterEvent(e,t){if(e.tooltip){const n=t.replay;e.tooltip.handleEvent(t.event,n)&&(t.changed=!0)}},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(e,t)=>t.bodyFont.size,boxWidth:(e,t)=>t.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,boxPadding:0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:{beforeTitle:o,title(e){if(e.length>0){const t=e[0],n=t.chart.data.labels,i=n?n.length:0;if(this&&this.options&&"dataset"===this.options.mode)return t.dataset.label||"";if(t.label)return t.label;if(i>0&&t.dataIndex<i)return n[t.dataIndex]}return""},afterTitle:o,beforeBody:o,beforeLabel:o,label(e){if(this&&this.options&&"dataset"===this.options.mode)return e.label+": "+e.formattedValue||e.formattedValue;let t=e.dataset.label||"";t&&(t+=": ");const n=e.formattedValue;return l(n)||(t+=n),t},labelColor(e){const t=e.chart.getDatasetMeta(e.datasetIndex).controller.getStyle(e.dataIndex);return{borderColor:t.borderColor,backgroundColor:t.backgroundColor,borderWidth:t.borderWidth,borderDash:t.borderDash,borderDashOffset:t.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(e){const t=e.chart.getDatasetMeta(e.datasetIndex).controller.getStyle(e.dataIndex);return{pointStyle:t.pointStyle,rotation:t.rotation}},afterLabel:o,afterBody:o,beforeFooter:o,footer:o,afterFooter:o}},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:e=>"filter"!==e&&"itemSort"!==e&&"external"!==e,_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]},mr=Object.freeze({__proto__:null,Decimation:Hs,Filler:$s,Legend:Ks,SubTitle:er,Title:Xs,Tooltip:_r});class fr extends Pi{constructor(e){super(e),this._startValue=void 0,this._valueRange=0}parse(e,t){if(l(e))return null;const n=this.getLabels();return((e,t)=>null===e?null:Z(Math.round(e),0,t))(t=isFinite(t)&&n[t]===e?t:function(e,t,n){const i=e.indexOf(t);return-1===i?((e,t,n)=>"string"==typeof t?e.push(t)-1:isNaN(t)?null:n)(e,t,n):i!==e.lastIndexOf(t)?n:i}(n,e,m(t,e)),n.length-1)}determineDataLimits(){const{minDefined:e,maxDefined:t}=this.getUserBounds();let{min:n,max:i}=this.getMinMax(!0);"ticks"===this.options.bounds&&(e||(n=0),t||(i=this.getLabels().length-1)),this.min=n,this.max=i}buildTicks(){const e=this.min,t=this.max,n=this.options.offset,i=[];let s=this.getLabels();s=0===e&&t===s.length-1?s:s.slice(e,t+1),this._valueRange=Math.max(s.length-(n?0:1),1),this._startValue=this.min-(n?.5:0);for(let n=e;n<=t;n++)i.push({value:n});return i}getLabelForValue(e){const t=this.getLabels();return e>=0&&e<t.length?t[e]:e}configure(){super.configure(),this.isHorizontal()||(this._reversePixels=!this._reversePixels)}getPixelForValue(e){return"number"!=typeof e&&(e=this.parse(e)),null===e?NaN:this.getPixelForDecimal((e-this._startValue)/this._valueRange)}getPixelForTick(e){const t=this.ticks;return e<0||e>t.length-1?null:this.getPixelForValue(t[e].value)}getValueForPixel(e){return Math.round(this._startValue+this.getDecimalForPixel(e)*this._valueRange)}getBasePixel(){return this.bottom}}function pr(e,t,{horizontal:n,minRotation:i}){const s=V(i),r=(n?Math.sin(s):Math.cos(s))||.001,a=.75*t*(""+e).length;return Math.min(t/r,a)}fr.id="category",fr.defaults={ticks:{callback:fr.prototype.getLabelForValue}};class gr extends Pi{constructor(e){super(e),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(e,t){return l(e)||("number"==typeof e||e instanceof Number)&&!isFinite(+e)?null:+e}handleTickRangeOptions(){const{beginAtZero:e}=this.options,{minDefined:t,maxDefined:n}=this.getUserBounds();let{min:i,max:s}=this;const r=e=>i=t?i:e,a=e=>s=n?s:e;if(e){const e=W(i),t=W(s);e<0&&t<0?a(0):e>0&&t>0&&r(0)}if(i===s){let t=1;(s>=Number.MAX_SAFE_INTEGER||i<=Number.MIN_SAFE_INTEGER)&&(t=Math.abs(.05*s)),a(s+t),e||r(i-t)}this.min=i,this.max=s}getTickLimit(){const e=this.options.ticks;let t,{maxTicksLimit:n,stepSize:i}=e;return i?(t=Math.ceil(this.max/i)-Math.floor(this.min/i)+1,t>1e3&&(console.warn(`scales.${this.id}.ticks.stepSize: ${i} would result generating up to ${t} ticks. Limiting to 1000.`),t=1e3)):(t=this.computeTickLimit(),n=n||11),n&&(t=Math.min(n,t)),t}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){const e=this.options,t=e.ticks;let n=this.getTickLimit();n=Math.max(2,n);const i=function(e,t){const n=[],{bounds:i,step:s,min:r,max:a,precision:o,count:d,maxTicks:u,maxDigits:h,includeBounds:c}=e,_=s||1,m=u-1,{min:f,max:p}=t,g=!l(r),y=!l(a),M=!l(d),b=(p-f)/(h+1);let L,v,w,Y,k=N((p-f)/m/_)*_;if(k<1e-14&&!g&&!y)return[{value:f},{value:p}];Y=Math.ceil(p/k)-Math.floor(f/k),Y>m&&(k=N(Y*k/m/_)*_),l(o)||(L=Math.pow(10,o),k=Math.ceil(k*L)/L),"ticks"===i?(v=Math.floor(f/k)*k,w=Math.ceil(p/k)*k):(v=f,w=p),g&&y&&s&&function(e,t){const n=Math.round(e);return n-t<=e&&n+t>=e}((a-r)/s,k/1e3)?(Y=Math.round(Math.min((a-r)/k,u)),k=(a-r)/Y,v=r,w=a):M?(v=g?r:v,w=y?a:w,Y=d-1,k=(w-v)/Y):(Y=(w-v)/k,Y=z(Y,Math.round(Y),k/1e3)?Math.round(Y):Math.ceil(Y));const D=Math.max(J(k),J(v));L=Math.pow(10,l(o)?D:o),v=Math.round(v*L)/L,w=Math.round(w*L)/L;let x=0;for(g&&(c&&v!==r?(n.push({value:r}),v<r&&x++,z(Math.round((v+x*k)*L)/L,r,pr(r,b,e))&&x++):v<r&&x++);x<Y;++x)n.push({value:Math.round((v+x*k)*L)/L});return y&&c&&w!==a?n.length&&z(n[n.length-1].value,a,pr(a,b,e))?n[n.length-1].value=a:n.push({value:a}):y&&w!==a||n.push({value:w}),n}({maxTicks:n,bounds:e.bounds,min:e.min,max:e.max,precision:t.precision,step:t.stepSize,count:t.count,maxDigits:this._maxDigits(),horizontal:this.isHorizontal(),minRotation:t.minRotation||0,includeBounds:!1!==t.includeBounds},this._range||this);return"ticks"===e.bounds&&B(i,this,"value"),e.reverse?(i.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),i}configure(){const e=this.ticks;let t=this.min,n=this.max;if(super.configure(),this.options.offset&&e.length){const i=(n-t)/Math.max(e.length-1,1)/2;t-=i,n+=i}this._startValue=t,this._endValue=n,this._valueRange=n-t}getLabelForValue(e){return qt(e,this.chart.options.locale)}}class yr extends gr{determineDataLimits(){const{min:e,max:t}=this.getMinMax(!0);this.min=c(e)?e:0,this.max=c(t)?t:1,this.handleTickRangeOptions()}computeTickLimit(){const e=this.isHorizontal(),t=e?this.width:this.height,n=V(this.options.ticks.minRotation),i=(e?Math.sin(n):Math.cos(n))||.001,s=this._resolveTickFontOptions(0);return Math.ceil(t/Math.min(40,s.lineHeight/i))}getPixelForValue(e){return null===e?NaN:this.getPixelForDecimal((e-this._startValue)/this._valueRange)}getValueForPixel(e){return this._startValue+this.getDecimalForPixel(e)*this._valueRange}}function Mr(e){return 1==e/Math.pow(10,Math.floor(I(e)))}yr.id="linear",yr.defaults={ticks:{callback:Di.formatters.numeric}};class br extends Pi{constructor(e){super(e),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(e,t){const n=gr.prototype.parse.apply(this,[e,t]);if(0!==n)return c(n)&&n>0?n:null;this._zero=!0}determineDataLimits(){const{min:e,max:t}=this.getMinMax(!0);this.min=c(e)?Math.max(0,e):null,this.max=c(t)?Math.max(0,t):null,this.options.beginAtZero&&(this._zero=!0),this.handleTickRangeOptions()}handleTickRangeOptions(){const{minDefined:e,maxDefined:t}=this.getUserBounds();let n=this.min,i=this.max;const s=t=>n=e?n:t,r=e=>i=t?i:e,a=(e,t)=>Math.pow(10,Math.floor(I(e))+t);n===i&&(n<=0?(s(1),r(10)):(s(a(n,-1)),r(a(i,1)))),n<=0&&s(a(i,-1)),i<=0&&r(a(n,1)),this._zero&&this.min!==this._suggestedMin&&n===a(this.min,0)&&s(a(n,-1)),this.min=n,this.max=i}buildTicks(){const e=this.options,t=function(e,t){const n=Math.floor(I(t.max)),i=Math.ceil(t.max/Math.pow(10,n)),s=[];let r=_(e.min,Math.pow(10,Math.floor(I(t.min)))),a=Math.floor(I(r)),o=Math.floor(r/Math.pow(10,a)),d=a<0?Math.pow(10,Math.abs(a)):1;do{s.push({value:r,major:Mr(r)}),++o,10===o&&(o=1,++a,d=a>=0?1:d),r=Math.round(o*Math.pow(10,a)*d)/d}while(a<n||a===n&&o<i);const l=_(e.max,r);return s.push({value:l,major:Mr(r)}),s}({min:this._userMin,max:this._userMax},this);return"ticks"===e.bounds&&B(t,this,"value"),e.reverse?(t.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),t}getLabelForValue(e){return void 0===e?"0":qt(e,this.chart.options.locale)}configure(){const e=this.min;super.configure(),this._startValue=I(e),this._valueRange=I(this.max)-I(e)}getPixelForValue(e){return void 0!==e&&0!==e||(e=this.min),null===e||isNaN(e)?NaN:this.getPixelForDecimal(e===this.min?0:(I(e)-this._startValue)/this._valueRange)}getValueForPixel(e){const t=this.getDecimalForPixel(e);return Math.pow(10,this._startValue+t*this._valueRange)}}function Lr(e){const t=e.ticks;if(t.display&&e.display){const e=st(t.backdropPadding);return m(t.font&&t.font.size,Ie.font.size)+e.height}return 0}function vr(e,t,n,i,s){return e===i||e===s?{start:t-n/2,end:t+n/2}:e<i||e>s?{start:t-n,end:t}:{start:t,end:t+n}}function wr(e){return 0===e||180===e?"center":e<180?"left":"right"}function Yr(e,t,n){return 90===n||270===n?e-=t/2:(n>270||n<90)&&(e-=t),e}function kr(e,t,n,i){const{ctx:s}=e;if(n)s.arc(e.xCenter,e.yCenter,t,0,H);else{let n=e.getPointPosition(0,t);s.moveTo(n.x,n.y);for(let r=1;r<i;r++)n=e.getPointPosition(r,t),s.lineTo(n.x,n.y)}}function Dr(e){return F(e)?e:0}br.id="logarithmic",br.defaults={ticks:{callback:Di.formatters.logarithmic,major:{enabled:!0}}};class xr extends gr{constructor(e){super(e),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){this.width=this.maxWidth,this.height=this.maxHeight,this.paddingTop=Lr(this.options)/2,this.xCenter=Math.floor(this.width/2),this.yCenter=Math.floor((this.height-this.paddingTop)/2),this.drawingArea=Math.min(this.height-this.paddingTop,this.width)/2}determineDataLimits(){const{min:e,max:t}=this.getMinMax(!1);this.min=c(e)&&!isNaN(e)?e:0,this.max=c(t)&&!isNaN(t)?t:0,this.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/Lr(this.options))}generateTickLabels(e){gr.prototype.generateTickLabels.call(this,e),this._pointLabels=this.getLabels().map(((e,t)=>{const n=p(this.options.pointLabels.callback,[e,t],this);return n||0===n?n:""}))}fit(){const e=this.options;e.display&&e.pointLabels.display?function(e){const t={l:0,r:e.width,t:0,b:e.height-e.paddingTop},n={},i=[],s=[],r=e.getLabels().length;for(let l=0;l<r;l++){const r=e.options.pointLabels.setContext(e.getPointLabelContext(l));s[l]=r.padding;const h=e.getPointPosition(l,e.drawingArea+s[l]),c=rt(r.font),_=(a=e.ctx,o=c,d=u(d=e._pointLabels[l])?d:[d],{w:Ne(a,o.string,d),h:d.length*o.lineHeight});i[l]=_;const m=e.getIndexAngle(l),f=U(m),p=vr(f,h.x,_.w,0,180),g=vr(f,h.y,_.h,90,270);p.start<t.l&&(t.l=p.start,n.l=m),p.end>t.r&&(t.r=p.end,n.r=m),g.start<t.t&&(t.t=g.start,n.t=m),g.end>t.b&&(t.b=g.end,n.b=m)}var a,o,d;e._setReductions(e.drawingArea,t,n),e._pointLabelItems=function(e,t,n){const i=[],s=e.getLabels().length,r=e.options,a=Lr(r),o=e.getDistanceFromCenterForValue(r.ticks.reverse?e.min:e.max);for(let r=0;r<s;r++){const s=0===r?a/2:0,h=e.getPointPosition(r,o+s+n[r]),c=U(e.getIndexAngle(r)),_=t[r],m=Yr(h.y,_.h,c),f=wr(c),p=(d=h.x,l=_.w,"right"===(u=f)?d-=l:"center"===u&&(d-=l/2),d);i.push({x:h.x,y:m,textAlign:f,left:p,top:m,right:p+_.w,bottom:m+_.h})}var d,l,u;return i}(e,i,s)}(this):this.setCenterPoint(0,0,0,0)}_setReductions(e,t,n){let i=t.l/Math.sin(n.l),s=Math.max(t.r-this.width,0)/Math.sin(n.r),r=-t.t/Math.cos(n.t),a=-Math.max(t.b-(this.height-this.paddingTop),0)/Math.cos(n.b);i=Dr(i),s=Dr(s),r=Dr(r),a=Dr(a),this.drawingArea=Math.max(e/2,Math.min(Math.floor(e-(i+s)/2),Math.floor(e-(r+a)/2))),this.setCenterPoint(i,s,r,a)}setCenterPoint(e,t,n,i){const s=this.width-t-this.drawingArea,r=e+this.drawingArea,a=n+this.drawingArea,o=this.height-this.paddingTop-i-this.drawingArea;this.xCenter=Math.floor((r+s)/2+this.left),this.yCenter=Math.floor((a+o)/2+this.top+this.paddingTop)}getIndexAngle(e){return G(e*(H/this.getLabels().length)+V(this.options.startAngle||0))}getDistanceFromCenterForValue(e){if(l(e))return NaN;const t=this.drawingArea/(this.max-this.min);return this.options.reverse?(this.max-e)*t:(e-this.min)*t}getValueForDistanceFromCenter(e){if(l(e))return NaN;const t=e/(this.drawingArea/(this.max-this.min));return this.options.reverse?this.max-t:this.min+t}getPointLabelContext(e){const t=this._pointLabels||[];if(e>=0&&e<t.length){const n=t[e];return function(e,t,n){return ot(e,{label:n,index:t,type:"pointLabel"})}(this.getContext(),e,n)}}getPointPosition(e,t){const n=this.getIndexAngle(e)-A;return{x:Math.cos(n)*t+this.xCenter,y:Math.sin(n)*t+this.yCenter,angle:n}}getPointPositionForValue(e,t){return this.getPointPosition(e,this.getDistanceFromCenterForValue(t))}getBasePosition(e){return this.getPointPositionForValue(e||0,this.getBaseValue())}getPointLabelPosition(e){const{left:t,top:n,right:i,bottom:s}=this._pointLabelItems[e];return{left:t,top:n,right:i,bottom:s}}drawBackground(){const{backgroundColor:e,grid:{circular:t}}=this.options;if(e){const n=this.ctx;n.save(),n.beginPath(),kr(this,this.getDistanceFromCenterForValue(this._endValue),t,this.getLabels().length),n.closePath(),n.fillStyle=e,n.fill(),n.restore()}}drawGrid(){const e=this.ctx,t=this.options,{angleLines:n,grid:i}=t,s=this.getLabels().length;let r,a,o;if(t.pointLabels.display&&function(e,t){const{ctx:n,options:{pointLabels:i}}=e;for(let s=t-1;s>=0;s--){const t=i.setContext(e.getPointLabelContext(s)),r=rt(t.font),{x:a,y:o,textAlign:d,left:u,top:h,right:c,bottom:_}=e._pointLabelItems[s],{backdropColor:m}=t;if(!l(m)){const e=st(t.backdropPadding);n.fillStyle=m,n.fillRect(u-e.left,h-e.top,c-u+e.width,_-h+e.height)}Ge(n,e._pointLabels[s],a,o+r.lineHeight/2,r,{color:t.color,textAlign:d,textBaseline:"middle"})}}(this,s),i.display&&this.ticks.forEach(((e,t)=>{0!==t&&(a=this.getDistanceFromCenterForValue(e.value),function(e,t,n,i){const s=e.ctx,r=t.circular,{color:a,lineWidth:o}=t;!r&&!i||!a||!o||n<0||(s.save(),s.strokeStyle=a,s.lineWidth=o,s.setLineDash(t.borderDash),s.lineDashOffset=t.borderDashOffset,s.beginPath(),kr(e,n,r,i),s.closePath(),s.stroke(),s.restore())}(this,i.setContext(this.getContext(t-1)),a,s))})),n.display){for(e.save(),r=this.getLabels().length-1;r>=0;r--){const i=n.setContext(this.getPointLabelContext(r)),{color:s,lineWidth:d}=i;d&&s&&(e.lineWidth=d,e.strokeStyle=s,e.setLineDash(i.borderDash),e.lineDashOffset=i.borderDashOffset,a=this.getDistanceFromCenterForValue(t.ticks.reverse?this.min:this.max),o=this.getPointPosition(r,a),e.beginPath(),e.moveTo(this.xCenter,this.yCenter),e.lineTo(o.x,o.y),e.stroke())}e.restore()}}drawBorder(){}drawLabels(){const e=this.ctx,t=this.options,n=t.ticks;if(!n.display)return;const i=this.getIndexAngle(0);let s,r;e.save(),e.translate(this.xCenter,this.yCenter),e.rotate(i),e.textAlign="center",e.textBaseline="middle",this.ticks.forEach(((i,a)=>{if(0===a&&!t.reverse)return;const o=n.setContext(this.getContext(a)),d=rt(o.font);if(s=this.getDistanceFromCenterForValue(this.ticks[a].value),o.showLabelBackdrop){e.font=d.string,r=e.measureText(i.label).width,e.fillStyle=o.backdropColor;const t=st(o.backdropPadding);e.fillRect(-r/2-t.left,-s-d.size/2-t.top,r+t.width,d.size+t.height)}Ge(e,i.label,0,-s,d,{color:o.color})})),e.restore()}drawTitle(){}}xr.id="radialLinear",xr.defaults={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:Di.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback:e=>e,padding:5}},xr.defaultRoutes={"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"},xr.descriptors={angleLines:{_fallback:"grid"}};const Tr={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},Sr=Object.keys(Tr);function Or(e,t){return e-t}function Hr(e,t){if(l(t))return null;const n=e._adapter,{parser:i,round:s,isoWeekday:r}=e._parseOpts;let a=t;return"function"==typeof i&&(a=i(a)),c(a)||(a="string"==typeof i?n.parse(a,i):n.parse(a)),null===a?null:(s&&(a="week"!==s||!F(r)&&!0!==r?n.startOf(a,s):n.startOf(a,"isoWeek",r)),+a)}function jr(e,t,n,i){const s=Sr.length;for(let r=Sr.indexOf(e);r<s-1;++r){const e=Tr[Sr[r]],s=e.steps?e.steps:Number.MAX_SAFE_INTEGER;if(e.common&&Math.ceil((n-t)/(s*e.size))<=i)return Sr[r]}return Sr[s-1]}function Er(e,t,n){if(n){if(n.length){const{lo:i,hi:s}=dt(n,t);e[n[i]>=t?n[i]:n[s]]=!0}}else e[t]=!0}function Pr(e,t,n){const i=[],s={},r=t.length;let a,o;for(a=0;a<r;++a)o=t[a],s[o]=a,i.push({value:o,major:!1});return 0!==r&&n?function(e,t,n,i){const s=e._adapter,r=+s.startOf(t[0].value,i),a=t[t.length-1].value;let o,d;for(o=r;o<=a;o=+s.add(o,1,i))d=n[o],d>=0&&(t[d].major=!0);return t}(e,i,s,n):i}class Ar extends Pi{constructor(e){super(e),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(e,t){const n=e.time||(e.time={}),i=this._adapter=new zn._date(e.adapters.date);w(n.displayFormats,i.formats()),this._parseOpts={parser:n.parser,round:n.round,isoWeekday:n.isoWeekday},super.init(e),this._normalized=t.normalized}parse(e,t){return void 0===e?null:Hr(this,e)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){const e=this.options,t=this._adapter,n=e.time.unit||"day";let{min:i,max:s,minDefined:r,maxDefined:a}=this.getUserBounds();function o(e){r||isNaN(e.min)||(i=Math.min(i,e.min)),a||isNaN(e.max)||(s=Math.max(s,e.max))}r&&a||(o(this._getLabelBounds()),"ticks"===e.bounds&&"labels"===e.ticks.source||o(this.getMinMax(!1))),i=c(i)&&!isNaN(i)?i:+t.startOf(Date.now(),n),s=c(s)&&!isNaN(s)?s:+t.endOf(Date.now(),n)+1,this.min=Math.min(i,s-1),this.max=Math.max(i+1,s)}_getLabelBounds(){const e=this.getLabelTimestamps();let t=Number.POSITIVE_INFINITY,n=Number.NEGATIVE_INFINITY;return e.length&&(t=e[0],n=e[e.length-1]),{min:t,max:n}}buildTicks(){const e=this.options,t=e.time,n=e.ticks,i="labels"===n.source?this.getLabelTimestamps():this._generate();"ticks"===e.bounds&&i.length&&(this.min=this._userMin||i[0],this.max=this._userMax||i[i.length-1]);const s=this.min,r=function(e,t,n){let i=0,s=e.length;for(;i<s&&e[i]<t;)i++;for(;s>i&&e[s-1]>n;)s--;return i>0||s<e.length?e.slice(i,s):e}(i,s,this.max);return this._unit=t.unit||(n.autoSkip?jr(t.minUnit,this.min,this.max,this._getLabelCapacity(s)):function(e,t,n,i,s){for(let r=Sr.length-1;r>=Sr.indexOf(n);r--){const n=Sr[r];if(Tr[n].common&&e._adapter.diff(s,i,n)>=t-1)return n}return Sr[n?Sr.indexOf(n):0]}(this,r.length,t.minUnit,this.min,this.max)),this._majorUnit=n.major.enabled&&"year"!==this._unit?function(e){for(let t=Sr.indexOf(e)+1,n=Sr.length;t<n;++t)if(Tr[Sr[t]].common)return Sr[t]}(this._unit):void 0,this.initOffsets(i),e.reverse&&r.reverse(),Pr(this,r,this._majorUnit)}initOffsets(e){let t,n,i=0,s=0;this.options.offset&&e.length&&(t=this.getDecimalForValue(e[0]),i=1===e.length?1-t:(this.getDecimalForValue(e[1])-t)/2,n=this.getDecimalForValue(e[e.length-1]),s=1===e.length?n:(n-this.getDecimalForValue(e[e.length-2]))/2);const r=e.length<3?.5:.25;i=Z(i,0,r),s=Z(s,0,r),this._offsets={start:i,end:s,factor:1/(i+1+s)}}_generate(){const e=this._adapter,t=this.min,n=this.max,i=this.options,s=i.time,r=s.unit||jr(s.minUnit,t,n,this._getLabelCapacity(t)),a=m(s.stepSize,1),o="week"===r&&s.isoWeekday,d=F(o)||!0===o,l={};let u,h,c=t;if(d&&(c=+e.startOf(c,"isoWeek",o)),c=+e.startOf(c,d?"day":r),e.diff(n,t,r)>1e5*a)throw new Error(t+" and "+n+" are too far apart with stepSize of "+a+" "+r);const _="data"===i.ticks.source&&this.getDataTimestamps();for(u=c,h=0;u<n;u=+e.add(u,a,r),h++)Er(l,u,_);return u!==n&&"ticks"!==i.bounds&&1!==h||Er(l,u,_),Object.keys(l).sort(((e,t)=>e-t)).map((e=>+e))}getLabelForValue(e){const t=this._adapter,n=this.options.time;return n.tooltipFormat?t.format(e,n.tooltipFormat):t.format(e,n.displayFormats.datetime)}_tickFormatFunction(e,t,n,i){const s=this.options,r=s.time.displayFormats,a=this._unit,o=this._majorUnit,d=a&&r[a],l=o&&r[o],u=n[t],h=o&&l&&u&&u.major,c=this._adapter.format(e,i||(h?l:d)),_=s.ticks.callback;return _?p(_,[c,t,n],this):c}generateTickLabels(e){let t,n,i;for(t=0,n=e.length;t<n;++t)i=e[t],i.label=this._tickFormatFunction(i.value,t,e)}getDecimalForValue(e){return null===e?NaN:(e-this.min)/(this.max-this.min)}getPixelForValue(e){const t=this._offsets,n=this.getDecimalForValue(e);return this.getPixelForDecimal((t.start+n)*t.factor)}getValueForPixel(e){const t=this._offsets,n=this.getDecimalForPixel(e)/t.factor-t.end;return this.min+n*(this.max-this.min)}_getLabelSize(e){const t=this.options.ticks,n=this.ctx.measureText(e).width,i=V(this.isHorizontal()?t.maxRotation:t.minRotation),s=Math.cos(i),r=Math.sin(i),a=this._resolveTickFontOptions(0).size;return{w:n*s+a*r,h:n*r+a*s}}_getLabelCapacity(e){const t=this.options.time,n=t.displayFormats,i=n[t.unit]||n.millisecond,s=this._tickFormatFunction(e,0,Pr(this,[e],this._majorUnit),i),r=this._getLabelSize(s),a=Math.floor(this.isHorizontal()?this.width/r.w:this.height/r.h)-1;return a>0?a:1}getDataTimestamps(){let e,t,n=this._cache.data||[];if(n.length)return n;const i=this.getMatchingVisibleMetas();if(this._normalized&&i.length)return this._cache.data=i[0].controller.getAllParsedValues(this);for(e=0,t=i.length;e<t;++e)n=n.concat(i[e].controller.getAllParsedValues(this));return this._cache.data=this.normalize(n)}getLabelTimestamps(){const e=this._cache.labels||[];let t,n;if(e.length)return e;const i=this.getLabels();for(t=0,n=i.length;t<n;++t)e.push(Hr(this,i[t]));return this._cache.labels=this._normalized?e:this.normalize(e)}normalize(e){return _t(e.sort(Or))}}function Rr(e,t,n){let i,s,r,a,o=0,d=e.length-1;n?(t>=e[o].pos&&t<=e[d].pos&&({lo:o,hi:d}=lt(e,"pos",t)),({pos:i,time:r}=e[o]),({pos:s,time:a}=e[d])):(t>=e[o].time&&t<=e[d].time&&({lo:o,hi:d}=lt(e,"time",t)),({time:i,pos:r}=e[o]),({time:s,pos:a}=e[d]));const l=s-i;return l?r+(a-r)*(t-i)/l:r}Ar.id="time",Ar.defaults={bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",major:{enabled:!1}}};class Cr extends Ar{constructor(e){super(e),this._table=[],this._minPos=void 0,this._tableRange=void 0}initOffsets(){const e=this._getTimestampsForTable(),t=this._table=this.buildLookupTable(e);this._minPos=Rr(t,this.min),this._tableRange=Rr(t,this.max)-this._minPos,super.initOffsets(e)}buildLookupTable(e){const{min:t,max:n}=this,i=[],s=[];let r,a,o,d,l;for(r=0,a=e.length;r<a;++r)d=e[r],d>=t&&d<=n&&i.push(d);if(i.length<2)return[{time:t,pos:0},{time:n,pos:1}];for(r=0,a=i.length;r<a;++r)l=i[r+1],o=i[r-1],d=i[r],Math.round((l+o)/2)!==d&&s.push({time:d,pos:r/(a-1)});return s}_getTimestampsForTable(){let e=this._cache.all||[];if(e.length)return e;const t=this.getDataTimestamps(),n=this.getLabelTimestamps();return e=t.length&&n.length?this.normalize(t.concat(n)):t.length?t:n,e=this._cache.all=e,e}getDecimalForValue(e){return(Rr(this._table,e)-this._minPos)/this._tableRange}getValueForPixel(e){const t=this._offsets,n=this.getDecimalForPixel(e)/t.factor-t.end;return Rr(this._table,n*this._tableRange+this._minPos,!0)}}Cr.id="timeseries",Cr.defaults=Ar.defaults;var Ir=Object.freeze({__proto__:null,CategoryScale:fr,LinearScale:yr,LogarithmicScale:br,RadialLinearScale:xr,TimeScale:Ar,TimeSeriesScale:Cr});const Wr=[Wn,Ts,mr,Ir]},7187:e=>{"use strict";var t,n="object"==typeof Reflect?Reflect:null,i=n&&"function"==typeof n.apply?n.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};t=n&&"function"==typeof n.ownKeys?n.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var s=Number.isNaN||function(e){return e!=e};function r(){r.init.call(this)}e.exports=r,e.exports.once=function(e,t){return new Promise((function(n,i){function s(n){e.removeListener(t,r),i(n)}function r(){"function"==typeof e.removeListener&&e.removeListener("error",s),n([].slice.call(arguments))}f(e,t,r,{once:!0}),"error"!==t&&function(e,t,n){"function"==typeof e.on&&f(e,"error",t,{once:!0})}(e,s)}))},r.EventEmitter=r,r.prototype._events=void 0,r.prototype._eventsCount=0,r.prototype._maxListeners=void 0;var a=10;function o(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function d(e){return void 0===e._maxListeners?r.defaultMaxListeners:e._maxListeners}function l(e,t,n,i){var s,r,a,l;if(o(n),void 0===(r=e._events)?(r=e._events=Object.create(null),e._eventsCount=0):(void 0!==r.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),r=e._events),a=r[t]),void 0===a)a=r[t]=n,++e._eventsCount;else if("function"==typeof a?a=r[t]=i?[n,a]:[a,n]:i?a.unshift(n):a.push(n),(s=d(e))>0&&a.length>s&&!a.warned){a.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=e,u.type=t,u.count=a.length,l=u,console&&console.warn&&console.warn(l)}return e}function u(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function h(e,t,n){var i={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},s=u.bind(i);return s.listener=n,i.wrapFn=s,s}function c(e,t,n){var i=e._events;if(void 0===i)return[];var s=i[t];return void 0===s?[]:"function"==typeof s?n?[s.listener||s]:[s]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(s):m(s,s.length)}function _(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function m(e,t){for(var n=new Array(t),i=0;i<t;++i)n[i]=e[i];return n}function f(e,t,n,i){if("function"==typeof e.on)i.once?e.once(t,n):e.on(t,n);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function s(r){i.once&&e.removeEventListener(t,s),n(r)}))}}Object.defineProperty(r,"defaultMaxListeners",{enumerable:!0,get:function(){return a},set:function(e){if("number"!=typeof e||e<0||s(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");a=e}}),r.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},r.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||s(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},r.prototype.getMaxListeners=function(){return d(this)},r.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var s="error"===e,r=this._events;if(void 0!==r)s=s&&void 0===r.error;else if(!s)return!1;if(s){var a;if(t.length>0&&(a=t[0]),a instanceof Error)throw a;var o=new Error("Unhandled error."+(a?" ("+a.message+")":""));throw o.context=a,o}var d=r[e];if(void 0===d)return!1;if("function"==typeof d)i(d,this,t);else{var l=d.length,u=m(d,l);for(n=0;n<l;++n)i(u[n],this,t)}return!0},r.prototype.addListener=function(e,t){return l(this,e,t,!1)},r.prototype.on=r.prototype.addListener,r.prototype.prependListener=function(e,t){return l(this,e,t,!0)},r.prototype.once=function(e,t){return o(t),this.on(e,h(this,e,t)),this},r.prototype.prependOnceListener=function(e,t){return o(t),this.prependListener(e,h(this,e,t)),this},r.prototype.removeListener=function(e,t){var n,i,s,r,a;if(o(t),void 0===(i=this._events))return this;if(void 0===(n=i[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete i[e],i.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(s=-1,r=n.length-1;r>=0;r--)if(n[r]===t||n[r].listener===t){a=n[r].listener,s=r;break}if(s<0)return this;0===s?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,s),1===n.length&&(i[e]=n[0]),void 0!==i.removeListener&&this.emit("removeListener",e,a||t)}return this},r.prototype.off=r.prototype.removeListener,r.prototype.removeAllListeners=function(e){var t,n,i;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var s,r=Object.keys(n);for(i=0;i<r.length;++i)"removeListener"!==(s=r[i])&&this.removeAllListeners(s);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(i=t.length-1;i>=0;i--)this.removeListener(e,t[i]);return this},r.prototype.listeners=function(e){return c(this,e,!0)},r.prototype.rawListeners=function(e){return c(this,e,!1)},r.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):_.call(e,t)},r.prototype.listenerCount=_,r.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}},645:(e,t)=>{t.read=function(e,t,n,i,s){var r,a,o=8*s-i-1,d=(1<<o)-1,l=d>>1,u=-7,h=n?s-1:0,c=n?-1:1,_=e[t+h];for(h+=c,r=_&(1<<-u)-1,_>>=-u,u+=o;u>0;r=256*r+e[t+h],h+=c,u-=8);for(a=r&(1<<-u)-1,r>>=-u,u+=i;u>0;a=256*a+e[t+h],h+=c,u-=8);if(0===r)r=1-l;else{if(r===d)return a?NaN:1/0*(_?-1:1);a+=Math.pow(2,i),r-=l}return(_?-1:1)*a*Math.pow(2,r-i)},t.write=function(e,t,n,i,s,r){var a,o,d,l=8*r-s-1,u=(1<<l)-1,h=u>>1,c=23===s?Math.pow(2,-24)-Math.pow(2,-77):0,_=i?0:r-1,m=i?1:-1,f=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(o=isNaN(t)?1:0,a=u):(a=Math.floor(Math.log(t)/Math.LN2),t*(d=Math.pow(2,-a))<1&&(a--,d*=2),(t+=a+h>=1?c/d:c*Math.pow(2,1-h))*d>=2&&(a++,d/=2),a+h>=u?(o=0,a=u):a+h>=1?(o=(t*d-1)*Math.pow(2,s),a+=h):(o=t*Math.pow(2,h-1)*Math.pow(2,s),a=0));s>=8;e[n+_]=255&o,_+=m,o/=256,s-=8);for(a=a<<s|o,l+=s;l>0;e[n+_]=255&a,_+=m,a/=256,l-=8);e[n+_-m]|=128*f}},5717:e=>{"function"==typeof Object.create?e.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(e,t){if(t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}}},2786:function(e,t,n){!function(e){"use strict";e.defineLocale("af",{months:"Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"),weekdays:"Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"),weekdaysShort:"Son_Maa_Din_Woe_Don_Vry_Sat".split("_"),weekdaysMin:"So_Ma_Di_Wo_Do_Vr_Sa".split("_"),meridiemParse:/vm|nm/i,isPM:function(e){return/^nm$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"vm":"VM":n?"nm":"NM"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Vandag om] LT",nextDay:"[Môre om] LT",nextWeek:"dddd [om] LT",lastDay:"[Gister om] LT",lastWeek:"[Laas] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oor %s",past:"%s gelede",s:"'n paar sekondes",ss:"%d sekondes",m:"'n minuut",mm:"%d minute",h:"'n uur",hh:"%d ure",d:"'n dag",dd:"%d dae",M:"'n maand",MM:"%d maande",y:"'n jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(381))},4130:function(e,t,n){!function(e){"use strict";var t=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},n={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},i=function(e){return function(i,s,r,a){var o=t(i),d=n[e][t(i)];return 2===o&&(d=d[s?0:1]),d.replace(/%d/i,i)}},s=["جانفي","فيفري","مارس","أفريل","ماي","جوان","جويلية","أوت","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar-dz",{months:s,monthsShort:s,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:i("s"),ss:i("s"),m:i("m"),mm:i("m"),h:i("h"),hh:i("h"),d:i("d"),dd:i("d"),M:i("M"),MM:i("M"),y:i("y"),yy:i("y")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:0,doy:4}})}(n(381))},6135:function(e,t,n){!function(e){"use strict";e.defineLocale("ar-kw",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:0,doy:12}})}(n(381))},6440:function(e,t,n){!function(e){"use strict";var t={1:"1",2:"2",3:"3",4:"4",5:"5",6:"6",7:"7",8:"8",9:"9",0:"0"},n=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},i={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},s=function(e){return function(t,s,r,a){var o=n(t),d=i[e][n(t)];return 2===o&&(d=d[s?0:1]),d.replace(/%d/i,t)}},r=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar-ly",{months:r,monthsShort:r,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:s("s"),ss:s("s"),m:s("m"),mm:s("m"),h:s("h"),hh:s("h"),d:s("d"),dd:s("d"),M:s("M"),MM:s("M"),y:s("y"),yy:s("y")},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(381))},7702:function(e,t,n){!function(e){"use strict";e.defineLocale("ar-ma",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}})}(n(381))},6040:function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"};e.defineLocale("ar-sa",{months:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:0,doy:6}})}(n(381))},7100:function(e,t,n){!function(e){"use strict";e.defineLocale("ar-tn",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}})}(n(381))},867:function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},i=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},s={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},r=function(e){return function(t,n,r,a){var o=i(t),d=s[e][i(t)];return 2===o&&(d=d[n?0:1]),d.replace(/%d/i,t)}},a=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar",{months:a,monthsShort:a,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:r("s"),ss:r("s"),m:r("m"),mm:r("m"),h:r("h"),hh:r("h"),d:r("d"),dd:r("d"),M:r("M"),MM:r("M"),y:r("y"),yy:r("y")},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(381))},1083:function(e,t,n){!function(e){"use strict";var t={1:"-inci",5:"-inci",8:"-inci",70:"-inci",80:"-inci",2:"-nci",7:"-nci",20:"-nci",50:"-nci",3:"-üncü",4:"-üncü",100:"-üncü",6:"-ncı",9:"-uncu",10:"-uncu",30:"-uncu",60:"-ıncı",90:"-ıncı"};e.defineLocale("az",{months:"yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"),monthsShort:"yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"),weekdays:"Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə".split("_"),weekdaysShort:"Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən".split("_"),weekdaysMin:"Bz_BE_ÇA_Çə_CA_Cü_Şə".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[sabah saat] LT",nextWeek:"[gələn həftə] dddd [saat] LT",lastDay:"[dünən] LT",lastWeek:"[keçən həftə] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s əvvəl",s:"bir neçə saniyə",ss:"%d saniyə",m:"bir dəqiqə",mm:"%d dəqiqə",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir il",yy:"%d il"},meridiemParse:/gecə|səhər|gündüz|axşam/,isPM:function(e){return/^(gündüz|axşam)$/.test(e)},meridiem:function(e,t,n){return e<4?"gecə":e<12?"səhər":e<17?"gündüz":"axşam"},dayOfMonthOrdinalParse:/\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,ordinal:function(e){if(0===e)return e+"-ıncı";var n=e%10;return e+(t[n]||t[e%100-n]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(381))},9808:function(e,t,n){!function(e){"use strict";function t(e,t,n){return"m"===n?t?"хвіліна":"хвіліну":"h"===n?t?"гадзіна":"гадзіну":e+" "+(i=+e,s={ss:t?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:t?"хвіліна_хвіліны_хвілін":"хвіліну_хвіліны_хвілін",hh:t?"гадзіна_гадзіны_гадзін":"гадзіну_гадзіны_гадзін",dd:"дзень_дні_дзён",MM:"месяц_месяцы_месяцаў",yy:"год_гады_гадоў"}[n].split("_"),i%10==1&&i%100!=11?s[0]:i%10>=2&&i%10<=4&&(i%100<10||i%100>=20)?s[1]:s[2]);var i,s}e.defineLocale("be",{months:{format:"студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня".split("_"),standalone:"студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань".split("_")},monthsShort:"студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж".split("_"),weekdays:{format:"нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу".split("_"),standalone:"нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота".split("_"),isFormat:/\[ ?[Ууў] ?(?:мінулую|наступную)? ?\] ?dddd/},weekdaysShort:"нд_пн_ат_ср_чц_пт_сб".split("_"),weekdaysMin:"нд_пн_ат_ср_чц_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., HH:mm",LLLL:"dddd, D MMMM YYYY г., HH:mm"},calendar:{sameDay:"[Сёння ў] LT",nextDay:"[Заўтра ў] LT",lastDay:"[Учора ў] LT",nextWeek:function(){return"[У] dddd [ў] LT"},lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return"[У мінулую] dddd [ў] LT";case 1:case 2:case 4:return"[У мінулы] dddd [ў] LT"}},sameElse:"L"},relativeTime:{future:"праз %s",past:"%s таму",s:"некалькі секунд",m:t,mm:t,h:t,hh:t,d:"дзень",dd:t,M:"месяц",MM:t,y:"год",yy:t},meridiemParse:/ночы|раніцы|дня|вечара/,isPM:function(e){return/^(дня|вечара)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночы":e<12?"раніцы":e<17?"дня":"вечара"},dayOfMonthOrdinalParse:/\d{1,2}-(і|ы|га)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e%10!=2&&e%10!=3||e%100==12||e%100==13?e+"-ы":e+"-і";case"D":return e+"-га";default:return e}},week:{dow:1,doy:7}})}(n(381))},8338:function(e,t,n){!function(e){"use strict";e.defineLocale("bg",{months:"януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),monthsShort:"яну_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),weekdays:"неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),weekdaysShort:"нед_пон_вто_сря_чет_пет_съб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Днес в] LT",nextDay:"[Утре в] LT",nextWeek:"dddd [в] LT",lastDay:"[Вчера в] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Миналата] dddd [в] LT";case 1:case 2:case 4:case 5:return"[Миналия] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"след %s",past:"преди %s",s:"няколко секунди",ss:"%d секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дена",w:"седмица",ww:"%d седмици",M:"месец",MM:"%d месеца",y:"година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&n<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}})}(n(381))},7438:function(e,t,n){!function(e){"use strict";e.defineLocale("bm",{months:"Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_Mɛkalo_Zuwɛnkalo_Zuluyekalo_Utikalo_Sɛtanburukalo_ɔkutɔburukalo_Nowanburukalo_Desanburukalo".split("_"),monthsShort:"Zan_Few_Mar_Awi_Mɛ_Zuw_Zul_Uti_Sɛt_ɔku_Now_Des".split("_"),weekdays:"Kari_Ntɛnɛn_Tarata_Araba_Alamisa_Juma_Sibiri".split("_"),weekdaysShort:"Kar_Ntɛ_Tar_Ara_Ala_Jum_Sib".split("_"),weekdaysMin:"Ka_Nt_Ta_Ar_Al_Ju_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"MMMM [tile] D [san] YYYY",LLL:"MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm",LLLL:"dddd MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm"},calendar:{sameDay:"[Bi lɛrɛ] LT",nextDay:"[Sini lɛrɛ] LT",nextWeek:"dddd [don lɛrɛ] LT",lastDay:"[Kunu lɛrɛ] LT",lastWeek:"dddd [tɛmɛnen lɛrɛ] LT",sameElse:"L"},relativeTime:{future:"%s kɔnɔ",past:"a bɛ %s bɔ",s:"sanga dama dama",ss:"sekondi %d",m:"miniti kelen",mm:"miniti %d",h:"lɛrɛ kelen",hh:"lɛrɛ %d",d:"tile kelen",dd:"tile %d",M:"kalo kelen",MM:"kalo %d",y:"san kelen",yy:"san %d"},week:{dow:1,doy:4}})}(n(381))},6225:function(e,t,n){!function(e){"use strict";var t={1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"},n={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"};e.defineLocale("bn-bd",{months:"জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),weekdaysMin:"রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm সময়",LLLL:"dddd, D MMMM YYYY, A h:mm সময়"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কয়েক সেকেন্ড",ss:"%d সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(e){return e.replace(/[১২৩৪৫৬৭৮৯০]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/রাত|ভোর|সকাল|দুপুর|বিকাল|সন্ধ্যা|রাত/,meridiemHour:function(e,t){return 12===e&&(e=0),"রাত"===t?e<4?e:e+12:"ভোর"===t||"সকাল"===t?e:"দুপুর"===t?e>=3?e:e+12:"বিকাল"===t||"সন্ধ্যা"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"রাত":e<6?"ভোর":e<12?"সকাল":e<15?"দুপুর":e<18?"বিকাল":e<20?"সন্ধ্যা":"রাত"},week:{dow:0,doy:6}})}(n(381))},8905:function(e,t,n){!function(e){"use strict";var t={1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"},n={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"};e.defineLocale("bn",{months:"জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),weekdaysMin:"রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm সময়",LLLL:"dddd, D MMMM YYYY, A h:mm সময়"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কয়েক সেকেন্ড",ss:"%d সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(e){return e.replace(/[১২৩৪৫৬৭৮৯০]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/রাত|সকাল|দুপুর|বিকাল|রাত/,meridiemHour:function(e,t){return 12===e&&(e=0),"রাত"===t&&e>=4||"দুপুর"===t&&e<5||"বিকাল"===t?e+12:e},meridiem:function(e,t,n){return e<4?"রাত":e<10?"সকাল":e<17?"দুপুর":e<20?"বিকাল":"রাত"},week:{dow:0,doy:6}})}(n(381))},1560:function(e,t,n){!function(e){"use strict";var t={1:"༡",2:"༢",3:"༣",4:"༤",5:"༥",6:"༦",7:"༧",8:"༨",9:"༩",0:"༠"},n={"༡":"1","༢":"2","༣":"3","༤":"4","༥":"5","༦":"6","༧":"7","༨":"8","༩":"9","༠":"0"};e.defineLocale("bo",{months:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),monthsShort:"ཟླ་1_ཟླ་2_ཟླ་3_ཟླ་4_ཟླ་5_ཟླ་6_ཟླ་7_ཟླ་8_ཟླ་9_ཟླ་10_ཟླ་11_ཟླ་12".split("_"),monthsShortRegex:/^(ཟླ་\d{1,2})/,monthsParseExact:!0,weekdays:"གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་".split("_"),weekdaysShort:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),weekdaysMin:"ཉི_ཟླ_མིག_ལྷག_ཕུར_སངས_སྤེན".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[དི་རིང] LT",nextDay:"[སང་ཉིན] LT",nextWeek:"[བདུན་ཕྲག་རྗེས་མ], LT",lastDay:"[ཁ་སང] LT",lastWeek:"[བདུན་ཕྲག་མཐའ་མ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ལ་",past:"%s སྔན་ལ",s:"ལམ་སང",ss:"%d སྐར་ཆ།",m:"སྐར་མ་གཅིག",mm:"%d སྐར་མ",h:"ཆུ་ཚོད་གཅིག",hh:"%d ཆུ་ཚོད",d:"ཉིན་གཅིག",dd:"%d ཉིན་",M:"ཟླ་བ་གཅིག",MM:"%d ཟླ་བ",y:"ལོ་གཅིག",yy:"%d ལོ"},preparse:function(e){return e.replace(/[༡༢༣༤༥༦༧༨༩༠]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,meridiemHour:function(e,t){return 12===e&&(e=0),"མཚན་མོ"===t&&e>=4||"ཉིན་གུང"===t&&e<5||"དགོང་དག"===t?e+12:e},meridiem:function(e,t,n){return e<4?"མཚན་མོ":e<10?"ཞོགས་ཀས":e<17?"ཉིན་གུང":e<20?"དགོང་དག":"མཚན་མོ"},week:{dow:0,doy:6}})}(n(381))},1278:function(e,t,n){!function(e){"use strict";function t(e,t,n){return e+" "+function(e,t){return 2===t?function(e){var t={m:"v",b:"v",d:"z"};return void 0===t[e.charAt(0)]?e:t[e.charAt(0)]+e.substring(1)}(e):e}({mm:"munutenn",MM:"miz",dd:"devezh"}[n],e)}function n(e){return e>9?n(e%10):e}var i=[/^gen/i,/^c[ʼ\']hwe/i,/^meu/i,/^ebr/i,/^mae/i,/^(mez|eve)/i,/^gou/i,/^eos/i,/^gwe/i,/^her/i,/^du/i,/^ker/i],s=/^(genver|c[ʼ\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu|gen|c[ʼ\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,r=[/^Su/i,/^Lu/i,/^Me([^r]|$)/i,/^Mer/i,/^Ya/i,/^Gw/i,/^Sa/i];e.defineLocale("br",{months:"Genver_Cʼhwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"),monthsShort:"Gen_Cʼhwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"),weekdays:"Sul_Lun_Meurzh_Mercʼher_Yaou_Gwener_Sadorn".split("_"),weekdaysShort:"Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),weekdaysMin:"Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"),weekdaysParse:r,fullWeekdaysParse:[/^sul/i,/^lun/i,/^meurzh/i,/^merc[ʼ\']her/i,/^yaou/i,/^gwener/i,/^sadorn/i],shortWeekdaysParse:[/^Sul/i,/^Lun/i,/^Meu/i,/^Mer/i,/^Yao/i,/^Gwe/i,/^Sad/i],minWeekdaysParse:r,monthsRegex:s,monthsShortRegex:s,monthsStrictRegex:/^(genver|c[ʼ\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu)/i,monthsShortStrictRegex:/^(gen|c[ʼ\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,monthsParse:i,longMonthsParse:i,shortMonthsParse:i,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [a viz] MMMM YYYY",LLL:"D [a viz] MMMM YYYY HH:mm",LLLL:"dddd, D [a viz] MMMM YYYY HH:mm"},calendar:{sameDay:"[Hiziv da] LT",nextDay:"[Warcʼhoazh da] LT",nextWeek:"dddd [da] LT",lastDay:"[Decʼh da] LT",lastWeek:"dddd [paset da] LT",sameElse:"L"},relativeTime:{future:"a-benn %s",past:"%s ʼzo",s:"un nebeud segondennoù",ss:"%d eilenn",m:"ur vunutenn",mm:t,h:"un eur",hh:"%d eur",d:"un devezh",dd:t,M:"ur miz",MM:t,y:"ur bloaz",yy:function(e){switch(n(e)){case 1:case 3:case 4:case 5:case 9:return e+" bloaz";default:return e+" vloaz"}}},dayOfMonthOrdinalParse:/\d{1,2}(añ|vet)/,ordinal:function(e){return e+(1===e?"añ":"vet")},week:{dow:1,doy:4},meridiemParse:/a.m.|g.m./,isPM:function(e){return"g.m."===e},meridiem:function(e,t,n){return e<12?"a.m.":"g.m."}})}(n(381))},622:function(e,t,n){!function(e){"use strict";function t(e,t,n){var i=e+" ";switch(n){case"ss":return i+(1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi");case"m":return t?"jedna minuta":"jedne minute";case"mm":return i+(1===e?"minuta":2===e||3===e||4===e?"minute":"minuta");case"h":return t?"jedan sat":"jednog sata";case"hh":return i+(1===e?"sat":2===e||3===e||4===e?"sata":"sati");case"dd":return i+(1===e?"dan":"dana");case"MM":return i+(1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci");case"yy":return i+(1===e?"godina":2===e||3===e||4===e?"godine":"godina")}}e.defineLocale("bs",{months:"januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:t,m:t,mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(381))},2468:function(e,t,n){!function(e){"use strict";e.defineLocale("ca",{months:{standalone:"gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),format:"de gener_de febrer_de març_d'abril_de maig_de juny_de juliol_d'agost_de setembre_d'octubre_de novembre_de desembre".split("_"),isFormat:/D[oD]?(\s)+MMMM/},monthsShort:"gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.".split("_"),monthsParseExact:!0,weekdays:"diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dt._dc._dj._dv._ds.".split("_"),weekdaysMin:"dg_dl_dt_dc_dj_dv_ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [de] YYYY",ll:"D MMM YYYY",LLL:"D MMMM [de] YYYY [a les] H:mm",lll:"D MMM YYYY, H:mm",LLLL:"dddd D MMMM [de] YYYY [a les] H:mm",llll:"ddd D MMM YYYY, H:mm"},calendar:{sameDay:function(){return"[avui a "+(1!==this.hours()?"les":"la")+"] LT"},nextDay:function(){return"[demà a "+(1!==this.hours()?"les":"la")+"] LT"},nextWeek:function(){return"dddd [a "+(1!==this.hours()?"les":"la")+"] LT"},lastDay:function(){return"[ahir a "+(1!==this.hours()?"les":"la")+"] LT"},lastWeek:function(){return"[el] dddd [passat a "+(1!==this.hours()?"les":"la")+"] LT"},sameElse:"L"},relativeTime:{future:"d'aquí %s",past:"fa %s",s:"uns segons",ss:"%d segons",m:"un minut",mm:"%d minuts",h:"una hora",hh:"%d hores",d:"un dia",dd:"%d dies",M:"un mes",MM:"%d mesos",y:"un any",yy:"%d anys"},dayOfMonthOrdinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(e,t){var n=1===e?"r":2===e?"n":3===e?"r":4===e?"t":"è";return"w"!==t&&"W"!==t||(n="a"),e+n},week:{dow:1,doy:4}})}(n(381))},5822:function(e,t,n){!function(e){"use strict";var t="leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"),n="led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_"),i=[/^led/i,/^úno/i,/^bře/i,/^dub/i,/^kvě/i,/^(čvn|červen$|června)/i,/^(čvc|červenec|července)/i,/^srp/i,/^zář/i,/^říj/i,/^lis/i,/^pro/i],s=/^(leden|únor|březen|duben|květen|červenec|července|červen|června|srpen|září|říjen|listopad|prosinec|led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i;function r(e){return e>1&&e<5&&1!=~~(e/10)}function a(e,t,n,i){var s=e+" ";switch(n){case"s":return t||i?"pár sekund":"pár sekundami";case"ss":return t||i?s+(r(e)?"sekundy":"sekund"):s+"sekundami";case"m":return t?"minuta":i?"minutu":"minutou";case"mm":return t||i?s+(r(e)?"minuty":"minut"):s+"minutami";case"h":return t?"hodina":i?"hodinu":"hodinou";case"hh":return t||i?s+(r(e)?"hodiny":"hodin"):s+"hodinami";case"d":return t||i?"den":"dnem";case"dd":return t||i?s+(r(e)?"dny":"dní"):s+"dny";case"M":return t||i?"měsíc":"měsícem";case"MM":return t||i?s+(r(e)?"měsíce":"měsíců"):s+"měsíci";case"y":return t||i?"rok":"rokem";case"yy":return t||i?s+(r(e)?"roky":"let"):s+"lety"}}e.defineLocale("cs",{months:t,monthsShort:n,monthsRegex:s,monthsShortRegex:s,monthsStrictRegex:/^(leden|ledna|února|únor|březen|března|duben|dubna|květen|května|červenec|července|červen|června|srpen|srpna|září|říjen|října|listopadu|listopad|prosinec|prosince)/i,monthsShortStrictRegex:/^(led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i,monthsParse:i,longMonthsParse:i,shortMonthsParse:i,weekdays:"neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),weekdaysShort:"ne_po_út_st_čt_pá_so".split("_"),weekdaysMin:"ne_po_út_st_čt_pá_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm",l:"D. M. YYYY"},calendar:{sameDay:"[dnes v] LT",nextDay:"[zítra v] LT",nextWeek:function(){switch(this.day()){case 0:return"[v neděli v] LT";case 1:case 2:return"[v] dddd [v] LT";case 3:return"[ve středu v] LT";case 4:return"[ve čtvrtek v] LT";case 5:return"[v pátek v] LT";case 6:return"[v sobotu v] LT"}},lastDay:"[včera v] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulou neděli v] LT";case 1:case 2:return"[minulé] dddd [v] LT";case 3:return"[minulou středu v] LT";case 4:case 5:return"[minulý] dddd [v] LT";case 6:return"[minulou sobotu v] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"před %s",s:a,ss:a,m:a,mm:a,h:a,hh:a,d:a,dd:a,M:a,MM:a,y:a,yy:a},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},877:function(e,t,n){!function(e){"use strict";e.defineLocale("cv",{months:"кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав".split("_"),monthsShort:"кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш".split("_"),weekdays:"вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун".split("_"),weekdaysShort:"выр_тун_ытл_юн_кӗҫ_эрн_шӑм".split("_"),weekdaysMin:"вр_тн_ыт_юн_кҫ_эр_шм".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]",LLL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm",LLLL:"dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm"},calendar:{sameDay:"[Паян] LT [сехетре]",nextDay:"[Ыран] LT [сехетре]",lastDay:"[Ӗнер] LT [сехетре]",nextWeek:"[Ҫитес] dddd LT [сехетре]",lastWeek:"[Иртнӗ] dddd LT [сехетре]",sameElse:"L"},relativeTime:{future:function(e){return e+(/сехет$/i.exec(e)?"рен":/ҫул$/i.exec(e)?"тан":"ран")},past:"%s каялла",s:"пӗр-ик ҫеккунт",ss:"%d ҫеккунт",m:"пӗр минут",mm:"%d минут",h:"пӗр сехет",hh:"%d сехет",d:"пӗр кун",dd:"%d кун",M:"пӗр уйӑх",MM:"%d уйӑх",y:"пӗр ҫул",yy:"%d ҫул"},dayOfMonthOrdinalParse:/\d{1,2}-мӗш/,ordinal:"%d-мӗш",week:{dow:1,doy:7}})}(n(381))},7373:function(e,t,n){!function(e){"use strict";e.defineLocale("cy",{months:"Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"),monthsShort:"Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"),weekdays:"Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"),weekdaysShort:"Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"),weekdaysMin:"Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Heddiw am] LT",nextDay:"[Yfory am] LT",nextWeek:"dddd [am] LT",lastDay:"[Ddoe am] LT",lastWeek:"dddd [diwethaf am] LT",sameElse:"L"},relativeTime:{future:"mewn %s",past:"%s yn ôl",s:"ychydig eiliadau",ss:"%d eiliad",m:"munud",mm:"%d munud",h:"awr",hh:"%d awr",d:"diwrnod",dd:"%d diwrnod",M:"mis",MM:"%d mis",y:"blwyddyn",yy:"%d flynedd"},dayOfMonthOrdinalParse:/\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,ordinal:function(e){var t="";return e>20?t=40===e||50===e||60===e||80===e||100===e?"fed":"ain":e>0&&(t=["","af","il","ydd","ydd","ed","ed","ed","fed","fed","fed","eg","fed","eg","eg","fed","eg","eg","fed","eg","fed"][e]),e+t},week:{dow:1,doy:4}})}(n(381))},4780:function(e,t,n){!function(e){"use strict";e.defineLocale("da",{months:"januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"søn_man_tir_ons_tor_fre_lør".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd [d.] D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"på dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[i] dddd[s kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"få sekunder",ss:"%d sekunder",m:"et minut",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dage",M:"en måned",MM:"%d måneder",y:"et år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},217:function(e,t,n){!function(e){"use strict";function t(e,t,n,i){var s={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?s[n][0]:s[n][1]}e.defineLocale("de-at",{months:"Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jän._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,w:t,ww:"%d Wochen",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},894:function(e,t,n){!function(e){"use strict";function t(e,t,n,i){var s={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?s[n][0]:s[n][1]}e.defineLocale("de-ch",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,w:t,ww:"%d Wochen",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},9740:function(e,t,n){!function(e){"use strict";function t(e,t,n,i){var s={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?s[n][0]:s[n][1]}e.defineLocale("de",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,w:t,ww:"%d Wochen",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},5300:function(e,t,n){!function(e){"use strict";var t=["ޖެނުއަރީ","ފެބްރުއަރީ","މާރިޗު","އޭޕްރީލު","މޭ","ޖޫން","ޖުލައި","އޯގަސްޓު","ސެޕްޓެމްބަރު","އޮކްޓޯބަރު","ނޮވެމްބަރު","ޑިސެމްބަރު"],n=["އާދިއްތަ","ހޯމަ","އަންގާރަ","ބުދަ","ބުރާސްފަތި","ހުކުރު","ހޮނިހިރު"];e.defineLocale("dv",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:"އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/M/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/މކ|މފ/,isPM:function(e){return"މފ"===e},meridiem:function(e,t,n){return e<12?"މކ":"މފ"},calendar:{sameDay:"[މިއަދު] LT",nextDay:"[މާދަމާ] LT",nextWeek:"dddd LT",lastDay:"[އިއްޔެ] LT",lastWeek:"[ފާއިތުވި] dddd LT",sameElse:"L"},relativeTime:{future:"ތެރޭގައި %s",past:"ކުރިން %s",s:"ސިކުންތުކޮޅެއް",ss:"d% ސިކުންތު",m:"މިނިޓެއް",mm:"މިނިޓު %d",h:"ގަޑިއިރެއް",hh:"ގަޑިއިރު %d",d:"ދުވަހެއް",dd:"ދުވަސް %d",M:"މަހެއް",MM:"މަސް %d",y:"އަހަރެއް",yy:"އަހަރު %d"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:7,doy:12}})}(n(381))},837:function(e,t,n){!function(e){"use strict";e.defineLocale("el",{monthsNominativeEl:"Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),monthsGenitiveEl:"Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),months:function(e,t){return e?"string"==typeof t&&/D/.test(t.substring(0,t.indexOf("MMMM")))?this._monthsGenitiveEl[e.month()]:this._monthsNominativeEl[e.month()]:this._monthsNominativeEl},monthsShort:"Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),weekdays:"Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),weekdaysShort:"Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),weekdaysMin:"Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),meridiem:function(e,t,n){return e>11?n?"μμ":"ΜΜ":n?"πμ":"ΠΜ"},isPM:function(e){return"μ"===(e+"").toLowerCase()[0]},meridiemParse:/[ΠΜ]\.?Μ?\.?/i,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendarEl:{sameDay:"[Σήμερα {}] LT",nextDay:"[Αύριο {}] LT",nextWeek:"dddd [{}] LT",lastDay:"[Χθες {}] LT",lastWeek:function(){return 6===this.day()?"[το προηγούμενο] dddd [{}] LT":"[την προηγούμενη] dddd [{}] LT"},sameElse:"L"},calendar:function(e,t){var n,i=this._calendarEl[e],s=t&&t.hours();return n=i,("undefined"!=typeof Function&&n instanceof Function||"[object Function]"===Object.prototype.toString.call(n))&&(i=i.apply(t)),i.replace("{}",s%12==1?"στη":"στις")},relativeTime:{future:"σε %s",past:"%s πριν",s:"λίγα δευτερόλεπτα",ss:"%d δευτερόλεπτα",m:"ένα λεπτό",mm:"%d λεπτά",h:"μία ώρα",hh:"%d ώρες",d:"μία μέρα",dd:"%d μέρες",M:"ένας μήνας",MM:"%d μήνες",y:"ένας χρόνος",yy:"%d χρόνια"},dayOfMonthOrdinalParse:/\d{1,2}η/,ordinal:"%dη",week:{dow:1,doy:4}})}(n(381))},8348:function(e,t,n){!function(e){"use strict";e.defineLocale("en-au",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:0,doy:4}})}(n(381))},7925:function(e,t,n){!function(e){"use strict";e.defineLocale("en-ca",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"YYYY-MM-DD",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}})}(n(381))},2243:function(e,t,n){!function(e){"use strict";e.defineLocale("en-gb",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(381))},6436:function(e,t,n){!function(e){"use strict";e.defineLocale("en-ie",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(381))},7207:function(e,t,n){!function(e){"use strict";e.defineLocale("en-il",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}})}(n(381))},4175:function(e,t,n){!function(e){"use strict";e.defineLocale("en-in",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:0,doy:6}})}(n(381))},6319:function(e,t,n){!function(e){"use strict";e.defineLocale("en-nz",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(381))},1662:function(e,t,n){!function(e){"use strict";e.defineLocale("en-sg",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(381))},2915:function(e,t,n){!function(e){"use strict";e.defineLocale("eo",{months:"januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split("_"),monthsShort:"jan_feb_mart_apr_maj_jun_jul_aŭg_sept_okt_nov_dec".split("_"),weekdays:"dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato".split("_"),weekdaysShort:"dim_lun_mard_merk_ĵaŭ_ven_sab".split("_"),weekdaysMin:"di_lu_ma_me_ĵa_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"[la] D[-an de] MMMM, YYYY",LLL:"[la] D[-an de] MMMM, YYYY HH:mm",LLLL:"dddd[n], [la] D[-an de] MMMM, YYYY HH:mm",llll:"ddd, [la] D[-an de] MMM, YYYY HH:mm"},meridiemParse:/[ap]\.t\.m/i,isPM:function(e){return"p"===e.charAt(0).toLowerCase()},meridiem:function(e,t,n){return e>11?n?"p.t.m.":"P.T.M.":n?"a.t.m.":"A.T.M."},calendar:{sameDay:"[Hodiaŭ je] LT",nextDay:"[Morgaŭ je] LT",nextWeek:"dddd[n je] LT",lastDay:"[Hieraŭ je] LT",lastWeek:"[pasintan] dddd[n je] LT",sameElse:"L"},relativeTime:{future:"post %s",past:"antaŭ %s",s:"kelkaj sekundoj",ss:"%d sekundoj",m:"unu minuto",mm:"%d minutoj",h:"unu horo",hh:"%d horoj",d:"unu tago",dd:"%d tagoj",M:"unu monato",MM:"%d monatoj",y:"unu jaro",yy:"%d jaroj"},dayOfMonthOrdinalParse:/\d{1,2}a/,ordinal:"%da",week:{dow:1,doy:7}})}(n(381))},5251:function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),i=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],s=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-do",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,i){return e?/-MMM-/.test(i)?n[e.month()]:t[e.month()]:t},monthsRegex:s,monthsShortRegex:s,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:i,longMonthsParse:i,shortMonthsParse:i,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(381))},6112:function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),i=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],s=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-mx",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,i){return e?/-MMM-/.test(i)?n[e.month()]:t[e.month()]:t},monthsRegex:s,monthsShortRegex:s,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:i,longMonthsParse:i,shortMonthsParse:i,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:0,doy:4},invalidDate:"Fecha inválida"})}(n(381))},1146:function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),i=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],s=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-us",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,i){return e?/-MMM-/.test(i)?n[e.month()]:t[e.month()]:t},monthsRegex:s,monthsShortRegex:s,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:i,longMonthsParse:i,shortMonthsParse:i,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"MM/DD/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:0,doy:6}})}(n(381))},5655:function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),i=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],s=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,i){return e?/-MMM-/.test(i)?n[e.month()]:t[e.month()]:t},monthsRegex:s,monthsShortRegex:s,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:i,longMonthsParse:i,shortMonthsParse:i,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4},invalidDate:"Fecha inválida"})}(n(381))},5603:function(e,t,n){!function(e){"use strict";function t(e,t,n,i){var s={s:["mõne sekundi","mõni sekund","paar sekundit"],ss:[e+"sekundi",e+"sekundit"],m:["ühe minuti","üks minut"],mm:[e+" minuti",e+" minutit"],h:["ühe tunni","tund aega","üks tund"],hh:[e+" tunni",e+" tundi"],d:["ühe päeva","üks päev"],M:["kuu aja","kuu aega","üks kuu"],MM:[e+" kuu",e+" kuud"],y:["ühe aasta","aasta","üks aasta"],yy:[e+" aasta",e+" aastat"]};return t?s[n][2]?s[n][2]:s[n][1]:i?s[n][0]:s[n][1]}e.defineLocale("et",{months:"jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"),monthsShort:"jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"),weekdays:"pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split("_"),weekdaysShort:"P_E_T_K_N_R_L".split("_"),weekdaysMin:"P_E_T_K_N_R_L".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[Täna,] LT",nextDay:"[Homme,] LT",nextWeek:"[Järgmine] dddd LT",lastDay:"[Eile,] LT",lastWeek:"[Eelmine] dddd LT",sameElse:"L"},relativeTime:{future:"%s pärast",past:"%s tagasi",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:"%d päeva",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},7763:function(e,t,n){!function(e){"use strict";e.defineLocale("eu",{months:"urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"),monthsShort:"urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"),monthsParseExact:!0,weekdays:"igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"),weekdaysShort:"ig._al._ar._az._og._ol._lr.".split("_"),weekdaysMin:"ig_al_ar_az_og_ol_lr".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY[ko] MMMM[ren] D[a]",LLL:"YYYY[ko] MMMM[ren] D[a] HH:mm",LLLL:"dddd, YYYY[ko] MMMM[ren] D[a] HH:mm",l:"YYYY-M-D",ll:"YYYY[ko] MMM D[a]",lll:"YYYY[ko] MMM D[a] HH:mm",llll:"ddd, YYYY[ko] MMM D[a] HH:mm"},calendar:{sameDay:"[gaur] LT[etan]",nextDay:"[bihar] LT[etan]",nextWeek:"dddd LT[etan]",lastDay:"[atzo] LT[etan]",lastWeek:"[aurreko] dddd LT[etan]",sameElse:"L"},relativeTime:{future:"%s barru",past:"duela %s",s:"segundo batzuk",ss:"%d segundo",m:"minutu bat",mm:"%d minutu",h:"ordu bat",hh:"%d ordu",d:"egun bat",dd:"%d egun",M:"hilabete bat",MM:"%d hilabete",y:"urte bat",yy:"%d urte"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(381))},6959:function(e,t,n){!function(e){"use strict";var t={1:"۱",2:"۲",3:"۳",4:"۴",5:"۵",6:"۶",7:"۷",8:"۸",9:"۹",0:"۰"},n={"۱":"1","۲":"2","۳":"3","۴":"4","۵":"5","۶":"6","۷":"7","۸":"8","۹":"9","۰":"0"};e.defineLocale("fa",{months:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),monthsShort:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),weekdays:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysShort:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysMin:"ی_د_س_چ_پ_ج_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/قبل از ظهر|بعد از ظهر/,isPM:function(e){return/بعد از ظهر/.test(e)},meridiem:function(e,t,n){return e<12?"قبل از ظهر":"بعد از ظهر"},calendar:{sameDay:"[امروز ساعت] LT",nextDay:"[فردا ساعت] LT",nextWeek:"dddd [ساعت] LT",lastDay:"[دیروز ساعت] LT",lastWeek:"dddd [پیش] [ساعت] LT",sameElse:"L"},relativeTime:{future:"در %s",past:"%s پیش",s:"چند ثانیه",ss:"%d ثانیه",m:"یک دقیقه",mm:"%d دقیقه",h:"یک ساعت",hh:"%d ساعت",d:"یک روز",dd:"%d روز",M:"یک ماه",MM:"%d ماه",y:"یک سال",yy:"%d سال"},preparse:function(e){return e.replace(/[۰-۹]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},dayOfMonthOrdinalParse:/\d{1,2}م/,ordinal:"%dم",week:{dow:6,doy:12}})}(n(381))},1897:function(e,t,n){!function(e){"use strict";var t="nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" "),n=["nolla","yhden","kahden","kolmen","neljän","viiden","kuuden",t[7],t[8],t[9]];function i(e,i,s,r){var a="";switch(s){case"s":return r?"muutaman sekunnin":"muutama sekunti";case"ss":a=r?"sekunnin":"sekuntia";break;case"m":return r?"minuutin":"minuutti";case"mm":a=r?"minuutin":"minuuttia";break;case"h":return r?"tunnin":"tunti";case"hh":a=r?"tunnin":"tuntia";break;case"d":return r?"päivän":"päivä";case"dd":a=r?"päivän":"päivää";break;case"M":return r?"kuukauden":"kuukausi";case"MM":a=r?"kuukauden":"kuukautta";break;case"y":return r?"vuoden":"vuosi";case"yy":a=r?"vuoden":"vuotta"}return function(e,i){return e<10?i?n[e]:t[e]:e}(e,r)+" "+a}e.defineLocale("fi",{months:"tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),monthsShort:"tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),weekdays:"sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),weekdaysShort:"su_ma_ti_ke_to_pe_la".split("_"),weekdaysMin:"su_ma_ti_ke_to_pe_la".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"Do MMMM[ta] YYYY",LLL:"Do MMMM[ta] YYYY, [klo] HH.mm",LLLL:"dddd, Do MMMM[ta] YYYY, [klo] HH.mm",l:"D.M.YYYY",ll:"Do MMM YYYY",lll:"Do MMM YYYY, [klo] HH.mm",llll:"ddd, Do MMM YYYY, [klo] HH.mm"},calendar:{sameDay:"[tänään] [klo] LT",nextDay:"[huomenna] [klo] LT",nextWeek:"dddd [klo] LT",lastDay:"[eilen] [klo] LT",lastWeek:"[viime] dddd[na] [klo] LT",sameElse:"L"},relativeTime:{future:"%s päästä",past:"%s sitten",s:i,ss:i,m:i,mm:i,h:i,hh:i,d:i,dd:i,M:i,MM:i,y:i,yy:i},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},2549:function(e,t,n){!function(e){"use strict";e.defineLocale("fil",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"LT [ngayong araw]",nextDay:"[Bukas ng] LT",nextWeek:"LT [sa susunod na] dddd",lastDay:"LT [kahapon]",lastWeek:"LT [noong nakaraang] dddd",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",ss:"%d segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(381))},4694:function(e,t,n){!function(e){"use strict";e.defineLocale("fo",{months:"januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur".split("_"),weekdaysShort:"sun_mán_týs_mik_hós_frí_ley".split("_"),weekdaysMin:"su_má_tý_mi_hó_fr_le".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D. MMMM, YYYY HH:mm"},calendar:{sameDay:"[Í dag kl.] LT",nextDay:"[Í morgin kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[Í gjár kl.] LT",lastWeek:"[síðstu] dddd [kl] LT",sameElse:"L"},relativeTime:{future:"um %s",past:"%s síðani",s:"fá sekund",ss:"%d sekundir",m:"ein minuttur",mm:"%d minuttir",h:"ein tími",hh:"%d tímar",d:"ein dagur",dd:"%d dagar",M:"ein mánaður",MM:"%d mánaðir",y:"eitt ár",yy:"%d ár"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},3049:function(e,t,n){!function(e){"use strict";e.defineLocale("fr-ca",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}}})}(n(381))},2330:function(e,t,n){!function(e){"use strict";e.defineLocale("fr-ch",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}})}(n(381))},4470:function(e,t,n){!function(e){"use strict";var t=/(janv\.?|févr\.?|mars|avr\.?|mai|juin|juil\.?|août|sept\.?|oct\.?|nov\.?|déc\.?|janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i,n=[/^janv/i,/^févr/i,/^mars/i,/^avr/i,/^mai/i,/^juin/i,/^juil/i,/^août/i,/^sept/i,/^oct/i,/^nov/i,/^déc/i];e.defineLocale("fr",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsRegex:t,monthsShortRegex:t,monthsStrictRegex:/^(janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i,monthsShortStrictRegex:/(janv\.?|févr\.?|mars|avr\.?|mai|juin|juil\.?|août|sept\.?|oct\.?|nov\.?|déc\.?)/i,monthsParse:n,longMonthsParse:n,shortMonthsParse:n,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",w:"une semaine",ww:"%d semaines",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|)/,ordinal:function(e,t){switch(t){case"D":return e+(1===e?"er":"");default:case"M":case"Q":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}})}(n(381))},5044:function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.".split("_"),n="jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_");e.defineLocale("fy",{months:"jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber".split("_"),monthsShort:function(e,i){return e?/-MMM-/.test(i)?n[e.month()]:t[e.month()]:t},monthsParseExact:!0,weekdays:"snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon".split("_"),weekdaysShort:"si._mo._ti._wo._to._fr._so.".split("_"),weekdaysMin:"Si_Mo_Ti_Wo_To_Fr_So".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[hjoed om] LT",nextDay:"[moarn om] LT",nextWeek:"dddd [om] LT",lastDay:"[juster om] LT",lastWeek:"[ôfrûne] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oer %s",past:"%s lyn",s:"in pear sekonden",ss:"%d sekonden",m:"ien minút",mm:"%d minuten",h:"ien oere",hh:"%d oeren",d:"ien dei",dd:"%d dagen",M:"ien moanne",MM:"%d moannen",y:"ien jier",yy:"%d jierren"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(381))},9295:function(e,t,n){!function(e){"use strict";e.defineLocale("ga",{months:["Eanáir","Feabhra","Márta","Aibreán","Bealtaine","Meitheamh","Iúil","Lúnasa","Meán Fómhair","Deireadh Fómhair","Samhain","Nollaig"],monthsShort:["Ean","Feabh","Márt","Aib","Beal","Meith","Iúil","Lún","M.F.","D.F.","Samh","Noll"],monthsParseExact:!0,weekdays:["Dé Domhnaigh","Dé Luain","Dé Máirt","Dé Céadaoin","Déardaoin","Dé hAoine","Dé Sathairn"],weekdaysShort:["Domh","Luan","Máirt","Céad","Déar","Aoine","Sath"],weekdaysMin:["Do","Lu","Má","Cé","Dé","A","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Inniu ag] LT",nextDay:"[Amárach ag] LT",nextWeek:"dddd [ag] LT",lastDay:"[Inné ag] LT",lastWeek:"dddd [seo caite] [ag] LT",sameElse:"L"},relativeTime:{future:"i %s",past:"%s ó shin",s:"cúpla soicind",ss:"%d soicind",m:"nóiméad",mm:"%d nóiméad",h:"uair an chloig",hh:"%d uair an chloig",d:"lá",dd:"%d lá",M:"mí",MM:"%d míonna",y:"bliain",yy:"%d bliain"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){return e+(1===e?"d":e%10==2?"na":"mh")},week:{dow:1,doy:4}})}(n(381))},2101:function(e,t,n){!function(e){"use strict";e.defineLocale("gd",{months:["Am Faoilleach","An Gearran","Am Màrt","An Giblean","An Cèitean","An t-Ògmhios","An t-Iuchar","An Lùnastal","An t-Sultain","An Dàmhair","An t-Samhain","An Dùbhlachd"],monthsShort:["Faoi","Gear","Màrt","Gibl","Cèit","Ògmh","Iuch","Lùn","Sult","Dàmh","Samh","Dùbh"],monthsParseExact:!0,weekdays:["Didòmhnaich","Diluain","Dimàirt","Diciadain","Diardaoin","Dihaoine","Disathairne"],weekdaysShort:["Did","Dil","Dim","Dic","Dia","Dih","Dis"],weekdaysMin:["Dò","Lu","Mà","Ci","Ar","Ha","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[An-diugh aig] LT",nextDay:"[A-màireach aig] LT",nextWeek:"dddd [aig] LT",lastDay:"[An-dè aig] LT",lastWeek:"dddd [seo chaidh] [aig] LT",sameElse:"L"},relativeTime:{future:"ann an %s",past:"bho chionn %s",s:"beagan diogan",ss:"%d diogan",m:"mionaid",mm:"%d mionaidean",h:"uair",hh:"%d uairean",d:"latha",dd:"%d latha",M:"mìos",MM:"%d mìosan",y:"bliadhna",yy:"%d bliadhna"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){return e+(1===e?"d":e%10==2?"na":"mh")},week:{dow:1,doy:4}})}(n(381))},8794:function(e,t,n){!function(e){"use strict";e.defineLocale("gl",{months:"xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro".split("_"),monthsShort:"xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"domingo_luns_martes_mércores_xoves_venres_sábado".split("_"),weekdaysShort:"dom._lun._mar._mér._xov._ven._sáb.".split("_"),weekdaysMin:"do_lu_ma_mé_xo_ve_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoxe "+(1!==this.hours()?"ás":"á")+"] LT"},nextDay:function(){return"[mañá "+(1!==this.hours()?"ás":"á")+"] LT"},nextWeek:function(){return"dddd ["+(1!==this.hours()?"ás":"a")+"] LT"},lastDay:function(){return"[onte "+(1!==this.hours()?"á":"a")+"] LT"},lastWeek:function(){return"[o] dddd [pasado "+(1!==this.hours()?"ás":"a")+"] LT"},sameElse:"L"},relativeTime:{future:function(e){return 0===e.indexOf("un")?"n"+e:"en "+e},past:"hai %s",s:"uns segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"unha hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(381))},7884:function(e,t,n){!function(e){"use strict";function t(e,t,n,i){var s={s:["थोडया सॅकंडांनी","थोडे सॅकंड"],ss:[e+" सॅकंडांनी",e+" सॅकंड"],m:["एका मिणटान","एक मिनूट"],mm:[e+" मिणटांनी",e+" मिणटां"],h:["एका वरान","एक वर"],hh:[e+" वरांनी",e+" वरां"],d:["एका दिसान","एक दीस"],dd:[e+" दिसांनी",e+" दीस"],M:["एका म्हयन्यान","एक म्हयनो"],MM:[e+" म्हयन्यानी",e+" म्हयने"],y:["एका वर्सान","एक वर्स"],yy:[e+" वर्सांनी",e+" वर्सां"]};return i?s[n][0]:s[n][1]}e.defineLocale("gom-deva",{months:{standalone:"जानेवारी_फेब्रुवारी_मार्च_एप्रील_मे_जून_जुलय_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),format:"जानेवारीच्या_फेब्रुवारीच्या_मार्चाच्या_एप्रीलाच्या_मेयाच्या_जूनाच्या_जुलयाच्या_ऑगस्टाच्या_सप्टेंबराच्या_ऑक्टोबराच्या_नोव्हेंबराच्या_डिसेंबराच्या".split("_"),isFormat:/MMMM(\s)+D[oD]?/},monthsShort:"जाने._फेब्रु._मार्च_एप्री._मे_जून_जुल._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),monthsParseExact:!0,weekdays:"आयतार_सोमार_मंगळार_बुधवार_बिरेस्तार_सुक्रार_शेनवार".split("_"),weekdaysShort:"आयत._सोम._मंगळ._बुध._ब्रेस्त._सुक्र._शेन.".split("_"),weekdaysMin:"आ_सो_मं_बु_ब्रे_सु_शे".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"A h:mm [वाजतां]",LTS:"A h:mm:ss [वाजतां]",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY A h:mm [वाजतां]",LLLL:"dddd, MMMM Do, YYYY, A h:mm [वाजतां]",llll:"ddd, D MMM YYYY, A h:mm [वाजतां]"},calendar:{sameDay:"[आयज] LT",nextDay:"[फाल्यां] LT",nextWeek:"[फुडलो] dddd[,] LT",lastDay:"[काल] LT",lastWeek:"[फाटलो] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%s",past:"%s आदीं",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}(वेर)/,ordinal:function(e,t){return"D"===t?e+"वेर":e},week:{dow:0,doy:3},meridiemParse:/राती|सकाळीं|दनपारां|सांजे/,meridiemHour:function(e,t){return 12===e&&(e=0),"राती"===t?e<4?e:e+12:"सकाळीं"===t?e:"दनपारां"===t?e>12?e:e+12:"सांजे"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"राती":e<12?"सकाळीं":e<16?"दनपारां":e<20?"सांजे":"राती"}})}(n(381))},3168:function(e,t,n){!function(e){"use strict";function t(e,t,n,i){var s={s:["thoddea sekondamni","thodde sekond"],ss:[e+" sekondamni",e+" sekond"],m:["eka mintan","ek minut"],mm:[e+" mintamni",e+" mintam"],h:["eka voran","ek vor"],hh:[e+" voramni",e+" voram"],d:["eka disan","ek dis"],dd:[e+" disamni",e+" dis"],M:["eka mhoinean","ek mhoino"],MM:[e+" mhoineamni",e+" mhoine"],y:["eka vorsan","ek voros"],yy:[e+" vorsamni",e+" vorsam"]};return i?s[n][0]:s[n][1]}e.defineLocale("gom-latn",{months:{standalone:"Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr".split("_"),format:"Janerachea_Febrerachea_Marsachea_Abrilachea_Maiachea_Junachea_Julaiachea_Agostachea_Setembrachea_Otubrachea_Novembrachea_Dezembrachea".split("_"),isFormat:/MMMM(\s)+D[oD]?/},monthsShort:"Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Aitar_Somar_Mongllar_Budhvar_Birestar_Sukrar_Son'var".split("_"),weekdaysShort:"Ait._Som._Mon._Bud._Bre._Suk._Son.".split("_"),weekdaysMin:"Ai_Sm_Mo_Bu_Br_Su_Sn".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"A h:mm [vazta]",LTS:"A h:mm:ss [vazta]",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY A h:mm [vazta]",LLLL:"dddd, MMMM Do, YYYY, A h:mm [vazta]",llll:"ddd, D MMM YYYY, A h:mm [vazta]"},calendar:{sameDay:"[Aiz] LT",nextDay:"[Faleam] LT",nextWeek:"[Fuddlo] dddd[,] LT",lastDay:"[Kal] LT",lastWeek:"[Fattlo] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%s",past:"%s adim",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}(er)/,ordinal:function(e,t){return"D"===t?e+"er":e},week:{dow:0,doy:3},meridiemParse:/rati|sokallim|donparam|sanje/,meridiemHour:function(e,t){return 12===e&&(e=0),"rati"===t?e<4?e:e+12:"sokallim"===t?e:"donparam"===t?e>12?e:e+12:"sanje"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"rati":e<12?"sokallim":e<16?"donparam":e<20?"sanje":"rati"}})}(n(381))},5349:function(e,t,n){!function(e){"use strict";var t={1:"૧",2:"૨",3:"૩",4:"૪",5:"૫",6:"૬",7:"૭",8:"૮",9:"૯",0:"૦"},n={"૧":"1","૨":"2","૩":"3","૪":"4","૫":"5","૬":"6","૭":"7","૮":"8","૯":"9","૦":"0"};e.defineLocale("gu",{months:"જાન્યુઆરી_ફેબ્રુઆરી_માર્ચ_એપ્રિલ_મે_જૂન_જુલાઈ_ઑગસ્ટ_સપ્ટેમ્બર_ઑક્ટ્બર_નવેમ્બર_ડિસેમ્બર".split("_"),monthsShort:"જાન્યુ._ફેબ્રુ._માર્ચ_એપ્રિ._મે_જૂન_જુલા._ઑગ._સપ્ટે._ઑક્ટ્._નવે._ડિસે.".split("_"),monthsParseExact:!0,weekdays:"રવિવાર_સોમવાર_મંગળવાર_બુધ્વાર_ગુરુવાર_શુક્રવાર_શનિવાર".split("_"),weekdaysShort:"રવિ_સોમ_મંગળ_બુધ્_ગુરુ_શુક્ર_શનિ".split("_"),weekdaysMin:"ર_સો_મં_બુ_ગુ_શુ_શ".split("_"),longDateFormat:{LT:"A h:mm વાગ્યે",LTS:"A h:mm:ss વાગ્યે",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm વાગ્યે",LLLL:"dddd, D MMMM YYYY, A h:mm વાગ્યે"},calendar:{sameDay:"[આજ] LT",nextDay:"[કાલે] LT",nextWeek:"dddd, LT",lastDay:"[ગઇકાલે] LT",lastWeek:"[પાછલા] dddd, LT",sameElse:"L"},relativeTime:{future:"%s મા",past:"%s પહેલા",s:"અમુક પળો",ss:"%d સેકંડ",m:"એક મિનિટ",mm:"%d મિનિટ",h:"એક કલાક",hh:"%d કલાક",d:"એક દિવસ",dd:"%d દિવસ",M:"એક મહિનો",MM:"%d મહિનો",y:"એક વર્ષ",yy:"%d વર્ષ"},preparse:function(e){return e.replace(/[૧૨૩૪૫૬૭૮૯૦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/રાત|બપોર|સવાર|સાંજ/,meridiemHour:function(e,t){return 12===e&&(e=0),"રાત"===t?e<4?e:e+12:"સવાર"===t?e:"બપોર"===t?e>=10?e:e+12:"સાંજ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"રાત":e<10?"સવાર":e<17?"બપોર":e<20?"સાંજ":"રાત"},week:{dow:0,doy:6}})}(n(381))},4206:function(e,t,n){!function(e){"use strict";e.defineLocale("he",{months:"ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),monthsShort:"ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),weekdays:"ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),weekdaysShort:"א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),weekdaysMin:"א_ב_ג_ד_ה_ו_ש".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [ב]MMMM YYYY",LLL:"D [ב]MMMM YYYY HH:mm",LLLL:"dddd, D [ב]MMMM YYYY HH:mm",l:"D/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[היום ב־]LT",nextDay:"[מחר ב־]LT",nextWeek:"dddd [בשעה] LT",lastDay:"[אתמול ב־]LT",lastWeek:"[ביום] dddd [האחרון בשעה] LT",sameElse:"L"},relativeTime:{future:"בעוד %s",past:"לפני %s",s:"מספר שניות",ss:"%d שניות",m:"דקה",mm:"%d דקות",h:"שעה",hh:function(e){return 2===e?"שעתיים":e+" שעות"},d:"יום",dd:function(e){return 2===e?"יומיים":e+" ימים"},M:"חודש",MM:function(e){return 2===e?"חודשיים":e+" חודשים"},y:"שנה",yy:function(e){return 2===e?"שנתיים":e%10==0&&10!==e?e+" שנה":e+" שנים"}},meridiemParse:/אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,isPM:function(e){return/^(אחה"צ|אחרי הצהריים|בערב)$/.test(e)},meridiem:function(e,t,n){return e<5?"לפנות בוקר":e<10?"בבוקר":e<12?n?'לפנה"צ':"לפני הצהריים":e<18?n?'אחה"צ':"אחרי הצהריים":"בערב"}})}(n(381))},2819:function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"},i=[/^जन/i,/^फ़र|फर/i,/^मार्च/i,/^अप्रै/i,/^मई/i,/^जून/i,/^जुल/i,/^अग/i,/^सितं|सित/i,/^अक्टू/i,/^नव|नवं/i,/^दिसं|दिस/i];e.defineLocale("hi",{months:{format:"जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"),standalone:"जनवरी_फरवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितंबर_अक्टूबर_नवंबर_दिसंबर".split("_")},monthsShort:"जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"),weekdays:"रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm बजे",LTS:"A h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm बजे",LLLL:"dddd, D MMMM YYYY, A h:mm बजे"},monthsParse:i,longMonthsParse:i,shortMonthsParse:[/^जन/i,/^फ़र/i,/^मार्च/i,/^अप्रै/i,/^मई/i,/^जून/i,/^जुल/i,/^अग/i,/^सित/i,/^अक्टू/i,/^नव/i,/^दिस/i],monthsRegex:/^(जनवरी|जन\.?|फ़रवरी|फरवरी|फ़र\.?|मार्च?|अप्रैल|अप्रै\.?|मई?|जून?|जुलाई|जुल\.?|अगस्त|अग\.?|सितम्बर|सितंबर|सित\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर|नव\.?|दिसम्बर|दिसंबर|दिस\.?)/i,monthsShortRegex:/^(जनवरी|जन\.?|फ़रवरी|फरवरी|फ़र\.?|मार्च?|अप्रैल|अप्रै\.?|मई?|जून?|जुलाई|जुल\.?|अगस्त|अग\.?|सितम्बर|सितंबर|सित\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर|नव\.?|दिसम्बर|दिसंबर|दिस\.?)/i,monthsStrictRegex:/^(जनवरी?|फ़रवरी|फरवरी?|मार्च?|अप्रैल?|मई?|जून?|जुलाई?|अगस्त?|सितम्बर|सितंबर|सित?\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर?|दिसम्बर|दिसंबर?)/i,monthsShortStrictRegex:/^(जन\.?|फ़र\.?|मार्च?|अप्रै\.?|मई?|जून?|जुल\.?|अग\.?|सित\.?|अक्टू\.?|नव\.?|दिस\.?)/i,calendar:{sameDay:"[आज] LT",nextDay:"[कल] LT",nextWeek:"dddd, LT",lastDay:"[कल] LT",lastWeek:"[पिछले] dddd, LT",sameElse:"L"},relativeTime:{future:"%s में",past:"%s पहले",s:"कुछ ही क्षण",ss:"%d सेकंड",m:"एक मिनट",mm:"%d मिनट",h:"एक घंटा",hh:"%d घंटे",d:"एक दिन",dd:"%d दिन",M:"एक महीने",MM:"%d महीने",y:"एक वर्ष",yy:"%d वर्ष"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/रात|सुबह|दोपहर|शाम/,meridiemHour:function(e,t){return 12===e&&(e=0),"रात"===t?e<4?e:e+12:"सुबह"===t?e:"दोपहर"===t?e>=10?e:e+12:"शाम"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"रात":e<10?"सुबह":e<17?"दोपहर":e<20?"शाम":"रात"},week:{dow:0,doy:6}})}(n(381))},316:function(e,t,n){!function(e){"use strict";function t(e,t,n){var i=e+" ";switch(n){case"ss":return i+(1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi");case"m":return t?"jedna minuta":"jedne minute";case"mm":return i+(1===e?"minuta":2===e||3===e||4===e?"minute":"minuta");case"h":return t?"jedan sat":"jednog sata";case"hh":return i+(1===e?"sat":2===e||3===e||4===e?"sata":"sati");case"dd":return i+(1===e?"dan":"dana");case"MM":return i+(1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci");case"yy":return i+(1===e?"godina":2===e||3===e||4===e?"godine":"godina")}}e.defineLocale("hr",{months:{format:"siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca".split("_"),standalone:"siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_")},monthsShort:"sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"Do MMMM YYYY",LLL:"Do MMMM YYYY H:mm",LLLL:"dddd, Do MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:return"[prošlu] [nedjelju] [u] LT";case 3:return"[prošlu] [srijedu] [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:t,m:t,mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(381))},2138:function(e,t,n){!function(e){"use strict";var t="vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" ");function n(e,t,n,i){var s=e;switch(n){case"s":return i||t?"néhány másodperc":"néhány másodperce";case"ss":return s+(i||t)?" másodperc":" másodperce";case"m":return"egy"+(i||t?" perc":" perce");case"mm":return s+(i||t?" perc":" perce");case"h":return"egy"+(i||t?" óra":" órája");case"hh":return s+(i||t?" óra":" órája");case"d":return"egy"+(i||t?" nap":" napja");case"dd":return s+(i||t?" nap":" napja");case"M":return"egy"+(i||t?" hónap":" hónapja");case"MM":return s+(i||t?" hónap":" hónapja");case"y":return"egy"+(i||t?" év":" éve");case"yy":return s+(i||t?" év":" éve")}return""}function i(e){return(e?"":"[múlt] ")+"["+t[this.day()]+"] LT[-kor]"}e.defineLocale("hu",{months:"január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),monthsShort:"jan._feb._márc._ápr._máj._jún._júl._aug._szept._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),weekdaysShort:"vas_hét_kedd_sze_csüt_pén_szo".split("_"),weekdaysMin:"v_h_k_sze_cs_p_szo".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY. MMMM D.",LLL:"YYYY. MMMM D. H:mm",LLLL:"YYYY. MMMM D., dddd H:mm"},meridiemParse:/de|du/i,isPM:function(e){return"u"===e.charAt(1).toLowerCase()},meridiem:function(e,t,n){return e<12?!0===n?"de":"DE":!0===n?"du":"DU"},calendar:{sameDay:"[ma] LT[-kor]",nextDay:"[holnap] LT[-kor]",nextWeek:function(){return i.call(this,!0)},lastDay:"[tegnap] LT[-kor]",lastWeek:function(){return i.call(this,!1)},sameElse:"L"},relativeTime:{future:"%s múlva",past:"%s",s:n,ss:n,m:n,mm:n,h:n,hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},1423:function(e,t,n){!function(e){"use strict";e.defineLocale("hy-am",{months:{format:"հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի".split("_"),standalone:"հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր".split("_")},monthsShort:"հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ".split("_"),weekdays:"կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ".split("_"),weekdaysShort:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),weekdaysMin:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY թ.",LLL:"D MMMM YYYY թ., HH:mm",LLLL:"dddd, D MMMM YYYY թ., HH:mm"},calendar:{sameDay:"[այսօր] LT",nextDay:"[վաղը] LT",lastDay:"[երեկ] LT",nextWeek:function(){return"dddd [օրը ժամը] LT"},lastWeek:function(){return"[անցած] dddd [օրը ժամը] LT"},sameElse:"L"},relativeTime:{future:"%s հետո",past:"%s առաջ",s:"մի քանի վայրկյան",ss:"%d վայրկյան",m:"րոպե",mm:"%d րոպե",h:"ժամ",hh:"%d ժամ",d:"օր",dd:"%d օր",M:"ամիս",MM:"%d ամիս",y:"տարի",yy:"%d տարի"},meridiemParse:/գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,isPM:function(e){return/^(ցերեկվա|երեկոյան)$/.test(e)},meridiem:function(e){return e<4?"գիշերվա":e<12?"առավոտվա":e<17?"ցերեկվա":"երեկոյան"},dayOfMonthOrdinalParse:/\d{1,2}|\d{1,2}-(ին|րդ)/,ordinal:function(e,t){switch(t){case"DDD":case"w":case"W":case"DDDo":return 1===e?e+"-ին":e+"-րդ";default:return e}},week:{dow:1,doy:7}})}(n(381))},9218:function(e,t,n){!function(e){"use strict";e.defineLocale("id",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des".split("_"),weekdays:"Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),weekdaysShort:"Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|siang|sore|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"siang"===t?e>=11?e:e+12:"sore"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"siang":e<19?"sore":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Besok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kemarin pukul] LT",lastWeek:"dddd [lalu pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lalu",s:"beberapa detik",ss:"%d detik",m:"semenit",mm:"%d menit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:0,doy:6}})}(n(381))},135:function(e,t,n){!function(e){"use strict";function t(e){return e%100==11||e%10!=1}function n(e,n,i,s){var r=e+" ";switch(i){case"s":return n||s?"nokkrar sekúndur":"nokkrum sekúndum";case"ss":return t(e)?r+(n||s?"sekúndur":"sekúndum"):r+"sekúnda";case"m":return n?"mínúta":"mínútu";case"mm":return t(e)?r+(n||s?"mínútur":"mínútum"):n?r+"mínúta":r+"mínútu";case"hh":return t(e)?r+(n||s?"klukkustundir":"klukkustundum"):r+"klukkustund";case"d":return n?"dagur":s?"dag":"degi";case"dd":return t(e)?n?r+"dagar":r+(s?"daga":"dögum"):n?r+"dagur":r+(s?"dag":"degi");case"M":return n?"mánuður":s?"mánuð":"mánuði";case"MM":return t(e)?n?r+"mánuðir":r+(s?"mánuði":"mánuðum"):n?r+"mánuður":r+(s?"mánuð":"mánuði");case"y":return n||s?"ár":"ári";case"yy":return t(e)?r+(n||s?"ár":"árum"):r+(n||s?"ár":"ári")}}e.defineLocale("is",{months:"janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),monthsShort:"jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),weekdays:"sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),weekdaysShort:"sun_mán_þri_mið_fim_fös_lau".split("_"),weekdaysMin:"Su_Má_Þr_Mi_Fi_Fö_La".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd, D. MMMM YYYY [kl.] H:mm"},calendar:{sameDay:"[í dag kl.] LT",nextDay:"[á morgun kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[í gær kl.] LT",lastWeek:"[síðasta] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"eftir %s",past:"fyrir %s síðan",s:n,ss:n,m:n,mm:n,h:"klukkustund",hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},150:function(e,t,n){!function(e){"use strict";e.defineLocale("it-ch",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:function(){return 0===this.day()?"[la scorsa] dddd [alle] LT":"[lo scorso] dddd [alle] LT"},sameElse:"L"},relativeTime:{future:function(e){return(/^[0-9].+$/.test(e)?"tra":"in")+" "+e},past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(381))},626:function(e,t,n){!function(e){"use strict";e.defineLocale("it",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:function(){return"[Oggi a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},nextDay:function(){return"[Domani a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},nextWeek:function(){return"dddd [a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},lastDay:function(){return"[Ieri a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},lastWeek:function(){return 0===this.day()?"[La scorsa] dddd [a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT":"[Lo scorso] dddd [a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},sameElse:"L"},relativeTime:{future:"tra %s",past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",w:"una settimana",ww:"%d settimane",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(381))},9183:function(e,t,n){!function(e){"use strict";e.defineLocale("ja",{eras:[{since:"2019-05-01",offset:1,name:"令和",narrow:"㋿",abbr:"R"},{since:"1989-01-08",until:"2019-04-30",offset:1,name:"平成",narrow:"㍻",abbr:"H"},{since:"1926-12-25",until:"1989-01-07",offset:1,name:"昭和",narrow:"㍼",abbr:"S"},{since:"1912-07-30",until:"1926-12-24",offset:1,name:"大正",narrow:"㍽",abbr:"T"},{since:"1873-01-01",until:"1912-07-29",offset:6,name:"明治",narrow:"㍾",abbr:"M"},{since:"0001-01-01",until:"1873-12-31",offset:1,name:"西暦",narrow:"AD",abbr:"AD"},{since:"0000-12-31",until:-1/0,offset:1,name:"紀元前",narrow:"BC",abbr:"BC"}],eraYearOrdinalRegex:/(元|\d+)年/,eraYearOrdinalParse:function(e,t){return"元"===t[1]?1:parseInt(t[1]||e,10)},months:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),weekdaysShort:"日_月_火_水_木_金_土".split("_"),weekdaysMin:"日_月_火_水_木_金_土".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日 dddd HH:mm",l:"YYYY/MM/DD",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日(ddd) HH:mm"},meridiemParse:/午前|午後/i,isPM:function(e){return"午後"===e},meridiem:function(e,t,n){return e<12?"午前":"午後"},calendar:{sameDay:"[今日] LT",nextDay:"[明日] LT",nextWeek:function(e){return e.week()!==this.week()?"[来週]dddd LT":"dddd LT"},lastDay:"[昨日] LT",lastWeek:function(e){return this.week()!==e.week()?"[先週]dddd LT":"dddd LT"},sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}日/,ordinal:function(e,t){switch(t){case"y":return 1===e?"元年":e+"年";case"d":case"D":case"DDD":return e+"日";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"数秒",ss:"%d秒",m:"1分",mm:"%d分",h:"1時間",hh:"%d時間",d:"1日",dd:"%d日",M:"1ヶ月",MM:"%dヶ月",y:"1年",yy:"%d年"}})}(n(381))},4286:function(e,t,n){!function(e){"use strict";e.defineLocale("jv",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des".split("_"),weekdays:"Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu".split("_"),weekdaysShort:"Min_Sen_Sel_Reb_Kem_Jem_Sep".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sp".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/enjing|siyang|sonten|ndalu/,meridiemHour:function(e,t){return 12===e&&(e=0),"enjing"===t?e:"siyang"===t?e>=11?e:e+12:"sonten"===t||"ndalu"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"enjing":e<15?"siyang":e<19?"sonten":"ndalu"},calendar:{sameDay:"[Dinten puniko pukul] LT",nextDay:"[Mbenjang pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kala wingi pukul] LT",lastWeek:"dddd [kepengker pukul] LT",sameElse:"L"},relativeTime:{future:"wonten ing %s",past:"%s ingkang kepengker",s:"sawetawis detik",ss:"%d detik",m:"setunggal menit",mm:"%d menit",h:"setunggal jam",hh:"%d jam",d:"sedinten",dd:"%d dinten",M:"sewulan",MM:"%d wulan",y:"setaun",yy:"%d taun"},week:{dow:1,doy:7}})}(n(381))},2105:function(e,t,n){!function(e){"use strict";e.defineLocale("ka",{months:"იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი".split("_"),monthsShort:"იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split("_"),weekdays:{standalone:"კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი".split("_"),format:"კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს".split("_"),isFormat:/(წინა|შემდეგ)/},weekdaysShort:"კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"),weekdaysMin:"კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[დღეს] LT[-ზე]",nextDay:"[ხვალ] LT[-ზე]",lastDay:"[გუშინ] LT[-ზე]",nextWeek:"[შემდეგ] dddd LT[-ზე]",lastWeek:"[წინა] dddd LT-ზე",sameElse:"L"},relativeTime:{future:function(e){return e.replace(/(წამ|წუთ|საათ|წელ|დღ|თვ)(ი|ე)/,(function(e,t,n){return"ი"===n?t+"ში":t+n+"ში"}))},past:function(e){return/(წამი|წუთი|საათი|დღე|თვე)/.test(e)?e.replace(/(ი|ე)$/,"ის წინ"):/წელი/.test(e)?e.replace(/წელი$/,"წლის წინ"):e},s:"რამდენიმე წამი",ss:"%d წამი",m:"წუთი",mm:"%d წუთი",h:"საათი",hh:"%d საათი",d:"დღე",dd:"%d დღე",M:"თვე",MM:"%d თვე",y:"წელი",yy:"%d წელი"},dayOfMonthOrdinalParse:/0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,ordinal:function(e){return 0===e?e:1===e?e+"-ლი":e<20||e<=100&&e%20==0||e%100==0?"მე-"+e:e+"-ე"},week:{dow:1,doy:7}})}(n(381))},7772:function(e,t,n){!function(e){"use strict";var t={0:"-ші",1:"-ші",2:"-ші",3:"-ші",4:"-ші",5:"-ші",6:"-шы",7:"-ші",8:"-ші",9:"-шы",10:"-шы",20:"-шы",30:"-шы",40:"-шы",50:"-ші",60:"-шы",70:"-ші",80:"-ші",90:"-шы",100:"-ші"};e.defineLocale("kk",{months:"қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан".split("_"),monthsShort:"қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел".split("_"),weekdays:"жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі".split("_"),weekdaysShort:"жек_дүй_сей_сәр_бей_жұм_сен".split("_"),weekdaysMin:"жк_дй_сй_ср_бй_жм_сн".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгін сағат] LT",nextDay:"[Ертең сағат] LT",nextWeek:"dddd [сағат] LT",lastDay:"[Кеше сағат] LT",lastWeek:"[Өткен аптаның] dddd [сағат] LT",sameElse:"L"},relativeTime:{future:"%s ішінде",past:"%s бұрын",s:"бірнеше секунд",ss:"%d секунд",m:"бір минут",mm:"%d минут",h:"бір сағат",hh:"%d сағат",d:"бір күн",dd:"%d күн",M:"бір ай",MM:"%d ай",y:"бір жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(ші|шы)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(381))},8758:function(e,t,n){!function(e){"use strict";var t={1:"១",2:"២",3:"៣",4:"៤",5:"៥",6:"៦",7:"៧",8:"៨",9:"៩",0:"០"},n={"១":"1","២":"2","៣":"3","៤":"4","៥":"5","៦":"6","៧":"7","៨":"8","៩":"9","០":"0"};e.defineLocale("km",{months:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),monthsShort:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),weekdays:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),weekdaysShort:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysMin:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ព្រឹក|ល្ងាច/,isPM:function(e){return"ល្ងាច"===e},meridiem:function(e,t,n){return e<12?"ព្រឹក":"ល្ងាច"},calendar:{sameDay:"[ថ្ងៃនេះ ម៉ោង] LT",nextDay:"[ស្អែក ម៉ោង] LT",nextWeek:"dddd [ម៉ោង] LT",lastDay:"[ម្សិលមិញ ម៉ោង] LT",lastWeek:"dddd [សប្តាហ៍មុន] [ម៉ោង] LT",sameElse:"L"},relativeTime:{future:"%sទៀត",past:"%sមុន",s:"ប៉ុន្មានវិនាទី",ss:"%d វិនាទី",m:"មួយនាទី",mm:"%d នាទី",h:"មួយម៉ោង",hh:"%d ម៉ោង",d:"មួយថ្ងៃ",dd:"%d ថ្ងៃ",M:"មួយខែ",MM:"%d ខែ",y:"មួយឆ្នាំ",yy:"%d ឆ្នាំ"},dayOfMonthOrdinalParse:/ទី\d{1,2}/,ordinal:"ទី%d",preparse:function(e){return e.replace(/[១២៣៤៥៦៧៨៩០]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},week:{dow:1,doy:4}})}(n(381))},9282:function(e,t,n){!function(e){"use strict";var t={1:"೧",2:"೨",3:"೩",4:"೪",5:"೫",6:"೬",7:"೭",8:"೮",9:"೯",0:"೦"},n={"೧":"1","೨":"2","೩":"3","೪":"4","೫":"5","೬":"6","೭":"7","೮":"8","೯":"9","೦":"0"};e.defineLocale("kn",{months:"ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್".split("_"),monthsShort:"ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂ_ಅಕ್ಟೋ_ನವೆಂ_ಡಿಸೆಂ".split("_"),monthsParseExact:!0,weekdays:"ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ".split("_"),weekdaysShort:"ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ".split("_"),weekdaysMin:"ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[ಇಂದು] LT",nextDay:"[ನಾಳೆ] LT",nextWeek:"dddd, LT",lastDay:"[ನಿನ್ನೆ] LT",lastWeek:"[ಕೊನೆಯ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ನಂತರ",past:"%s ಹಿಂದೆ",s:"ಕೆಲವು ಕ್ಷಣಗಳು",ss:"%d ಸೆಕೆಂಡುಗಳು",m:"ಒಂದು ನಿಮಿಷ",mm:"%d ನಿಮಿಷ",h:"ಒಂದು ಗಂಟೆ",hh:"%d ಗಂಟೆ",d:"ಒಂದು ದಿನ",dd:"%d ದಿನ",M:"ಒಂದು ತಿಂಗಳು",MM:"%d ತಿಂಗಳು",y:"ಒಂದು ವರ್ಷ",yy:"%d ವರ್ಷ"},preparse:function(e){return e.replace(/[೧೨೩೪೫೬೭೮೯೦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ರಾತ್ರಿ"===t?e<4?e:e+12:"ಬೆಳಿಗ್ಗೆ"===t?e:"ಮಧ್ಯಾಹ್ನ"===t?e>=10?e:e+12:"ಸಂಜೆ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"ರಾತ್ರಿ":e<10?"ಬೆಳಿಗ್ಗೆ":e<17?"ಮಧ್ಯಾಹ್ನ":e<20?"ಸಂಜೆ":"ರಾತ್ರಿ"},dayOfMonthOrdinalParse:/\d{1,2}(ನೇ)/,ordinal:function(e){return e+"ನೇ"},week:{dow:0,doy:6}})}(n(381))},3730:function(e,t,n){!function(e){"use strict";e.defineLocale("ko",{months:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),monthsShort:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),weekdays:"일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),weekdaysShort:"일_월_화_수_목_금_토".split("_"),weekdaysMin:"일_월_화_수_목_금_토".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY년 MMMM D일",LLL:"YYYY년 MMMM D일 A h:mm",LLLL:"YYYY년 MMMM D일 dddd A h:mm",l:"YYYY.MM.DD.",ll:"YYYY년 MMMM D일",lll:"YYYY년 MMMM D일 A h:mm",llll:"YYYY년 MMMM D일 dddd A h:mm"},calendar:{sameDay:"오늘 LT",nextDay:"내일 LT",nextWeek:"dddd LT",lastDay:"어제 LT",lastWeek:"지난주 dddd LT",sameElse:"L"},relativeTime:{future:"%s 후",past:"%s 전",s:"몇 초",ss:"%d초",m:"1분",mm:"%d분",h:"한 시간",hh:"%d시간",d:"하루",dd:"%d일",M:"한 달",MM:"%d달",y:"일 년",yy:"%d년"},dayOfMonthOrdinalParse:/\d{1,2}(일|월|주)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"일";case"M":return e+"월";case"w":case"W":return e+"주";default:return e}},meridiemParse:/오전|오후/,isPM:function(e){return"오후"===e},meridiem:function(e,t,n){return e<12?"오전":"오후"}})}(n(381))},1408:function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},i=["کانونی دووەم","شوبات","ئازار","نیسان","ئایار","حوزەیران","تەمموز","ئاب","ئەیلوول","تشرینی یەكەم","تشرینی دووەم","كانونی یەکەم"];e.defineLocale("ku",{months:i,monthsShort:i,weekdays:"یه‌كشه‌ممه‌_دووشه‌ممه‌_سێشه‌ممه‌_چوارشه‌ممه‌_پێنجشه‌ممه‌_هه‌ینی_شه‌ممه‌".split("_"),weekdaysShort:"یه‌كشه‌م_دووشه‌م_سێشه‌م_چوارشه‌م_پێنجشه‌م_هه‌ینی_شه‌ممه‌".split("_"),weekdaysMin:"ی_د_س_چ_پ_ه_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ئێواره‌|به‌یانی/,isPM:function(e){return/ئێواره‌/.test(e)},meridiem:function(e,t,n){return e<12?"به‌یانی":"ئێواره‌"},calendar:{sameDay:"[ئه‌مرۆ كاتژمێر] LT",nextDay:"[به‌یانی كاتژمێر] LT",nextWeek:"dddd [كاتژمێر] LT",lastDay:"[دوێنێ كاتژمێر] LT",lastWeek:"dddd [كاتژمێر] LT",sameElse:"L"},relativeTime:{future:"له‌ %s",past:"%s",s:"چه‌ند چركه‌یه‌ك",ss:"چركه‌ %d",m:"یه‌ك خوله‌ك",mm:"%d خوله‌ك",h:"یه‌ك كاتژمێر",hh:"%d كاتژمێر",d:"یه‌ك ڕۆژ",dd:"%d ڕۆژ",M:"یه‌ك مانگ",MM:"%d مانگ",y:"یه‌ك ساڵ",yy:"%d ساڵ"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(381))},3291:function(e,t,n){!function(e){"use strict";var t={0:"-чү",1:"-чи",2:"-чи",3:"-чү",4:"-чү",5:"-чи",6:"-чы",7:"-чи",8:"-чи",9:"-чу",10:"-чу",20:"-чы",30:"-чу",40:"-чы",50:"-чү",60:"-чы",70:"-чи",80:"-чи",90:"-чу",100:"-чү"};e.defineLocale("ky",{months:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),monthsShort:"янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split("_"),weekdays:"Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби".split("_"),weekdaysShort:"Жек_Дүй_Шей_Шар_Бей_Жум_Ише".split("_"),weekdaysMin:"Жк_Дй_Шй_Шр_Бй_Жм_Иш".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгүн саат] LT",nextDay:"[Эртең саат] LT",nextWeek:"dddd [саат] LT",lastDay:"[Кечээ саат] LT",lastWeek:"[Өткөн аптанын] dddd [күнү] [саат] LT",sameElse:"L"},relativeTime:{future:"%s ичинде",past:"%s мурун",s:"бирнече секунд",ss:"%d секунд",m:"бир мүнөт",mm:"%d мүнөт",h:"бир саат",hh:"%d саат",d:"бир күн",dd:"%d күн",M:"бир ай",MM:"%d ай",y:"бир жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(чи|чы|чү|чу)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(381))},6841:function(e,t,n){!function(e){"use strict";function t(e,t,n,i){var s={m:["eng Minutt","enger Minutt"],h:["eng Stonn","enger Stonn"],d:["een Dag","engem Dag"],M:["ee Mount","engem Mount"],y:["ee Joer","engem Joer"]};return t?s[n][0]:s[n][1]}function n(e){if(e=parseInt(e,10),isNaN(e))return!1;if(e<0)return!0;if(e<10)return 4<=e&&e<=7;if(e<100){var t=e%10;return n(0===t?e/10:t)}if(e<1e4){for(;e>=10;)e/=10;return n(e)}return n(e/=1e3)}e.defineLocale("lb",{months:"Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split("_"),weekdaysShort:"So._Mé._Dë._Më._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mé_Dë_Më_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm [Auer]",LTS:"H:mm:ss [Auer]",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm [Auer]",LLLL:"dddd, D. MMMM YYYY H:mm [Auer]"},calendar:{sameDay:"[Haut um] LT",sameElse:"L",nextDay:"[Muer um] LT",nextWeek:"dddd [um] LT",lastDay:"[Gëschter um] LT",lastWeek:function(){switch(this.day()){case 2:case 4:return"[Leschten] dddd [um] LT";default:return"[Leschte] dddd [um] LT"}}},relativeTime:{future:function(e){return n(e.substr(0,e.indexOf(" ")))?"a "+e:"an "+e},past:function(e){return n(e.substr(0,e.indexOf(" ")))?"viru "+e:"virun "+e},s:"e puer Sekonnen",ss:"%d Sekonnen",m:t,mm:"%d Minutten",h:t,hh:"%d Stonnen",d:t,dd:"%d Deeg",M:t,MM:"%d Méint",y:t,yy:"%d Joer"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},5466:function(e,t,n){!function(e){"use strict";e.defineLocale("lo",{months:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),monthsShort:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),weekdays:"ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysShort:"ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysMin:"ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"ວັນdddd D MMMM YYYY HH:mm"},meridiemParse:/ຕອນເຊົ້າ|ຕອນແລງ/,isPM:function(e){return"ຕອນແລງ"===e},meridiem:function(e,t,n){return e<12?"ຕອນເຊົ້າ":"ຕອນແລງ"},calendar:{sameDay:"[ມື້ນີ້ເວລາ] LT",nextDay:"[ມື້ອື່ນເວລາ] LT",nextWeek:"[ວັນ]dddd[ໜ້າເວລາ] LT",lastDay:"[ມື້ວານນີ້ເວລາ] LT",lastWeek:"[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT",sameElse:"L"},relativeTime:{future:"ອີກ %s",past:"%sຜ່ານມາ",s:"ບໍ່ເທົ່າໃດວິນາທີ",ss:"%d ວິນາທີ",m:"1 ນາທີ",mm:"%d ນາທີ",h:"1 ຊົ່ວໂມງ",hh:"%d ຊົ່ວໂມງ",d:"1 ມື້",dd:"%d ມື້",M:"1 ເດືອນ",MM:"%d ເດືອນ",y:"1 ປີ",yy:"%d ປີ"},dayOfMonthOrdinalParse:/(ທີ່)\d{1,2}/,ordinal:function(e){return"ທີ່"+e}})}(n(381))},7010:function(e,t,n){!function(e){"use strict";var t={ss:"sekundė_sekundžių_sekundes",m:"minutė_minutės_minutę",mm:"minutės_minučių_minutes",h:"valanda_valandos_valandą",hh:"valandos_valandų_valandas",d:"diena_dienos_dieną",dd:"dienos_dienų_dienas",M:"mėnuo_mėnesio_mėnesį",MM:"mėnesiai_mėnesių_mėnesius",y:"metai_metų_metus",yy:"metai_metų_metus"};function n(e,t,n,i){return t?s(n)[0]:i?s(n)[1]:s(n)[2]}function i(e){return e%10==0||e>10&&e<20}function s(e){return t[e].split("_")}function r(e,t,r,a){var o=e+" ";return 1===e?o+n(0,t,r[0],a):t?o+(i(e)?s(r)[1]:s(r)[0]):a?o+s(r)[1]:o+(i(e)?s(r)[1]:s(r)[2])}e.defineLocale("lt",{months:{format:"sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"),standalone:"sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis".split("_"),isFormat:/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/},monthsShort:"sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),weekdays:{format:"sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį".split("_"),standalone:"sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_"),isFormat:/dddd HH:mm/},weekdaysShort:"Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),weekdaysMin:"S_P_A_T_K_Pn_Š".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY [m.] MMMM D [d.]",LLL:"YYYY [m.] MMMM D [d.], HH:mm [val.]",LLLL:"YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]",l:"YYYY-MM-DD",ll:"YYYY [m.] MMMM D [d.]",lll:"YYYY [m.] MMMM D [d.], HH:mm [val.]",llll:"YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]"},calendar:{sameDay:"[Šiandien] LT",nextDay:"[Rytoj] LT",nextWeek:"dddd LT",lastDay:"[Vakar] LT",lastWeek:"[Praėjusį] dddd LT",sameElse:"L"},relativeTime:{future:"po %s",past:"prieš %s",s:function(e,t,n,i){return t?"kelios sekundės":i?"kelių sekundžių":"kelias sekundes"},ss:r,m:n,mm:r,h:n,hh:r,d:n,dd:r,M:n,MM:r,y:n,yy:r},dayOfMonthOrdinalParse:/\d{1,2}-oji/,ordinal:function(e){return e+"-oji"},week:{dow:1,doy:4}})}(n(381))},7595:function(e,t,n){!function(e){"use strict";var t={ss:"sekundes_sekundēm_sekunde_sekundes".split("_"),m:"minūtes_minūtēm_minūte_minūtes".split("_"),mm:"minūtes_minūtēm_minūte_minūtes".split("_"),h:"stundas_stundām_stunda_stundas".split("_"),hh:"stundas_stundām_stunda_stundas".split("_"),d:"dienas_dienām_diena_dienas".split("_"),dd:"dienas_dienām_diena_dienas".split("_"),M:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),MM:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),y:"gada_gadiem_gads_gadi".split("_"),yy:"gada_gadiem_gads_gadi".split("_")};function n(e,t,n){return n?t%10==1&&t%100!=11?e[2]:e[3]:t%10==1&&t%100!=11?e[0]:e[1]}function i(e,i,s){return e+" "+n(t[s],e,i)}function s(e,i,s){return n(t[s],e,i)}e.defineLocale("lv",{months:"janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),monthsShort:"jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),weekdays:"svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),weekdaysShort:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysMin:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY.",LL:"YYYY. [gada] D. MMMM",LLL:"YYYY. [gada] D. MMMM, HH:mm",LLLL:"YYYY. [gada] D. MMMM, dddd, HH:mm"},calendar:{sameDay:"[Šodien pulksten] LT",nextDay:"[Rīt pulksten] LT",nextWeek:"dddd [pulksten] LT",lastDay:"[Vakar pulksten] LT",lastWeek:"[Pagājušā] dddd [pulksten] LT",sameElse:"L"},relativeTime:{future:"pēc %s",past:"pirms %s",s:function(e,t){return t?"dažas sekundes":"dažām sekundēm"},ss:i,m:s,mm:i,h:s,hh:i,d:s,dd:i,M:s,MM:i,y:s,yy:i},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},9861:function(e,t,n){!function(e){"use strict";var t={words:{ss:["sekund","sekunda","sekundi"],m:["jedan minut","jednog minuta"],mm:["minut","minuta","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mjesec","mjeseca","mjeseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,i){var s=t.words[i];return 1===i.length?n?s[0]:s[1]:e+" "+t.correctGrammaticalCase(e,s)}};e.defineLocale("me",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sjutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedjelje] [u] LT","[prošlog] [ponedjeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srijede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"nekoliko sekundi",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"dan",dd:t.translate,M:"mjesec",MM:t.translate,y:"godinu",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(381))},5493:function(e,t,n){!function(e){"use strict";e.defineLocale("mi",{months:"Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea".split("_"),monthsShort:"Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki".split("_"),monthsRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,weekdays:"Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei".split("_"),weekdaysShort:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),weekdaysMin:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [i] HH:mm",LLLL:"dddd, D MMMM YYYY [i] HH:mm"},calendar:{sameDay:"[i teie mahana, i] LT",nextDay:"[apopo i] LT",nextWeek:"dddd [i] LT",lastDay:"[inanahi i] LT",lastWeek:"dddd [whakamutunga i] LT",sameElse:"L"},relativeTime:{future:"i roto i %s",past:"%s i mua",s:"te hēkona ruarua",ss:"%d hēkona",m:"he meneti",mm:"%d meneti",h:"te haora",hh:"%d haora",d:"he ra",dd:"%d ra",M:"he marama",MM:"%d marama",y:"he tau",yy:"%d tau"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(381))},5966:function(e,t,n){!function(e){"use strict";e.defineLocale("mk",{months:"јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември".split("_"),monthsShort:"јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек".split("_"),weekdays:"недела_понеделник_вторник_среда_четврток_петок_сабота".split("_"),weekdaysShort:"нед_пон_вто_сре_чет_пет_саб".split("_"),weekdaysMin:"нe_пo_вт_ср_че_пе_сa".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Денес во] LT",nextDay:"[Утре во] LT",nextWeek:"[Во] dddd [во] LT",lastDay:"[Вчера во] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Изминатата] dddd [во] LT";case 1:case 2:case 4:case 5:return"[Изминатиот] dddd [во] LT"}},sameElse:"L"},relativeTime:{future:"за %s",past:"пред %s",s:"неколку секунди",ss:"%d секунди",m:"една минута",mm:"%d минути",h:"еден час",hh:"%d часа",d:"еден ден",dd:"%d дена",M:"еден месец",MM:"%d месеци",y:"една година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&n<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}})}(n(381))},7341:function(e,t,n){!function(e){"use strict";e.defineLocale("ml",{months:"ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ".split("_"),monthsShort:"ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.".split("_"),monthsParseExact:!0,weekdays:"ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച".split("_"),weekdaysShort:"ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി".split("_"),weekdaysMin:"ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ".split("_"),longDateFormat:{LT:"A h:mm -നു",LTS:"A h:mm:ss -നു",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm -നു",LLLL:"dddd, D MMMM YYYY, A h:mm -നു"},calendar:{sameDay:"[ഇന്ന്] LT",nextDay:"[നാളെ] LT",nextWeek:"dddd, LT",lastDay:"[ഇന്നലെ] LT",lastWeek:"[കഴിഞ്ഞ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s കഴിഞ്ഞ്",past:"%s മുൻപ്",s:"അൽപ നിമിഷങ്ങൾ",ss:"%d സെക്കൻഡ്",m:"ഒരു മിനിറ്റ്",mm:"%d മിനിറ്റ്",h:"ഒരു മണിക്കൂർ",hh:"%d മണിക്കൂർ",d:"ഒരു ദിവസം",dd:"%d ദിവസം",M:"ഒരു മാസം",MM:"%d മാസം",y:"ഒരു വർഷം",yy:"%d വർഷം"},meridiemParse:/രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,meridiemHour:function(e,t){return 12===e&&(e=0),"രാത്രി"===t&&e>=4||"ഉച്ച കഴിഞ്ഞ്"===t||"വൈകുന്നേരം"===t?e+12:e},meridiem:function(e,t,n){return e<4?"രാത്രി":e<12?"രാവിലെ":e<17?"ഉച്ച കഴിഞ്ഞ്":e<20?"വൈകുന്നേരം":"രാത്രി"}})}(n(381))},5115:function(e,t,n){!function(e){"use strict";function t(e,t,n,i){switch(n){case"s":return t?"хэдхэн секунд":"хэдхэн секундын";case"ss":return e+(t?" секунд":" секундын");case"m":case"mm":return e+(t?" минут":" минутын");case"h":case"hh":return e+(t?" цаг":" цагийн");case"d":case"dd":return e+(t?" өдөр":" өдрийн");case"M":case"MM":return e+(t?" сар":" сарын");case"y":case"yy":return e+(t?" жил":" жилийн");default:return e}}e.defineLocale("mn",{months:"Нэгдүгээр сар_Хоёрдугаар сар_Гуравдугаар сар_Дөрөвдүгээр сар_Тавдугаар сар_Зургадугаар сар_Долдугаар сар_Наймдугаар сар_Есдүгээр сар_Аравдугаар сар_Арван нэгдүгээр сар_Арван хоёрдугаар сар".split("_"),monthsShort:"1 сар_2 сар_3 сар_4 сар_5 сар_6 сар_7 сар_8 сар_9 сар_10 сар_11 сар_12 сар".split("_"),monthsParseExact:!0,weekdays:"Ням_Даваа_Мягмар_Лхагва_Пүрэв_Баасан_Бямба".split("_"),weekdaysShort:"Ням_Дав_Мяг_Лха_Пүр_Баа_Бям".split("_"),weekdaysMin:"Ня_Да_Мя_Лх_Пү_Ба_Бя".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY оны MMMMын D",LLL:"YYYY оны MMMMын D HH:mm",LLLL:"dddd, YYYY оны MMMMын D HH:mm"},meridiemParse:/ҮӨ|ҮХ/i,isPM:function(e){return"ҮХ"===e},meridiem:function(e,t,n){return e<12?"ҮӨ":"ҮХ"},calendar:{sameDay:"[Өнөөдөр] LT",nextDay:"[Маргааш] LT",nextWeek:"[Ирэх] dddd LT",lastDay:"[Өчигдөр] LT",lastWeek:"[Өнгөрсөн] dddd LT",sameElse:"L"},relativeTime:{future:"%s дараа",past:"%s өмнө",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2} өдөр/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+" өдөр";default:return e}}})}(n(381))},370:function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};function i(e,t,n,i){var s="";if(t)switch(n){case"s":s="काही सेकंद";break;case"ss":s="%d सेकंद";break;case"m":s="एक मिनिट";break;case"mm":s="%d मिनिटे";break;case"h":s="एक तास";break;case"hh":s="%d तास";break;case"d":s="एक दिवस";break;case"dd":s="%d दिवस";break;case"M":s="एक महिना";break;case"MM":s="%d महिने";break;case"y":s="एक वर्ष";break;case"yy":s="%d वर्षे"}else switch(n){case"s":s="काही सेकंदां";break;case"ss":s="%d सेकंदां";break;case"m":s="एका मिनिटा";break;case"mm":s="%d मिनिटां";break;case"h":s="एका तासा";break;case"hh":s="%d तासां";break;case"d":s="एका दिवसा";break;case"dd":s="%d दिवसां";break;case"M":s="एका महिन्या";break;case"MM":s="%d महिन्यां";break;case"y":s="एका वर्षा";break;case"yy":s="%d वर्षां"}return s.replace(/%d/i,e)}e.defineLocale("mr",{months:"जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),monthsShort:"जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),monthsParseExact:!0,weekdays:"रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm वाजता",LTS:"A h:mm:ss वाजता",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm वाजता",LLLL:"dddd, D MMMM YYYY, A h:mm वाजता"},calendar:{sameDay:"[आज] LT",nextDay:"[उद्या] LT",nextWeek:"dddd, LT",lastDay:"[काल] LT",lastWeek:"[मागील] dddd, LT",sameElse:"L"},relativeTime:{future:"%sमध्ये",past:"%sपूर्वी",s:i,ss:i,m:i,mm:i,h:i,hh:i,d:i,dd:i,M:i,MM:i,y:i,yy:i},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/पहाटे|सकाळी|दुपारी|सायंकाळी|रात्री/,meridiemHour:function(e,t){return 12===e&&(e=0),"पहाटे"===t||"सकाळी"===t?e:"दुपारी"===t||"सायंकाळी"===t||"रात्री"===t?e>=12?e:e+12:void 0},meridiem:function(e,t,n){return e>=0&&e<6?"पहाटे":e<12?"सकाळी":e<17?"दुपारी":e<20?"सायंकाळी":"रात्री"},week:{dow:0,doy:6}})}(n(381))},1237:function(e,t,n){!function(e){"use strict";e.defineLocale("ms-my",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(381))},9847:function(e,t,n){!function(e){"use strict";e.defineLocale("ms",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(381))},2126:function(e,t,n){!function(e){"use strict";e.defineLocale("mt",{months:"Jannar_Frar_Marzu_April_Mejju_Ġunju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Diċembru".split("_"),monthsShort:"Jan_Fra_Mar_Apr_Mej_Ġun_Lul_Aww_Set_Ott_Nov_Diċ".split("_"),weekdays:"Il-Ħadd_It-Tnejn_It-Tlieta_L-Erbgħa_Il-Ħamis_Il-Ġimgħa_Is-Sibt".split("_"),weekdaysShort:"Ħad_Tne_Tli_Erb_Ħam_Ġim_Sib".split("_"),weekdaysMin:"Ħa_Tn_Tl_Er_Ħa_Ġi_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Illum fil-]LT",nextDay:"[Għada fil-]LT",nextWeek:"dddd [fil-]LT",lastDay:"[Il-bieraħ fil-]LT",lastWeek:"dddd [li għadda] [fil-]LT",sameElse:"L"},relativeTime:{future:"f’ %s",past:"%s ilu",s:"ftit sekondi",ss:"%d sekondi",m:"minuta",mm:"%d minuti",h:"siegħa",hh:"%d siegħat",d:"ġurnata",dd:"%d ġranet",M:"xahar",MM:"%d xhur",y:"sena",yy:"%d sni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(381))},6165:function(e,t,n){!function(e){"use strict";var t={1:"၁",2:"၂",3:"၃",4:"၄",5:"၅",6:"၆",7:"၇",8:"၈",9:"၉",0:"၀"},n={"၁":"1","၂":"2","၃":"3","၄":"4","၅":"5","၆":"6","၇":"7","၈":"8","၉":"9","၀":"0"};e.defineLocale("my",{months:"ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ".split("_"),monthsShort:"ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ".split("_"),weekdays:"တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ".split("_"),weekdaysShort:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),weekdaysMin:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ယနေ.] LT [မှာ]",nextDay:"[မနက်ဖြန်] LT [မှာ]",nextWeek:"dddd LT [မှာ]",lastDay:"[မနေ.က] LT [မှာ]",lastWeek:"[ပြီးခဲ့သော] dddd LT [မှာ]",sameElse:"L"},relativeTime:{future:"လာမည့် %s မှာ",past:"လွန်ခဲ့သော %s က",s:"စက္ကန်.အနည်းငယ်",ss:"%d စက္ကန့်",m:"တစ်မိနစ်",mm:"%d မိနစ်",h:"တစ်နာရီ",hh:"%d နာရီ",d:"တစ်ရက်",dd:"%d ရက်",M:"တစ်လ",MM:"%d လ",y:"တစ်နှစ်",yy:"%d နှစ်"},preparse:function(e){return e.replace(/[၁၂၃၄၅၆၇၈၉၀]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},week:{dow:1,doy:4}})}(n(381))},4924:function(e,t,n){!function(e){"use strict";e.defineLocale("nb",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"sø._ma._ti._on._to._fr._lø.".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] HH:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[forrige] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"noen sekunder",ss:"%d sekunder",m:"ett minutt",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dager",w:"en uke",ww:"%d uker",M:"en måned",MM:"%d måneder",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},6744:function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};e.defineLocale("ne",{months:"जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर".split("_"),monthsShort:"जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.".split("_"),monthsParseExact:!0,weekdays:"आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार".split("_"),weekdaysShort:"आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.".split("_"),weekdaysMin:"आ._सो._मं._बु._बि._शु._श.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"Aको h:mm बजे",LTS:"Aको h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, Aको h:mm बजे",LLLL:"dddd, D MMMM YYYY, Aको h:mm बजे"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/राति|बिहान|दिउँसो|साँझ/,meridiemHour:function(e,t){return 12===e&&(e=0),"राति"===t?e<4?e:e+12:"बिहान"===t?e:"दिउँसो"===t?e>=10?e:e+12:"साँझ"===t?e+12:void 0},meridiem:function(e,t,n){return e<3?"राति":e<12?"बिहान":e<16?"दिउँसो":e<20?"साँझ":"राति"},calendar:{sameDay:"[आज] LT",nextDay:"[भोलि] LT",nextWeek:"[आउँदो] dddd[,] LT",lastDay:"[हिजो] LT",lastWeek:"[गएको] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%sमा",past:"%s अगाडि",s:"केही क्षण",ss:"%d सेकेण्ड",m:"एक मिनेट",mm:"%d मिनेट",h:"एक घण्टा",hh:"%d घण्टा",d:"एक दिन",dd:"%d दिन",M:"एक महिना",MM:"%d महिना",y:"एक बर्ष",yy:"%d बर्ष"},week:{dow:0,doy:6}})}(n(381))},9814:function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),i=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],s=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl-be",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,i){return e?/-MMM-/.test(i)?n[e.month()]:t[e.month()]:t},monthsRegex:s,monthsShortRegex:s,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:i,longMonthsParse:i,shortMonthsParse:i,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(381))},3901:function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),i=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],s=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,i){return e?/-MMM-/.test(i)?n[e.month()]:t[e.month()]:t},monthsRegex:s,monthsShortRegex:s,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:i,longMonthsParse:i,shortMonthsParse:i,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",w:"één week",ww:"%d weken",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(381))},3877:function(e,t,n){!function(e){"use strict";e.defineLocale("nn",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"),weekdaysShort:"su._må._ty._on._to._fr._lau.".split("_"),weekdaysMin:"su_må_ty_on_to_fr_la".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[I dag klokka] LT",nextDay:"[I morgon klokka] LT",nextWeek:"dddd [klokka] LT",lastDay:"[I går klokka] LT",lastWeek:"[Føregåande] dddd [klokka] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s sidan",s:"nokre sekund",ss:"%d sekund",m:"eit minutt",mm:"%d minutt",h:"ein time",hh:"%d timar",d:"ein dag",dd:"%d dagar",w:"ei veke",ww:"%d veker",M:"ein månad",MM:"%d månader",y:"eit år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},2135:function(e,t,n){!function(e){"use strict";e.defineLocale("oc-lnc",{months:{standalone:"genièr_febrièr_març_abril_mai_junh_julhet_agost_setembre_octòbre_novembre_decembre".split("_"),format:"de genièr_de febrièr_de març_d'abril_de mai_de junh_de julhet_d'agost_de setembre_d'octòbre_de novembre_de decembre".split("_"),isFormat:/D[oD]?(\s)+MMMM/},monthsShort:"gen._febr._març_abr._mai_junh_julh._ago._set._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"dimenge_diluns_dimars_dimècres_dijòus_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dm._dc._dj._dv._ds.".split("_"),weekdaysMin:"dg_dl_dm_dc_dj_dv_ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [de] YYYY",ll:"D MMM YYYY",LLL:"D MMMM [de] YYYY [a] H:mm",lll:"D MMM YYYY, H:mm",LLLL:"dddd D MMMM [de] YYYY [a] H:mm",llll:"ddd D MMM YYYY, H:mm"},calendar:{sameDay:"[uèi a] LT",nextDay:"[deman a] LT",nextWeek:"dddd [a] LT",lastDay:"[ièr a] LT",lastWeek:"dddd [passat a] LT",sameElse:"L"},relativeTime:{future:"d'aquí %s",past:"fa %s",s:"unas segondas",ss:"%d segondas",m:"una minuta",mm:"%d minutas",h:"una ora",hh:"%d oras",d:"un jorn",dd:"%d jorns",M:"un mes",MM:"%d meses",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(e,t){var n=1===e?"r":2===e?"n":3===e?"r":4===e?"t":"è";return"w"!==t&&"W"!==t||(n="a"),e+n},week:{dow:1,doy:4}})}(n(381))},5858:function(e,t,n){!function(e){"use strict";var t={1:"੧",2:"੨",3:"੩",4:"੪",5:"੫",6:"੬",7:"੭",8:"੮",9:"੯",0:"੦"},n={"੧":"1","੨":"2","੩":"3","੪":"4","੫":"5","੬":"6","੭":"7","੮":"8","੯":"9","੦":"0"};e.defineLocale("pa-in",{months:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),monthsShort:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),weekdays:"ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ".split("_"),weekdaysShort:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),weekdaysMin:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),longDateFormat:{LT:"A h:mm ਵਜੇ",LTS:"A h:mm:ss ਵਜੇ",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm ਵਜੇ",LLLL:"dddd, D MMMM YYYY, A h:mm ਵਜੇ"},calendar:{sameDay:"[ਅਜ] LT",nextDay:"[ਕਲ] LT",nextWeek:"[ਅਗਲਾ] dddd, LT",lastDay:"[ਕਲ] LT",lastWeek:"[ਪਿਛਲੇ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ਵਿੱਚ",past:"%s ਪਿਛਲੇ",s:"ਕੁਝ ਸਕਿੰਟ",ss:"%d ਸਕਿੰਟ",m:"ਇਕ ਮਿੰਟ",mm:"%d ਮਿੰਟ",h:"ਇੱਕ ਘੰਟਾ",hh:"%d ਘੰਟੇ",d:"ਇੱਕ ਦਿਨ",dd:"%d ਦਿਨ",M:"ਇੱਕ ਮਹੀਨਾ",MM:"%d ਮਹੀਨੇ",y:"ਇੱਕ ਸਾਲ",yy:"%d ਸਾਲ"},preparse:function(e){return e.replace(/[੧੨੩੪੫੬੭੮੯੦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ਰਾਤ"===t?e<4?e:e+12:"ਸਵੇਰ"===t?e:"ਦੁਪਹਿਰ"===t?e>=10?e:e+12:"ਸ਼ਾਮ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"ਰਾਤ":e<10?"ਸਵੇਰ":e<17?"ਦੁਪਹਿਰ":e<20?"ਸ਼ਾਮ":"ਰਾਤ"},week:{dow:0,doy:6}})}(n(381))},4495:function(e,t,n){!function(e){"use strict";var t="styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"),n="stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_"),i=[/^sty/i,/^lut/i,/^mar/i,/^kwi/i,/^maj/i,/^cze/i,/^lip/i,/^sie/i,/^wrz/i,/^paź/i,/^lis/i,/^gru/i];function s(e){return e%10<5&&e%10>1&&~~(e/10)%10!=1}function r(e,t,n){var i=e+" ";switch(n){case"ss":return i+(s(e)?"sekundy":"sekund");case"m":return t?"minuta":"minutę";case"mm":return i+(s(e)?"minuty":"minut");case"h":return t?"godzina":"godzinę";case"hh":return i+(s(e)?"godziny":"godzin");case"ww":return i+(s(e)?"tygodnie":"tygodni");case"MM":return i+(s(e)?"miesiące":"miesięcy");case"yy":return i+(s(e)?"lata":"lat")}}e.defineLocale("pl",{months:function(e,i){return e?/D MMMM/.test(i)?n[e.month()]:t[e.month()]:t},monthsShort:"sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),monthsParse:i,longMonthsParse:i,shortMonthsParse:i,weekdays:"niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),weekdaysShort:"ndz_pon_wt_śr_czw_pt_sob".split("_"),weekdaysMin:"Nd_Pn_Wt_Śr_Cz_Pt_So".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Dziś o] LT",nextDay:"[Jutro o] LT",nextWeek:function(){switch(this.day()){case 0:return"[W niedzielę o] LT";case 2:return"[We wtorek o] LT";case 3:return"[W środę o] LT";case 6:return"[W sobotę o] LT";default:return"[W] dddd [o] LT"}},lastDay:"[Wczoraj o] LT",lastWeek:function(){switch(this.day()){case 0:return"[W zeszłą niedzielę o] LT";case 3:return"[W zeszłą środę o] LT";case 6:return"[W zeszłą sobotę o] LT";default:return"[W zeszły] dddd [o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"%s temu",s:"kilka sekund",ss:r,m:r,mm:r,h:r,hh:r,d:"1 dzień",dd:"%d dni",w:"tydzień",ww:r,M:"miesiąc",MM:r,y:"rok",yy:r},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},7971:function(e,t,n){!function(e){"use strict";e.defineLocale("pt-br",{months:"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),monthsShort:"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),weekdays:"domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado".split("_"),weekdaysShort:"dom_seg_ter_qua_qui_sex_sáb".split("_"),weekdaysMin:"do_2ª_3ª_4ª_5ª_6ª_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY [às] HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY [às] HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"poucos segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",invalidDate:"Data inválida"})}(n(381))},9520:function(e,t,n){!function(e){"use strict";e.defineLocale("pt",{months:"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),monthsShort:"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),weekdays:"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Do_2ª_3ª_4ª_5ª_6ª_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",w:"uma semana",ww:"%d semanas",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(381))},6459:function(e,t,n){!function(e){"use strict";function t(e,t,n){var i=" ";return(e%100>=20||e>=100&&e%100==0)&&(i=" de "),e+i+{ss:"secunde",mm:"minute",hh:"ore",dd:"zile",ww:"săptămâni",MM:"luni",yy:"ani"}[n]}e.defineLocale("ro",{months:"ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),monthsShort:"ian._feb._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"),weekdaysShort:"Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),weekdaysMin:"Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[azi la] LT",nextDay:"[mâine la] LT",nextWeek:"dddd [la] LT",lastDay:"[ieri la] LT",lastWeek:"[fosta] dddd [la] LT",sameElse:"L"},relativeTime:{future:"peste %s",past:"%s în urmă",s:"câteva secunde",ss:t,m:"un minut",mm:t,h:"o oră",hh:t,d:"o zi",dd:t,w:"o săptămână",ww:t,M:"o lună",MM:t,y:"un an",yy:t},week:{dow:1,doy:7}})}(n(381))},1793:function(e,t,n){!function(e){"use strict";function t(e,t,n){return"m"===n?t?"минута":"минуту":e+" "+(i=+e,s={ss:t?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:t?"минута_минуты_минут":"минуту_минуты_минут",hh:"час_часа_часов",dd:"день_дня_дней",ww:"неделя_недели_недель",MM:"месяц_месяца_месяцев",yy:"год_года_лет"}[n].split("_"),i%10==1&&i%100!=11?s[0]:i%10>=2&&i%10<=4&&(i%100<10||i%100>=20)?s[1]:s[2]);var i,s}var n=[/^янв/i,/^фев/i,/^мар/i,/^апр/i,/^ма[йя]/i,/^июн/i,/^июл/i,/^авг/i,/^сен/i,/^окт/i,/^ноя/i,/^дек/i];e.defineLocale("ru",{months:{format:"января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"),standalone:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_")},monthsShort:{format:"янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"),standalone:"янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_")},weekdays:{standalone:"воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"),format:"воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split("_"),isFormat:/\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?] ?dddd/},weekdaysShort:"вс_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"вс_пн_вт_ср_чт_пт_сб".split("_"),monthsParse:n,longMonthsParse:n,shortMonthsParse:n,monthsRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsShortRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsStrictRegex:/^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,monthsShortStrictRegex:/^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., H:mm",LLLL:"dddd, D MMMM YYYY г., H:mm"},calendar:{sameDay:"[Сегодня, в] LT",nextDay:"[Завтра, в] LT",lastDay:"[Вчера, в] LT",nextWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В следующее] dddd, [в] LT";case 1:case 2:case 4:return"[В следующий] dddd, [в] LT";case 3:case 5:case 6:return"[В следующую] dddd, [в] LT"}},lastWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В прошлое] dddd, [в] LT";case 1:case 2:case 4:return"[В прошлый] dddd, [в] LT";case 3:case 5:case 6:return"[В прошлую] dddd, [в] LT"}},sameElse:"L"},relativeTime:{future:"через %s",past:"%s назад",s:"несколько секунд",ss:t,m:t,mm:t,h:"час",hh:t,d:"день",dd:t,w:"неделя",ww:t,M:"месяц",MM:t,y:"год",yy:t},meridiemParse:/ночи|утра|дня|вечера/i,isPM:function(e){return/^(дня|вечера)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночи":e<12?"утра":e<17?"дня":"вечера"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го|я)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":return e+"-й";case"D":return e+"-го";case"w":case"W":return e+"-я";default:return e}},week:{dow:1,doy:4}})}(n(381))},950:function(e,t,n){!function(e){"use strict";var t=["جنوري","فيبروري","مارچ","اپريل","مئي","جون","جولاءِ","آگسٽ","سيپٽمبر","آڪٽوبر","نومبر","ڊسمبر"],n=["آچر","سومر","اڱارو","اربع","خميس","جمع","ڇنڇر"];e.defineLocale("sd",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(e){return"شام"===e},meridiem:function(e,t,n){return e<12?"صبح":"شام"},calendar:{sameDay:"[اڄ] LT",nextDay:"[سڀاڻي] LT",nextWeek:"dddd [اڳين هفتي تي] LT",lastDay:"[ڪالهه] LT",lastWeek:"[گزريل هفتي] dddd [تي] LT",sameElse:"L"},relativeTime:{future:"%s پوء",past:"%s اڳ",s:"چند سيڪنڊ",ss:"%d سيڪنڊ",m:"هڪ منٽ",mm:"%d منٽ",h:"هڪ ڪلاڪ",hh:"%d ڪلاڪ",d:"هڪ ڏينهن",dd:"%d ڏينهن",M:"هڪ مهينو",MM:"%d مهينا",y:"هڪ سال",yy:"%d سال"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:4}})}(n(381))},490:function(e,t,n){!function(e){"use strict";e.defineLocale("se",{months:"ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu".split("_"),monthsShort:"ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov".split("_"),weekdays:"sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat".split("_"),weekdaysShort:"sotn_vuos_maŋ_gask_duor_bear_láv".split("_"),weekdaysMin:"s_v_m_g_d_b_L".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"MMMM D. [b.] YYYY",LLL:"MMMM D. [b.] YYYY [ti.] HH:mm",LLLL:"dddd, MMMM D. [b.] YYYY [ti.] HH:mm"},calendar:{sameDay:"[otne ti] LT",nextDay:"[ihttin ti] LT",nextWeek:"dddd [ti] LT",lastDay:"[ikte ti] LT",lastWeek:"[ovddit] dddd [ti] LT",sameElse:"L"},relativeTime:{future:"%s geažes",past:"maŋit %s",s:"moadde sekunddat",ss:"%d sekunddat",m:"okta minuhta",mm:"%d minuhtat",h:"okta diimmu",hh:"%d diimmut",d:"okta beaivi",dd:"%d beaivvit",M:"okta mánnu",MM:"%d mánut",y:"okta jahki",yy:"%d jagit"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},124:function(e,t,n){!function(e){"use strict";e.defineLocale("si",{months:"ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්".split("_"),monthsShort:"ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ".split("_"),weekdays:"ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා".split("_"),weekdaysShort:"ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන".split("_"),weekdaysMin:"ඉ_ස_අ_බ_බ්‍ර_සි_සෙ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"a h:mm",LTS:"a h:mm:ss",L:"YYYY/MM/DD",LL:"YYYY MMMM D",LLL:"YYYY MMMM D, a h:mm",LLLL:"YYYY MMMM D [වැනි] dddd, a h:mm:ss"},calendar:{sameDay:"[අද] LT[ට]",nextDay:"[හෙට] LT[ට]",nextWeek:"dddd LT[ට]",lastDay:"[ඊයේ] LT[ට]",lastWeek:"[පසුගිය] dddd LT[ට]",sameElse:"L"},relativeTime:{future:"%sකින්",past:"%sකට පෙර",s:"තත්පර කිහිපය",ss:"තත්පර %d",m:"මිනිත්තුව",mm:"මිනිත්තු %d",h:"පැය",hh:"පැය %d",d:"දිනය",dd:"දින %d",M:"මාසය",MM:"මාස %d",y:"වසර",yy:"වසර %d"},dayOfMonthOrdinalParse:/\d{1,2} වැනි/,ordinal:function(e){return e+" වැනි"},meridiemParse:/පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,isPM:function(e){return"ප.ව."===e||"පස් වරු"===e},meridiem:function(e,t,n){return e>11?n?"ප.ව.":"පස් වරු":n?"පෙ.ව.":"පෙර වරු"}})}(n(381))},4249:function(e,t,n){!function(e){"use strict";var t="január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"),n="jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_");function i(e){return e>1&&e<5}function s(e,t,n,s){var r=e+" ";switch(n){case"s":return t||s?"pár sekúnd":"pár sekundami";case"ss":return t||s?r+(i(e)?"sekundy":"sekúnd"):r+"sekundami";case"m":return t?"minúta":s?"minútu":"minútou";case"mm":return t||s?r+(i(e)?"minúty":"minút"):r+"minútami";case"h":return t?"hodina":s?"hodinu":"hodinou";case"hh":return t||s?r+(i(e)?"hodiny":"hodín"):r+"hodinami";case"d":return t||s?"deň":"dňom";case"dd":return t||s?r+(i(e)?"dni":"dní"):r+"dňami";case"M":return t||s?"mesiac":"mesiacom";case"MM":return t||s?r+(i(e)?"mesiace":"mesiacov"):r+"mesiacmi";case"y":return t||s?"rok":"rokom";case"yy":return t||s?r+(i(e)?"roky":"rokov"):r+"rokmi"}}e.defineLocale("sk",{months:t,monthsShort:n,weekdays:"nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),weekdaysShort:"ne_po_ut_st_št_pi_so".split("_"),weekdaysMin:"ne_po_ut_st_št_pi_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm"},calendar:{sameDay:"[dnes o] LT",nextDay:"[zajtra o] LT",nextWeek:function(){switch(this.day()){case 0:return"[v nedeľu o] LT";case 1:case 2:return"[v] dddd [o] LT";case 3:return"[v stredu o] LT";case 4:return"[vo štvrtok o] LT";case 5:return"[v piatok o] LT";case 6:return"[v sobotu o] LT"}},lastDay:"[včera o] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulú nedeľu o] LT";case 1:case 2:case 4:case 5:return"[minulý] dddd [o] LT";case 3:return"[minulú stredu o] LT";case 6:return"[minulú sobotu o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"pred %s",s,ss:s,m:s,mm:s,h:s,hh:s,d:s,dd:s,M:s,MM:s,y:s,yy:s},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},4985:function(e,t,n){!function(e){"use strict";function t(e,t,n,i){var s=e+" ";switch(n){case"s":return t||i?"nekaj sekund":"nekaj sekundami";case"ss":return s+(1===e?t?"sekundo":"sekundi":2===e?t||i?"sekundi":"sekundah":e<5?t||i?"sekunde":"sekundah":"sekund");case"m":return t?"ena minuta":"eno minuto";case"mm":return s+(1===e?t?"minuta":"minuto":2===e?t||i?"minuti":"minutama":e<5?t||i?"minute":"minutami":t||i?"minut":"minutami");case"h":return t?"ena ura":"eno uro";case"hh":return s+(1===e?t?"ura":"uro":2===e?t||i?"uri":"urama":e<5?t||i?"ure":"urami":t||i?"ur":"urami");case"d":return t||i?"en dan":"enim dnem";case"dd":return s+(1===e?t||i?"dan":"dnem":2===e?t||i?"dni":"dnevoma":t||i?"dni":"dnevi");case"M":return t||i?"en mesec":"enim mesecem";case"MM":return s+(1===e?t||i?"mesec":"mesecem":2===e?t||i?"meseca":"mesecema":e<5?t||i?"mesece":"meseci":t||i?"mesecev":"meseci");case"y":return t||i?"eno leto":"enim letom";case"yy":return s+(1===e?t||i?"leto":"letom":2===e?t||i?"leti":"letoma":e<5?t||i?"leta":"leti":t||i?"let":"leti")}}e.defineLocale("sl",{months:"januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),weekdaysShort:"ned._pon._tor._sre._čet._pet._sob.".split("_"),weekdaysMin:"ne_po_to_sr_če_pe_so".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danes ob] LT",nextDay:"[jutri ob] LT",nextWeek:function(){switch(this.day()){case 0:return"[v] [nedeljo] [ob] LT";case 3:return"[v] [sredo] [ob] LT";case 6:return"[v] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[v] dddd [ob] LT"}},lastDay:"[včeraj ob] LT",lastWeek:function(){switch(this.day()){case 0:return"[prejšnjo] [nedeljo] [ob] LT";case 3:return"[prejšnjo] [sredo] [ob] LT";case 6:return"[prejšnjo] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[prejšnji] dddd [ob] LT"}},sameElse:"L"},relativeTime:{future:"čez %s",past:"pred %s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(381))},1104:function(e,t,n){!function(e){"use strict";e.defineLocale("sq",{months:"Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split("_"),monthsShort:"Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split("_"),weekdays:"E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë".split("_"),weekdaysShort:"Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"),weekdaysMin:"D_H_Ma_Më_E_P_Sh".split("_"),weekdaysParseExact:!0,meridiemParse:/PD|MD/,isPM:function(e){return"M"===e.charAt(0)},meridiem:function(e,t,n){return e<12?"PD":"MD"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Sot në] LT",nextDay:"[Nesër në] LT",nextWeek:"dddd [në] LT",lastDay:"[Dje në] LT",lastWeek:"dddd [e kaluar në] LT",sameElse:"L"},relativeTime:{future:"në %s",past:"%s më parë",s:"disa sekonda",ss:"%d sekonda",m:"një minutë",mm:"%d minuta",h:"një orë",hh:"%d orë",d:"një ditë",dd:"%d ditë",M:"një muaj",MM:"%d muaj",y:"një vit",yy:"%d vite"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},9915:function(e,t,n){!function(e){"use strict";var t={words:{ss:["секунда","секунде","секунди"],m:["један минут","једне минуте"],mm:["минут","минуте","минута"],h:["један сат","једног сата"],hh:["сат","сата","сати"],dd:["дан","дана","дана"],MM:["месец","месеца","месеци"],yy:["година","године","година"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,i){var s=t.words[i];return 1===i.length?n?s[0]:s[1]:e+" "+t.correctGrammaticalCase(e,s)}};e.defineLocale("sr-cyrl",{months:"јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар".split("_"),monthsShort:"јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.".split("_"),monthsParseExact:!0,weekdays:"недеља_понедељак_уторак_среда_четвртак_петак_субота".split("_"),weekdaysShort:"нед._пон._уто._сре._чет._пет._суб.".split("_"),weekdaysMin:"не_по_ут_ср_че_пе_су".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D. M. YYYY.",LL:"D. MMMM YYYY.",LLL:"D. MMMM YYYY. H:mm",LLLL:"dddd, D. MMMM YYYY. H:mm"},calendar:{sameDay:"[данас у] LT",nextDay:"[сутра у] LT",nextWeek:function(){switch(this.day()){case 0:return"[у] [недељу] [у] LT";case 3:return"[у] [среду] [у] LT";case 6:return"[у] [суботу] [у] LT";case 1:case 2:case 4:case 5:return"[у] dddd [у] LT"}},lastDay:"[јуче у] LT",lastWeek:function(){return["[прошле] [недеље] [у] LT","[прошлог] [понедељка] [у] LT","[прошлог] [уторка] [у] LT","[прошле] [среде] [у] LT","[прошлог] [четвртка] [у] LT","[прошлог] [петка] [у] LT","[прошле] [суботе] [у] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"за %s",past:"пре %s",s:"неколико секунди",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"дан",dd:t.translate,M:"месец",MM:t.translate,y:"годину",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(381))},9131:function(e,t,n){!function(e){"use strict";var t={words:{ss:["sekunda","sekunde","sekundi"],m:["jedan minut","jedne minute"],mm:["minut","minute","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mesec","meseca","meseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,i){var s=t.words[i];return 1===i.length?n?s[0]:s[1]:e+" "+t.correctGrammaticalCase(e,s)}};e.defineLocale("sr",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sre._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D. M. YYYY.",LL:"D. MMMM YYYY.",LLL:"D. MMMM YYYY. H:mm",LLLL:"dddd, D. MMMM YYYY. H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedelju] [u] LT";case 3:return"[u] [sredu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedelje] [u] LT","[prošlog] [ponedeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"pre %s",s:"nekoliko sekundi",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"dan",dd:t.translate,M:"mesec",MM:t.translate,y:"godinu",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(381))},5893:function(e,t,n){!function(e){"use strict";e.defineLocale("ss",{months:"Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split("_"),monthsShort:"Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo".split("_"),weekdays:"Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo".split("_"),weekdaysShort:"Lis_Umb_Lsb_Les_Lsi_Lsh_Umg".split("_"),weekdaysMin:"Li_Us_Lb_Lt_Ls_Lh_Ug".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Namuhla nga] LT",nextDay:"[Kusasa nga] LT",nextWeek:"dddd [nga] LT",lastDay:"[Itolo nga] LT",lastWeek:"dddd [leliphelile] [nga] LT",sameElse:"L"},relativeTime:{future:"nga %s",past:"wenteka nga %s",s:"emizuzwana lomcane",ss:"%d mzuzwana",m:"umzuzu",mm:"%d emizuzu",h:"lihora",hh:"%d emahora",d:"lilanga",dd:"%d emalanga",M:"inyanga",MM:"%d tinyanga",y:"umnyaka",yy:"%d iminyaka"},meridiemParse:/ekuseni|emini|entsambama|ebusuku/,meridiem:function(e,t,n){return e<11?"ekuseni":e<15?"emini":e<19?"entsambama":"ebusuku"},meridiemHour:function(e,t){return 12===e&&(e=0),"ekuseni"===t?e:"emini"===t?e>=11?e:e+12:"entsambama"===t||"ebusuku"===t?0===e?0:e+12:void 0},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:"%d",week:{dow:1,doy:4}})}(n(381))},8760:function(e,t,n){!function(e){"use strict";e.defineLocale("sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),weekdaysShort:"sön_mån_tis_ons_tor_fre_lör".split("_"),weekdaysMin:"sö_må_ti_on_to_fr_lö".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [kl.] HH:mm",LLLL:"dddd D MMMM YYYY [kl.] HH:mm",lll:"D MMM YYYY HH:mm",llll:"ddd D MMM YYYY HH:mm"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[Igår] LT",nextWeek:"[På] dddd LT",lastWeek:"[I] dddd[s] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"för %s sedan",s:"några sekunder",ss:"%d sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en månad",MM:"%d månader",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}(\:e|\:a)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?":e":1===t||2===t?":a":":e")},week:{dow:1,doy:4}})}(n(381))},1172:function(e,t,n){!function(e){"use strict";e.defineLocale("sw",{months:"Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des".split("_"),weekdays:"Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi".split("_"),weekdaysShort:"Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos".split("_"),weekdaysMin:"J2_J3_J4_J5_Al_Ij_J1".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"hh:mm A",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[leo saa] LT",nextDay:"[kesho saa] LT",nextWeek:"[wiki ijayo] dddd [saat] LT",lastDay:"[jana] LT",lastWeek:"[wiki iliyopita] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s baadaye",past:"tokea %s",s:"hivi punde",ss:"sekunde %d",m:"dakika moja",mm:"dakika %d",h:"saa limoja",hh:"masaa %d",d:"siku moja",dd:"siku %d",M:"mwezi mmoja",MM:"miezi %d",y:"mwaka mmoja",yy:"miaka %d"},week:{dow:1,doy:7}})}(n(381))},7333:function(e,t,n){!function(e){"use strict";var t={1:"௧",2:"௨",3:"௩",4:"௪",5:"௫",6:"௬",7:"௭",8:"௮",9:"௯",0:"௦"},n={"௧":"1","௨":"2","௩":"3","௪":"4","௫":"5","௬":"6","௭":"7","௮":"8","௯":"9","௦":"0"};e.defineLocale("ta",{months:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),monthsShort:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),weekdays:"ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை".split("_"),weekdaysShort:"ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி".split("_"),weekdaysMin:"ஞா_தி_செ_பு_வி_வெ_ச".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, HH:mm",LLLL:"dddd, D MMMM YYYY, HH:mm"},calendar:{sameDay:"[இன்று] LT",nextDay:"[நாளை] LT",nextWeek:"dddd, LT",lastDay:"[நேற்று] LT",lastWeek:"[கடந்த வாரம்] dddd, LT",sameElse:"L"},relativeTime:{future:"%s இல்",past:"%s முன்",s:"ஒரு சில விநாடிகள்",ss:"%d விநாடிகள்",m:"ஒரு நிமிடம்",mm:"%d நிமிடங்கள்",h:"ஒரு மணி நேரம்",hh:"%d மணி நேரம்",d:"ஒரு நாள்",dd:"%d நாட்கள்",M:"ஒரு மாதம்",MM:"%d மாதங்கள்",y:"ஒரு வருடம்",yy:"%d ஆண்டுகள்"},dayOfMonthOrdinalParse:/\d{1,2}வது/,ordinal:function(e){return e+"வது"},preparse:function(e){return e.replace(/[௧௨௩௪௫௬௭௮௯௦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,meridiem:function(e,t,n){return e<2?" யாமம்":e<6?" வைகறை":e<10?" காலை":e<14?" நண்பகல்":e<18?" எற்பாடு":e<22?" மாலை":" யாமம்"},meridiemHour:function(e,t){return 12===e&&(e=0),"யாமம்"===t?e<2?e:e+12:"வைகறை"===t||"காலை"===t||"நண்பகல்"===t&&e>=10?e:e+12},week:{dow:0,doy:6}})}(n(381))},3110:function(e,t,n){!function(e){"use strict";e.defineLocale("te",{months:"జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జులై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్".split("_"),monthsShort:"జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జులై_ఆగ._సెప్._అక్టో._నవ._డిసె.".split("_"),monthsParseExact:!0,weekdays:"ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం".split("_"),weekdaysShort:"ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని".split("_"),weekdaysMin:"ఆ_సో_మం_బు_గు_శు_శ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[నేడు] LT",nextDay:"[రేపు] LT",nextWeek:"dddd, LT",lastDay:"[నిన్న] LT",lastWeek:"[గత] dddd, LT",sameElse:"L"},relativeTime:{future:"%s లో",past:"%s క్రితం",s:"కొన్ని క్షణాలు",ss:"%d సెకన్లు",m:"ఒక నిమిషం",mm:"%d నిమిషాలు",h:"ఒక గంట",hh:"%d గంటలు",d:"ఒక రోజు",dd:"%d రోజులు",M:"ఒక నెల",MM:"%d నెలలు",y:"ఒక సంవత్సరం",yy:"%d సంవత్సరాలు"},dayOfMonthOrdinalParse:/\d{1,2}వ/,ordinal:"%dవ",meridiemParse:/రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,meridiemHour:function(e,t){return 12===e&&(e=0),"రాత్రి"===t?e<4?e:e+12:"ఉదయం"===t?e:"మధ్యాహ్నం"===t?e>=10?e:e+12:"సాయంత్రం"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"రాత్రి":e<10?"ఉదయం":e<17?"మధ్యాహ్నం":e<20?"సాయంత్రం":"రాత్రి"},week:{dow:0,doy:6}})}(n(381))},2095:function(e,t,n){!function(e){"use strict";e.defineLocale("tet",{months:"Janeiru_Fevereiru_Marsu_Abril_Maiu_Juñu_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu".split("_"),weekdaysShort:"Dom_Seg_Ters_Kua_Kint_Sest_Sab".split("_"),weekdaysMin:"Do_Seg_Te_Ku_Ki_Ses_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Ohin iha] LT",nextDay:"[Aban iha] LT",nextWeek:"dddd [iha] LT",lastDay:"[Horiseik iha] LT",lastWeek:"dddd [semana kotuk] [iha] LT",sameElse:"L"},relativeTime:{future:"iha %s",past:"%s liuba",s:"segundu balun",ss:"segundu %d",m:"minutu ida",mm:"minutu %d",h:"oras ida",hh:"oras %d",d:"loron ida",dd:"loron %d",M:"fulan ida",MM:"fulan %d",y:"tinan ida",yy:"tinan %d"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(381))},7321:function(e,t,n){!function(e){"use strict";var t={0:"-ум",1:"-ум",2:"-юм",3:"-юм",4:"-ум",5:"-ум",6:"-ум",7:"-ум",8:"-ум",9:"-ум",10:"-ум",12:"-ум",13:"-ум",20:"-ум",30:"-юм",40:"-ум",50:"-ум",60:"-ум",70:"-ум",80:"-ум",90:"-ум",100:"-ум"};e.defineLocale("tg",{months:{format:"январи_феврали_марти_апрели_майи_июни_июли_августи_сентябри_октябри_ноябри_декабри".split("_"),standalone:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_")},monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"якшанбе_душанбе_сешанбе_чоршанбе_панҷшанбе_ҷумъа_шанбе".split("_"),weekdaysShort:"яшб_дшб_сшб_чшб_пшб_ҷум_шнб".split("_"),weekdaysMin:"яш_дш_сш_чш_пш_ҷм_шб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Имрӯз соати] LT",nextDay:"[Фардо соати] LT",lastDay:"[Дирӯз соати] LT",nextWeek:"dddd[и] [ҳафтаи оянда соати] LT",lastWeek:"dddd[и] [ҳафтаи гузашта соати] LT",sameElse:"L"},relativeTime:{future:"баъди %s",past:"%s пеш",s:"якчанд сония",m:"як дақиқа",mm:"%d дақиқа",h:"як соат",hh:"%d соат",d:"як рӯз",dd:"%d рӯз",M:"як моҳ",MM:"%d моҳ",y:"як сол",yy:"%d сол"},meridiemParse:/шаб|субҳ|рӯз|бегоҳ/,meridiemHour:function(e,t){return 12===e&&(e=0),"шаб"===t?e<4?e:e+12:"субҳ"===t?e:"рӯз"===t?e>=11?e:e+12:"бегоҳ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"шаб":e<11?"субҳ":e<16?"рӯз":e<19?"бегоҳ":"шаб"},dayOfMonthOrdinalParse:/\d{1,2}-(ум|юм)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(381))},9041:function(e,t,n){!function(e){"use strict";e.defineLocale("th",{months:"มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),monthsShort:"ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.".split("_"),monthsParseExact:!0,weekdays:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),weekdaysShort:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"),weekdaysMin:"อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY เวลา H:mm",LLLL:"วันddddที่ D MMMM YYYY เวลา H:mm"},meridiemParse:/ก่อนเที่ยง|หลังเที่ยง/,isPM:function(e){return"หลังเที่ยง"===e},meridiem:function(e,t,n){return e<12?"ก่อนเที่ยง":"หลังเที่ยง"},calendar:{sameDay:"[วันนี้ เวลา] LT",nextDay:"[พรุ่งนี้ เวลา] LT",nextWeek:"dddd[หน้า เวลา] LT",lastDay:"[เมื่อวานนี้ เวลา] LT",lastWeek:"[วัน]dddd[ที่แล้ว เวลา] LT",sameElse:"L"},relativeTime:{future:"อีก %s",past:"%sที่แล้ว",s:"ไม่กี่วินาที",ss:"%d วินาที",m:"1 นาที",mm:"%d นาที",h:"1 ชั่วโมง",hh:"%d ชั่วโมง",d:"1 วัน",dd:"%d วัน",w:"1 สัปดาห์",ww:"%d สัปดาห์",M:"1 เดือน",MM:"%d เดือน",y:"1 ปี",yy:"%d ปี"}})}(n(381))},9005:function(e,t,n){!function(e){"use strict";var t={1:"'inji",5:"'inji",8:"'inji",70:"'inji",80:"'inji",2:"'nji",7:"'nji",20:"'nji",50:"'nji",3:"'ünji",4:"'ünji",100:"'ünji",6:"'njy",9:"'unjy",10:"'unjy",30:"'unjy",60:"'ynjy",90:"'ynjy"};e.defineLocale("tk",{months:"Ýanwar_Fewral_Mart_Aprel_Maý_Iýun_Iýul_Awgust_Sentýabr_Oktýabr_Noýabr_Dekabr".split("_"),monthsShort:"Ýan_Few_Mar_Apr_Maý_Iýn_Iýl_Awg_Sen_Okt_Noý_Dek".split("_"),weekdays:"Ýekşenbe_Duşenbe_Sişenbe_Çarşenbe_Penşenbe_Anna_Şenbe".split("_"),weekdaysShort:"Ýek_Duş_Siş_Çar_Pen_Ann_Şen".split("_"),weekdaysMin:"Ýk_Dş_Sş_Çr_Pn_An_Şn".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün sagat] LT",nextDay:"[ertir sagat] LT",nextWeek:"[indiki] dddd [sagat] LT",lastDay:"[düýn] LT",lastWeek:"[geçen] dddd [sagat] LT",sameElse:"L"},relativeTime:{future:"%s soň",past:"%s öň",s:"birnäçe sekunt",m:"bir minut",mm:"%d minut",h:"bir sagat",hh:"%d sagat",d:"bir gün",dd:"%d gün",M:"bir aý",MM:"%d aý",y:"bir ýyl",yy:"%d ýyl"},ordinal:function(e,n){switch(n){case"d":case"D":case"Do":case"DD":return e;default:if(0===e)return e+"'unjy";var i=e%10;return e+(t[i]||t[e%100-i]||t[e>=100?100:null])}},week:{dow:1,doy:7}})}(n(381))},5768:function(e,t,n){!function(e){"use strict";e.defineLocale("tl-ph",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"LT [ngayong araw]",nextDay:"[Bukas ng] LT",nextWeek:"LT [sa susunod na] dddd",lastDay:"LT [kahapon]",lastWeek:"LT [noong nakaraang] dddd",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",ss:"%d segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(381))},9444:function(e,t,n){!function(e){"use strict";var t="pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut".split("_");function n(e,n,i,s){var r=function(e){var n=Math.floor(e%1e3/100),i=Math.floor(e%100/10),s=e%10,r="";return n>0&&(r+=t[n]+"vatlh"),i>0&&(r+=(""!==r?" ":"")+t[i]+"maH"),s>0&&(r+=(""!==r?" ":"")+t[s]),""===r?"pagh":r}(e);switch(i){case"ss":return r+" lup";case"mm":return r+" tup";case"hh":return r+" rep";case"dd":return r+" jaj";case"MM":return r+" jar";case"yy":return r+" DIS"}}e.defineLocale("tlh",{months:"tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’".split("_"),monthsShort:"jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’".split("_"),monthsParseExact:!0,weekdays:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysShort:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysMin:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[DaHjaj] LT",nextDay:"[wa’leS] LT",nextWeek:"LLL",lastDay:"[wa’Hu’] LT",lastWeek:"LLL",sameElse:"L"},relativeTime:{future:function(e){var t=e;return-1!==e.indexOf("jaj")?t.slice(0,-3)+"leS":-1!==e.indexOf("jar")?t.slice(0,-3)+"waQ":-1!==e.indexOf("DIS")?t.slice(0,-3)+"nem":t+" pIq"},past:function(e){var t=e;return-1!==e.indexOf("jaj")?t.slice(0,-3)+"Hu’":-1!==e.indexOf("jar")?t.slice(0,-3)+"wen":-1!==e.indexOf("DIS")?t.slice(0,-3)+"ben":t+" ret"},s:"puS lup",ss:n,m:"wa’ tup",mm:n,h:"wa’ rep",hh:n,d:"wa’ jaj",dd:n,M:"wa’ jar",MM:n,y:"wa’ DIS",yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},2397:function(e,t,n){!function(e){"use strict";var t={1:"'inci",5:"'inci",8:"'inci",70:"'inci",80:"'inci",2:"'nci",7:"'nci",20:"'nci",50:"'nci",3:"'üncü",4:"'üncü",100:"'üncü",6:"'ncı",9:"'uncu",10:"'uncu",30:"'uncu",60:"'ıncı",90:"'ıncı"};e.defineLocale("tr",{months:"Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),monthsShort:"Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),weekdays:"Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),weekdaysShort:"Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"),weekdaysMin:"Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),meridiem:function(e,t,n){return e<12?n?"öö":"ÖÖ":n?"ös":"ÖS"},meridiemParse:/öö|ÖÖ|ös|ÖS/,isPM:function(e){return"ös"===e||"ÖS"===e},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[yarın saat] LT",nextWeek:"[gelecek] dddd [saat] LT",lastDay:"[dün] LT",lastWeek:"[geçen] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s önce",s:"birkaç saniye",ss:"%d saniye",m:"bir dakika",mm:"%d dakika",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",w:"bir hafta",ww:"%d hafta",M:"bir ay",MM:"%d ay",y:"bir yıl",yy:"%d yıl"},ordinal:function(e,n){switch(n){case"d":case"D":case"Do":case"DD":return e;default:if(0===e)return e+"'ıncı";var i=e%10;return e+(t[i]||t[e%100-i]||t[e>=100?100:null])}},week:{dow:1,doy:7}})}(n(381))},8254:function(e,t,n){!function(e){"use strict";function t(e,t,n,i){var s={s:["viensas secunds","'iensas secunds"],ss:[e+" secunds",e+" secunds"],m:["'n míut","'iens míut"],mm:[e+" míuts",e+" míuts"],h:["'n þora","'iensa þora"],hh:[e+" þoras",e+" þoras"],d:["'n ziua","'iensa ziua"],dd:[e+" ziuas",e+" ziuas"],M:["'n mes","'iens mes"],MM:[e+" mesen",e+" mesen"],y:["'n ar","'iens ar"],yy:[e+" ars",e+" ars"]};return i||t?s[n][0]:s[n][1]}e.defineLocale("tzl",{months:"Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar".split("_"),monthsShort:"Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec".split("_"),weekdays:"Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi".split("_"),weekdaysShort:"Súl_Lún_Mai_Már_Xhú_Vié_Sát".split("_"),weekdaysMin:"Sú_Lú_Ma_Má_Xh_Vi_Sá".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"D. MMMM [dallas] YYYY",LLL:"D. MMMM [dallas] YYYY HH.mm",LLLL:"dddd, [li] D. MMMM [dallas] YYYY HH.mm"},meridiemParse:/d\'o|d\'a/i,isPM:function(e){return"d'o"===e.toLowerCase()},meridiem:function(e,t,n){return e>11?n?"d'o":"D'O":n?"d'a":"D'A"},calendar:{sameDay:"[oxhi à] LT",nextDay:"[demà à] LT",nextWeek:"dddd [à] LT",lastDay:"[ieiri à] LT",lastWeek:"[sür el] dddd [lasteu à] LT",sameElse:"L"},relativeTime:{future:"osprei %s",past:"ja%s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},699:function(e,t,n){!function(e){"use strict";e.defineLocale("tzm-latn",{months:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),monthsShort:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),weekdays:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysShort:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysMin:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[asdkh g] LT",nextDay:"[aska g] LT",nextWeek:"dddd [g] LT",lastDay:"[assant g] LT",lastWeek:"dddd [g] LT",sameElse:"L"},relativeTime:{future:"dadkh s yan %s",past:"yan %s",s:"imik",ss:"%d imik",m:"minuḍ",mm:"%d minuḍ",h:"saɛa",hh:"%d tassaɛin",d:"ass",dd:"%d ossan",M:"ayowr",MM:"%d iyyirn",y:"asgas",yy:"%d isgasn"},week:{dow:6,doy:12}})}(n(381))},1106:function(e,t,n){!function(e){"use strict";e.defineLocale("tzm",{months:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),monthsShort:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),weekdays:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysShort:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysMin:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ⴰⵙⴷⵅ ⴴ] LT",nextDay:"[ⴰⵙⴽⴰ ⴴ] LT",nextWeek:"dddd [ⴴ] LT",lastDay:"[ⴰⵚⴰⵏⵜ ⴴ] LT",lastWeek:"dddd [ⴴ] LT",sameElse:"L"},relativeTime:{future:"ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s",past:"ⵢⴰⵏ %s",s:"ⵉⵎⵉⴽ",ss:"%d ⵉⵎⵉⴽ",m:"ⵎⵉⵏⵓⴺ",mm:"%d ⵎⵉⵏⵓⴺ",h:"ⵙⴰⵄⴰ",hh:"%d ⵜⴰⵙⵙⴰⵄⵉⵏ",d:"ⴰⵙⵙ",dd:"%d oⵙⵙⴰⵏ",M:"ⴰⵢoⵓⵔ",MM:"%d ⵉⵢⵢⵉⵔⵏ",y:"ⴰⵙⴳⴰⵙ",yy:"%d ⵉⵙⴳⴰⵙⵏ"},week:{dow:6,doy:12}})}(n(381))},9288:function(e,t,n){!function(e){"use strict";e.defineLocale("ug-cn",{months:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),monthsShort:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),weekdays:"يەكشەنبە_دۈشەنبە_سەيشەنبە_چارشەنبە_پەيشەنبە_جۈمە_شەنبە".split("_"),weekdaysShort:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),weekdaysMin:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY-يىلىM-ئاينىڭD-كۈنى",LLL:"YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm",LLLL:"dddd، YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm"},meridiemParse:/يېرىم كېچە|سەھەر|چۈشتىن بۇرۇن|چۈش|چۈشتىن كېيىن|كەچ/,meridiemHour:function(e,t){return 12===e&&(e=0),"يېرىم كېچە"===t||"سەھەر"===t||"چۈشتىن بۇرۇن"===t?e:"چۈشتىن كېيىن"===t||"كەچ"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var i=100*e+t;return i<600?"يېرىم كېچە":i<900?"سەھەر":i<1130?"چۈشتىن بۇرۇن":i<1230?"چۈش":i<1800?"چۈشتىن كېيىن":"كەچ"},calendar:{sameDay:"[بۈگۈن سائەت] LT",nextDay:"[ئەتە سائەت] LT",nextWeek:"[كېلەركى] dddd [سائەت] LT",lastDay:"[تۆنۈگۈن] LT",lastWeek:"[ئالدىنقى] dddd [سائەت] LT",sameElse:"L"},relativeTime:{future:"%s كېيىن",past:"%s بۇرۇن",s:"نەچچە سېكونت",ss:"%d سېكونت",m:"بىر مىنۇت",mm:"%d مىنۇت",h:"بىر سائەت",hh:"%d سائەت",d:"بىر كۈن",dd:"%d كۈن",M:"بىر ئاي",MM:"%d ئاي",y:"بىر يىل",yy:"%d يىل"},dayOfMonthOrdinalParse:/\d{1,2}(-كۈنى|-ئاي|-ھەپتە)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"-كۈنى";case"w":case"W":return e+"-ھەپتە";default:return e}},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:7}})}(n(381))},7691:function(e,t,n){!function(e){"use strict";function t(e,t,n){return"m"===n?t?"хвилина":"хвилину":"h"===n?t?"година":"годину":e+" "+(i=+e,s={ss:t?"секунда_секунди_секунд":"секунду_секунди_секунд",mm:t?"хвилина_хвилини_хвилин":"хвилину_хвилини_хвилин",hh:t?"година_години_годин":"годину_години_годин",dd:"день_дні_днів",MM:"місяць_місяці_місяців",yy:"рік_роки_років"}[n].split("_"),i%10==1&&i%100!=11?s[0]:i%10>=2&&i%10<=4&&(i%100<10||i%100>=20)?s[1]:s[2]);var i,s}function n(e){return function(){return e+"о"+(11===this.hours()?"б":"")+"] LT"}}e.defineLocale("uk",{months:{format:"січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_"),standalone:"січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_")},monthsShort:"січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),weekdays:function(e,t){var n={nominative:"неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"),accusative:"неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"),genitive:"неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_")};return!0===e?n.nominative.slice(1,7).concat(n.nominative.slice(0,1)):e?n[/(\[[ВвУу]\]) ?dddd/.test(t)?"accusative":/\[?(?:минулої|наступної)? ?\] ?dddd/.test(t)?"genitive":"nominative"][e.day()]:n.nominative},weekdaysShort:"нд_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY р.",LLL:"D MMMM YYYY р., HH:mm",LLLL:"dddd, D MMMM YYYY р., HH:mm"},calendar:{sameDay:n("[Сьогодні "),nextDay:n("[Завтра "),lastDay:n("[Вчора "),nextWeek:n("[У] dddd ["),lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return n("[Минулої] dddd [").call(this);case 1:case 2:case 4:return n("[Минулого] dddd [").call(this)}},sameElse:"L"},relativeTime:{future:"за %s",past:"%s тому",s:"декілька секунд",ss:t,m:t,mm:t,h:"годину",hh:t,d:"день",dd:t,M:"місяць",MM:t,y:"рік",yy:t},meridiemParse:/ночі|ранку|дня|вечора/,isPM:function(e){return/^(дня|вечора)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночі":e<12?"ранку":e<17?"дня":"вечора"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e+"-й";case"D":return e+"-го";default:return e}},week:{dow:1,doy:7}})}(n(381))},3795:function(e,t,n){!function(e){"use strict";var t=["جنوری","فروری","مارچ","اپریل","مئی","جون","جولائی","اگست","ستمبر","اکتوبر","نومبر","دسمبر"],n=["اتوار","پیر","منگل","بدھ","جمعرات","جمعہ","ہفتہ"];e.defineLocale("ur",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(e){return"شام"===e},meridiem:function(e,t,n){return e<12?"صبح":"شام"},calendar:{sameDay:"[آج بوقت] LT",nextDay:"[کل بوقت] LT",nextWeek:"dddd [بوقت] LT",lastDay:"[گذشتہ روز بوقت] LT",lastWeek:"[گذشتہ] dddd [بوقت] LT",sameElse:"L"},relativeTime:{future:"%s بعد",past:"%s قبل",s:"چند سیکنڈ",ss:"%d سیکنڈ",m:"ایک منٹ",mm:"%d منٹ",h:"ایک گھنٹہ",hh:"%d گھنٹے",d:"ایک دن",dd:"%d دن",M:"ایک ماہ",MM:"%d ماہ",y:"ایک سال",yy:"%d سال"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:4}})}(n(381))},588:function(e,t,n){!function(e){"use strict";e.defineLocale("uz-latn",{months:"Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr".split("_"),monthsShort:"Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek".split("_"),weekdays:"Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba".split("_"),weekdaysShort:"Yak_Dush_Sesh_Chor_Pay_Jum_Shan".split("_"),weekdaysMin:"Ya_Du_Se_Cho_Pa_Ju_Sha".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Bugun soat] LT [da]",nextDay:"[Ertaga] LT [da]",nextWeek:"dddd [kuni soat] LT [da]",lastDay:"[Kecha soat] LT [da]",lastWeek:"[O'tgan] dddd [kuni soat] LT [da]",sameElse:"L"},relativeTime:{future:"Yaqin %s ichida",past:"Bir necha %s oldin",s:"soniya",ss:"%d soniya",m:"bir daqiqa",mm:"%d daqiqa",h:"bir soat",hh:"%d soat",d:"bir kun",dd:"%d kun",M:"bir oy",MM:"%d oy",y:"bir yil",yy:"%d yil"},week:{dow:1,doy:7}})}(n(381))},6791:function(e,t,n){!function(e){"use strict";e.defineLocale("uz",{months:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба".split("_"),weekdaysShort:"Якш_Душ_Сеш_Чор_Пай_Жум_Шан".split("_"),weekdaysMin:"Як_Ду_Се_Чо_Па_Жу_Ша".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Бугун соат] LT [да]",nextDay:"[Эртага] LT [да]",nextWeek:"dddd [куни соат] LT [да]",lastDay:"[Кеча соат] LT [да]",lastWeek:"[Утган] dddd [куни соат] LT [да]",sameElse:"L"},relativeTime:{future:"Якин %s ичида",past:"Бир неча %s олдин",s:"фурсат",ss:"%d фурсат",m:"бир дакика",mm:"%d дакика",h:"бир соат",hh:"%d соат",d:"бир кун",dd:"%d кун",M:"бир ой",MM:"%d ой",y:"бир йил",yy:"%d йил"},week:{dow:1,doy:7}})}(n(381))},5666:function(e,t,n){!function(e){"use strict";e.defineLocale("vi",{months:"tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),monthsShort:"Thg 01_Thg 02_Thg 03_Thg 04_Thg 05_Thg 06_Thg 07_Thg 08_Thg 09_Thg 10_Thg 11_Thg 12".split("_"),monthsParseExact:!0,weekdays:"chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),weekdaysShort:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysMin:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysParseExact:!0,meridiemParse:/sa|ch/i,isPM:function(e){return/^ch$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"sa":"SA":n?"ch":"CH"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [năm] YYYY",LLL:"D MMMM [năm] YYYY HH:mm",LLLL:"dddd, D MMMM [năm] YYYY HH:mm",l:"DD/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[Hôm nay lúc] LT",nextDay:"[Ngày mai lúc] LT",nextWeek:"dddd [tuần tới lúc] LT",lastDay:"[Hôm qua lúc] LT",lastWeek:"dddd [tuần trước lúc] LT",sameElse:"L"},relativeTime:{future:"%s tới",past:"%s trước",s:"vài giây",ss:"%d giây",m:"một phút",mm:"%d phút",h:"một giờ",hh:"%d giờ",d:"một ngày",dd:"%d ngày",w:"một tuần",ww:"%d tuần",M:"một tháng",MM:"%d tháng",y:"một năm",yy:"%d năm"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(381))},4378:function(e,t,n){!function(e){"use strict";e.defineLocale("x-pseudo",{months:"J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér".split("_"),monthsShort:"J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc".split("_"),monthsParseExact:!0,weekdays:"S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý".split("_"),weekdaysShort:"S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát".split("_"),weekdaysMin:"S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[T~ódá~ý át] LT",nextDay:"[T~ómó~rró~w át] LT",nextWeek:"dddd [át] LT",lastDay:"[Ý~ést~érdá~ý át] LT",lastWeek:"[L~ást] dddd [át] LT",sameElse:"L"},relativeTime:{future:"í~ñ %s",past:"%s á~gó",s:"á ~féw ~sécó~ñds",ss:"%d s~écóñ~ds",m:"á ~míñ~úté",mm:"%d m~íñú~tés",h:"á~ñ hó~úr",hh:"%d h~óúrs",d:"á ~dáý",dd:"%d d~áýs",M:"á ~móñ~th",MM:"%d m~óñt~hs",y:"á ~ýéár",yy:"%d ý~éárs"},dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(381))},5805:function(e,t,n){!function(e){"use strict";e.defineLocale("yo",{months:"Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀".split("_"),monthsShort:"Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀".split("_"),weekdays:"Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta".split("_"),weekdaysShort:"Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá".split("_"),weekdaysMin:"Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Ònì ni] LT",nextDay:"[Ọ̀la ni] LT",nextWeek:"dddd [Ọsẹ̀ tón'bọ] [ni] LT",lastDay:"[Àna ni] LT",lastWeek:"dddd [Ọsẹ̀ tólọ́] [ni] LT",sameElse:"L"},relativeTime:{future:"ní %s",past:"%s kọjá",s:"ìsẹjú aayá die",ss:"aayá %d",m:"ìsẹjú kan",mm:"ìsẹjú %d",h:"wákati kan",hh:"wákati %d",d:"ọjọ́ kan",dd:"ọjọ́ %d",M:"osù kan",MM:"osù %d",y:"ọdún kan",yy:"ọdún %d"},dayOfMonthOrdinalParse:/ọjọ́\s\d{1,2}/,ordinal:"ọjọ́ %d",week:{dow:1,doy:4}})}(n(381))},3839:function(e,t,n){!function(e){"use strict";e.defineLocale("zh-cn",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"周日_周一_周二_周三_周四_周五_周六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日Ah点mm分",LLLL:"YYYY年M月D日ddddAh点mm分",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"下午"===t||"晚上"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var i=100*e+t;return i<600?"凌晨":i<900?"早上":i<1130?"上午":i<1230?"中午":i<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:function(e){return e.week()!==this.week()?"[下]dddLT":"[本]dddLT"},lastDay:"[昨天]LT",lastWeek:function(e){return this.week()!==e.week()?"[上]dddLT":"[本]dddLT"},sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|周)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"周";default:return e}},relativeTime:{future:"%s后",past:"%s前",s:"几秒",ss:"%d 秒",m:"1 分钟",mm:"%d 分钟",h:"1 小时",hh:"%d 小时",d:"1 天",dd:"%d 天",w:"1 周",ww:"%d 周",M:"1 个月",MM:"%d 个月",y:"1 年",yy:"%d 年"},week:{dow:1,doy:4}})}(n(381))},5726:function(e,t,n){!function(e){"use strict";e.defineLocale("zh-hk",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var i=100*e+t;return i<600?"凌晨":i<900?"早上":i<1200?"上午":1200===i?"中午":i<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(381))},9807:function(e,t,n){!function(e){"use strict";e.defineLocale("zh-mo",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"D/M/YYYY",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var i=100*e+t;return i<600?"凌晨":i<900?"早上":i<1130?"上午":i<1230?"中午":i<1800?"下午":"晚上"},calendar:{sameDay:"[今天] LT",nextDay:"[明天] LT",nextWeek:"[下]dddd LT",lastDay:"[昨天] LT",lastWeek:"[上]dddd LT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(381))},4152:function(e,t,n){!function(e){"use strict";e.defineLocale("zh-tw",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var i=100*e+t;return i<600?"凌晨":i<900?"早上":i<1130?"上午":i<1230?"中午":i<1800?"下午":"晚上"},calendar:{sameDay:"[今天] LT",nextDay:"[明天] LT",nextWeek:"[下]dddd LT",lastDay:"[昨天] LT",lastWeek:"[上]dddd LT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(381))},381:function(e,t,n){(e=n.nmd(e)).exports=function(){"use strict";var t,i;function s(){return t.apply(null,arguments)}function r(e){return e instanceof Array||"[object Array]"===Object.prototype.toString.call(e)}function a(e){return null!=e&&"[object Object]"===Object.prototype.toString.call(e)}function o(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function d(e){if(Object.getOwnPropertyNames)return 0===Object.getOwnPropertyNames(e).length;var t;for(t in e)if(o(e,t))return!1;return!0}function l(e){return void 0===e}function u(e){return"number"==typeof e||"[object Number]"===Object.prototype.toString.call(e)}function h(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function c(e,t){var n,i=[];for(n=0;n<e.length;++n)i.push(t(e[n],n));return i}function _(e,t){for(var n in t)o(t,n)&&(e[n]=t[n]);return o(t,"toString")&&(e.toString=t.toString),o(t,"valueOf")&&(e.valueOf=t.valueOf),e}function m(e,t,n,i){return kt(e,t,n,i,!0).utc()}function f(e){return null==e._pf&&(e._pf={empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidEra:null,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],era:null,meridiem:null,rfc2822:!1,weekdayMismatch:!1}),e._pf}function p(e){if(null==e._isValid){var t=f(e),n=i.call(t.parsedDateParts,(function(e){return null!=e})),s=!isNaN(e._d.getTime())&&t.overflow<0&&!t.empty&&!t.invalidEra&&!t.invalidMonth&&!t.invalidWeekday&&!t.weekdayMismatch&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&n);if(e._strict&&(s=s&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour),null!=Object.isFrozen&&Object.isFrozen(e))return s;e._isValid=s}return e._isValid}function g(e){var t=m(NaN);return null!=e?_(f(t),e):f(t).userInvalidated=!0,t}i=Array.prototype.some?Array.prototype.some:function(e){var t,n=Object(this),i=n.length>>>0;for(t=0;t<i;t++)if(t in n&&e.call(this,n[t],t,n))return!0;return!1};var y=s.momentProperties=[],M=!1;function b(e,t){var n,i,s;if(l(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),l(t._i)||(e._i=t._i),l(t._f)||(e._f=t._f),l(t._l)||(e._l=t._l),l(t._strict)||(e._strict=t._strict),l(t._tzm)||(e._tzm=t._tzm),l(t._isUTC)||(e._isUTC=t._isUTC),l(t._offset)||(e._offset=t._offset),l(t._pf)||(e._pf=f(t)),l(t._locale)||(e._locale=t._locale),y.length>0)for(n=0;n<y.length;n++)l(s=t[i=y[n]])||(e[i]=s);return e}function L(e){b(this,e),this._d=new Date(null!=e._d?e._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===M&&(M=!0,s.updateOffset(this),M=!1)}function v(e){return e instanceof L||null!=e&&null!=e._isAMomentObject}function w(e){!1===s.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+e)}function Y(e,t){var n=!0;return _((function(){if(null!=s.deprecationHandler&&s.deprecationHandler(null,e),n){var i,r,a,d=[];for(r=0;r<arguments.length;r++){if(i="","object"==typeof arguments[r]){for(a in i+="\n["+r+"] ",arguments[0])o(arguments[0],a)&&(i+=a+": "+arguments[0][a]+", ");i=i.slice(0,-2)}else i=arguments[r];d.push(i)}w(e+"\nArguments: "+Array.prototype.slice.call(d).join("")+"\n"+(new Error).stack),n=!1}return t.apply(this,arguments)}),t)}var k,D={};function x(e,t){null!=s.deprecationHandler&&s.deprecationHandler(e,t),D[e]||(w(t),D[e]=!0)}function T(e){return"undefined"!=typeof Function&&e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function S(e,t){var n,i=_({},e);for(n in t)o(t,n)&&(a(e[n])&&a(t[n])?(i[n]={},_(i[n],e[n]),_(i[n],t[n])):null!=t[n]?i[n]=t[n]:delete i[n]);for(n in e)o(e,n)&&!o(t,n)&&a(e[n])&&(i[n]=_({},i[n]));return i}function O(e){null!=e&&this.set(e)}s.suppressDeprecationWarnings=!1,s.deprecationHandler=null,k=Object.keys?Object.keys:function(e){var t,n=[];for(t in e)o(e,t)&&n.push(t);return n};function H(e,t,n){var i=""+Math.abs(e),s=t-i.length;return(e>=0?n?"+":"":"-")+Math.pow(10,Math.max(0,s)).toString().substr(1)+i}var j=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,E=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,P={},A={};function R(e,t,n,i){var s=i;"string"==typeof i&&(s=function(){return this[i]()}),e&&(A[e]=s),t&&(A[t[0]]=function(){return H(s.apply(this,arguments),t[1],t[2])}),n&&(A[n]=function(){return this.localeData().ordinal(s.apply(this,arguments),e)})}function C(e,t){return e.isValid()?(t=I(t,e.localeData()),P[t]=P[t]||function(e){var t,n,i,s=e.match(j);for(t=0,n=s.length;t<n;t++)A[s[t]]?s[t]=A[s[t]]:s[t]=(i=s[t]).match(/\[[\s\S]/)?i.replace(/^\[|\]$/g,""):i.replace(/\\/g,"");return function(t){var i,r="";for(i=0;i<n;i++)r+=T(s[i])?s[i].call(t,e):s[i];return r}}(t),P[t](e)):e.localeData().invalidDate()}function I(e,t){var n=5;function i(e){return t.longDateFormat(e)||e}for(E.lastIndex=0;n>=0&&E.test(e);)e=e.replace(E,i),E.lastIndex=0,n-=1;return e}var W={};function N(e,t){var n=e.toLowerCase();W[n]=W[n+"s"]=W[t]=e}function F(e){return"string"==typeof e?W[e]||W[e.toLowerCase()]:void 0}function z(e){var t,n,i={};for(n in e)o(e,n)&&(t=F(n))&&(i[t]=e[n]);return i}var B={};function V(e,t){B[e]=t}function U(e){return e%4==0&&e%100!=0||e%400==0}function J(e){return e<0?Math.ceil(e)||0:Math.floor(e)}function $(e){var t=+e,n=0;return 0!==t&&isFinite(t)&&(n=J(t)),n}function q(e,t){return function(n){return null!=n?(K(this,e,n),s.updateOffset(this,t),this):G(this,e)}}function G(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():NaN}function K(e,t,n){e.isValid()&&!isNaN(n)&&("FullYear"===t&&U(e.year())&&1===e.month()&&29===e.date()?(n=$(n),e._d["set"+(e._isUTC?"UTC":"")+t](n,e.month(),ve(n,e.month()))):e._d["set"+(e._isUTC?"UTC":"")+t](n))}var Z,X=/\d/,Q=/\d\d/,ee=/\d{3}/,te=/\d{4}/,ne=/[+-]?\d{6}/,ie=/\d\d?/,se=/\d\d\d\d?/,re=/\d\d\d\d\d\d?/,ae=/\d{1,3}/,oe=/\d{1,4}/,de=/[+-]?\d{1,6}/,le=/\d+/,ue=/[+-]?\d+/,he=/Z|[+-]\d\d:?\d\d/gi,ce=/Z|[+-]\d\d(?::?\d\d)?/gi,_e=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;function me(e,t,n){Z[e]=T(t)?t:function(e,i){return e&&n?n:t}}function fe(e,t){return o(Z,e)?Z[e](t._strict,t._locale):new RegExp(pe(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,(function(e,t,n,i,s){return t||n||i||s}))))}function pe(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}Z={};var ge={};function ye(e,t){var n,i=t;for("string"==typeof e&&(e=[e]),u(t)&&(i=function(e,n){n[t]=$(e)}),n=0;n<e.length;n++)ge[e[n]]=i}function Me(e,t){ye(e,(function(e,n,i,s){i._w=i._w||{},t(e,i._w,i,s)}))}function be(e,t,n){null!=t&&o(ge,e)&&ge[e](t,n._a,n,e)}var Le;function ve(e,t){if(isNaN(e)||isNaN(t))return NaN;var n,i=(t%(n=12)+n)%n;return e+=(t-i)/12,1===i?U(e)?29:28:31-i%7%2}Le=Array.prototype.indexOf?Array.prototype.indexOf:function(e){var t;for(t=0;t<this.length;++t)if(this[t]===e)return t;return-1},R("M",["MM",2],"Mo",(function(){return this.month()+1})),R("MMM",0,0,(function(e){return this.localeData().monthsShort(this,e)})),R("MMMM",0,0,(function(e){return this.localeData().months(this,e)})),N("month","M"),V("month",8),me("M",ie),me("MM",ie,Q),me("MMM",(function(e,t){return t.monthsShortRegex(e)})),me("MMMM",(function(e,t){return t.monthsRegex(e)})),ye(["M","MM"],(function(e,t){t[1]=$(e)-1})),ye(["MMM","MMMM"],(function(e,t,n,i){var s=n._locale.monthsParse(e,i,n._strict);null!=s?t[1]=s:f(n).invalidMonth=e}));var we="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),Ye="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),ke=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,De=_e,xe=_e;function Te(e,t,n){var i,s,r,a=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],i=0;i<12;++i)r=m([2e3,i]),this._shortMonthsParse[i]=this.monthsShort(r,"").toLocaleLowerCase(),this._longMonthsParse[i]=this.months(r,"").toLocaleLowerCase();return n?"MMM"===t?-1!==(s=Le.call(this._shortMonthsParse,a))?s:null:-1!==(s=Le.call(this._longMonthsParse,a))?s:null:"MMM"===t?-1!==(s=Le.call(this._shortMonthsParse,a))||-1!==(s=Le.call(this._longMonthsParse,a))?s:null:-1!==(s=Le.call(this._longMonthsParse,a))||-1!==(s=Le.call(this._shortMonthsParse,a))?s:null}function Se(e,t){var n;if(!e.isValid())return e;if("string"==typeof t)if(/^\d+$/.test(t))t=$(t);else if(!u(t=e.localeData().monthsParse(t)))return e;return n=Math.min(e.date(),ve(e.year(),t)),e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,n),e}function Oe(e){return null!=e?(Se(this,e),s.updateOffset(this,!0),this):G(this,"Month")}function He(){function e(e,t){return t.length-e.length}var t,n,i=[],s=[],r=[];for(t=0;t<12;t++)n=m([2e3,t]),i.push(this.monthsShort(n,"")),s.push(this.months(n,"")),r.push(this.months(n,"")),r.push(this.monthsShort(n,""));for(i.sort(e),s.sort(e),r.sort(e),t=0;t<12;t++)i[t]=pe(i[t]),s[t]=pe(s[t]);for(t=0;t<24;t++)r[t]=pe(r[t]);this._monthsRegex=new RegExp("^("+r.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+s.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+i.join("|")+")","i")}function je(e){return U(e)?366:365}R("Y",0,0,(function(){var e=this.year();return e<=9999?H(e,4):"+"+e})),R(0,["YY",2],0,(function(){return this.year()%100})),R(0,["YYYY",4],0,"year"),R(0,["YYYYY",5],0,"year"),R(0,["YYYYYY",6,!0],0,"year"),N("year","y"),V("year",1),me("Y",ue),me("YY",ie,Q),me("YYYY",oe,te),me("YYYYY",de,ne),me("YYYYYY",de,ne),ye(["YYYYY","YYYYYY"],0),ye("YYYY",(function(e,t){t[0]=2===e.length?s.parseTwoDigitYear(e):$(e)})),ye("YY",(function(e,t){t[0]=s.parseTwoDigitYear(e)})),ye("Y",(function(e,t){t[0]=parseInt(e,10)})),s.parseTwoDigitYear=function(e){return $(e)+($(e)>68?1900:2e3)};var Ee=q("FullYear",!0);function Pe(e,t,n,i,s,r,a){var o;return e<100&&e>=0?(o=new Date(e+400,t,n,i,s,r,a),isFinite(o.getFullYear())&&o.setFullYear(e)):o=new Date(e,t,n,i,s,r,a),o}function Ae(e){var t,n;return e<100&&e>=0?((n=Array.prototype.slice.call(arguments))[0]=e+400,t=new Date(Date.UTC.apply(null,n)),isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e)):t=new Date(Date.UTC.apply(null,arguments)),t}function Re(e,t,n){var i=7+t-n;return-(7+Ae(e,0,i).getUTCDay()-t)%7+i-1}function Ce(e,t,n,i,s){var r,a,o=1+7*(t-1)+(7+n-i)%7+Re(e,i,s);return o<=0?a=je(r=e-1)+o:o>je(e)?(r=e+1,a=o-je(e)):(r=e,a=o),{year:r,dayOfYear:a}}function Ie(e,t,n){var i,s,r=Re(e.year(),t,n),a=Math.floor((e.dayOfYear()-r-1)/7)+1;return a<1?i=a+We(s=e.year()-1,t,n):a>We(e.year(),t,n)?(i=a-We(e.year(),t,n),s=e.year()+1):(s=e.year(),i=a),{week:i,year:s}}function We(e,t,n){var i=Re(e,t,n),s=Re(e+1,t,n);return(je(e)-i+s)/7}R("w",["ww",2],"wo","week"),R("W",["WW",2],"Wo","isoWeek"),N("week","w"),N("isoWeek","W"),V("week",5),V("isoWeek",5),me("w",ie),me("ww",ie,Q),me("W",ie),me("WW",ie,Q),Me(["w","ww","W","WW"],(function(e,t,n,i){t[i.substr(0,1)]=$(e)}));function Ne(e,t){return e.slice(t,7).concat(e.slice(0,t))}R("d",0,"do","day"),R("dd",0,0,(function(e){return this.localeData().weekdaysMin(this,e)})),R("ddd",0,0,(function(e){return this.localeData().weekdaysShort(this,e)})),R("dddd",0,0,(function(e){return this.localeData().weekdays(this,e)})),R("e",0,0,"weekday"),R("E",0,0,"isoWeekday"),N("day","d"),N("weekday","e"),N("isoWeekday","E"),V("day",11),V("weekday",11),V("isoWeekday",11),me("d",ie),me("e",ie),me("E",ie),me("dd",(function(e,t){return t.weekdaysMinRegex(e)})),me("ddd",(function(e,t){return t.weekdaysShortRegex(e)})),me("dddd",(function(e,t){return t.weekdaysRegex(e)})),Me(["dd","ddd","dddd"],(function(e,t,n,i){var s=n._locale.weekdaysParse(e,i,n._strict);null!=s?t.d=s:f(n).invalidWeekday=e})),Me(["d","e","E"],(function(e,t,n,i){t[i]=$(e)}));var Fe="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),ze="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),Be="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),Ve=_e,Ue=_e,Je=_e;function $e(e,t,n){var i,s,r,a=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],i=0;i<7;++i)r=m([2e3,1]).day(i),this._minWeekdaysParse[i]=this.weekdaysMin(r,"").toLocaleLowerCase(),this._shortWeekdaysParse[i]=this.weekdaysShort(r,"").toLocaleLowerCase(),this._weekdaysParse[i]=this.weekdays(r,"").toLocaleLowerCase();return n?"dddd"===t?-1!==(s=Le.call(this._weekdaysParse,a))?s:null:"ddd"===t?-1!==(s=Le.call(this._shortWeekdaysParse,a))?s:null:-1!==(s=Le.call(this._minWeekdaysParse,a))?s:null:"dddd"===t?-1!==(s=Le.call(this._weekdaysParse,a))||-1!==(s=Le.call(this._shortWeekdaysParse,a))||-1!==(s=Le.call(this._minWeekdaysParse,a))?s:null:"ddd"===t?-1!==(s=Le.call(this._shortWeekdaysParse,a))||-1!==(s=Le.call(this._weekdaysParse,a))||-1!==(s=Le.call(this._minWeekdaysParse,a))?s:null:-1!==(s=Le.call(this._minWeekdaysParse,a))||-1!==(s=Le.call(this._weekdaysParse,a))||-1!==(s=Le.call(this._shortWeekdaysParse,a))?s:null}function qe(){function e(e,t){return t.length-e.length}var t,n,i,s,r,a=[],o=[],d=[],l=[];for(t=0;t<7;t++)n=m([2e3,1]).day(t),i=pe(this.weekdaysMin(n,"")),s=pe(this.weekdaysShort(n,"")),r=pe(this.weekdays(n,"")),a.push(i),o.push(s),d.push(r),l.push(i),l.push(s),l.push(r);a.sort(e),o.sort(e),d.sort(e),l.sort(e),this._weekdaysRegex=new RegExp("^("+l.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+d.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+o.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+a.join("|")+")","i")}function Ge(){return this.hours()%12||12}function Ke(e,t){R(e,0,0,(function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)}))}function Ze(e,t){return t._meridiemParse}R("H",["HH",2],0,"hour"),R("h",["hh",2],0,Ge),R("k",["kk",2],0,(function(){return this.hours()||24})),R("hmm",0,0,(function(){return""+Ge.apply(this)+H(this.minutes(),2)})),R("hmmss",0,0,(function(){return""+Ge.apply(this)+H(this.minutes(),2)+H(this.seconds(),2)})),R("Hmm",0,0,(function(){return""+this.hours()+H(this.minutes(),2)})),R("Hmmss",0,0,(function(){return""+this.hours()+H(this.minutes(),2)+H(this.seconds(),2)})),Ke("a",!0),Ke("A",!1),N("hour","h"),V("hour",13),me("a",Ze),me("A",Ze),me("H",ie),me("h",ie),me("k",ie),me("HH",ie,Q),me("hh",ie,Q),me("kk",ie,Q),me("hmm",se),me("hmmss",re),me("Hmm",se),me("Hmmss",re),ye(["H","HH"],3),ye(["k","kk"],(function(e,t,n){var i=$(e);t[3]=24===i?0:i})),ye(["a","A"],(function(e,t,n){n._isPm=n._locale.isPM(e),n._meridiem=e})),ye(["h","hh"],(function(e,t,n){t[3]=$(e),f(n).bigHour=!0})),ye("hmm",(function(e,t,n){var i=e.length-2;t[3]=$(e.substr(0,i)),t[4]=$(e.substr(i)),f(n).bigHour=!0})),ye("hmmss",(function(e,t,n){var i=e.length-4,s=e.length-2;t[3]=$(e.substr(0,i)),t[4]=$(e.substr(i,2)),t[5]=$(e.substr(s)),f(n).bigHour=!0})),ye("Hmm",(function(e,t,n){var i=e.length-2;t[3]=$(e.substr(0,i)),t[4]=$(e.substr(i))})),ye("Hmmss",(function(e,t,n){var i=e.length-4,s=e.length-2;t[3]=$(e.substr(0,i)),t[4]=$(e.substr(i,2)),t[5]=$(e.substr(s))}));var Xe=q("Hours",!0);var Qe,et={calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},longDateFormat:{LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},invalidDate:"Invalid date",ordinal:"%d",dayOfMonthOrdinalParse:/\d{1,2}/,relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",w:"a week",ww:"%d weeks",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},months:we,monthsShort:Ye,week:{dow:0,doy:6},weekdays:Fe,weekdaysMin:Be,weekdaysShort:ze,meridiemParse:/[ap]\.?m?\.?/i},tt={},nt={};function it(e,t){var n,i=Math.min(e.length,t.length);for(n=0;n<i;n+=1)if(e[n]!==t[n])return n;return i}function st(e){return e?e.toLowerCase().replace("_","-"):e}function rt(t){var i=null;if(void 0===tt[t]&&e&&e.exports)try{i=Qe._abbr,n(6700)("./"+t),at(i)}catch(e){tt[t]=null}return tt[t]}function at(e,t){var n;return e&&((n=l(t)?dt(e):ot(e,t))?Qe=n:"undefined"!=typeof console&&console.warn&&console.warn("Locale "+e+" not found. Did you forget to load it?")),Qe._abbr}function ot(e,t){if(null!==t){var n,i=et;if(t.abbr=e,null!=tt[e])x("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),i=tt[e]._config;else if(null!=t.parentLocale)if(null!=tt[t.parentLocale])i=tt[t.parentLocale]._config;else{if(null==(n=rt(t.parentLocale)))return nt[t.parentLocale]||(nt[t.parentLocale]=[]),nt[t.parentLocale].push({name:e,config:t}),null;i=n._config}return tt[e]=new O(S(i,t)),nt[e]&&nt[e].forEach((function(e){ot(e.name,e.config)})),at(e),tt[e]}return delete tt[e],null}function dt(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return Qe;if(!r(e)){if(t=rt(e))return t;e=[e]}return function(e){for(var t,n,i,s,r=0;r<e.length;){for(t=(s=st(e[r]).split("-")).length,n=(n=st(e[r+1]))?n.split("-"):null;t>0;){if(i=rt(s.slice(0,t).join("-")))return i;if(n&&n.length>=t&&it(s,n)>=t-1)break;t--}r++}return Qe}(e)}function lt(e){var t,n=e._a;return n&&-2===f(e).overflow&&(t=n[1]<0||n[1]>11?1:n[2]<1||n[2]>ve(n[0],n[1])?2:n[3]<0||n[3]>24||24===n[3]&&(0!==n[4]||0!==n[5]||0!==n[6])?3:n[4]<0||n[4]>59?4:n[5]<0||n[5]>59?5:n[6]<0||n[6]>999?6:-1,f(e)._overflowDayOfYear&&(t<0||t>2)&&(t=2),f(e)._overflowWeeks&&-1===t&&(t=7),f(e)._overflowWeekday&&-1===t&&(t=8),f(e).overflow=t),e}var ut=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,ht=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,ct=/Z|[+-]\d\d(?::?\d\d)?/,_t=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/],["YYYYMM",/\d{6}/,!1],["YYYY",/\d{4}/,!1]],mt=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],ft=/^\/?Date\((-?\d+)/i,pt=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,gt={UT:0,GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function yt(e){var t,n,i,s,r,a,o=e._i,d=ut.exec(o)||ht.exec(o);if(d){for(f(e).iso=!0,t=0,n=_t.length;t<n;t++)if(_t[t][1].exec(d[1])){s=_t[t][0],i=!1!==_t[t][2];break}if(null==s)return void(e._isValid=!1);if(d[3]){for(t=0,n=mt.length;t<n;t++)if(mt[t][1].exec(d[3])){r=(d[2]||" ")+mt[t][0];break}if(null==r)return void(e._isValid=!1)}if(!i&&null!=r)return void(e._isValid=!1);if(d[4]){if(!ct.exec(d[4]))return void(e._isValid=!1);a="Z"}e._f=s+(r||"")+(a||""),wt(e)}else e._isValid=!1}function Mt(e){var t=parseInt(e,10);return t<=49?2e3+t:t<=999?1900+t:t}function bt(e){var t,n,i,s,r,a,o,d,l=pt.exec(e._i.replace(/\([^)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s\s*/,"").replace(/\s\s*$/,""));if(l){if(n=l[4],i=l[3],s=l[2],r=l[5],a=l[6],o=l[7],d=[Mt(n),Ye.indexOf(i),parseInt(s,10),parseInt(r,10),parseInt(a,10)],o&&d.push(parseInt(o,10)),t=d,!function(e,t,n){return!e||ze.indexOf(e)===new Date(t[0],t[1],t[2]).getDay()||(f(n).weekdayMismatch=!0,n._isValid=!1,!1)}(l[1],t,e))return;e._a=t,e._tzm=function(e,t,n){if(e)return gt[e];if(t)return 0;var i=parseInt(n,10),s=i%100;return(i-s)/100*60+s}(l[8],l[9],l[10]),e._d=Ae.apply(null,e._a),e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),f(e).rfc2822=!0}else e._isValid=!1}function Lt(e,t,n){return null!=e?e:null!=t?t:n}function vt(e){var t,n,i,r,a,o=[];if(!e._d){for(i=function(e){var t=new Date(s.now());return e._useUTC?[t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()]:[t.getFullYear(),t.getMonth(),t.getDate()]}(e),e._w&&null==e._a[2]&&null==e._a[1]&&function(e){var t,n,i,s,r,a,o,d,l;null!=(t=e._w).GG||null!=t.W||null!=t.E?(r=1,a=4,n=Lt(t.GG,e._a[0],Ie(Dt(),1,4).year),i=Lt(t.W,1),((s=Lt(t.E,1))<1||s>7)&&(d=!0)):(r=e._locale._week.dow,a=e._locale._week.doy,l=Ie(Dt(),r,a),n=Lt(t.gg,e._a[0],l.year),i=Lt(t.w,l.week),null!=t.d?((s=t.d)<0||s>6)&&(d=!0):null!=t.e?(s=t.e+r,(t.e<0||t.e>6)&&(d=!0)):s=r),i<1||i>We(n,r,a)?f(e)._overflowWeeks=!0:null!=d?f(e)._overflowWeekday=!0:(o=Ce(n,i,s,r,a),e._a[0]=o.year,e._dayOfYear=o.dayOfYear)}(e),null!=e._dayOfYear&&(a=Lt(e._a[0],i[0]),(e._dayOfYear>je(a)||0===e._dayOfYear)&&(f(e)._overflowDayOfYear=!0),n=Ae(a,0,e._dayOfYear),e._a[1]=n.getUTCMonth(),e._a[2]=n.getUTCDate()),t=0;t<3&&null==e._a[t];++t)e._a[t]=o[t]=i[t];for(;t<7;t++)e._a[t]=o[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[3]&&0===e._a[4]&&0===e._a[5]&&0===e._a[6]&&(e._nextDay=!0,e._a[3]=0),e._d=(e._useUTC?Ae:Pe).apply(null,o),r=e._useUTC?e._d.getUTCDay():e._d.getDay(),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[3]=24),e._w&&void 0!==e._w.d&&e._w.d!==r&&(f(e).weekdayMismatch=!0)}}function wt(e){if(e._f!==s.ISO_8601)if(e._f!==s.RFC_2822){e._a=[],f(e).empty=!0;var t,n,i,r,a,o,d=""+e._i,l=d.length,u=0;for(i=I(e._f,e._locale).match(j)||[],t=0;t<i.length;t++)r=i[t],(n=(d.match(fe(r,e))||[])[0])&&((a=d.substr(0,d.indexOf(n))).length>0&&f(e).unusedInput.push(a),d=d.slice(d.indexOf(n)+n.length),u+=n.length),A[r]?(n?f(e).empty=!1:f(e).unusedTokens.push(r),be(r,n,e)):e._strict&&!n&&f(e).unusedTokens.push(r);f(e).charsLeftOver=l-u,d.length>0&&f(e).unusedInput.push(d),e._a[3]<=12&&!0===f(e).bigHour&&e._a[3]>0&&(f(e).bigHour=void 0),f(e).parsedDateParts=e._a.slice(0),f(e).meridiem=e._meridiem,e._a[3]=function(e,t,n){var i;return null==n?t:null!=e.meridiemHour?e.meridiemHour(t,n):null!=e.isPM?((i=e.isPM(n))&&t<12&&(t+=12),i||12!==t||(t=0),t):t}(e._locale,e._a[3],e._meridiem),null!==(o=f(e).era)&&(e._a[0]=e._locale.erasConvertYear(o,e._a[0])),vt(e),lt(e)}else bt(e);else yt(e)}function Yt(e){var t=e._i,n=e._f;return e._locale=e._locale||dt(e._l),null===t||void 0===n&&""===t?g({nullInput:!0}):("string"==typeof t&&(e._i=t=e._locale.preparse(t)),v(t)?new L(lt(t)):(h(t)?e._d=t:r(n)?function(e){var t,n,i,s,r,a,o=!1;if(0===e._f.length)return f(e).invalidFormat=!0,void(e._d=new Date(NaN));for(s=0;s<e._f.length;s++)r=0,a=!1,t=b({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[s],wt(t),p(t)&&(a=!0),r+=f(t).charsLeftOver,r+=10*f(t).unusedTokens.length,f(t).score=r,o?r<i&&(i=r,n=t):(null==i||r<i||a)&&(i=r,n=t,a&&(o=!0));_(e,n||t)}(e):n?wt(e):function(e){var t=e._i;l(t)?e._d=new Date(s.now()):h(t)?e._d=new Date(t.valueOf()):"string"==typeof t?function(e){var t=ft.exec(e._i);null===t?(yt(e),!1===e._isValid&&(delete e._isValid,bt(e),!1===e._isValid&&(delete e._isValid,e._strict?e._isValid=!1:s.createFromInputFallback(e)))):e._d=new Date(+t[1])}(e):r(t)?(e._a=c(t.slice(0),(function(e){return parseInt(e,10)})),vt(e)):a(t)?function(e){if(!e._d){var t=z(e._i),n=void 0===t.day?t.date:t.day;e._a=c([t.year,t.month,n,t.hour,t.minute,t.second,t.millisecond],(function(e){return e&&parseInt(e,10)})),vt(e)}}(e):u(t)?e._d=new Date(t):s.createFromInputFallback(e)}(e),p(e)||(e._d=null),e))}function kt(e,t,n,i,s){var o,l={};return!0!==t&&!1!==t||(i=t,t=void 0),!0!==n&&!1!==n||(i=n,n=void 0),(a(e)&&d(e)||r(e)&&0===e.length)&&(e=void 0),l._isAMomentObject=!0,l._useUTC=l._isUTC=s,l._l=n,l._i=e,l._f=t,l._strict=i,(o=new L(lt(Yt(l))))._nextDay&&(o.add(1,"d"),o._nextDay=void 0),o}function Dt(e,t,n,i){return kt(e,t,n,i,!1)}s.createFromInputFallback=Y("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",(function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))})),s.ISO_8601=function(){},s.RFC_2822=function(){};var xt=Y("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",(function(){var e=Dt.apply(null,arguments);return this.isValid()&&e.isValid()?e<this?this:e:g()})),Tt=Y("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",(function(){var e=Dt.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:g()}));function St(e,t){var n,i;if(1===t.length&&r(t[0])&&(t=t[0]),!t.length)return Dt();for(n=t[0],i=1;i<t.length;++i)t[i].isValid()&&!t[i][e](n)||(n=t[i]);return n}var Ot=["year","quarter","month","week","day","hour","minute","second","millisecond"];function Ht(e){var t=z(e),n=t.year||0,i=t.quarter||0,s=t.month||0,r=t.week||t.isoWeek||0,a=t.day||0,d=t.hour||0,l=t.minute||0,u=t.second||0,h=t.millisecond||0;this._isValid=function(e){var t,n,i=!1;for(t in e)if(o(e,t)&&(-1===Le.call(Ot,t)||null!=e[t]&&isNaN(e[t])))return!1;for(n=0;n<Ot.length;++n)if(e[Ot[n]]){if(i)return!1;parseFloat(e[Ot[n]])!==$(e[Ot[n]])&&(i=!0)}return!0}(t),this._milliseconds=+h+1e3*u+6e4*l+1e3*d*60*60,this._days=+a+7*r,this._months=+s+3*i+12*n,this._data={},this._locale=dt(),this._bubble()}function jt(e){return e instanceof Ht}function Et(e){return e<0?-1*Math.round(-1*e):Math.round(e)}function Pt(e,t){R(e,0,0,(function(){var e=this.utcOffset(),n="+";return e<0&&(e=-e,n="-"),n+H(~~(e/60),2)+t+H(~~e%60,2)}))}Pt("Z",":"),Pt("ZZ",""),me("Z",ce),me("ZZ",ce),ye(["Z","ZZ"],(function(e,t,n){n._useUTC=!0,n._tzm=Rt(ce,e)}));var At=/([\+\-]|\d\d)/gi;function Rt(e,t){var n,i,s=(t||"").match(e);return null===s?null:0===(i=60*(n=((s[s.length-1]||[])+"").match(At)||["-",0,0])[1]+$(n[2]))?0:"+"===n[0]?i:-i}function Ct(e,t){var n,i;return t._isUTC?(n=t.clone(),i=(v(e)||h(e)?e.valueOf():Dt(e).valueOf())-n.valueOf(),n._d.setTime(n._d.valueOf()+i),s.updateOffset(n,!1),n):Dt(e).local()}function It(e){return-Math.round(e._d.getTimezoneOffset())}function Wt(){return!!this.isValid()&&this._isUTC&&0===this._offset}s.updateOffset=function(){};var Nt=/^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,Ft=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function zt(e,t){var n,i,s,r,a,d,l=e,h=null;return jt(e)?l={ms:e._milliseconds,d:e._days,M:e._months}:u(e)||!isNaN(+e)?(l={},t?l[t]=+e:l.milliseconds=+e):(h=Nt.exec(e))?(n="-"===h[1]?-1:1,l={y:0,d:$(h[2])*n,h:$(h[3])*n,m:$(h[4])*n,s:$(h[5])*n,ms:$(Et(1e3*h[6]))*n}):(h=Ft.exec(e))?(n="-"===h[1]?-1:1,l={y:Bt(h[2],n),M:Bt(h[3],n),w:Bt(h[4],n),d:Bt(h[5],n),h:Bt(h[6],n),m:Bt(h[7],n),s:Bt(h[8],n)}):null==l?l={}:"object"==typeof l&&("from"in l||"to"in l)&&(r=Dt(l.from),a=Dt(l.to),s=r.isValid()&&a.isValid()?(a=Ct(a,r),r.isBefore(a)?d=Vt(r,a):((d=Vt(a,r)).milliseconds=-d.milliseconds,d.months=-d.months),d):{milliseconds:0,months:0},(l={}).ms=s.milliseconds,l.M=s.months),i=new Ht(l),jt(e)&&o(e,"_locale")&&(i._locale=e._locale),jt(e)&&o(e,"_isValid")&&(i._isValid=e._isValid),i}function Bt(e,t){var n=e&&parseFloat(e.replace(",","."));return(isNaN(n)?0:n)*t}function Vt(e,t){var n={};return n.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(n.months,"M").isAfter(t)&&--n.months,n.milliseconds=+t-+e.clone().add(n.months,"M"),n}function Ut(e,t){return function(n,i){var s;return null===i||isNaN(+i)||(x(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),s=n,n=i,i=s),Jt(this,zt(n,i),e),this}}function Jt(e,t,n,i){var r=t._milliseconds,a=Et(t._days),o=Et(t._months);e.isValid()&&(i=null==i||i,o&&Se(e,G(e,"Month")+o*n),a&&K(e,"Date",G(e,"Date")+a*n),r&&e._d.setTime(e._d.valueOf()+r*n),i&&s.updateOffset(e,a||o))}zt.fn=Ht.prototype,zt.invalid=function(){return zt(NaN)};var $t=Ut(1,"add"),qt=Ut(-1,"subtract");function Gt(e){return"string"==typeof e||e instanceof String}function Kt(e){return v(e)||h(e)||Gt(e)||u(e)||function(e){var t=r(e),n=!1;return t&&(n=0===e.filter((function(t){return!u(t)&&Gt(e)})).length),t&&n}(e)||function(e){var t,n,i=a(e)&&!d(e),s=!1,r=["years","year","y","months","month","M","days","day","d","dates","date","D","hours","hour","h","minutes","minute","m","seconds","second","s","milliseconds","millisecond","ms"];for(t=0;t<r.length;t+=1)n=r[t],s=s||o(e,n);return i&&s}(e)||null==e}function Zt(e){var t,n=a(e)&&!d(e),i=!1,s=["sameDay","nextDay","lastDay","nextWeek","lastWeek","sameElse"];for(t=0;t<s.length;t+=1)i=i||o(e,s[t]);return n&&i}function Xt(e,t){if(e.date()<t.date())return-Xt(t,e);var n=12*(t.year()-e.year())+(t.month()-e.month()),i=e.clone().add(n,"months");return-(n+(t-i<0?(t-i)/(i-e.clone().add(n-1,"months")):(t-i)/(e.clone().add(n+1,"months")-i)))||0}function Qt(e){var t;return void 0===e?this._locale._abbr:(null!=(t=dt(e))&&(this._locale=t),this)}s.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",s.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var en=Y("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",(function(e){return void 0===e?this.localeData():this.locale(e)}));function tn(){return this._locale}var nn=1e3,sn=6e4,rn=36e5,an=126227808e5;function on(e,t){return(e%t+t)%t}function dn(e,t,n){return e<100&&e>=0?new Date(e+400,t,n)-an:new Date(e,t,n).valueOf()}function ln(e,t,n){return e<100&&e>=0?Date.UTC(e+400,t,n)-an:Date.UTC(e,t,n)}function un(e,t){return t.erasAbbrRegex(e)}function hn(){var e,t,n=[],i=[],s=[],r=[],a=this.eras();for(e=0,t=a.length;e<t;++e)i.push(pe(a[e].name)),n.push(pe(a[e].abbr)),s.push(pe(a[e].narrow)),r.push(pe(a[e].name)),r.push(pe(a[e].abbr)),r.push(pe(a[e].narrow));this._erasRegex=new RegExp("^("+r.join("|")+")","i"),this._erasNameRegex=new RegExp("^("+i.join("|")+")","i"),this._erasAbbrRegex=new RegExp("^("+n.join("|")+")","i"),this._erasNarrowRegex=new RegExp("^("+s.join("|")+")","i")}function cn(e,t){R(0,[e,e.length],0,t)}function _n(e,t,n,i,s){var r;return null==e?Ie(this,i,s).year:(t>(r=We(e,i,s))&&(t=r),mn.call(this,e,t,n,i,s))}function mn(e,t,n,i,s){var r=Ce(e,t,n,i,s),a=Ae(r.year,0,r.dayOfYear);return this.year(a.getUTCFullYear()),this.month(a.getUTCMonth()),this.date(a.getUTCDate()),this}R("N",0,0,"eraAbbr"),R("NN",0,0,"eraAbbr"),R("NNN",0,0,"eraAbbr"),R("NNNN",0,0,"eraName"),R("NNNNN",0,0,"eraNarrow"),R("y",["y",1],"yo","eraYear"),R("y",["yy",2],0,"eraYear"),R("y",["yyy",3],0,"eraYear"),R("y",["yyyy",4],0,"eraYear"),me("N",un),me("NN",un),me("NNN",un),me("NNNN",(function(e,t){return t.erasNameRegex(e)})),me("NNNNN",(function(e,t){return t.erasNarrowRegex(e)})),ye(["N","NN","NNN","NNNN","NNNNN"],(function(e,t,n,i){var s=n._locale.erasParse(e,i,n._strict);s?f(n).era=s:f(n).invalidEra=e})),me("y",le),me("yy",le),me("yyy",le),me("yyyy",le),me("yo",(function(e,t){return t._eraYearOrdinalRegex||le})),ye(["y","yy","yyy","yyyy"],0),ye(["yo"],(function(e,t,n,i){var s;n._locale._eraYearOrdinalRegex&&(s=e.match(n._locale._eraYearOrdinalRegex)),n._locale.eraYearOrdinalParse?t[0]=n._locale.eraYearOrdinalParse(e,s):t[0]=parseInt(e,10)})),R(0,["gg",2],0,(function(){return this.weekYear()%100})),R(0,["GG",2],0,(function(){return this.isoWeekYear()%100})),cn("gggg","weekYear"),cn("ggggg","weekYear"),cn("GGGG","isoWeekYear"),cn("GGGGG","isoWeekYear"),N("weekYear","gg"),N("isoWeekYear","GG"),V("weekYear",1),V("isoWeekYear",1),me("G",ue),me("g",ue),me("GG",ie,Q),me("gg",ie,Q),me("GGGG",oe,te),me("gggg",oe,te),me("GGGGG",de,ne),me("ggggg",de,ne),Me(["gggg","ggggg","GGGG","GGGGG"],(function(e,t,n,i){t[i.substr(0,2)]=$(e)})),Me(["gg","GG"],(function(e,t,n,i){t[i]=s.parseTwoDigitYear(e)})),R("Q",0,"Qo","quarter"),N("quarter","Q"),V("quarter",7),me("Q",X),ye("Q",(function(e,t){t[1]=3*($(e)-1)})),R("D",["DD",2],"Do","date"),N("date","D"),V("date",9),me("D",ie),me("DD",ie,Q),me("Do",(function(e,t){return e?t._dayOfMonthOrdinalParse||t._ordinalParse:t._dayOfMonthOrdinalParseLenient})),ye(["D","DD"],2),ye("Do",(function(e,t){t[2]=$(e.match(ie)[0])}));var fn=q("Date",!0);R("DDD",["DDDD",3],"DDDo","dayOfYear"),N("dayOfYear","DDD"),V("dayOfYear",4),me("DDD",ae),me("DDDD",ee),ye(["DDD","DDDD"],(function(e,t,n){n._dayOfYear=$(e)})),R("m",["mm",2],0,"minute"),N("minute","m"),V("minute",14),me("m",ie),me("mm",ie,Q),ye(["m","mm"],4);var pn=q("Minutes",!1);R("s",["ss",2],0,"second"),N("second","s"),V("second",15),me("s",ie),me("ss",ie,Q),ye(["s","ss"],5);var gn,yn,Mn=q("Seconds",!1);for(R("S",0,0,(function(){return~~(this.millisecond()/100)})),R(0,["SS",2],0,(function(){return~~(this.millisecond()/10)})),R(0,["SSS",3],0,"millisecond"),R(0,["SSSS",4],0,(function(){return 10*this.millisecond()})),R(0,["SSSSS",5],0,(function(){return 100*this.millisecond()})),R(0,["SSSSSS",6],0,(function(){return 1e3*this.millisecond()})),R(0,["SSSSSSS",7],0,(function(){return 1e4*this.millisecond()})),R(0,["SSSSSSSS",8],0,(function(){return 1e5*this.millisecond()})),R(0,["SSSSSSSSS",9],0,(function(){return 1e6*this.millisecond()})),N("millisecond","ms"),V("millisecond",16),me("S",ae,X),me("SS",ae,Q),me("SSS",ae,ee),gn="SSSS";gn.length<=9;gn+="S")me(gn,le);function bn(e,t){t[6]=$(1e3*("0."+e))}for(gn="S";gn.length<=9;gn+="S")ye(gn,bn);yn=q("Milliseconds",!1),R("z",0,0,"zoneAbbr"),R("zz",0,0,"zoneName");var Ln=L.prototype;function vn(e){return e}Ln.add=$t,Ln.calendar=function(e,t){1===arguments.length&&(arguments[0]?Kt(arguments[0])?(e=arguments[0],t=void 0):Zt(arguments[0])&&(t=arguments[0],e=void 0):(e=void 0,t=void 0));var n=e||Dt(),i=Ct(n,this).startOf("day"),r=s.calendarFormat(this,i)||"sameElse",a=t&&(T(t[r])?t[r].call(this,n):t[r]);return this.format(a||this.localeData().calendar(r,this,Dt(n)))},Ln.clone=function(){return new L(this)},Ln.diff=function(e,t,n){var i,s,r;if(!this.isValid())return NaN;if(!(i=Ct(e,this)).isValid())return NaN;switch(s=6e4*(i.utcOffset()-this.utcOffset()),t=F(t)){case"year":r=Xt(this,i)/12;break;case"month":r=Xt(this,i);break;case"quarter":r=Xt(this,i)/3;break;case"second":r=(this-i)/1e3;break;case"minute":r=(this-i)/6e4;break;case"hour":r=(this-i)/36e5;break;case"day":r=(this-i-s)/864e5;break;case"week":r=(this-i-s)/6048e5;break;default:r=this-i}return n?r:J(r)},Ln.endOf=function(e){var t,n;if(void 0===(e=F(e))||"millisecond"===e||!this.isValid())return this;switch(n=this._isUTC?ln:dn,e){case"year":t=n(this.year()+1,0,1)-1;break;case"quarter":t=n(this.year(),this.month()-this.month()%3+3,1)-1;break;case"month":t=n(this.year(),this.month()+1,1)-1;break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday()+7)-1;break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1)+7)-1;break;case"day":case"date":t=n(this.year(),this.month(),this.date()+1)-1;break;case"hour":t=this._d.valueOf(),t+=rn-on(t+(this._isUTC?0:this.utcOffset()*sn),rn)-1;break;case"minute":t=this._d.valueOf(),t+=sn-on(t,sn)-1;break;case"second":t=this._d.valueOf(),t+=nn-on(t,nn)-1}return this._d.setTime(t),s.updateOffset(this,!0),this},Ln.format=function(e){e||(e=this.isUtc()?s.defaultFormatUtc:s.defaultFormat);var t=C(this,e);return this.localeData().postformat(t)},Ln.from=function(e,t){return this.isValid()&&(v(e)&&e.isValid()||Dt(e).isValid())?zt({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},Ln.fromNow=function(e){return this.from(Dt(),e)},Ln.to=function(e,t){return this.isValid()&&(v(e)&&e.isValid()||Dt(e).isValid())?zt({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},Ln.toNow=function(e){return this.to(Dt(),e)},Ln.get=function(e){return T(this[e=F(e)])?this[e]():this},Ln.invalidAt=function(){return f(this).overflow},Ln.isAfter=function(e,t){var n=v(e)?e:Dt(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=F(t)||"millisecond")?this.valueOf()>n.valueOf():n.valueOf()<this.clone().startOf(t).valueOf())},Ln.isBefore=function(e,t){var n=v(e)?e:Dt(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=F(t)||"millisecond")?this.valueOf()<n.valueOf():this.clone().endOf(t).valueOf()<n.valueOf())},Ln.isBetween=function(e,t,n,i){var s=v(e)?e:Dt(e),r=v(t)?t:Dt(t);return!!(this.isValid()&&s.isValid()&&r.isValid())&&("("===(i=i||"()")[0]?this.isAfter(s,n):!this.isBefore(s,n))&&(")"===i[1]?this.isBefore(r,n):!this.isAfter(r,n))},Ln.isSame=function(e,t){var n,i=v(e)?e:Dt(e);return!(!this.isValid()||!i.isValid())&&("millisecond"===(t=F(t)||"millisecond")?this.valueOf()===i.valueOf():(n=i.valueOf(),this.clone().startOf(t).valueOf()<=n&&n<=this.clone().endOf(t).valueOf()))},Ln.isSameOrAfter=function(e,t){return this.isSame(e,t)||this.isAfter(e,t)},Ln.isSameOrBefore=function(e,t){return this.isSame(e,t)||this.isBefore(e,t)},Ln.isValid=function(){return p(this)},Ln.lang=en,Ln.locale=Qt,Ln.localeData=tn,Ln.max=Tt,Ln.min=xt,Ln.parsingFlags=function(){return _({},f(this))},Ln.set=function(e,t){if("object"==typeof e){var n,i=function(e){var t,n=[];for(t in e)o(e,t)&&n.push({unit:t,priority:B[t]});return n.sort((function(e,t){return e.priority-t.priority})),n}(e=z(e));for(n=0;n<i.length;n++)this[i[n].unit](e[i[n].unit])}else if(T(this[e=F(e)]))return this[e](t);return this},Ln.startOf=function(e){var t,n;if(void 0===(e=F(e))||"millisecond"===e||!this.isValid())return this;switch(n=this._isUTC?ln:dn,e){case"year":t=n(this.year(),0,1);break;case"quarter":t=n(this.year(),this.month()-this.month()%3,1);break;case"month":t=n(this.year(),this.month(),1);break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday());break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1));break;case"day":case"date":t=n(this.year(),this.month(),this.date());break;case"hour":t=this._d.valueOf(),t-=on(t+(this._isUTC?0:this.utcOffset()*sn),rn);break;case"minute":t=this._d.valueOf(),t-=on(t,sn);break;case"second":t=this._d.valueOf(),t-=on(t,nn)}return this._d.setTime(t),s.updateOffset(this,!0),this},Ln.subtract=qt,Ln.toArray=function(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]},Ln.toObject=function(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}},Ln.toDate=function(){return new Date(this.valueOf())},Ln.toISOString=function(e){if(!this.isValid())return null;var t=!0!==e,n=t?this.clone().utc():this;return n.year()<0||n.year()>9999?C(n,t?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"):T(Date.prototype.toISOString)?t?this.toDate().toISOString():new Date(this.valueOf()+60*this.utcOffset()*1e3).toISOString().replace("Z",C(n,"Z")):C(n,t?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")},Ln.inspect=function(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var e,t,n,i="moment",s="";return this.isLocal()||(i=0===this.utcOffset()?"moment.utc":"moment.parseZone",s="Z"),e="["+i+'("]',t=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY","-MM-DD[T]HH:mm:ss.SSS",n=s+'[")]',this.format(e+t+"-MM-DD[T]HH:mm:ss.SSS"+n)},"undefined"!=typeof Symbol&&null!=Symbol.for&&(Ln[Symbol.for("nodejs.util.inspect.custom")]=function(){return"Moment<"+this.format()+">"}),Ln.toJSON=function(){return this.isValid()?this.toISOString():null},Ln.toString=function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},Ln.unix=function(){return Math.floor(this.valueOf()/1e3)},Ln.valueOf=function(){return this._d.valueOf()-6e4*(this._offset||0)},Ln.creationData=function(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}},Ln.eraName=function(){var e,t,n,i=this.localeData().eras();for(e=0,t=i.length;e<t;++e){if(n=this.clone().startOf("day").valueOf(),i[e].since<=n&&n<=i[e].until)return i[e].name;if(i[e].until<=n&&n<=i[e].since)return i[e].name}return""},Ln.eraNarrow=function(){var e,t,n,i=this.localeData().eras();for(e=0,t=i.length;e<t;++e){if(n=this.clone().startOf("day").valueOf(),i[e].since<=n&&n<=i[e].until)return i[e].narrow;if(i[e].until<=n&&n<=i[e].since)return i[e].narrow}return""},Ln.eraAbbr=function(){var e,t,n,i=this.localeData().eras();for(e=0,t=i.length;e<t;++e){if(n=this.clone().startOf("day").valueOf(),i[e].since<=n&&n<=i[e].until)return i[e].abbr;if(i[e].until<=n&&n<=i[e].since)return i[e].abbr}return""},Ln.eraYear=function(){var e,t,n,i,r=this.localeData().eras();for(e=0,t=r.length;e<t;++e)if(n=r[e].since<=r[e].until?1:-1,i=this.clone().startOf("day").valueOf(),r[e].since<=i&&i<=r[e].until||r[e].until<=i&&i<=r[e].since)return(this.year()-s(r[e].since).year())*n+r[e].offset;return this.year()},Ln.year=Ee,Ln.isLeapYear=function(){return U(this.year())},Ln.weekYear=function(e){return _n.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)},Ln.isoWeekYear=function(e){return _n.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)},Ln.quarter=Ln.quarters=function(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)},Ln.month=Oe,Ln.daysInMonth=function(){return ve(this.year(),this.month())},Ln.week=Ln.weeks=function(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")},Ln.isoWeek=Ln.isoWeeks=function(e){var t=Ie(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")},Ln.weeksInYear=function(){var e=this.localeData()._week;return We(this.year(),e.dow,e.doy)},Ln.weeksInWeekYear=function(){var e=this.localeData()._week;return We(this.weekYear(),e.dow,e.doy)},Ln.isoWeeksInYear=function(){return We(this.year(),1,4)},Ln.isoWeeksInISOWeekYear=function(){return We(this.isoWeekYear(),1,4)},Ln.date=fn,Ln.day=Ln.days=function(e){if(!this.isValid())return null!=e?this:NaN;var t=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=e?(e=function(e,t){return"string"!=typeof e?e:isNaN(e)?"number"==typeof(e=t.weekdaysParse(e))?e:null:parseInt(e,10)}(e,this.localeData()),this.add(e-t,"d")):t},Ln.weekday=function(e){if(!this.isValid())return null!=e?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")},Ln.isoWeekday=function(e){if(!this.isValid())return null!=e?this:NaN;if(null!=e){var t=function(e,t){return"string"==typeof e?t.weekdaysParse(e)%7||7:isNaN(e)?null:e}(e,this.localeData());return this.day(this.day()%7?t:t-7)}return this.day()||7},Ln.dayOfYear=function(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")},Ln.hour=Ln.hours=Xe,Ln.minute=Ln.minutes=pn,Ln.second=Ln.seconds=Mn,Ln.millisecond=Ln.milliseconds=yn,Ln.utcOffset=function(e,t,n){var i,r=this._offset||0;if(!this.isValid())return null!=e?this:NaN;if(null!=e){if("string"==typeof e){if(null===(e=Rt(ce,e)))return this}else Math.abs(e)<16&&!n&&(e*=60);return!this._isUTC&&t&&(i=It(this)),this._offset=e,this._isUTC=!0,null!=i&&this.add(i,"m"),r!==e&&(!t||this._changeInProgress?Jt(this,zt(e-r,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,s.updateOffset(this,!0),this._changeInProgress=null)),this}return this._isUTC?r:It(this)},Ln.utc=function(e){return this.utcOffset(0,e)},Ln.local=function(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(It(this),"m")),this},Ln.parseZone=function(){if(null!=this._tzm)this.utcOffset(this._tzm,!1,!0);else if("string"==typeof this._i){var e=Rt(he,this._i);null!=e?this.utcOffset(e):this.utcOffset(0,!0)}return this},Ln.hasAlignedHourOffset=function(e){return!!this.isValid()&&(e=e?Dt(e).utcOffset():0,(this.utcOffset()-e)%60==0)},Ln.isDST=function(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()},Ln.isLocal=function(){return!!this.isValid()&&!this._isUTC},Ln.isUtcOffset=function(){return!!this.isValid()&&this._isUTC},Ln.isUtc=Wt,Ln.isUTC=Wt,Ln.zoneAbbr=function(){return this._isUTC?"UTC":""},Ln.zoneName=function(){return this._isUTC?"Coordinated Universal Time":""},Ln.dates=Y("dates accessor is deprecated. Use date instead.",fn),Ln.months=Y("months accessor is deprecated. Use month instead",Oe),Ln.years=Y("years accessor is deprecated. Use year instead",Ee),Ln.zone=Y("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",(function(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()})),Ln.isDSTShifted=Y("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",(function(){if(!l(this._isDSTShifted))return this._isDSTShifted;var e,t={};return b(t,this),(t=Yt(t))._a?(e=t._isUTC?m(t._a):Dt(t._a),this._isDSTShifted=this.isValid()&&function(e,t,n){var i,s=Math.min(e.length,t.length),r=Math.abs(e.length-t.length),a=0;for(i=0;i<s;i++)(n&&e[i]!==t[i]||!n&&$(e[i])!==$(t[i]))&&a++;return a+r}(t._a,e.toArray())>0):this._isDSTShifted=!1,this._isDSTShifted}));var wn=O.prototype;function Yn(e,t,n,i){var s=dt(),r=m().set(i,t);return s[n](r,e)}function kn(e,t,n){if(u(e)&&(t=e,e=void 0),e=e||"",null!=t)return Yn(e,t,n,"month");var i,s=[];for(i=0;i<12;i++)s[i]=Yn(e,i,n,"month");return s}function Dn(e,t,n,i){"boolean"==typeof e?(u(t)&&(n=t,t=void 0),t=t||""):(n=t=e,e=!1,u(t)&&(n=t,t=void 0),t=t||"");var s,r=dt(),a=e?r._week.dow:0,o=[];if(null!=n)return Yn(t,(n+a)%7,i,"day");for(s=0;s<7;s++)o[s]=Yn(t,(s+a)%7,i,"day");return o}wn.calendar=function(e,t,n){var i=this._calendar[e]||this._calendar.sameElse;return T(i)?i.call(t,n):i},wn.longDateFormat=function(e){var t=this._longDateFormat[e],n=this._longDateFormat[e.toUpperCase()];return t||!n?t:(this._longDateFormat[e]=n.match(j).map((function(e){return"MMMM"===e||"MM"===e||"DD"===e||"dddd"===e?e.slice(1):e})).join(""),this._longDateFormat[e])},wn.invalidDate=function(){return this._invalidDate},wn.ordinal=function(e){return this._ordinal.replace("%d",e)},wn.preparse=vn,wn.postformat=vn,wn.relativeTime=function(e,t,n,i){var s=this._relativeTime[n];return T(s)?s(e,t,n,i):s.replace(/%d/i,e)},wn.pastFuture=function(e,t){var n=this._relativeTime[e>0?"future":"past"];return T(n)?n(t):n.replace(/%s/i,t)},wn.set=function(e){var t,n;for(n in e)o(e,n)&&(T(t=e[n])?this[n]=t:this["_"+n]=t);this._config=e,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)},wn.eras=function(e,t){var n,i,r,a=this._eras||dt("en")._eras;for(n=0,i=a.length;n<i;++n)switch("string"==typeof a[n].since&&(r=s(a[n].since).startOf("day"),a[n].since=r.valueOf()),typeof a[n].until){case"undefined":a[n].until=1/0;break;case"string":r=s(a[n].until).startOf("day").valueOf(),a[n].until=r.valueOf()}return a},wn.erasParse=function(e,t,n){var i,s,r,a,o,d=this.eras();for(e=e.toUpperCase(),i=0,s=d.length;i<s;++i)if(r=d[i].name.toUpperCase(),a=d[i].abbr.toUpperCase(),o=d[i].narrow.toUpperCase(),n)switch(t){case"N":case"NN":case"NNN":if(a===e)return d[i];break;case"NNNN":if(r===e)return d[i];break;case"NNNNN":if(o===e)return d[i]}else if([r,a,o].indexOf(e)>=0)return d[i]},wn.erasConvertYear=function(e,t){var n=e.since<=e.until?1:-1;return void 0===t?s(e.since).year():s(e.since).year()+(t-e.offset)*n},wn.erasAbbrRegex=function(e){return o(this,"_erasAbbrRegex")||hn.call(this),e?this._erasAbbrRegex:this._erasRegex},wn.erasNameRegex=function(e){return o(this,"_erasNameRegex")||hn.call(this),e?this._erasNameRegex:this._erasRegex},wn.erasNarrowRegex=function(e){return o(this,"_erasNarrowRegex")||hn.call(this),e?this._erasNarrowRegex:this._erasRegex},wn.months=function(e,t){return e?r(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||ke).test(t)?"format":"standalone"][e.month()]:r(this._months)?this._months:this._months.standalone},wn.monthsShort=function(e,t){return e?r(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[ke.test(t)?"format":"standalone"][e.month()]:r(this._monthsShort)?this._monthsShort:this._monthsShort.standalone},wn.monthsParse=function(e,t,n){var i,s,r;if(this._monthsParseExact)return Te.call(this,e,t,n);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),i=0;i<12;i++){if(s=m([2e3,i]),n&&!this._longMonthsParse[i]&&(this._longMonthsParse[i]=new RegExp("^"+this.months(s,"").replace(".","")+"$","i"),this._shortMonthsParse[i]=new RegExp("^"+this.monthsShort(s,"").replace(".","")+"$","i")),n||this._monthsParse[i]||(r="^"+this.months(s,"")+"|^"+this.monthsShort(s,""),this._monthsParse[i]=new RegExp(r.replace(".",""),"i")),n&&"MMMM"===t&&this._longMonthsParse[i].test(e))return i;if(n&&"MMM"===t&&this._shortMonthsParse[i].test(e))return i;if(!n&&this._monthsParse[i].test(e))return i}},wn.monthsRegex=function(e){return this._monthsParseExact?(o(this,"_monthsRegex")||He.call(this),e?this._monthsStrictRegex:this._monthsRegex):(o(this,"_monthsRegex")||(this._monthsRegex=xe),this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex)},wn.monthsShortRegex=function(e){return this._monthsParseExact?(o(this,"_monthsRegex")||He.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):(o(this,"_monthsShortRegex")||(this._monthsShortRegex=De),this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex)},wn.week=function(e){return Ie(e,this._week.dow,this._week.doy).week},wn.firstDayOfYear=function(){return this._week.doy},wn.firstDayOfWeek=function(){return this._week.dow},wn.weekdays=function(e,t){var n=r(this._weekdays)?this._weekdays:this._weekdays[e&&!0!==e&&this._weekdays.isFormat.test(t)?"format":"standalone"];return!0===e?Ne(n,this._week.dow):e?n[e.day()]:n},wn.weekdaysMin=function(e){return!0===e?Ne(this._weekdaysMin,this._week.dow):e?this._weekdaysMin[e.day()]:this._weekdaysMin},wn.weekdaysShort=function(e){return!0===e?Ne(this._weekdaysShort,this._week.dow):e?this._weekdaysShort[e.day()]:this._weekdaysShort},wn.weekdaysParse=function(e,t,n){var i,s,r;if(this._weekdaysParseExact)return $e.call(this,e,t,n);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),i=0;i<7;i++){if(s=m([2e3,1]).day(i),n&&!this._fullWeekdaysParse[i]&&(this._fullWeekdaysParse[i]=new RegExp("^"+this.weekdays(s,"").replace(".","\\.?")+"$","i"),this._shortWeekdaysParse[i]=new RegExp("^"+this.weekdaysShort(s,"").replace(".","\\.?")+"$","i"),this._minWeekdaysParse[i]=new RegExp("^"+this.weekdaysMin(s,"").replace(".","\\.?")+"$","i")),this._weekdaysParse[i]||(r="^"+this.weekdays(s,"")+"|^"+this.weekdaysShort(s,"")+"|^"+this.weekdaysMin(s,""),this._weekdaysParse[i]=new RegExp(r.replace(".",""),"i")),n&&"dddd"===t&&this._fullWeekdaysParse[i].test(e))return i;if(n&&"ddd"===t&&this._shortWeekdaysParse[i].test(e))return i;if(n&&"dd"===t&&this._minWeekdaysParse[i].test(e))return i;if(!n&&this._weekdaysParse[i].test(e))return i}},wn.weekdaysRegex=function(e){return this._weekdaysParseExact?(o(this,"_weekdaysRegex")||qe.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):(o(this,"_weekdaysRegex")||(this._weekdaysRegex=Ve),this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex)},wn.weekdaysShortRegex=function(e){return this._weekdaysParseExact?(o(this,"_weekdaysRegex")||qe.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(o(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=Ue),this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)},wn.weekdaysMinRegex=function(e){return this._weekdaysParseExact?(o(this,"_weekdaysRegex")||qe.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(o(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=Je),this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)},wn.isPM=function(e){return"p"===(e+"").toLowerCase().charAt(0)},wn.meridiem=function(e,t,n){return e>11?n?"pm":"PM":n?"am":"AM"},at("en",{eras:[{since:"0001-01-01",until:1/0,offset:1,name:"Anno Domini",narrow:"AD",abbr:"AD"},{since:"0000-12-31",until:-1/0,offset:1,name:"Before Christ",narrow:"BC",abbr:"BC"}],dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1===$(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}}),s.lang=Y("moment.lang is deprecated. Use moment.locale instead.",at),s.langData=Y("moment.langData is deprecated. Use moment.localeData instead.",dt);var xn=Math.abs;function Tn(e,t,n,i){var s=zt(t,n);return e._milliseconds+=i*s._milliseconds,e._days+=i*s._days,e._months+=i*s._months,e._bubble()}function Sn(e){return e<0?Math.floor(e):Math.ceil(e)}function On(e){return 4800*e/146097}function Hn(e){return 146097*e/4800}function jn(e){return function(){return this.as(e)}}var En=jn("ms"),Pn=jn("s"),An=jn("m"),Rn=jn("h"),Cn=jn("d"),In=jn("w"),Wn=jn("M"),Nn=jn("Q"),Fn=jn("y");function zn(e){return function(){return this.isValid()?this._data[e]:NaN}}var Bn=zn("milliseconds"),Vn=zn("seconds"),Un=zn("minutes"),Jn=zn("hours"),$n=zn("days"),qn=zn("months"),Gn=zn("years");var Kn=Math.round,Zn={ss:44,s:45,m:45,h:22,d:26,w:null,M:11};function Xn(e,t,n,i,s){return s.relativeTime(t||1,!!n,e,i)}var Qn=Math.abs;function ei(e){return(e>0)-(e<0)||+e}function ti(){if(!this.isValid())return this.localeData().invalidDate();var e,t,n,i,s,r,a,o,d=Qn(this._milliseconds)/1e3,l=Qn(this._days),u=Qn(this._months),h=this.asSeconds();return h?(e=J(d/60),t=J(e/60),d%=60,e%=60,n=J(u/12),u%=12,i=d?d.toFixed(3).replace(/\.?0+$/,""):"",s=h<0?"-":"",r=ei(this._months)!==ei(h)?"-":"",a=ei(this._days)!==ei(h)?"-":"",o=ei(this._milliseconds)!==ei(h)?"-":"",s+"P"+(n?r+n+"Y":"")+(u?r+u+"M":"")+(l?a+l+"D":"")+(t||e||d?"T":"")+(t?o+t+"H":"")+(e?o+e+"M":"")+(d?o+i+"S":"")):"P0D"}var ni=Ht.prototype;return ni.isValid=function(){return this._isValid},ni.abs=function(){var e=this._data;return this._milliseconds=xn(this._milliseconds),this._days=xn(this._days),this._months=xn(this._months),e.milliseconds=xn(e.milliseconds),e.seconds=xn(e.seconds),e.minutes=xn(e.minutes),e.hours=xn(e.hours),e.months=xn(e.months),e.years=xn(e.years),this},ni.add=function(e,t){return Tn(this,e,t,1)},ni.subtract=function(e,t){return Tn(this,e,t,-1)},ni.as=function(e){if(!this.isValid())return NaN;var t,n,i=this._milliseconds;if("month"===(e=F(e))||"quarter"===e||"year"===e)switch(t=this._days+i/864e5,n=this._months+On(t),e){case"month":return n;case"quarter":return n/3;case"year":return n/12}else switch(t=this._days+Math.round(Hn(this._months)),e){case"week":return t/7+i/6048e5;case"day":return t+i/864e5;case"hour":return 24*t+i/36e5;case"minute":return 1440*t+i/6e4;case"second":return 86400*t+i/1e3;case"millisecond":return Math.floor(864e5*t)+i;default:throw new Error("Unknown unit "+e)}},ni.asMilliseconds=En,ni.asSeconds=Pn,ni.asMinutes=An,ni.asHours=Rn,ni.asDays=Cn,ni.asWeeks=In,ni.asMonths=Wn,ni.asQuarters=Nn,ni.asYears=Fn,ni.valueOf=function(){return this.isValid()?this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*$(this._months/12):NaN},ni._bubble=function(){var e,t,n,i,s,r=this._milliseconds,a=this._days,o=this._months,d=this._data;return r>=0&&a>=0&&o>=0||r<=0&&a<=0&&o<=0||(r+=864e5*Sn(Hn(o)+a),a=0,o=0),d.milliseconds=r%1e3,e=J(r/1e3),d.seconds=e%60,t=J(e/60),d.minutes=t%60,n=J(t/60),d.hours=n%24,a+=J(n/24),o+=s=J(On(a)),a-=Sn(Hn(s)),i=J(o/12),o%=12,d.days=a,d.months=o,d.years=i,this},ni.clone=function(){return zt(this)},ni.get=function(e){return e=F(e),this.isValid()?this[e+"s"]():NaN},ni.milliseconds=Bn,ni.seconds=Vn,ni.minutes=Un,ni.hours=Jn,ni.days=$n,ni.weeks=function(){return J(this.days()/7)},ni.months=qn,ni.years=Gn,ni.humanize=function(e,t){if(!this.isValid())return this.localeData().invalidDate();var n,i,s=!1,r=Zn;return"object"==typeof e&&(t=e,e=!1),"boolean"==typeof e&&(s=e),"object"==typeof t&&(r=Object.assign({},Zn,t),null!=t.s&&null==t.ss&&(r.ss=t.s-1)),i=function(e,t,n,i){var s=zt(e).abs(),r=Kn(s.as("s")),a=Kn(s.as("m")),o=Kn(s.as("h")),d=Kn(s.as("d")),l=Kn(s.as("M")),u=Kn(s.as("w")),h=Kn(s.as("y")),c=r<=n.ss&&["s",r]||r<n.s&&["ss",r]||a<=1&&["m"]||a<n.m&&["mm",a]||o<=1&&["h"]||o<n.h&&["hh",o]||d<=1&&["d"]||d<n.d&&["dd",d];return null!=n.w&&(c=c||u<=1&&["w"]||u<n.w&&["ww",u]),(c=c||l<=1&&["M"]||l<n.M&&["MM",l]||h<=1&&["y"]||["yy",h])[2]=t,c[3]=+e>0,c[4]=i,Xn.apply(null,c)}(this,!s,r,n=this.localeData()),s&&(i=n.pastFuture(+this,i)),n.postformat(i)},ni.toISOString=ti,ni.toString=ti,ni.toJSON=ti,ni.locale=Qt,ni.localeData=tn,ni.toIsoString=Y("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",ti),ni.lang=en,R("X",0,0,"unix"),R("x",0,0,"valueOf"),me("x",ue),me("X",/[+-]?\d+(\.\d{1,3})?/),ye("X",(function(e,t,n){n._d=new Date(1e3*parseFloat(e))})),ye("x",(function(e,t,n){n._d=new Date($(e))})),s.version="2.29.1",t=Dt,s.fn=Ln,s.min=function(){return St("isBefore",[].slice.call(arguments,0))},s.max=function(){return St("isAfter",[].slice.call(arguments,0))},s.now=function(){return Date.now?Date.now():+new Date},s.utc=m,s.unix=function(e){return Dt(1e3*e)},s.months=function(e,t){return kn(e,t,"months")},s.isDate=h,s.locale=at,s.invalid=g,s.duration=zt,s.isMoment=v,s.weekdays=function(e,t,n){return Dn(e,t,n,"weekdays")},s.parseZone=function(){return Dt.apply(null,arguments).parseZone()},s.localeData=dt,s.isDuration=jt,s.monthsShort=function(e,t){return kn(e,t,"monthsShort")},s.weekdaysMin=function(e,t,n){return Dn(e,t,n,"weekdaysMin")},s.defineLocale=ot,s.updateLocale=function(e,t){if(null!=t){var n,i,s=et;null!=tt[e]&&null!=tt[e].parentLocale?tt[e].set(S(tt[e]._config,t)):(null!=(i=rt(e))&&(s=i._config),t=S(s,t),null==i&&(t.abbr=e),(n=new O(t)).parentLocale=tt[e],tt[e]=n),at(e)}else null!=tt[e]&&(null!=tt[e].parentLocale?(tt[e]=tt[e].parentLocale,e===at()&&at(e)):null!=tt[e]&&delete tt[e]);return tt[e]},s.locales=function(){return k(tt)},s.weekdaysShort=function(e,t,n){return Dn(e,t,n,"weekdaysShort")},s.normalizeUnits=F,s.relativeTimeRounding=function(e){return void 0===e?Kn:"function"==typeof e&&(Kn=e,!0)},s.relativeTimeThreshold=function(e,t){return void 0!==Zn[e]&&(void 0===t?Zn[e]:(Zn[e]=t,"s"===e&&(Zn.ss=t-1),!0))},s.calendarFormat=function(e,t){var n=e.diff(t,"days",!0);return n<-6?"sameElse":n<-1?"lastWeek":n<0?"lastDay":n<1?"sameDay":n<2?"nextDay":n<7?"nextWeek":"sameElse"},s.prototype=Ln,s.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"GGGG-[W]WW",MONTH:"YYYY-MM"},s}()},4155:e=>{var t,n,i=e.exports={};function s(){throw new Error("setTimeout has not been defined")}function r(){throw new Error("clearTimeout has not been defined")}function a(e){if(t===setTimeout)return setTimeout(e,0);if((t===s||!t)&&setTimeout)return t=setTimeout,setTimeout(e,0);try{return t(e,0)}catch(n){try{return t.call(null,e,0)}catch(n){return t.call(this,e,0)}}}!function(){try{t="function"==typeof setTimeout?setTimeout:s}catch(e){t=s}try{n="function"==typeof clearTimeout?clearTimeout:r}catch(e){n=r}}();var o,d=[],l=!1,u=-1;function h(){l&&o&&(l=!1,o.length?d=o.concat(d):u=-1,d.length&&c())}function c(){if(!l){var e=a(h);l=!0;for(var t=d.length;t;){for(o=d,d=[];++u<t;)o&&o[u].run();u=-1,t=d.length}o=null,l=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===r||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}(e)}}function _(e,t){this.fun=e,this.array=t}function m(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];d.push(new _(e,t)),1!==d.length||l||a(c)},_.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=m,i.addListener=m,i.once=m,i.off=m,i.removeListener=m,i.removeAllListeners=m,i.emit=m,i.prependListener=m,i.prependOnceListener=m,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},2830:(e,t,n)=>{e.exports=s;var i=n(7187).EventEmitter;function s(){i.call(this)}n(5717)(s,i),s.Readable=n(6577),s.Writable=n(323),s.Duplex=n(8656),s.Transform=n(4473),s.PassThrough=n(2366),s.finished=n(1086),s.pipeline=n(6472),s.Stream=s,s.prototype.pipe=function(e,t){var n=this;function s(t){e.writable&&!1===e.write(t)&&n.pause&&n.pause()}function r(){n.readable&&n.resume&&n.resume()}n.on("data",s),e.on("drain",r),e._isStdio||t&&!1===t.end||(n.on("end",o),n.on("close",d));var a=!1;function o(){a||(a=!0,e.end())}function d(){a||(a=!0,"function"==typeof e.destroy&&e.destroy())}function l(e){if(u(),0===i.listenerCount(this,"error"))throw e}function u(){n.removeListener("data",s),e.removeListener("drain",r),n.removeListener("end",o),n.removeListener("close",d),n.removeListener("error",l),e.removeListener("error",l),n.removeListener("end",u),n.removeListener("close",u),e.removeListener("close",u)}return n.on("error",l),e.on("error",l),n.on("end",u),n.on("close",u),e.on("close",u),e.emit("pipe",n),e}},8106:e=>{"use strict";var t={};function n(e,n,i){i||(i=Error);var s=function(e){var t,i;function s(t,i,s){return e.call(this,function(e,t,i){return"string"==typeof n?n:n(e,t,i)}(t,i,s))||this}return i=e,(t=s).prototype=Object.create(i.prototype),t.prototype.constructor=t,t.__proto__=i,s}(i);s.prototype.name=i.name,s.prototype.code=e,t[e]=s}function i(e,t){if(Array.isArray(e)){var n=e.length;return e=e.map((function(e){return String(e)})),n>2?"one of ".concat(t," ").concat(e.slice(0,n-1).join(", "),", or ")+e[n-1]:2===n?"one of ".concat(t," ").concat(e[0]," or ").concat(e[1]):"of ".concat(t," ").concat(e[0])}return"of ".concat(t," ").concat(String(e))}n("ERR_INVALID_OPT_VALUE",(function(e,t){return'The value "'+t+'" is invalid for option "'+e+'"'}),TypeError),n("ERR_INVALID_ARG_TYPE",(function(e,t,n){var s,r,a,o,d;if("string"==typeof t&&(r="not ",t.substr(0,r.length)===r)?(s="must not be",t=t.replace(/^not /,"")):s="must be",function(e,t,n){return(void 0===n||n>e.length)&&(n=e.length),e.substring(n-t.length,n)===t}(e," argument"))a="The ".concat(e," ").concat(s," ").concat(i(t,"type"));else{var l=("number"!=typeof d&&(d=0),d+".".length>(o=e).length||-1===o.indexOf(".",d)?"argument":"property");a='The "'.concat(e,'" ').concat(l," ").concat(s," ").concat(i(t,"type"))}return a+". Received type ".concat(typeof n)}),TypeError),n("ERR_STREAM_PUSH_AFTER_EOF","stream.push() after EOF"),n("ERR_METHOD_NOT_IMPLEMENTED",(function(e){return"The "+e+" method is not implemented"})),n("ERR_STREAM_PREMATURE_CLOSE","Premature close"),n("ERR_STREAM_DESTROYED",(function(e){return"Cannot call "+e+" after a stream was destroyed"})),n("ERR_MULTIPLE_CALLBACK","Callback called multiple times"),n("ERR_STREAM_CANNOT_PIPE","Cannot pipe, not readable"),n("ERR_STREAM_WRITE_AFTER_END","write after end"),n("ERR_STREAM_NULL_VALUES","May not write null values to stream",TypeError),n("ERR_UNKNOWN_ENCODING",(function(e){return"Unknown encoding: "+e}),TypeError),n("ERR_STREAM_UNSHIFT_AFTER_END_EVENT","stream.unshift() after end event"),e.exports.q=t},8656:(e,t,n)=>{"use strict";var i=n(4155),s=Object.keys||function(e){var t=[];for(var n in e)t.push(n);return t};e.exports=u;var r=n(6577),a=n(323);n(5717)(u,r);for(var o=s(a.prototype),d=0;d<o.length;d++){var l=o[d];u.prototype[l]||(u.prototype[l]=a.prototype[l])}function u(e){if(!(this instanceof u))return new u(e);r.call(this,e),a.call(this,e),this.allowHalfOpen=!0,e&&(!1===e.readable&&(this.readable=!1),!1===e.writable&&(this.writable=!1),!1===e.allowHalfOpen&&(this.allowHalfOpen=!1,this.once("end",h)))}function h(){this._writableState.ended||i.nextTick(c,this)}function c(e){e.end()}Object.defineProperty(u.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(u.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(u.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(u.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&this._readableState.destroyed&&this._writableState.destroyed},set:function(e){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=e,this._writableState.destroyed=e)}})},2366:(e,t,n)=>{"use strict";e.exports=s;var i=n(4473);function s(e){if(!(this instanceof s))return new s(e);i.call(this,e)}n(5717)(s,i),s.prototype._transform=function(e,t,n){n(null,e)}},6577:(e,t,n)=>{"use strict";var i,s=n(4155);e.exports=k,k.ReadableState=Y,n(7187).EventEmitter;var r,a=function(e,t){return e.listeners(t).length},o=n(3194),d=n(8764).Buffer,l=n.g.Uint8Array||function(){},u=n(964);r=u&&u.debuglog?u.debuglog("stream"):function(){};var h,c,_,m=n(9686),f=n(1029),p=n(94).getHighWaterMark,g=n(8106).q,y=g.ERR_INVALID_ARG_TYPE,M=g.ERR_STREAM_PUSH_AFTER_EOF,b=g.ERR_METHOD_NOT_IMPLEMENTED,L=g.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;n(5717)(k,o);var v=f.errorOrDestroy,w=["error","close","destroy","pause","resume"];function Y(e,t,s){i=i||n(8656),e=e||{},"boolean"!=typeof s&&(s=t instanceof i),this.objectMode=!!e.objectMode,s&&(this.objectMode=this.objectMode||!!e.readableObjectMode),this.highWaterMark=p(this,e,"readableHighWaterMark",s),this.buffer=new m,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.paused=!0,this.emitClose=!1!==e.emitClose,this.autoDestroy=!!e.autoDestroy,this.destroyed=!1,this.defaultEncoding=e.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(h||(h=n(2553).s),this.decoder=new h(e.encoding),this.encoding=e.encoding)}function k(e){if(i=i||n(8656),!(this instanceof k))return new k(e);var t=this instanceof i;this._readableState=new Y(e,this,t),this.readable=!0,e&&("function"==typeof e.read&&(this._read=e.read),"function"==typeof e.destroy&&(this._destroy=e.destroy)),o.call(this)}function D(e,t,n,i,s){r("readableAddChunk",t);var a,o=e._readableState;if(null===t)o.reading=!1,function(e,t){if(r("onEofChunk"),!t.ended){if(t.decoder){var n=t.decoder.end();n&&n.length&&(t.buffer.push(n),t.length+=t.objectMode?1:n.length)}t.ended=!0,t.sync?O(e):(t.needReadable=!1,t.emittedReadable||(t.emittedReadable=!0,H(e)))}}(e,o);else if(s||(a=function(e,t){var n,i;return i=t,d.isBuffer(i)||i instanceof l||"string"==typeof t||void 0===t||e.objectMode||(n=new y("chunk",["string","Buffer","Uint8Array"],t)),n}(o,t)),a)v(e,a);else if(o.objectMode||t&&t.length>0)if("string"==typeof t||o.objectMode||Object.getPrototypeOf(t)===d.prototype||(t=function(e){return d.from(e)}(t)),i)o.endEmitted?v(e,new L):x(e,o,t,!0);else if(o.ended)v(e,new M);else{if(o.destroyed)return!1;o.reading=!1,o.decoder&&!n?(t=o.decoder.write(t),o.objectMode||0!==t.length?x(e,o,t,!1):j(e,o)):x(e,o,t,!1)}else i||(o.reading=!1,j(e,o));return!o.ended&&(o.length<o.highWaterMark||0===o.length)}function x(e,t,n,i){t.flowing&&0===t.length&&!t.sync?(t.awaitDrain=0,e.emit("data",n)):(t.length+=t.objectMode?1:n.length,i?t.buffer.unshift(n):t.buffer.push(n),t.needReadable&&O(e)),j(e,t)}Object.defineProperty(k.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(e){this._readableState&&(this._readableState.destroyed=e)}}),k.prototype.destroy=f.destroy,k.prototype._undestroy=f.undestroy,k.prototype._destroy=function(e,t){t(e)},k.prototype.push=function(e,t){var n,i=this._readableState;return i.objectMode?n=!0:"string"==typeof e&&((t=t||i.defaultEncoding)!==i.encoding&&(e=d.from(e,t),t=""),n=!0),D(this,e,t,!1,n)},k.prototype.unshift=function(e){return D(this,e,null,!0,!1)},k.prototype.isPaused=function(){return!1===this._readableState.flowing},k.prototype.setEncoding=function(e){h||(h=n(2553).s);var t=new h(e);this._readableState.decoder=t,this._readableState.encoding=this._readableState.decoder.encoding;for(var i=this._readableState.buffer.head,s="";null!==i;)s+=t.write(i.data),i=i.next;return this._readableState.buffer.clear(),""!==s&&this._readableState.buffer.push(s),this._readableState.length=s.length,this};var T=1073741824;function S(e,t){return e<=0||0===t.length&&t.ended?0:t.objectMode?1:e!=e?t.flowing&&t.length?t.buffer.head.data.length:t.length:(e>t.highWaterMark&&(t.highWaterMark=function(e){return e>=T?e=T:(e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,e++),e}(e)),e<=t.length?e:t.ended?t.length:(t.needReadable=!0,0))}function O(e){var t=e._readableState;r("emitReadable",t.needReadable,t.emittedReadable),t.needReadable=!1,t.emittedReadable||(r("emitReadable",t.flowing),t.emittedReadable=!0,s.nextTick(H,e))}function H(e){var t=e._readableState;r("emitReadable_",t.destroyed,t.length,t.ended),t.destroyed||!t.length&&!t.ended||(e.emit("readable"),t.emittedReadable=!1),t.needReadable=!t.flowing&&!t.ended&&t.length<=t.highWaterMark,C(e)}function j(e,t){t.readingMore||(t.readingMore=!0,s.nextTick(E,e,t))}function E(e,t){for(;!t.reading&&!t.ended&&(t.length<t.highWaterMark||t.flowing&&0===t.length);){var n=t.length;if(r("maybeReadMore read 0"),e.read(0),n===t.length)break}t.readingMore=!1}function P(e){var t=e._readableState;t.readableListening=e.listenerCount("readable")>0,t.resumeScheduled&&!t.paused?t.flowing=!0:e.listenerCount("data")>0&&e.resume()}function A(e){r("readable nexttick read 0"),e.read(0)}function R(e,t){r("resume",t.reading),t.reading||e.read(0),t.resumeScheduled=!1,e.emit("resume"),C(e),t.flowing&&!t.reading&&e.read(0)}function C(e){var t=e._readableState;for(r("flow",t.flowing);t.flowing&&null!==e.read(););}function I(e,t){return 0===t.length?null:(t.objectMode?n=t.buffer.shift():!e||e>=t.length?(n=t.decoder?t.buffer.join(""):1===t.buffer.length?t.buffer.first():t.buffer.concat(t.length),t.buffer.clear()):n=t.buffer.consume(e,t.decoder),n);var n}function W(e){var t=e._readableState;r("endReadable",t.endEmitted),t.endEmitted||(t.ended=!0,s.nextTick(N,t,e))}function N(e,t){if(r("endReadableNT",e.endEmitted,e.length),!e.endEmitted&&0===e.length&&(e.endEmitted=!0,t.readable=!1,t.emit("end"),e.autoDestroy)){var n=t._writableState;(!n||n.autoDestroy&&n.finished)&&t.destroy()}}function F(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1}k.prototype.read=function(e){r("read",e),e=parseInt(e,10);var t=this._readableState,n=e;if(0!==e&&(t.emittedReadable=!1),0===e&&t.needReadable&&((0!==t.highWaterMark?t.length>=t.highWaterMark:t.length>0)||t.ended))return r("read: emitReadable",t.length,t.ended),0===t.length&&t.ended?W(this):O(this),null;if(0===(e=S(e,t))&&t.ended)return 0===t.length&&W(this),null;var i,s=t.needReadable;return r("need readable",s),(0===t.length||t.length-e<t.highWaterMark)&&r("length less than watermark",s=!0),t.ended||t.reading?r("reading or ended",s=!1):s&&(r("do read"),t.reading=!0,t.sync=!0,0===t.length&&(t.needReadable=!0),this._read(t.highWaterMark),t.sync=!1,t.reading||(e=S(n,t))),null===(i=e>0?I(e,t):null)?(t.needReadable=t.length<=t.highWaterMark,e=0):(t.length-=e,t.awaitDrain=0),0===t.length&&(t.ended||(t.needReadable=!0),n!==e&&t.ended&&W(this)),null!==i&&this.emit("data",i),i},k.prototype._read=function(e){v(this,new b("_read()"))},k.prototype.pipe=function(e,t){var n=this,i=this._readableState;switch(i.pipesCount){case 0:i.pipes=e;break;case 1:i.pipes=[i.pipes,e];break;default:i.pipes.push(e)}i.pipesCount+=1,r("pipe count=%d opts=%j",i.pipesCount,t);var o=t&&!1===t.end||e===s.stdout||e===s.stderr?f:d;function d(){r("onend"),e.end()}i.endEmitted?s.nextTick(o):n.once("end",o),e.on("unpipe",(function t(s,a){r("onunpipe"),s===n&&a&&!1===a.hasUnpiped&&(a.hasUnpiped=!0,r("cleanup"),e.removeListener("close",_),e.removeListener("finish",m),e.removeListener("drain",l),e.removeListener("error",c),e.removeListener("unpipe",t),n.removeListener("end",d),n.removeListener("end",f),n.removeListener("data",h),u=!0,!i.awaitDrain||e._writableState&&!e._writableState.needDrain||l())}));var l=function(e){return function(){var t=e._readableState;r("pipeOnDrain",t.awaitDrain),t.awaitDrain&&t.awaitDrain--,0===t.awaitDrain&&a(e,"data")&&(t.flowing=!0,C(e))}}(n);e.on("drain",l);var u=!1;function h(t){r("ondata");var s=e.write(t);r("dest.write",s),!1===s&&((1===i.pipesCount&&i.pipes===e||i.pipesCount>1&&-1!==F(i.pipes,e))&&!u&&(r("false write response, pause",i.awaitDrain),i.awaitDrain++),n.pause())}function c(t){r("onerror",t),f(),e.removeListener("error",c),0===a(e,"error")&&v(e,t)}function _(){e.removeListener("finish",m),f()}function m(){r("onfinish"),e.removeListener("close",_),f()}function f(){r("unpipe"),n.unpipe(e)}return n.on("data",h),function(e,t,n){if("function"==typeof e.prependListener)return e.prependListener(t,n);e._events&&e._events.error?Array.isArray(e._events.error)?e._events.error.unshift(n):e._events.error=[n,e._events.error]:e.on(t,n)}(e,"error",c),e.once("close",_),e.once("finish",m),e.emit("pipe",n),i.flowing||(r("pipe resume"),n.resume()),e},k.prototype.unpipe=function(e){var t=this._readableState,n={hasUnpiped:!1};if(0===t.pipesCount)return this;if(1===t.pipesCount)return e&&e!==t.pipes||(e||(e=t.pipes),t.pipes=null,t.pipesCount=0,t.flowing=!1,e&&e.emit("unpipe",this,n)),this;if(!e){var i=t.pipes,s=t.pipesCount;t.pipes=null,t.pipesCount=0,t.flowing=!1;for(var r=0;r<s;r++)i[r].emit("unpipe",this,{hasUnpiped:!1});return this}var a=F(t.pipes,e);return-1===a||(t.pipes.splice(a,1),t.pipesCount-=1,1===t.pipesCount&&(t.pipes=t.pipes[0]),e.emit("unpipe",this,n)),this},k.prototype.on=function(e,t){var n=o.prototype.on.call(this,e,t),i=this._readableState;return"data"===e?(i.readableListening=this.listenerCount("readable")>0,!1!==i.flowing&&this.resume()):"readable"===e&&(i.endEmitted||i.readableListening||(i.readableListening=i.needReadable=!0,i.flowing=!1,i.emittedReadable=!1,r("on readable",i.length,i.reading),i.length?O(this):i.reading||s.nextTick(A,this))),n},k.prototype.addListener=k.prototype.on,k.prototype.removeListener=function(e,t){var n=o.prototype.removeListener.call(this,e,t);return"readable"===e&&s.nextTick(P,this),n},k.prototype.removeAllListeners=function(e){var t=o.prototype.removeAllListeners.apply(this,arguments);return"readable"!==e&&void 0!==e||s.nextTick(P,this),t},k.prototype.resume=function(){var e=this._readableState;return e.flowing||(r("resume"),e.flowing=!e.readableListening,function(e,t){t.resumeScheduled||(t.resumeScheduled=!0,s.nextTick(R,e,t))}(this,e)),e.paused=!1,this},k.prototype.pause=function(){return r("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(r("pause"),this._readableState.flowing=!1,this.emit("pause")),this._readableState.paused=!0,this},k.prototype.wrap=function(e){var t=this,n=this._readableState,i=!1;for(var s in e.on("end",(function(){if(r("wrapped end"),n.decoder&&!n.ended){var e=n.decoder.end();e&&e.length&&t.push(e)}t.push(null)})),e.on("data",(function(s){r("wrapped data"),n.decoder&&(s=n.decoder.write(s)),n.objectMode&&null==s||(n.objectMode||s&&s.length)&&(t.push(s)||(i=!0,e.pause()))})),e)void 0===this[s]&&"function"==typeof e[s]&&(this[s]=function(t){return function(){return e[t].apply(e,arguments)}}(s));for(var a=0;a<w.length;a++)e.on(w[a],this.emit.bind(this,w[a]));return this._read=function(t){r("wrapped _read",t),i&&(i=!1,e.resume())},this},"function"==typeof Symbol&&(k.prototype[Symbol.asyncIterator]=function(){return void 0===c&&(c=n(828)),c(this)}),Object.defineProperty(k.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),Object.defineProperty(k.prototype,"readableBuffer",{enumerable:!1,get:function(){return this._readableState&&this._readableState.buffer}}),Object.defineProperty(k.prototype,"readableFlowing",{enumerable:!1,get:function(){return this._readableState.flowing},set:function(e){this._readableState&&(this._readableState.flowing=e)}}),k._fromList=I,Object.defineProperty(k.prototype,"readableLength",{enumerable:!1,get:function(){return this._readableState.length}}),"function"==typeof Symbol&&(k.from=function(e,t){return void 0===_&&(_=n(1265)),_(k,e,t)})},4473:(e,t,n)=>{"use strict";e.exports=u;var i=n(8106).q,s=i.ERR_METHOD_NOT_IMPLEMENTED,r=i.ERR_MULTIPLE_CALLBACK,a=i.ERR_TRANSFORM_ALREADY_TRANSFORMING,o=i.ERR_TRANSFORM_WITH_LENGTH_0,d=n(8656);function l(e,t){var n=this._transformState;n.transforming=!1;var i=n.writecb;if(null===i)return this.emit("error",new r);n.writechunk=null,n.writecb=null,null!=t&&this.push(t),i(e);var s=this._readableState;s.reading=!1,(s.needReadable||s.length<s.highWaterMark)&&this._read(s.highWaterMark)}function u(e){if(!(this instanceof u))return new u(e);d.call(this,e),this._transformState={afterTransform:l.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,e&&("function"==typeof e.transform&&(this._transform=e.transform),"function"==typeof e.flush&&(this._flush=e.flush)),this.on("prefinish",h)}function h(){var e=this;"function"!=typeof this._flush||this._readableState.destroyed?c(this,null,null):this._flush((function(t,n){c(e,t,n)}))}function c(e,t,n){if(t)return e.emit("error",t);if(null!=n&&e.push(n),e._writableState.length)throw new o;if(e._transformState.transforming)throw new a;return e.push(null)}n(5717)(u,d),u.prototype.push=function(e,t){return this._transformState.needTransform=!1,d.prototype.push.call(this,e,t)},u.prototype._transform=function(e,t,n){n(new s("_transform()"))},u.prototype._write=function(e,t,n){var i=this._transformState;if(i.writecb=n,i.writechunk=e,i.writeencoding=t,!i.transforming){var s=this._readableState;(i.needTransform||s.needReadable||s.length<s.highWaterMark)&&this._read(s.highWaterMark)}},u.prototype._read=function(e){var t=this._transformState;null===t.writechunk||t.transforming?t.needTransform=!0:(t.transforming=!0,this._transform(t.writechunk,t.writeencoding,t.afterTransform))},u.prototype._destroy=function(e,t){d.prototype._destroy.call(this,e,(function(e){t(e)}))}},323:(e,t,n)=>{"use strict";var i,s=n(4155);function r(e){var t=this;this.next=null,this.entry=null,this.finish=function(){!function(e,t,n){var i=e.entry;for(e.entry=null;i;){var s=i.callback;t.pendingcb--,s(undefined),i=i.next}t.corkedRequestsFree.next=e}(t,e)}}e.exports=k,k.WritableState=Y;var a,o={deprecate:n(4927)},d=n(3194),l=n(8764).Buffer,u=n.g.Uint8Array||function(){},h=n(1029),c=n(94).getHighWaterMark,_=n(8106).q,m=_.ERR_INVALID_ARG_TYPE,f=_.ERR_METHOD_NOT_IMPLEMENTED,p=_.ERR_MULTIPLE_CALLBACK,g=_.ERR_STREAM_CANNOT_PIPE,y=_.ERR_STREAM_DESTROYED,M=_.ERR_STREAM_NULL_VALUES,b=_.ERR_STREAM_WRITE_AFTER_END,L=_.ERR_UNKNOWN_ENCODING,v=h.errorOrDestroy;function w(){}function Y(e,t,a){i=i||n(8656),e=e||{},"boolean"!=typeof a&&(a=t instanceof i),this.objectMode=!!e.objectMode,a&&(this.objectMode=this.objectMode||!!e.writableObjectMode),this.highWaterMark=c(this,e,"writableHighWaterMark",a),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var o=!1===e.decodeStrings;this.decodeStrings=!o,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){!function(e,t){var n=e._writableState,i=n.sync,r=n.writecb;if("function"!=typeof r)throw new p;if(function(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}(n),t)!function(e,t,n,i,r){--t.pendingcb,n?(s.nextTick(r,i),s.nextTick(H,e,t),e._writableState.errorEmitted=!0,v(e,i)):(r(i),e._writableState.errorEmitted=!0,v(e,i),H(e,t))}(e,n,i,t,r);else{var a=S(n)||e.destroyed;a||n.corked||n.bufferProcessing||!n.bufferedRequest||T(e,n),i?s.nextTick(x,e,n,a,r):x(e,n,a,r)}}(t,e)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.emitClose=!1!==e.emitClose,this.autoDestroy=!!e.autoDestroy,this.bufferedRequestCount=0,this.corkedRequestsFree=new r(this)}function k(e){var t=this instanceof(i=i||n(8656));if(!t&&!a.call(k,this))return new k(e);this._writableState=new Y(e,this,t),this.writable=!0,e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev),"function"==typeof e.destroy&&(this._destroy=e.destroy),"function"==typeof e.final&&(this._final=e.final)),d.call(this)}function D(e,t,n,i,s,r,a){t.writelen=i,t.writecb=a,t.writing=!0,t.sync=!0,t.destroyed?t.onwrite(new y("write")):n?e._writev(s,t.onwrite):e._write(s,r,t.onwrite),t.sync=!1}function x(e,t,n,i){n||function(e,t){0===t.length&&t.needDrain&&(t.needDrain=!1,e.emit("drain"))}(e,t),t.pendingcb--,i(),H(e,t)}function T(e,t){t.bufferProcessing=!0;var n=t.bufferedRequest;if(e._writev&&n&&n.next){var i=t.bufferedRequestCount,s=new Array(i),a=t.corkedRequestsFree;a.entry=n;for(var o=0,d=!0;n;)s[o]=n,n.isBuf||(d=!1),n=n.next,o+=1;s.allBuffers=d,D(e,t,!0,t.length,s,"",a.finish),t.pendingcb++,t.lastBufferedRequest=null,a.next?(t.corkedRequestsFree=a.next,a.next=null):t.corkedRequestsFree=new r(t),t.bufferedRequestCount=0}else{for(;n;){var l=n.chunk,u=n.encoding,h=n.callback;if(D(e,t,!1,t.objectMode?1:l.length,l,u,h),n=n.next,t.bufferedRequestCount--,t.writing)break}null===n&&(t.lastBufferedRequest=null)}t.bufferedRequest=n,t.bufferProcessing=!1}function S(e){return e.ending&&0===e.length&&null===e.bufferedRequest&&!e.finished&&!e.writing}function O(e,t){e._final((function(n){t.pendingcb--,n&&v(e,n),t.prefinished=!0,e.emit("prefinish"),H(e,t)}))}function H(e,t){var n=S(t);if(n&&(function(e,t){t.prefinished||t.finalCalled||("function"!=typeof e._final||t.destroyed?(t.prefinished=!0,e.emit("prefinish")):(t.pendingcb++,t.finalCalled=!0,s.nextTick(O,e,t)))}(e,t),0===t.pendingcb&&(t.finished=!0,e.emit("finish"),t.autoDestroy))){var i=e._readableState;(!i||i.autoDestroy&&i.endEmitted)&&e.destroy()}return n}n(5717)(k,d),Y.prototype.getBuffer=function(){for(var e=this.bufferedRequest,t=[];e;)t.push(e),e=e.next;return t},function(){try{Object.defineProperty(Y.prototype,"buffer",{get:o.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(e){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(a=Function.prototype[Symbol.hasInstance],Object.defineProperty(k,Symbol.hasInstance,{value:function(e){return!!a.call(this,e)||this===k&&e&&e._writableState instanceof Y}})):a=function(e){return e instanceof this},k.prototype.pipe=function(){v(this,new g)},k.prototype.write=function(e,t,n){var i,r=this._writableState,a=!1,o=!r.objectMode&&(i=e,l.isBuffer(i)||i instanceof u);return o&&!l.isBuffer(e)&&(e=function(e){return l.from(e)}(e)),"function"==typeof t&&(n=t,t=null),o?t="buffer":t||(t=r.defaultEncoding),"function"!=typeof n&&(n=w),r.ending?function(e,t){var n=new b;v(e,n),s.nextTick(t,n)}(this,n):(o||function(e,t,n,i){var r;return null===n?r=new M:"string"==typeof n||t.objectMode||(r=new m("chunk",["string","Buffer"],n)),!r||(v(e,r),s.nextTick(i,r),!1)}(this,r,e,n))&&(r.pendingcb++,a=function(e,t,n,i,s,r){if(!n){var a=function(e,t,n){return e.objectMode||!1===e.decodeStrings||"string"!=typeof t||(t=l.from(t,n)),t}(t,i,s);i!==a&&(n=!0,s="buffer",i=a)}var o=t.objectMode?1:i.length;t.length+=o;var d=t.length<t.highWaterMark;if(d||(t.needDrain=!0),t.writing||t.corked){var u=t.lastBufferedRequest;t.lastBufferedRequest={chunk:i,encoding:s,isBuf:n,callback:r,next:null},u?u.next=t.lastBufferedRequest:t.bufferedRequest=t.lastBufferedRequest,t.bufferedRequestCount+=1}else D(e,t,!1,o,i,s,r);return d}(this,r,o,e,t,n)),a},k.prototype.cork=function(){this._writableState.corked++},k.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.bufferProcessing||!e.bufferedRequest||T(this,e))},k.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=e.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((e+"").toLowerCase())>-1))throw new L(e);return this._writableState.defaultEncoding=e,this},Object.defineProperty(k.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(k.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),k.prototype._write=function(e,t,n){n(new f("_write()"))},k.prototype._writev=null,k.prototype.end=function(e,t,n){var i=this._writableState;return"function"==typeof e?(n=e,e=null,t=null):"function"==typeof t&&(n=t,t=null),null!=e&&this.write(e,t),i.corked&&(i.corked=1,this.uncork()),i.ending||function(e,t,n){t.ending=!0,H(e,t),n&&(t.finished?s.nextTick(n):e.once("finish",n)),t.ended=!0,e.writable=!1}(this,i,n),this},Object.defineProperty(k.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(k.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(e){this._writableState&&(this._writableState.destroyed=e)}}),k.prototype.destroy=h.destroy,k.prototype._undestroy=h.undestroy,k.prototype._destroy=function(e,t){t(e)}},828:(e,t,n)=>{"use strict";var i,s=n(4155);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var a=n(1086),o=Symbol("lastResolve"),d=Symbol("lastReject"),l=Symbol("error"),u=Symbol("ended"),h=Symbol("lastPromise"),c=Symbol("handlePromise"),_=Symbol("stream");function m(e,t){return{value:e,done:t}}function f(e){var t=e[o];if(null!==t){var n=e[_].read();null!==n&&(e[h]=null,e[o]=null,e[d]=null,t(m(n,!1)))}}function p(e){s.nextTick(f,e)}var g=Object.getPrototypeOf((function(){})),y=Object.setPrototypeOf((r(i={get stream(){return this[_]},next:function(){var e=this,t=this[l];if(null!==t)return Promise.reject(t);if(this[u])return Promise.resolve(m(void 0,!0));if(this[_].destroyed)return new Promise((function(t,n){s.nextTick((function(){e[l]?n(e[l]):t(m(void 0,!0))}))}));var n,i=this[h];if(i)n=new Promise(function(e,t){return function(n,i){e.then((function(){t[u]?n(m(void 0,!0)):t[c](n,i)}),i)}}(i,this));else{var r=this[_].read();if(null!==r)return Promise.resolve(m(r,!1));n=new Promise(this[c])}return this[h]=n,n}},Symbol.asyncIterator,(function(){return this})),r(i,"return",(function(){var e=this;return new Promise((function(t,n){e[_].destroy(null,(function(e){e?n(e):t(m(void 0,!0))}))}))})),i),g);e.exports=function(e){var t,n=Object.create(y,(r(t={},_,{value:e,writable:!0}),r(t,o,{value:null,writable:!0}),r(t,d,{value:null,writable:!0}),r(t,l,{value:null,writable:!0}),r(t,u,{value:e._readableState.endEmitted,writable:!0}),r(t,c,{value:function(e,t){var i=n[_].read();i?(n[h]=null,n[o]=null,n[d]=null,e(m(i,!1))):(n[o]=e,n[d]=t)},writable:!0}),t));return n[h]=null,a(e,(function(e){if(e&&"ERR_STREAM_PREMATURE_CLOSE"!==e.code){var t=n[d];return null!==t&&(n[h]=null,n[o]=null,n[d]=null,t(e)),void(n[l]=e)}var i=n[o];null!==i&&(n[h]=null,n[o]=null,n[d]=null,i(m(void 0,!0))),n[u]=!0})),e.on("readable",p.bind(null,n)),n}},9686:(e,t,n)=>{"use strict";function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var a=n(8764).Buffer,o=n(9862).inspect,d=o&&o.custom||"inspect";e.exports=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.head=null,this.tail=null,this.length=0}var t,n;return t=e,n=[{key:"push",value:function(e){var t={data:e,next:null};this.length>0?this.tail.next=t:this.head=t,this.tail=t,++this.length}},{key:"unshift",value:function(e){var t={data:e,next:this.head};0===this.length&&(this.tail=t),this.head=t,++this.length}},{key:"shift",value:function(){if(0!==this.length){var e=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,e}}},{key:"clear",value:function(){this.head=this.tail=null,this.length=0}},{key:"join",value:function(e){if(0===this.length)return"";for(var t=this.head,n=""+t.data;t=t.next;)n+=e+t.data;return n}},{key:"concat",value:function(e){if(0===this.length)return a.alloc(0);for(var t,n,i,s=a.allocUnsafe(e>>>0),r=this.head,o=0;r;)t=r.data,n=s,i=o,a.prototype.copy.call(t,n,i),o+=r.data.length,r=r.next;return s}},{key:"consume",value:function(e,t){var n;return e<this.head.data.length?(n=this.head.data.slice(0,e),this.head.data=this.head.data.slice(e)):n=e===this.head.data.length?this.shift():t?this._getString(e):this._getBuffer(e),n}},{key:"first",value:function(){return this.head.data}},{key:"_getString",value:function(e){var t=this.head,n=1,i=t.data;for(e-=i.length;t=t.next;){var s=t.data,r=e>s.length?s.length:e;if(r===s.length?i+=s:i+=s.slice(0,e),0==(e-=r)){r===s.length?(++n,t.next?this.head=t.next:this.head=this.tail=null):(this.head=t,t.data=s.slice(r));break}++n}return this.length-=n,i}},{key:"_getBuffer",value:function(e){var t=a.allocUnsafe(e),n=this.head,i=1;for(n.data.copy(t),e-=n.data.length;n=n.next;){var s=n.data,r=e>s.length?s.length:e;if(s.copy(t,t.length-e,0,r),0==(e-=r)){r===s.length?(++i,n.next?this.head=n.next:this.head=this.tail=null):(this.head=n,n.data=s.slice(r));break}++i}return this.length-=i,t}},{key:d,value:function(e,t){return o(this,function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},t,{depth:0,customInspect:!1}))}}],n&&r(t.prototype,n),e}()},1029:(e,t,n)=>{"use strict";var i=n(4155);function s(e,t){a(e,t),r(e)}function r(e){e._writableState&&!e._writableState.emitClose||e._readableState&&!e._readableState.emitClose||e.emit("close")}function a(e,t){e.emit("error",t)}e.exports={destroy:function(e,t){var n=this,o=this._readableState&&this._readableState.destroyed,d=this._writableState&&this._writableState.destroyed;return o||d?(t?t(e):e&&(this._writableState?this._writableState.errorEmitted||(this._writableState.errorEmitted=!0,i.nextTick(a,this,e)):i.nextTick(a,this,e)),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(e||null,(function(e){!t&&e?n._writableState?n._writableState.errorEmitted?i.nextTick(r,n):(n._writableState.errorEmitted=!0,i.nextTick(s,n,e)):i.nextTick(s,n,e):t?(i.nextTick(r,n),t(e)):i.nextTick(r,n)})),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finalCalled=!1,this._writableState.prefinished=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)},errorOrDestroy:function(e,t){var n=e._readableState,i=e._writableState;n&&n.autoDestroy||i&&i.autoDestroy?e.destroy(t):e.emit("error",t)}}},1086:(e,t,n)=>{"use strict";var i=n(8106).q.ERR_STREAM_PREMATURE_CLOSE;function s(){}e.exports=function e(t,n,r){if("function"==typeof n)return e(t,null,n);n||(n={}),r=function(e){var t=!1;return function(){if(!t){t=!0;for(var n=arguments.length,i=new Array(n),s=0;s<n;s++)i[s]=arguments[s];e.apply(this,i)}}}(r||s);var a=n.readable||!1!==n.readable&&t.readable,o=n.writable||!1!==n.writable&&t.writable,d=function(){t.writable||u()},l=t._writableState&&t._writableState.finished,u=function(){o=!1,l=!0,a||r.call(t)},h=t._readableState&&t._readableState.endEmitted,c=function(){a=!1,h=!0,o||r.call(t)},_=function(e){r.call(t,e)},m=function(){var e;return a&&!h?(t._readableState&&t._readableState.ended||(e=new i),r.call(t,e)):o&&!l?(t._writableState&&t._writableState.ended||(e=new i),r.call(t,e)):void 0},f=function(){t.req.on("finish",u)};return function(e){return e.setHeader&&"function"==typeof e.abort}(t)?(t.on("complete",u),t.on("abort",m),t.req?f():t.on("request",f)):o&&!t._writableState&&(t.on("end",d),t.on("close",d)),t.on("end",c),t.on("finish",u),!1!==n.error&&t.on("error",_),t.on("close",m),function(){t.removeListener("complete",u),t.removeListener("abort",m),t.removeListener("request",f),t.req&&t.req.removeListener("finish",u),t.removeListener("end",d),t.removeListener("close",d),t.removeListener("finish",u),t.removeListener("end",c),t.removeListener("error",_),t.removeListener("close",m)}}},1265:e=>{e.exports=function(){throw new Error("Readable.from is not available in the browser")}},6472:(e,t,n)=>{"use strict";var i,s=n(8106).q,r=s.ERR_MISSING_ARGS,a=s.ERR_STREAM_DESTROYED;function o(e){if(e)throw e}function d(e,t,s,r){r=function(e){var t=!1;return function(){t||(t=!0,e.apply(void 0,arguments))}}(r);var o=!1;e.on("close",(function(){o=!0})),void 0===i&&(i=n(1086)),i(e,{readable:t,writable:s},(function(e){if(e)return r(e);o=!0,r()}));var d=!1;return function(t){if(!o&&!d)return d=!0,function(e){return e.setHeader&&"function"==typeof e.abort}(e)?e.abort():"function"==typeof e.destroy?e.destroy():void r(t||new a("pipe"))}}function l(e){e()}function u(e,t){return e.pipe(t)}function h(e){return e.length?"function"!=typeof e[e.length-1]?o:e.pop():o}e.exports=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var i,s=h(t);if(Array.isArray(t[0])&&(t=t[0]),t.length<2)throw new r("streams");var a=t.map((function(e,n){var r=n<t.length-1;return d(e,r,n>0,(function(e){i||(i=e),e&&a.forEach(l),r||(a.forEach(l),s(i))}))}));return t.reduce(u)}},94:(e,t,n)=>{"use strict";var i=n(8106).q.ERR_INVALID_OPT_VALUE;e.exports={getHighWaterMark:function(e,t,n,s){var r=function(e,t,n){return null!=e.highWaterMark?e.highWaterMark:t?e[n]:null}(t,s,n);if(null!=r){if(!isFinite(r)||Math.floor(r)!==r||r<0)throw new i(s?n:"highWaterMark",r);return Math.floor(r)}return e.objectMode?16:16384}}},3194:(e,t,n)=>{e.exports=n(7187).EventEmitter},2553:(e,t,n)=>{"use strict";var i=n(396).Buffer,s=i.isEncoding||function(e){switch((e=""+e)&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function r(e){var t;switch(this.encoding=function(e){var t=function(e){if(!e)return"utf8";for(var t;;)switch(e){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return e;default:if(t)return;e=(""+e).toLowerCase(),t=!0}}(e);if("string"!=typeof t&&(i.isEncoding===s||!s(e)))throw new Error("Unknown encoding: "+e);return t||e}(e),this.encoding){case"utf16le":this.text=d,this.end=l,t=4;break;case"utf8":this.fillLast=o,t=4;break;case"base64":this.text=u,this.end=h,t=3;break;default:return this.write=c,void(this.end=_)}this.lastNeed=0,this.lastTotal=0,this.lastChar=i.allocUnsafe(t)}function a(e){return e<=127?0:e>>5==6?2:e>>4==14?3:e>>3==30?4:e>>6==2?-1:-2}function o(e){var t=this.lastTotal-this.lastNeed,n=function(e,t,n){if(128!=(192&t[0]))return e.lastNeed=0,"�";if(e.lastNeed>1&&t.length>1){if(128!=(192&t[1]))return e.lastNeed=1,"�";if(e.lastNeed>2&&t.length>2&&128!=(192&t[2]))return e.lastNeed=2,"�"}}(this,e);return void 0!==n?n:this.lastNeed<=e.length?(e.copy(this.lastChar,t,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(e.copy(this.lastChar,t,0,e.length),void(this.lastNeed-=e.length))}function d(e,t){if((e.length-t)%2==0){var n=e.toString("utf16le",t);if(n){var i=n.charCodeAt(n.length-1);if(i>=55296&&i<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1],n.slice(0,-1)}return n}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=e[e.length-1],e.toString("utf16le",t,e.length-1)}function l(e){var t=e&&e.length?this.write(e):"";if(this.lastNeed){var n=this.lastTotal-this.lastNeed;return t+this.lastChar.toString("utf16le",0,n)}return t}function u(e,t){var n=(e.length-t)%3;return 0===n?e.toString("base64",t):(this.lastNeed=3-n,this.lastTotal=3,1===n?this.lastChar[0]=e[e.length-1]:(this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1]),e.toString("base64",t,e.length-n))}function h(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+this.lastChar.toString("base64",0,3-this.lastNeed):t}function c(e){return e.toString(this.encoding)}function _(e){return e&&e.length?this.write(e):""}t.s=r,r.prototype.write=function(e){if(0===e.length)return"";var t,n;if(this.lastNeed){if(void 0===(t=this.fillLast(e)))return"";n=this.lastNeed,this.lastNeed=0}else n=0;return n<e.length?t?t+this.text(e,n):this.text(e,n):t||""},r.prototype.end=function(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+"�":t},r.prototype.text=function(e,t){var n=function(e,t,n){var i=t.length-1;if(i<n)return 0;var s=a(t[i]);return s>=0?(s>0&&(e.lastNeed=s-1),s):--i<n||-2===s?0:(s=a(t[i]))>=0?(s>0&&(e.lastNeed=s-2),s):--i<n||-2===s?0:(s=a(t[i]))>=0?(s>0&&(2===s?s=0:e.lastNeed=s-3),s):0}(this,e,t);if(!this.lastNeed)return e.toString("utf8",t);this.lastTotal=n;var i=e.length-(n-this.lastNeed);return e.copy(this.lastChar,0,i),e.toString("utf8",t,i)},r.prototype.fillLast=function(e){if(this.lastNeed<=e.length)return e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,e.length),this.lastNeed-=e.length}},396:(e,t,n)=>{var i=n(8764),s=i.Buffer;function r(e,t){for(var n in e)t[n]=e[n]}function a(e,t,n){return s(e,t,n)}s.from&&s.alloc&&s.allocUnsafe&&s.allocUnsafeSlow?e.exports=i:(r(i,t),t.Buffer=a),r(s,a),a.from=function(e,t,n){if("number"==typeof e)throw new TypeError("Argument must not be a number");return s(e,t,n)},a.alloc=function(e,t,n){if("number"!=typeof e)throw new TypeError("Argument must be a number");var i=s(e);return void 0!==t?"string"==typeof n?i.fill(t,n):i.fill(t):i.fill(0),i},a.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return s(e)},a.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return i.SlowBuffer(e)}},4927:(e,t,n)=>{function i(e){try{if(!n.g.localStorage)return!1}catch(e){return!1}var t=n.g.localStorage[e];return null!=t&&"true"===String(t).toLowerCase()}e.exports=function(e,t){if(i("noDeprecation"))return e;var n=!1;return function(){if(!n){if(i("throwDeprecation"))throw new Error(t);i("traceDeprecation")?console.trace(t):console.warn(t),n=!0}return e.apply(this,arguments)}}},5492:(e,t,n)=>{"use strict";var i=n(8764).Buffer;Object.defineProperty(t,"__esModule",{value:!0});var s=n(2830);class r{constructor(e=100){this.size=e,this.length=0,this.buf=i.allocUnsafe(e)}prepend(e){if(i.isBuffer(e)){const t=this.length+e.length;if(t>=this.size&&(this.resize(),t>=this.size))throw Error("INVALID_BUFFER_STATE");const n=this.buf;this.buf=i.allocUnsafe(this.size),e.copy(this.buf,0),n.copy(this.buf,e.length),this.length+=e.length}else{const t=this.length++;t===this.size&&this.resize();const n=this.clone();this.buf[0]=e,n.copy(this.buf,1,0,t)}}append(e){const t=this.length++;t===this.size&&this.resize(),this.buf[t]=e}clone(){return i.from(this.buf.slice(0,this.length))}resize(){const e=this.length;this.size=2*this.size;const t=i.allocUnsafe(this.size);this.buf.copy(t,0,0,e),this.buf=t}toString(e){return e?this.buf.slice(0,this.length).toString(e):Uint8Array.prototype.slice.call(this.buf.slice(0,this.length))}toJSON(){return this.toString("utf8")}reset(){this.length=0}}const a={utf8:i.from([239,187,191]),utf16le:i.from([255,254])};class o extends Error{constructor(e,t,n,...s){Array.isArray(t)&&(t=t.join(" ")),super(t),void 0!==Error.captureStackTrace&&Error.captureStackTrace(this,o),this.code=e;for(const e of s)for(const t in e){const s=e[t];this[t]=i.isBuffer(s)?s.toString(n.encoding):null==s?s:JSON.parse(JSON.stringify(s))}}}const d=function(e){return"object"==typeof e&&null!==e&&!Array.isArray(e)},l=function(e){return e.every((e=>null==e||e.toString&&""===e.toString().trim()))},u=function(e){const t=[];for(let n=0,i=e.length;n<i;n++){const i=e[n];if(null==i||!1===i)t[n]={disabled:!0};else if("string"==typeof i)t[n]={name:i};else{if(!d(i))throw new o("CSV_INVALID_COLUMN_DEFINITION",["Invalid column definition:","expect a string or a literal object,",`got ${JSON.stringify(i)} at position ${n}`]);if("string"!=typeof i.name)throw new o("CSV_OPTION_COLUMNS_MISSING_NAME",["Option columns missing name:",`property "name" is required at position ${n}`,"when column is an object literal"]);t[n]=i}}return t};class h extends s.Transform{constructor(e={}){super({readableObjectMode:!0,...e,encoding:null}),this.__originalOptions=e,this.__normalizeOptions(e)}__normalizeOptions(e){const t={};for(const i in e)t[(n=i,n.replace(/([A-Z])/g,(function(e,t){return"_"+t.toLowerCase()})))]=e[i];var n;if(void 0===t.encoding||!0===t.encoding)t.encoding="utf8";else if(null===t.encoding||!1===t.encoding)t.encoding=null;else if("string"!=typeof t.encoding&&null!==t.encoding)throw new o("CSV_INVALID_OPTION_ENCODING",["Invalid option encoding:","encoding must be a string or null to return a buffer,",`got ${JSON.stringify(t.encoding)}`],t);if(void 0===t.bom||null===t.bom||!1===t.bom)t.bom=!1;else if(!0!==t.bom)throw new o("CSV_INVALID_OPTION_BOM",["Invalid option bom:","bom must be true,",`got ${JSON.stringify(t.bom)}`],t);let s=null;if(void 0===t.cast||null===t.cast||!1===t.cast||""===t.cast)t.cast=void 0;else if("function"==typeof t.cast)s=t.cast,t.cast=!0;else if(!0!==t.cast)throw new o("CSV_INVALID_OPTION_CAST",["Invalid option cast:","cast must be true or a function,",`got ${JSON.stringify(t.cast)}`],t);if(void 0===t.cast_date||null===t.cast_date||!1===t.cast_date||""===t.cast_date)t.cast_date=!1;else{if(!0!==t.cast_date)throw new o("CSV_INVALID_OPTION_CAST_DATE",["Invalid option cast_date:","cast_date must be true or a function,",`got ${JSON.stringify(t.cast_date)}`],t);t.cast_date=function(e){const t=Date.parse(e);return isNaN(t)?e:new Date(t)}}let a=null;if(!0===t.columns)a=void 0;else if("function"==typeof t.columns)a=t.columns,t.columns=!0;else if(Array.isArray(t.columns))t.columns=u(t.columns);else{if(void 0!==t.columns&&null!==t.columns&&!1!==t.columns)throw new o("CSV_INVALID_OPTION_COLUMNS",["Invalid option columns:","expect an array, a function or true,",`got ${JSON.stringify(t.columns)}`],t);t.columns=!1}if(void 0===t.group_columns_by_name||null===t.group_columns_by_name||!1===t.group_columns_by_name)t.group_columns_by_name=!1;else{if(!0!==t.group_columns_by_name)throw new o("CSV_INVALID_OPTION_GROUP_COLUMNS_BY_NAME",["Invalid option group_columns_by_name:","expect an boolean,",`got ${JSON.stringify(t.group_columns_by_name)}`],t);if(!1===t.columns)throw new o("CSV_INVALID_OPTION_GROUP_COLUMNS_BY_NAME",["Invalid option group_columns_by_name:","the `columns` mode must be activated."],t)}if(void 0===t.comment||null===t.comment||!1===t.comment||""===t.comment)t.comment=null;else if("string"==typeof t.comment&&(t.comment=i.from(t.comment,t.encoding)),!i.isBuffer(t.comment))throw new o("CSV_INVALID_OPTION_COMMENT",["Invalid option comment:","comment must be a buffer or a string,",`got ${JSON.stringify(t.comment)}`],t);const d=JSON.stringify(t.delimiter);if(Array.isArray(t.delimiter)||(t.delimiter=[t.delimiter]),0===t.delimiter.length)throw new o("CSV_INVALID_OPTION_DELIMITER",["Invalid option delimiter:","delimiter must be a non empty string or buffer or array of string|buffer,",`got ${d}`],t);if(t.delimiter=t.delimiter.map((function(e){if(null==e||!1===e)return i.from(",",t.encoding);if("string"==typeof e&&(e=i.from(e,t.encoding)),!i.isBuffer(e)||0===e.length)throw new o("CSV_INVALID_OPTION_DELIMITER",["Invalid option delimiter:","delimiter must be a non empty string or buffer or array of string|buffer,",`got ${d}`],t);return e})),void 0===t.escape||!0===t.escape?t.escape=i.from('"',t.encoding):"string"==typeof t.escape?t.escape=i.from(t.escape,t.encoding):null!==t.escape&&!1!==t.escape||(t.escape=null),null!==t.escape&&!i.isBuffer(t.escape))throw new Error(`Invalid Option: escape must be a buffer, a string or a boolean, got ${JSON.stringify(t.escape)}`);if(void 0===t.from||null===t.from)t.from=1;else{if("string"==typeof t.from&&/\d+/.test(t.from)&&(t.from=parseInt(t.from)),!Number.isInteger(t.from))throw new Error(`Invalid Option: from must be an integer, got ${JSON.stringify(t.from)}`);if(t.from<0)throw new Error(`Invalid Option: from must be a positive integer, got ${JSON.stringify(e.from)}`)}if(void 0===t.from_line||null===t.from_line)t.from_line=1;else{if("string"==typeof t.from_line&&/\d+/.test(t.from_line)&&(t.from_line=parseInt(t.from_line)),!Number.isInteger(t.from_line))throw new Error(`Invalid Option: from_line must be an integer, got ${JSON.stringify(e.from_line)}`);if(t.from_line<=0)throw new Error(`Invalid Option: from_line must be a positive integer greater than 0, got ${JSON.stringify(e.from_line)}`)}if(void 0===t.ignore_last_delimiters||null===t.ignore_last_delimiters)t.ignore_last_delimiters=!1;else if("number"==typeof t.ignore_last_delimiters)t.ignore_last_delimiters=Math.floor(t.ignore_last_delimiters),0===t.ignore_last_delimiters&&(t.ignore_last_delimiters=!1);else if("boolean"!=typeof t.ignore_last_delimiters)throw new o("CSV_INVALID_OPTION_IGNORE_LAST_DELIMITERS",["Invalid option `ignore_last_delimiters`:","the value must be a boolean value or an integer,",`got ${JSON.stringify(t.ignore_last_delimiters)}`],t);if(!0===t.ignore_last_delimiters&&!1===t.columns)throw new o("CSV_IGNORE_LAST_DELIMITERS_REQUIRES_COLUMNS",["The option `ignore_last_delimiters`","requires the activation of the `columns` option"],t);if(void 0===t.info||null===t.info||!1===t.info)t.info=!1;else if(!0!==t.info)throw new Error(`Invalid Option: info must be true, got ${JSON.stringify(t.info)}`);if(void 0===t.max_record_size||null===t.max_record_size||!1===t.max_record_size)t.max_record_size=0;else if(Number.isInteger(t.max_record_size)&&t.max_record_size>=0);else{if("string"!=typeof t.max_record_size||!/\d+/.test(t.max_record_size))throw new Error(`Invalid Option: max_record_size must be a positive integer, got ${JSON.stringify(t.max_record_size)}`);t.max_record_size=parseInt(t.max_record_size)}if(void 0===t.objname||null===t.objname||!1===t.objname)t.objname=void 0;else if(i.isBuffer(t.objname)){if(0===t.objname.length)throw new Error("Invalid Option: objname must be a non empty buffer");null===t.encoding||(t.objname=t.objname.toString(t.encoding))}else if("string"==typeof t.objname){if(0===t.objname.length)throw new Error("Invalid Option: objname must be a non empty string")}else if("number"!=typeof t.objname)throw new Error(`Invalid Option: objname must be a string or a buffer, got ${t.objname}`);if(void 0!==t.objname)if("number"==typeof t.objname){if(!1!==t.columns)throw Error("Invalid Option: objname index cannot be combined with columns or be defined as a field")}else if(!1===t.columns)throw Error("Invalid Option: objname field must be combined with columns or be defined as an index");if(void 0===t.on_record||null===t.on_record)t.on_record=void 0;else if("function"!=typeof t.on_record)throw new o("CSV_INVALID_OPTION_ON_RECORD",["Invalid option `on_record`:","expect a function,",`got ${JSON.stringify(t.on_record)}`],t);if(null===t.quote||!1===t.quote||""===t.quote)t.quote=null;else if(void 0===t.quote||!0===t.quote?t.quote=i.from('"',t.encoding):"string"==typeof t.quote&&(t.quote=i.from(t.quote,t.encoding)),!i.isBuffer(t.quote))throw new Error(`Invalid Option: quote must be a buffer or a string, got ${JSON.stringify(t.quote)}`);if(void 0===t.raw||null===t.raw||!1===t.raw)t.raw=!1;else if(!0!==t.raw)throw new Error(`Invalid Option: raw must be true, got ${JSON.stringify(t.raw)}`);if(void 0===t.record_delimiter)t.record_delimiter=[];else if("string"==typeof t.record_delimiter||i.isBuffer(t.record_delimiter)){if(0===t.record_delimiter.length)throw new o("CSV_INVALID_OPTION_RECORD_DELIMITER",["Invalid option `record_delimiter`:","value must be a non empty string or buffer,",`got ${JSON.stringify(t.record_delimiter)}`],t);t.record_delimiter=[t.record_delimiter]}else if(!Array.isArray(t.record_delimiter))throw new o("CSV_INVALID_OPTION_RECORD_DELIMITER",["Invalid option `record_delimiter`:","value must be a string, a buffer or array of string|buffer,",`got ${JSON.stringify(t.record_delimiter)}`],t);if(t.record_delimiter=t.record_delimiter.map((function(e,n){if("string"!=typeof e&&!i.isBuffer(e))throw new o("CSV_INVALID_OPTION_RECORD_DELIMITER",["Invalid option `record_delimiter`:","value must be a string, a buffer or array of string|buffer",`at index ${n},`,`got ${JSON.stringify(e)}`],t);if(0===e.length)throw new o("CSV_INVALID_OPTION_RECORD_DELIMITER",["Invalid option `record_delimiter`:","value must be a non empty string or buffer",`at index ${n},`,`got ${JSON.stringify(e)}`],t);return"string"==typeof e&&(e=i.from(e,t.encoding)),e})),"boolean"==typeof t.relax_column_count);else{if(void 0!==t.relax_column_count&&null!==t.relax_column_count)throw new Error(`Invalid Option: relax_column_count must be a boolean, got ${JSON.stringify(t.relax_column_count)}`);t.relax_column_count=!1}if("boolean"==typeof t.relax_column_count_less);else{if(void 0!==t.relax_column_count_less&&null!==t.relax_column_count_less)throw new Error(`Invalid Option: relax_column_count_less must be a boolean, got ${JSON.stringify(t.relax_column_count_less)}`);t.relax_column_count_less=!1}if("boolean"==typeof t.relax_column_count_more);else{if(void 0!==t.relax_column_count_more&&null!==t.relax_column_count_more)throw new Error(`Invalid Option: relax_column_count_more must be a boolean, got ${JSON.stringify(t.relax_column_count_more)}`);t.relax_column_count_more=!1}if("boolean"==typeof t.relax_quotes);else{if(void 0!==t.relax_quotes&&null!==t.relax_quotes)throw new Error(`Invalid Option: relax_quotes must be a boolean, got ${JSON.stringify(t.relax_quotes)}`);t.relax_quotes=!1}if("boolean"==typeof t.skip_empty_lines);else{if(void 0!==t.skip_empty_lines&&null!==t.skip_empty_lines)throw new Error(`Invalid Option: skip_empty_lines must be a boolean, got ${JSON.stringify(t.skip_empty_lines)}`);t.skip_empty_lines=!1}if("boolean"==typeof t.skip_records_with_empty_values);else{if(void 0!==t.skip_records_with_empty_values&&null!==t.skip_records_with_empty_values)throw new Error(`Invalid Option: skip_records_with_empty_values must be a boolean, got ${JSON.stringify(t.skip_records_with_empty_values)}`);t.skip_records_with_empty_values=!1}if("boolean"==typeof t.skip_records_with_error);else{if(void 0!==t.skip_records_with_error&&null!==t.skip_records_with_error)throw new Error(`Invalid Option: skip_records_with_error must be a boolean, got ${JSON.stringify(t.skip_records_with_error)}`);t.skip_records_with_error=!1}if(void 0===t.rtrim||null===t.rtrim||!1===t.rtrim)t.rtrim=!1;else if(!0!==t.rtrim)throw new Error(`Invalid Option: rtrim must be a boolean, got ${JSON.stringify(t.rtrim)}`);if(void 0===t.ltrim||null===t.ltrim||!1===t.ltrim)t.ltrim=!1;else if(!0!==t.ltrim)throw new Error(`Invalid Option: ltrim must be a boolean, got ${JSON.stringify(t.ltrim)}`);if(void 0===t.trim||null===t.trim||!1===t.trim)t.trim=!1;else if(!0!==t.trim)throw new Error(`Invalid Option: trim must be a boolean, got ${JSON.stringify(t.trim)}`);if(!0===t.trim&&!1!==e.ltrim?t.ltrim=!0:!0!==t.ltrim&&(t.ltrim=!1),!0===t.trim&&!1!==e.rtrim?t.rtrim=!0:!0!==t.rtrim&&(t.rtrim=!1),void 0===t.to||null===t.to)t.to=-1;else{if("string"==typeof t.to&&/\d+/.test(t.to)&&(t.to=parseInt(t.to)),!Number.isInteger(t.to))throw new Error(`Invalid Option: to must be an integer, got ${JSON.stringify(e.to)}`);if(t.to<=0)throw new Error(`Invalid Option: to must be a positive integer greater than 0, got ${JSON.stringify(e.to)}`)}if(void 0===t.to_line||null===t.to_line)t.to_line=-1;else{if("string"==typeof t.to_line&&/\d+/.test(t.to_line)&&(t.to_line=parseInt(t.to_line)),!Number.isInteger(t.to_line))throw new Error(`Invalid Option: to_line must be an integer, got ${JSON.stringify(e.to_line)}`);if(t.to_line<=0)throw new Error(`Invalid Option: to_line must be a positive integer greater than 0, got ${JSON.stringify(e.to_line)}`)}this.info={bytes:0,comment_lines:0,empty_lines:0,invalid_field_length:0,lines:1,records:0},this.options=t,this.state={bomSkipped:!1,bufBytesStart:0,castField:s,commenting:!1,error:void 0,enabled:1===t.from_line,escaping:!1,escapeIsQuote:i.isBuffer(t.escape)&&i.isBuffer(t.quote)&&0===i.compare(t.escape,t.quote),expectedRecordLength:Array.isArray(t.columns)?t.columns.length:void 0,field:new r(20),firstLineToHeaders:a,needMoreDataSize:Math.max(null!==t.comment?t.comment.length:0,...t.delimiter.map((e=>e.length)),null!==t.quote?t.quote.length:0),previousBuf:void 0,quoting:!1,stop:!1,rawBuffer:new r(100),record:[],recordHasError:!1,record_length:0,recordDelimiterMaxLength:0===t.record_delimiter.length?2:Math.max(...t.record_delimiter.map((e=>e.length))),trimChars:[i.from(" ",t.encoding)[0],i.from("\t",t.encoding)[0]],wasQuoting:!1,wasRowDelimiter:!1}}_transform(e,t,n){if(!0===this.state.stop)return;const i=this.__parse(e,!1);void 0!==i&&(this.state.stop=!0),n(i)}_flush(e){!0!==this.state.stop&&e(this.__parse(void 0,!0))}__parse(e,t){const{bom:n,comment:s,escape:r,from_line:d,ltrim:l,max_record_size:u,quote:h,raw:c,relax_quotes:_,rtrim:m,skip_empty_lines:f,to:p,to_line:g}=this.options;let{record_delimiter:y}=this.options;const{bomSkipped:M,previousBuf:b,rawBuffer:L,escapeIsQuote:v}=this.state;let w;if(void 0===b){if(void 0===e)return void this.push(null);w=e}else w=void 0!==b&&void 0===e?b:i.concat([b,e]);if(!1===M)if(!1===n)this.state.bomSkipped=!0;else if(w.length<3){if(!1===t)return void(this.state.previousBuf=w)}else{for(const e in a)if(0===a[e].compare(w,0,a[e].length)){const t=a[e].length;this.state.bufBytesStart+=t,w=w.slice(t),this.__normalizeOptions({...this.__originalOptions,encoding:e});break}this.state.bomSkipped=!0}const Y=w.length;let k;for(k=0;k<Y&&!this.__needMoreData(k,Y,t);k++){if(!0===this.state.wasRowDelimiter&&(this.info.lines++,this.state.wasRowDelimiter=!1),-1!==g&&this.info.lines>g)return this.state.stop=!0,void this.push(null);!1===this.state.quoting&&0===y.length&&this.__autoDiscoverRecordDelimiter(w,k)&&(y=this.options.record_delimiter);const e=w[k];if(!0===c&&L.append(e),13!==e&&10!==e||!1!==this.state.wasRowDelimiter||(this.state.wasRowDelimiter=!0),!0===this.state.escaping)this.state.escaping=!1;else{if(null!==r&&!0===this.state.quoting&&this.__isEscape(w,k,e)&&k+r.length<Y){if(!v){this.state.escaping=!0,k+=r.length-1;continue}if(this.__isQuote(w,k+r.length)){this.state.escaping=!0,k+=r.length-1;continue}}if(!1===this.state.commenting&&this.__isQuote(w,k))if(!0===this.state.quoting){const t=w[k+h.length],n=m&&this.__isCharTrimable(t),i=null!==s&&this.__compareBytes(s,w,k+h.length,t),a=this.__isDelimiter(w,k+h.length,t),d=0===y.length?this.__autoDiscoverRecordDelimiter(w,k+h.length):this.__isRecordDelimiter(t,w,k+h.length);if(null!==r&&this.__isEscape(w,k,e)&&this.__isQuote(w,k+r.length))k+=r.length-1;else{if(!t||a||d||i||n){this.state.quoting=!1,this.state.wasQuoting=!0,k+=h.length-1;continue}if(!1===_){const e=this.__error(new o("CSV_INVALID_CLOSING_QUOTE",["Invalid Closing Quote:",`got "${String.fromCharCode(t)}"`,`at line ${this.info.lines}`,"instead of delimiter, record delimiter, trimable character","(if activated) or comment"],this.options,this.__infoField()));if(void 0!==e)return e}else this.state.quoting=!1,this.state.wasQuoting=!0,this.state.field.prepend(h),k+=h.length-1}}else{if(0===this.state.field.length){this.state.quoting=!0,k+=h.length-1;continue}if(!1===_){const e=this.__error(new o("INVALID_OPENING_QUOTE",["Invalid Opening Quote:",`a quote is found inside a field at line ${this.info.lines}`],this.options,this.__infoField(),{field:this.state.field}));if(void 0!==e)return e}}if(!1===this.state.quoting){const t=this.__isRecordDelimiter(e,w,k);if(0!==t){if(this.state.commenting&&!1===this.state.wasQuoting&&0===this.state.record.length&&0===this.state.field.length)this.info.comment_lines++;else{if(!1===this.state.enabled&&this.info.lines+(!0===this.state.wasRowDelimiter?1:0)>=d){this.state.enabled=!0,this.__resetField(),this.__resetRecord(),k+=t-1;continue}if(!0===f&&!1===this.state.wasQuoting&&0===this.state.record.length&&0===this.state.field.length){this.info.empty_lines++,k+=t-1;continue}this.info.bytes=this.state.bufBytesStart+k;const e=this.__onField();if(void 0!==e)return e;this.info.bytes=this.state.bufBytesStart+k+t;const n=this.__onRecord();if(void 0!==n)return n;if(-1!==p&&this.info.records>=p)return this.state.stop=!0,void this.push(null)}this.state.commenting=!1,k+=t-1;continue}if(this.state.commenting)continue;if(0!==(null===s?0:this.__compareBytes(s,w,k,e))){this.state.commenting=!0;continue}const n=this.__isDelimiter(w,k,e);if(0!==n){this.info.bytes=this.state.bufBytesStart+k;const e=this.__onField();if(void 0!==e)return e;k+=n-1;continue}}}if(!1===this.state.commenting&&0!==u&&this.state.record_length+this.state.field.length>u){const e=this.__error(new o("CSV_MAX_RECORD_SIZE",["Max Record Size:","record exceed the maximum number of tolerated bytes",`of ${u}`,`at line ${this.info.lines}`],this.options,this.__infoField()));if(void 0!==e)return e}const t=!1===l||!0===this.state.quoting||0!==this.state.field.length||!this.__isCharTrimable(e),n=!1===m||!1===this.state.wasQuoting;if(!0===t&&!0===n)this.state.field.append(e);else if(!0===m&&!this.__isCharTrimable(e)){const e=this.__error(new o("CSV_NON_TRIMABLE_CHAR_AFTER_CLOSING_QUOTE",["Invalid Closing Quote:","found non trimable byte after quote",`at line ${this.info.lines}`],this.options,this.__infoField()));if(void 0!==e)return e}}if(!0===t)if(!0===this.state.quoting){const e=this.__error(new o("CSV_QUOTE_NOT_CLOSED",["Quote Not Closed:",`the parsing is finished with an opening quote at line ${this.info.lines}`],this.options,this.__infoField()));if(void 0!==e)return e}else if(!0===this.state.wasQuoting||0!==this.state.record.length||0!==this.state.field.length){this.info.bytes=this.state.bufBytesStart+k;const e=this.__onField();if(void 0!==e)return e;const t=this.__onRecord();if(void 0!==t)return t}else!0===this.state.wasRowDelimiter?this.info.empty_lines++:!0===this.state.commenting&&this.info.comment_lines++;else this.state.bufBytesStart+=k,this.state.previousBuf=w.slice(k);!0===this.state.wasRowDelimiter&&(this.info.lines++,this.state.wasRowDelimiter=!1)}__onRecord(){const{columns:e,group_columns_by_name:t,encoding:n,info:i,from:s,relax_column_count:r,relax_column_count_less:a,relax_column_count_more:d,raw:u,skip_records_with_empty_values:h}=this.options,{enabled:c,record:_}=this.state;if(!1===c)return this.__resetRecord();const m=_.length;if(!0===e)return!0===h&&l(_)?void this.__resetRecord():this.__firstLineToColumns(_);if(!1===e&&0===this.info.records&&(this.state.expectedRecordLength=m),m!==this.state.expectedRecordLength){const t=!1===e?new o("CSV_RECORD_INCONSISTENT_FIELDS_LENGTH",["Invalid Record Length:",`expect ${this.state.expectedRecordLength},`,`got ${m} on line ${this.info.lines}`],this.options,this.__infoField(),{record:_}):new o("CSV_RECORD_INCONSISTENT_COLUMNS",["Invalid Record Length:",`columns length is ${e.length},`,`got ${m} on line ${this.info.lines}`],this.options,this.__infoField(),{record:_});if(!0===r||!0===a&&m<this.state.expectedRecordLength||!0===d&&m>this.state.expectedRecordLength)this.info.invalid_field_length++,this.state.error=t;else{const e=this.__error(t);if(e)return e}}if(!0===h&&l(_))this.__resetRecord();else{if(!0===this.state.recordHasError)return this.__resetRecord(),void(this.state.recordHasError=!1);if(this.info.records++,1===s||this.info.records>=s){const{objname:s}=this.options;if(!1!==e){const r={};for(let n=0,i=_.length;n<i;n++)void 0===e[n]||e[n].disabled||(!0===t&&void 0!==r[e[n].name]?Array.isArray(r[e[n].name])?r[e[n].name]=r[e[n].name].concat(_[n]):r[e[n].name]=[r[e[n].name],_[n]]:r[e[n].name]=_[n]);if(!0===u||!0===i){const e=Object.assign({record:r},!0===u?{raw:this.state.rawBuffer.toString(n)}:{},!0===i?{info:this.__infoRecord()}:{}),t=this.__push(void 0===s?e:[r[s],e]);if(t)return t}else{const e=this.__push(void 0===s?r:[r[s],r]);if(e)return e}}else if(!0===u||!0===i){const e=Object.assign({record:_},!0===u?{raw:this.state.rawBuffer.toString(n)}:{},!0===i?{info:this.__infoRecord()}:{}),t=this.__push(void 0===s?e:[_[s],e]);if(t)return t}else{const e=this.__push(void 0===s?_:[_[s],_]);if(e)return e}}this.__resetRecord()}}__firstLineToColumns(e){const{firstLineToHeaders:t}=this.state;try{const n=void 0===t?e:t.call(null,e);if(!Array.isArray(n))return this.__error(new o("CSV_INVALID_COLUMN_MAPPING",["Invalid Column Mapping:","expect an array from column function,",`got ${JSON.stringify(n)}`],this.options,this.__infoField(),{headers:n}));const i=u(n);return this.state.expectedRecordLength=i.length,this.options.columns=i,void this.__resetRecord()}catch(e){return e}}__resetRecord(){!0===this.options.raw&&this.state.rawBuffer.reset(),this.state.error=void 0,this.state.record=[],this.state.record_length=0}__onField(){const{cast:e,encoding:t,rtrim:n,max_record_size:i}=this.options,{enabled:s,wasQuoting:r}=this.state;if(!1===s)return this.__resetField();let a=this.state.field.toString(t);if(!0===n&&!1===r&&(a=a.trimRight()),!0===e){const[e,t]=this.__cast(a);if(void 0!==e)return e;a=t}this.state.record.push(a),0!==i&&"string"==typeof a&&(this.state.record_length+=a.length),this.__resetField()}__resetField(){this.state.field.reset(),this.state.wasQuoting=!1}__push(e){const{on_record:t}=this.options;if(void 0!==t){const n=this.__infoRecord();try{e=t.call(null,e,n)}catch(e){return e}if(null==e)return}this.push(e)}__cast(e){const{columns:t,relax_column_count:n}=this.options;if(!0===Array.isArray(t)&&n&&this.options.columns.length<=this.state.record.length)return[void 0,void 0];if(null!==this.state.castField)try{const t=this.__infoField();return[void 0,this.state.castField.call(null,e,t)]}catch(e){return[e]}if(this.__isFloat(e))return[void 0,parseFloat(e)];if(!1!==this.options.cast_date){const t=this.__infoField();return[void 0,this.options.cast_date.call(null,e,t)]}return[void 0,e]}__isCharTrimable(e){return 32===e||9===e||13===e||10===e||12===e}__isFloat(e){return e-parseFloat(e)+1>=0}__compareBytes(e,t,n,i){if(e[0]!==i)return 0;const s=e.length;for(let i=1;i<s;i++)if(e[i]!==t[n+i])return 0;return s}__needMoreData(e,t,n){if(n)return!1;const{quote:i}=this.options,{quoting:s,needMoreDataSize:r,recordDelimiterMaxLength:a}=this.state;return t-e-1<Math.max(r,a,s?i.length+a:0)}__isDelimiter(e,t,n){const{delimiter:i,ignore_last_delimiters:s}=this.options;if(!0===s&&this.state.record.length===this.options.columns.length-1)return 0;if(!1!==s&&"number"==typeof s&&this.state.record.length===s-1)return 0;e:for(let s=0;s<i.length;s++){const r=i[s];if(r[0]===n){for(let n=1;n<r.length;n++)if(r[n]!==e[t+n])continue e;return r.length}}return 0}__isRecordDelimiter(e,t,n){const{record_delimiter:i}=this.options,s=i.length;e:for(let r=0;r<s;r++){const s=i[r],a=s.length;if(s[0]===e){for(let e=1;e<a;e++)if(s[e]!==t[n+e])continue e;return s.length}}return 0}__isEscape(e,t,n){const{escape:i}=this.options;if(null===i)return!1;const s=i.length;if(i[0]===n){for(let n=0;n<s;n++)if(i[n]!==e[t+n])return!1;return!0}return!1}__isQuote(e,t){const{quote:n}=this.options;if(null===n)return!1;const i=n.length;for(let s=0;s<i;s++)if(n[s]!==e[t+s])return!1;return!0}__autoDiscoverRecordDelimiter(e,t){const{encoding:n}=this.options,s=e[t];return 13===s?10===e[t+1]?(this.options.record_delimiter.push(i.from("\r\n",n)),this.state.recordDelimiterMaxLength=2,2):(this.options.record_delimiter.push(i.from("\r",n)),this.state.recordDelimiterMaxLength=1,1):10===s?(this.options.record_delimiter.push(i.from("\n",n)),this.state.recordDelimiterMaxLength=1,1):0}__error(e){const{encoding:t,raw:n,skip_records_with_error:i}=this.options,s="string"==typeof e?new Error(e):e;return i?(this.state.recordHasError=!0,void this.emit("skip",s,n?this.state.rawBuffer.toString(t):void 0)):s}__infoDataSet(){return{...this.info,columns:this.options.columns}}__infoRecord(){const{columns:e,raw:t,encoding:n}=this.options;return{...this.__infoDataSet(),error:this.state.error,header:!0===e,index:this.state.record.length,raw:t?this.state.rawBuffer.toString(n):void 0}}__infoField(){const{columns:e}=this.options,t=Array.isArray(e);return{...this.__infoRecord(),column:!0===t?e.length>this.state.record.length?e[this.state.record.length].name:null:this.state.record.length,quoting:this.state.wasQuoting}}}t.CsvError=o,t.Parser=h,t.parse=function(){let e,t,n;for(const s in arguments){const r=arguments[s],a=typeof r;if(void 0!==e||"string"!=typeof r&&!i.isBuffer(r))if(void 0===t&&d(r))t=r;else{if(void 0!==n||"function"!==a)throw new o("CSV_INVALID_ARGUMENT",["Invalid argument:",`got ${JSON.stringify(r)} at index ${s}`],t||{});n=r}else e=r}const s=new h(t);if(n){const e=void 0===t||void 0===t.objname?[]:{};s.on("readable",(function(){let n;for(;null!==(n=this.read());)void 0===t||void 0===t.objname?e.push(n):e[n[0]]=n[1]})),s.on("error",(function(e){n(e,void 0,s.__infoDataSet())})),s.on("end",(function(){n(void 0,e,s.__infoDataSet())}))}if(void 0!==e){const t=function(){s.write(e),s.end()};"function"==typeof setImmediate?setImmediate(t):setTimeout(t,0)}return s}},3526:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Component=void 0;const i=n(8500),s=n(5961),r=n(1402);t.Component=class{constructor(e){this._elements=[],this._skipUnmount=!1,this._hasUnmounted=!1,this.props=e||{},this.id=this._getHash()}static get isClass(){return!0}get isClass(){return!0}setState(e,t=!1){"object"==typeof e&&null!==e&&void 0!==this.state?this.state=Object.assign(Object.assign({},this.state),e):this.state=e,t&&this.update()}set state(e){r._state.set(this.id,e)}get state(){return r._state.get(this.id)}set initState(e){void 0===this.state&&(this.state=e)}get elements(){return this._elements||[]}set elements(e){Array.isArray(e)||(e=[e]),e.forEach((e=>{this._elements.push(e)}))}_addNodeRemoveListener(){/^[^{]+{\s+}$/gm.test(this.didUnmount.toString())||(0,i.onNodeRemove)(this.elements[0],(()=>{this._skipUnmount||this._didUnmount()}))}_didMount(){this._addNodeRemoveListener(),this.didMount()}_didUnmount(){this._hasUnmounted||(this.didUnmount(),this._hasUnmounted=!0)}willMount(){}didMount(){}didUnmount(){}render(e){}update(e){this._skipUnmount=!0;const t=[...this.elements];this._elements=[];let n=this.render(e);n=(0,s._render)(n),this.elements=n;const i=t[0].parentElement;i||console.warn("Component needs a parent element to get updated!"),this.elements.forEach((e=>{i&&i.insertBefore(e,t[0])})),t.forEach((e=>{e.remove(),e=null})),this._addNodeRemoveListener(),(0,s.tick)((()=>{this._skipUnmount=!1,this.elements[0].isConnected||this._didUnmount()}))}_getHash(){}}},1635:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Helmet=void 0;const i=n(3526),s=n(5961);class r extends i.Component{static SSR(e){const t=/(<helmet\b[^>]*>)((.|\n)*?)(<\/helmet>)/gm,n=[],i=[];if("undefined"!=typeof document&&document.head){let e=[];e=[].slice.call(document.head.children);for(let t=0;t<e.length;t++)-1===n.indexOf(e[t])&&n.push(e[t])}let s;for(;null!==(s=t.exec(e));){const e=s[1],t=s[2],r=e.includes('data-placement="head"');r&&!n.includes(t)?n.push(t):r||i.includes(t)||i.push(t)}return{body:e.replace(t,""),head:n,footer:i}}didMount(){this.props.children.forEach((e=>{var t,n,i,r;const a=this.props.footer?document.body:document.head,o=e.tagName;let d=[];d.push(e.innerText);for(let i=0;i<e.attributes.length;i++)d.push(null===(t=e.attributes.item(i))||void 0===t?void 0:t.name.toLowerCase()),d.push(null===(n=e.attributes.item(i))||void 0===n?void 0:n.value.toLowerCase());if("HTML"===o||"BODY"===o){const e=document.getElementsByTagName(o)[0];for(let t=1;t<d.length;t+=2)e.setAttribute(d[t],d[t+1]);return}if("TITLE"===o){const t=document.getElementsByTagName("TITLE");if(t.length>0){const n=e;t[0].text=n.text}else{const t=(0,s.h)("title",null,e.innerHTML);a.appendChild(t)}return}let l=!1;d=d.sort();const u=document.getElementsByTagName(o);for(let e=0;e<u.length;e++){let t=[];t.push(u[e].innerText);for(let n=0;n<u[e].attributes.length;n++)t.push(null===(i=u[e].attributes.item(n))||void 0===i?void 0:i.name.toLowerCase()),t.push(null===(r=u[e].attributes.item(n))||void 0===r?void 0:r.value.toLowerCase());t=t.sort(),d.length>0&&t.length>0&&JSON.stringify(d)===JSON.stringify(t)&&(l=!0)}l||(0,s.appendChildren)(a,[e])}))}render(){const e=this.props.footer?"footer":"head";return(0,s.isSSR)()?(0,s.h)("helmet",{"data-ssr":!0,"data-placement":e},this.props.children):[]}}t.Helmet=r},8428:function(e,t,n){"use strict";var i=this&&this.__rest||function(e,t){var n={};for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.indexOf(i)<0&&(n[i]=e[i]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var s=0;for(i=Object.getOwnPropertySymbols(e);s<i.length;s++)t.indexOf(i[s])<0&&Object.prototype.propertyIsEnumerable.call(e,i[s])&&(n[i[s]]=e[i[s]])}return n};Object.defineProperty(t,"__esModule",{value:!0}),t.Img=void 0;const s=n(3526),r=n(5961);class a extends s.Component{constructor(e){super(e);const{src:t,key:n}=e;this.id=`${(0,r.strToHash)(t)}-${(0,r.strToHash)(JSON.stringify(e))}`,n&&(this.id+=`key-${n}`),this.state||this.setState({isLoaded:!1,image:void 0})}didMount(){const e=this.props,{lazy:t=!0,placeholder:n,children:s,key:a,ref:o}=e,d=i(e,["lazy","placeholder","children","key","ref"]);"boolean"==typeof t&&!1===t||new IntersectionObserver(((e,t)=>{e.forEach((e=>{e.isIntersecting&&(t.disconnect(),this.state.image=(0,r.h)("img",Object.assign({},d)),this.state.image.complete?(this.state.isLoaded=!0,this.update()):this.state.image.onload=()=>{this.state.isLoaded=!0,this.update()})}))}),{threshold:[0,1]}).observe(this.elements[0])}render(){const e=this.props,{src:t,placeholder:n,children:s,lazy:a=!0,key:o,ref:d}=e,l=i(e,["src","placeholder","children","lazy","key","ref"]);if("boolean"==typeof a&&!1===a)return this.state.image=(0,r.h)("img",Object.assign({src:t},l)),this.state.image;if(this.state.isLoaded)return this.state.image;if(n&&"string"==typeof n)return(0,r.h)("img",Object.assign({src:n},l));if(n&&"function"==typeof n)return n();{const e={};l.width&&(e.width=`${l.width}px`),l.height&&(e.height=`${l.height}px`);const{width:t,height:n}=l,s=i(l,["width","height"]);return(0,r.h)("div",Object.assign({style:e},s))}}}t.Img=a},6252:function(e,t,n){"use strict";var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&i(t,e,n);return s(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Visible=t.Suspense=t.Router=t.Link=t.Img=t.Helmet=void 0;var a=n(1635);Object.defineProperty(t,"Helmet",{enumerable:!0,get:function(){return a.Helmet}});var o=n(8428);Object.defineProperty(t,"Img",{enumerable:!0,get:function(){return o.Img}});var d=n(1478);Object.defineProperty(t,"Link",{enumerable:!0,get:function(){return d.Link}}),t.Router=r(n(4038));var l=n(4289);Object.defineProperty(t,"Suspense",{enumerable:!0,get:function(){return l.Suspense}});var u=n(700);Object.defineProperty(t,"Visible",{enumerable:!0,get:function(){return u.Visible}})},1478:function(e,t,n){"use strict";var i=this&&this.__rest||function(e,t){var n={};for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.indexOf(i)<0&&(n[i]=e[i]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var s=0;for(i=Object.getOwnPropertySymbols(e);s<i.length;s++)t.indexOf(i[s])<0&&Object.prototype.propertyIsEnumerable.call(e,i[s])&&(n[i[s]]=e[i[s]])}return n};Object.defineProperty(t,"__esModule",{value:!0}),t.Link=void 0;const s=n(3526),r=n(1635),a=n(5961),o=n(8151);class d extends s.Component{prefetchOnHover(){this.elements[0].addEventListener("mouseover",(()=>this.addPrefetch()),{once:!0})}prefetchOnVisible(){new IntersectionObserver(((e,t)=>{e.forEach((e=>{e.isIntersecting&&(t.disconnect(),this.addPrefetch())}))}),{threshold:[0,1]}).observe(this.elements[0])}addPrefetch(){let e=!1;const t=document.getElementsByTagName("link");for(let n=0;n<t.length;n++)"prefetch"===t[n].getAttribute("rel")&&t[n].getAttribute("href")===this.props.href&&(e=!0);if(!e){const e=(0,a.h)("link",{rel:"prefetch",href:this.props.href,as:"document"});document.head.appendChild(e)}}didMount(){const{href:e,prefetch:t,delay:n=0,back:i=!1}=this.props;i&&this.elements[0].addEventListener("click",(e=>{e.preventDefault();const t=e.target;t.href===document.referrer?window.history.back():window.location.href=t.href})),n>0&&this.elements[0].addEventListener("click",(t=>{t.preventDefault(),setTimeout((()=>window.location.href=e),n)})),t&&("hover"===t?this.prefetchOnHover():"visible"===t?this.prefetchOnVisible():this.addPrefetch())}render(){const e=this.props,{children:t,prefetch:n,back:s,ref:d}=e,l=i(e,["children","prefetch","back","ref"]);this.props.href||console.warn('Please add "href" to <Link>'),1!==t.length&&console.warn("Please add ONE child to <Link> (<Link>child</Link>)");const u=(0,a.h)("a",Object.assign({},l),...t);if(!0!==n||"undefined"!=typeof window&&window.document)return u;{const e=(0,a.h)("link",{rel:"prefetch",href:this.props.href,as:"document"}),t=(0,a.h)(r.Helmet,null,e);return(0,a.h)(o.Fragment,null,[t,u])}}}t.Link=d},4038:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Listener=t.Link=t.to=t.Route=t.Switch=t.matchPath=void 0;const i=n(3526),s=n(5961),r=[],a=e=>{window.history.pushState({},"",e),r.forEach((e=>e.handleChanges())),window.dispatchEvent(new Event("pushstate"))},o=e=>{window.history.replaceState({},"",e),r.forEach((e=>e.handleChanges())),window.dispatchEvent(new Event("replacestate"))};t.matchPath=(e,t)=>{const{exact:n=!1,regex:i}=t;let s,{path:r}=t;if(!r)return{path:null,url:e,isExact:!0};let a={};if(r.includes("/:")){const t=r.split("/"),n=e.split("/");t.forEach(((e,s)=>{if(/^:/.test(e)){const r=e.slice(1),o=n[s];if(i&&i[r]&&!i[r].test(o))return null;a=Object.assign(Object.assign({},a),{[r]:o}),t[s]=n[s]}})),r=t.join("/")}if("*"===r&&(s=[e]),s||(s=new RegExp(`^${r}`).exec(e)),!s)return null;const o=s[0],d=e===o;return n&&!d?null:{path:r,url:o,isExact:d,params:a}};class d extends i.Component{constructor(){super(...arguments),this.index=0,this.path="",this.match={index:-1,path:""}}didMount(){window.addEventListener("popstate",this.handleChanges.bind(this)),r.push(this)}didUnmount(){window.removeEventListener("popstate",this.handleChanges.bind(this)),r.splice(r.indexOf(this),1)}handleChanges(){this.findChild(),this.shouldUpdate()&&this.update()}findChild(){this.match={index:-1,path:""};for(let e=0;e<this.props.children.length;e++){const n=this.props.children[e],{path:i,exact:r,regex:a}=n.props;if((0,t.matchPath)((0,s.isSSR)()?_nano.location.pathname:window.location.pathname,{path:i,exact:r,regex:a}))return this.match.index=e,void(this.match.path=i)}}shouldUpdate(){return this.path!==this.match.path||this.index!==this.match.index}render(){this.findChild();const e=this.props.children[this.match.index];if(-1===this.match.index&&(this.path="",this.index=0),e){const{path:t}=e.props;this.path=t,this.index=this.match.index;const n=(0,s._render)(e);return(0,s.h)("div",{},(0,s._render)(n))}return this.props.fallback?(0,s.h)("div",{},(0,s._render)(this.props.fallback)):(0,s.h)("div",{},"not found")}}t.Switch=d,t.Route=({path:e,regex:t,children:n})=>(n.forEach((n=>{n.props&&(n.props=Object.assign(Object.assign({},n.props),{route:{path:e,regex:t}}))})),n),t.to=(e,t=!1)=>{t?o(e):a(e)},t.Link=({to:e,replace:t,children:n})=>(0,s.h)("a",{href:e,onClick:n=>(n.preventDefault(),void(t?o(e):a(e)))},n);class l{constructor(){if(this._listeners=new Map,(0,s.isSSR)())return;this._route=window.location.pathname;const e=()=>{const e=window.location.pathname;this._listeners.forEach((t=>{t(e,this._route)})),this._route=e};window.addEventListener("pushstate",e),window.addEventListener("replacestate",e)}use(){const e=Math.random().toString(36).substring(2);return{subscribe:t=>{this._listeners.set(e,t)},cancel:()=>{this._listeners.has(e)&&this._listeners.delete(e)}}}}let u;t.Listener=()=>(u||(u=new l),u)},4289:function(e,t,n){"use strict";var i=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(s,r){function a(e){try{d(i.next(e))}catch(e){r(e)}}function o(e){try{d(i.throw(e))}catch(e){r(e)}}function d(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,o)}d((i=i.apply(e,t||[])).next())}))},s=this&&this.__rest||function(e,t){var n={};for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.indexOf(i)<0&&(n[i]=e[i]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var s=0;for(i=Object.getOwnPropertySymbols(e);s<i.length;s++)t.indexOf(i[s])<0&&Object.prototype.propertyIsEnumerable.call(e,i[s])&&(n[i[s]]=e[i[s]])}return n};Object.defineProperty(t,"__esModule",{value:!0}),t.Suspense=void 0;const r=n(3526),a=n(5961);class o extends r.Component{constructor(e){super(e),this.ready=!1;const t=this.props,{children:n,fallback:i,cache:r=!1}=t,o=s(t,["children","fallback","cache"]),d=JSON.stringify(o,(function(e,t){return"function"==typeof t?`${t}`:t}));this.id=(0,a.strToHash)(JSON.stringify(d))}didMount(){return i(this,void 0,void 0,(function*(){const e=this.props,{children:t,fallback:n,cache:i=!1}=e,r=s(e,["children","fallback","cache"]);if(i&&(this.initState={}),this.loadFromCache(i))return;const a=Object.values(r).map((e=>e())),o=yield Promise.all(a),d=this.prepareData(r,o,i);this.addDataToChildren(d),this.ready=!0,this.update()}))}ssr(){const e=this.props,{children:t,fallback:n,cache:i=!1}=e,r=s(e,["children","fallback","cache"]),a=Object.values(r).map((e=>e())),o=this.prepareData(r,a,!1);this.addDataToChildren(o)}loadFromCache(e){const t=this.state&&e&&Object.keys(this.state).length>0;return t&&(this.addDataToChildren(this.state),this.ready=!0),t}prepareData(e,t,n){return Object.keys(e).reduce(((e,i,s)=>(n&&(this.state=Object.assign(Object.assign({},this.state),{[i]:t[s]})),Object.assign(Object.assign({},e),{[i]:t[s]}))),{})}addDataToChildren(e){this.props.children.forEach((t=>{t.props&&(t.props=Object.assign(Object.assign({},t.props),e))}))}render(){if((0,a.isSSR)())return this.ssr(),this.props.children;{const{cache:e=!1}=this.props;return this.loadFromCache(e),this.ready?this.props.children:this.props.fallback}}}t.Suspense=o},700:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Visible=void 0;const i=n(5961),s=n(3526);class r extends s.Component{constructor(){super(...arguments),this.isVisible=!1}didMount(){new IntersectionObserver(((e,t)=>{e.forEach((e=>{e.isIntersecting&&(t.disconnect(),this.isVisible=!0,this.update())}))}),{threshold:[0,1]}).observe(this.elements[0])}render(){return this.isVisible?(this.props.onVisible&&this.props.onVisible(),(0,i.render)(this.props.component||this.props.children[0])):(0,i.h)("div",{"data-visible":!1,visibility:"hidden"})}}t.Visible=r},9474:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createContext=void 0,t.createContext=e=>{let t=e;return{Provider:e=>(e.value&&(t=e.value),e.children),Consumer:e=>({component:e.children[0](t),props:Object.assign(Object.assign({},e),{context:t})}),get:()=>t,set:e=>t=e}}},5961:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.h=t._render=t.render=t.hydrate=t.appendChildren=t.strToHash=t.removeAllChildNodes=t.tick=t.isSSR=void 0,n(4313),t.isSSR=()=>"undefined"!=typeof _nano&&!0===_nano.isSSR,t.tick="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,t.removeAllChildNodes=e=>{for(;e.firstChild;)e.removeChild(e.firstChild)},t.strToHash=e=>{let t=0;for(let n=0;n<e.length;n++)t=(t<<5)-t+e.charCodeAt(n),t|=0;return Math.abs(t).toString(32)},t.appendChildren=(e,n)=>{Array.isArray(n)?("object"==typeof n&&(n=Array.prototype.slice.call(n)),n.forEach((n=>{if(Array.isArray(n))(0,t.appendChildren)(e,n);else{const i=(0,t._render)(n);void 0!==i&&(Array.isArray(i)?(0,t.appendChildren)(e,i):e.appendChild(null==i.nodeType?document.createTextNode(i.toString()):i))}}))):(0,t.appendChildren)(e,[n])},t.hydrate=(e,n=null,i=!0)=>(0,t.render)(e,n,i),t.render=(e,n=null,i=!0)=>{let s=(0,t._render)(e);return Array.isArray(s)&&(s=s.map((e=>(0,t._render)(e))),1===s.length&&(s=s[0])),n?(i&&(0,t.removeAllChildNodes)(n),s&&n.id&&n.id===s.id&&n.parentElement?n.parentElement.replaceChild(s,n):Array.isArray(s)?s.forEach((e=>{(0,t.appendChildren)(n,(0,t._render)(e))})):(0,t.appendChildren)(n,(0,t._render)(s)),n):(0,t.isSSR)()&&!Array.isArray(s)?[s]:s},t._render=e=>void 0===e||null==e?[]:"string"==typeof e?e:"number"==typeof e?e.toString():e.tagName&&"svg"===e.tagName.toLowerCase()?(e=>{const t=e.children[0],n=t.attributes,i=r("svg");for(let e=n.length-1;e>=0;e--)i.setAttribute(n[e].name,n[e].value);return i.innerHTML=t.innerHTML,i})({children:[e]}):e.tagName?e:e&&e.component&&e.component.isClass?s(e):e.component&&"function"==typeof e.component?i(e):Array.isArray(e)?e.map((e=>(0,t._render)(e))).flat():"function"==typeof e?(0,t._render)(e()):e.component&&e.component.tagName&&"string"==typeof e.component.tagName||Array.isArray(e.component)||e.component?(0,t._render)(e.component):"object"==typeof e?[]:void console.warn("Something unexpected happened with:",e);const i=e=>{const{component:n,props:i}=e;return(0,t._render)(n(i))},s=e=>{const{component:n,props:i}=e,s=(0,t.strToHash)(n.toString());n.prototype._getHash=()=>s;const r=new n(i);r.willMount();let a=r.render();return a=(0,t._render)(a),r.elements=a,i&&i.ref&&i.ref(r),(0,t.isSSR)()||(0,t.tick)((()=>{r._didMount()})),a},r=e=>document.createElementNS("http://www.w3.org/2000/svg",e);t.h=(e,n,...i)=>{if("string"!=typeof e)return{component:e,props:Object.assign(Object.assign({},n),{children:i})};let s;const a="svg"===e?r("svg"):document.createElement(e),o=(e,t)=>0===t.indexOf("on")&&(!!e.ssr||"object"==typeof e[t]||"function"==typeof e[t]);for(const e in n){if("style"===e&&"object"==typeof n[e]){const t=Object.keys(n[e]).map((t=>`${t}:${n[e][t]}`)).join(";").replace(/[A-Z]/g,(e=>`-${e.toLowerCase()}`));n[e]=`${t};`}if("ref"===e)s=n[e];else if(o(a,e.toLowerCase()))a.addEventListener(e.toLowerCase().substring(2),(t=>n[e](t)));else if("dangerouslySetInnerHTML"===e){const t=document.createElement("fragment");t.innerHTML=n[e].__html,a.appendChild(t)}else/className/i.test(e)?console.warn('You can use "class" instead of "className".'):void 0!==n[e]&&a.setAttribute(e,n[e])}return(0,t.appendChildren)(a,i),s&&s(a),a}},4313:()=>{},3871:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.defineAsCustomElements=void 0;const i=n(5961);t.defineAsCustomElements=function(e,t,n,{mode:s="closed",delegatesFocus:r=!1}={}){customElements.define(t,class extends HTMLElement{constructor(){super();const t=this.attachShadow({mode:s,delegatesFocus:r});let n;const a=Array.from(this.children).map((e=>(0,i.render)(e))),o=(0,i.h)("div",null,(0,i._render)({component:e,props:{children:a,ref:e=>n=e}}));this.component=n,this.isFunctionalComponent=!e.isClass,this.functionalComponentsProps={},t.append(o),this.isFunctionalComponent||(this.component.updatePropsValue=(e,t)=>{this.component.props||(this.component.props={}),this.component.props[e]=t,this.component[e]=t})}static get observedAttributes(){return n}removeChildren(){var e,t;for(const n of null!==(t=null===(e=this.shadowRoot)||void 0===e?void 0:e.children)&&void 0!==t?t:[])n.remove()}attributeChangedCallback(t,n,s){if(this.isFunctionalComponent){this.removeChildren(),this.functionalComponentsProps[t]=s;const n=(0,i.h)("div",null,(0,i._render)({component:e,props:Object.assign({children:[],ref:e=>this.component=e},this.functionalComponentsProps)}));this.shadowRoot.append(n)}else this.component.updatePropsValue(t,s),this.component.update()}})}},8151:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Fragment=void 0,t.Fragment=e=>e.children},8500:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.printVersion=t.escapeHtml=t.onNodeRemove=t.detectSSR=t.nodeToString=t.task=void 0;const i=n(7038);function s(e,t){return!!e&&(e===t||s(e.parentNode,t))}t.task=e=>setTimeout(e,0),t.nodeToString=e=>{const t=document.createElement("div");return t.appendChild(e.cloneNode(!0)),t.innerHTML},t.detectSSR=()=>{const e="undefined"!=typeof Deno,t="undefined"!=typeof window;return"undefined"!=typeof _nano&&_nano.isSSR||e||!t},t.onNodeRemove=(e,t)=>{let n=new MutationObserver((i=>{i.forEach((i=>{i.removedNodes.forEach((i=>{s(e,i)&&(t(),n&&(n.disconnect(),n=void 0))}))}))}));return n.observe(document,{childList:!0,subtree:!0}),n},t.escapeHtml=e=>e&&"string"==typeof e?e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#039;"):e,t.printVersion=()=>{const e=`Powered by nano JSX v${i.VERSION}`;console.log(`%c %c %c %c %c ${e} %c http://nanojsx.io`,"background: #ff0000","background: #ffff00","background: #00ff00","background: #00ffff","color: #fff; background: #000000;","background: none")}},1417:function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=i(n(4235));t.default=s.default},6576:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.build=t.evaluate=t.treeify=void 0;const i=n(3417);t.treeify=(e,t)=>{const n=e=>{let i="",s=null;const r=[],a=[];for(let o=1;o<e.length;o++){const d=e[o++],l=e[o]?t[e[o++]-1]:e[++o];3===d?i=l:4===d?(r.push(l),s=null):5===d?(s||(s=Object.create(null),r.push(s)),s[e[++o]]=[l]):6===d?s[e[++o]].push(l):2===d?a.push(n(l)):0===d&&a.push(l)}return{tag:i,props:r,children:a}},{children:i}=n(e);return i.length>1?i:i[0]},t.evaluate=(e,n,i,s)=>{let r;n[0]=0;for(let a=1;a<n.length;a++){const o=n[a++],d=n[a]?(n[0]|=o?1:2,i[n[a++]]):n[++a];3===o?s[0]=d:4===o?s[1]=Object.assign(s[1]||{},d):5===o?(s[1]=s[1]||{})[n[++a]]=d:6===o?s[1][n[++a]]+=`${d}`:o?(r=e.apply(d,(0,t.evaluate)(e,d,i,["",null])),s.push(r),d[0]?n[0]|=2:(n[a-2]=0,n[a]=r)):s.push(d)}return s},t.build=function(e,...t){const n=[e,...t],s=this;let r,a,o=1,d="",l="",u=[0];const h=e=>{1===o&&(e||(d=d.replace(/^\s*\n\s*|\s*\n\s*$/g,"")))?i.MINI?u.push(e?n[e]:d):u.push(0,e,d):3===o&&(e||d)?(i.MINI?u[1]=e?n[e]:d:u.push(3,e,d),o=2):2===o&&"..."===d&&e?i.MINI?u[2]=Object.assign(u[2]||{},n[e]):u.push(4,e,0):2===o&&d&&!e?i.MINI?(u[2]=u[2]||{})[d]=!0:u.push(5,0,!0,d):o>=5&&(i.MINI?5===o?((u[2]=u[2]||{})[a]=e?d?d+n[e]:n[e]:d,o=6):(e||d)&&(u[2][a]+=e?d+n[e]:d):((d||!e&&5===o)&&(u.push(o,0,d,a),o=6),e&&(u.push(o,e,0,a),o=6))),d=""};for(let t=0;t<e.length;t++){t&&(1===o&&h(),h(t));for(let n=0;n<e[t].length;n++)r=e[t][n],1===o?"<"===r?(h(),u=i.MINI?[u,"",null]:[u],o=3):d+=r:4===o?"--"===d&&">"===r?(o=1,d=""):d=r+d[0]:l?r===l?l="":d+=r:'"'===r||"'"===r?l=r:">"===r?(h(),o=1):o&&("="===r?(o=5,a=d,d=""):"/"===r&&(o<5||">"===e[t][n+1])?(h(),3===o&&(u=u[0]),o=u,i.MINI?(u=u[0]).push(s(...o.slice(1))):(u=u[0]).push(2,0,o),o=0):" "===r||"\t"===r||"\n"===r||"\r"===r?(h(),o=2):d+=r),3===o&&"!--"===d&&(o=4,u=u[0])}return h(),i.MINI?u.length>2?u.slice(1):u[1]:u}},3417:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MINI=void 0,t.MINI=!1},4235:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(3417),s=n(6576),r=new Map;t.default=i.MINI?s.build:function(e){let t=r.get(this);return t||(t=new Map,r.set(this,t)),t=(0,s.evaluate)(this,t.get(e)||(t.set(e,t=(0,s.build)(e)),t),arguments,[]),t.length>1?t:t[0]}},298:function(e,t,n){"use strict";var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),s=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||i(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),t.VERSION=t.printVersion=t.defineAsCustomElements=t.withStyles=t.createContext=t.Store=t.Fragment=t.renderSSR=t.task=t.nodeToString=t.hydrateLazy=t.jsx=t.Component=t.tick=t.hydrate=t.render=t.h=void 0;var r=n(5961);Object.defineProperty(t,"h",{enumerable:!0,get:function(){return r.h}}),Object.defineProperty(t,"render",{enumerable:!0,get:function(){return r.render}}),Object.defineProperty(t,"hydrate",{enumerable:!0,get:function(){return r.hydrate}}),Object.defineProperty(t,"tick",{enumerable:!0,get:function(){return r.tick}});var a=n(3526);Object.defineProperty(t,"Component",{enumerable:!0,get:function(){return a.Component}}),s(n(6252),t);const o=n(5961),d=n(9532);t.default={h:o.h,render:o.render,hydrate:o.hydrate,renderSSR:d.renderSSR};var l=n(4515);Object.defineProperty(t,"jsx",{enumerable:!0,get:function(){return l.jsx}});var u=n(3022);Object.defineProperty(t,"hydrateLazy",{enumerable:!0,get:function(){return u.hydrateLazy}});var h=n(8500);Object.defineProperty(t,"nodeToString",{enumerable:!0,get:function(){return h.nodeToString}}),Object.defineProperty(t,"task",{enumerable:!0,get:function(){return h.task}});var c=n(9532);Object.defineProperty(t,"renderSSR",{enumerable:!0,get:function(){return c.renderSSR}});var _=n(8151);Object.defineProperty(t,"Fragment",{enumerable:!0,get:function(){return _.Fragment}});var m=n(6543);Object.defineProperty(t,"Store",{enumerable:!0,get:function(){return m.Store}});var f=n(9474);Object.defineProperty(t,"createContext",{enumerable:!0,get:function(){return f.createContext}});var p=n(3005);Object.defineProperty(t,"withStyles",{enumerable:!0,get:function(){return p.withStyles}});var g=n(3871);Object.defineProperty(t,"defineAsCustomElements",{enumerable:!0,get:function(){return g.defineAsCustomElements}});var y=n(8500);Object.defineProperty(t,"printVersion",{enumerable:!0,get:function(){return y.printVersion}});var M=n(7038);Object.defineProperty(t,"VERSION",{enumerable:!0,get:function(){return M.VERSION}})},4515:function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.jsx=void 0;const s=n(5961),r=i(n(1417)).default.bind(s.h);t.jsx=r},3022:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.hydrateLazy=void 0;const i=n(5961),s=n(700);t.hydrateLazy=(e,t=null,n=!0)=>{const r=(0,i.h)(s.Visible,null,e);return(0,i.hydrate)(r,t,n)}},2414:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.documentSSR=t.DocumentSSR=void 0;const i=n(8500);class s{constructor(e){this.isSelfClosing=!1,this.nodeType=null,this.tagName=e,this.nodeType=1,["area","base","br","col","embed","hr","img","input","link","meta","param","source","track","wbr"].indexOf(e)>=0?(this._ssr=`<${e} />`,this.isSelfClosing=!0):this._ssr=`<${e}></${e}>`}get outerHTML(){return this._ssr}get innerHTML(){var e;return(null===(e=/(^<[a-z]+>)([\s\S]*)(<\/[a-z]+>$)/gm.exec(this._ssr))||void 0===e?void 0:e[2])||""}set innerHTML(e){this._ssr=e}get innerText(){var e;return(null===(e=/(^<[^>]+>)(.+)?(<\/[a-z]+>$|\/>$)/gm.exec(this._ssr))||void 0===e?void 0:e[2])||""}set innerText(e){this._ssr=this._ssr.replace(/(^<[^>]+>)(.+)?(<\/[a-z]+>$|\/>$)/gm,`$1${e}$3`)}getAttribute(e){return null}get classList(){const e=this._ssr,t=/^<\w+.+(\sclass=")([^"]+)"/gm;return{add:e=>{this.setAttribute("class",e)},entries:{get length(){const n=t.exec(e);return n&&n[2]?n[2].split(" ").length:0}}}}toString(){return this._ssr}setAttributeNS(e,t,n){this.setAttribute(t,n)}setAttribute(e,t){this.isSelfClosing?this._ssr=this._ssr.replace(/(^<[a-z]+ )(.+)/gm,`$1${(0,i.escapeHtml)(e)}="${(0,i.escapeHtml)(t)}" $2`):this._ssr=this._ssr.replace(/(^<[^>]+)(.+)/gm,`$1 ${(0,i.escapeHtml)(e)}="${(0,i.escapeHtml)(t)}"$2`)}append(e){this.appendChild(e)}appendChild(e){const t=this._ssr.lastIndexOf("</");this._ssr=this._ssr.substring(0,t)+e+this._ssr.substring(t)}get children(){const e=/<([a-z]+)((?!<\/\1).)*<\/\1>/gms,t=[];let n;for(;null!==(n=e.exec(this.innerHTML));)t.push(n[0].replace(/[\s]+/gm," "));return t}addEventListener(e,t,n){}}class r{constructor(){this.body=this.createElement("body"),this.head=this.createElement("head")}createElement(e){return new s(e)}createElementNS(e,t){return new s(t)}createTextNode(e){return(0,i.escapeHtml)(e)}querySelector(e){}}t.DocumentSSR=r,t.documentSSR=()=>new r},9532:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.clearState=t.renderSSR=t.initSSR=void 0;const i=n(5961),s=n(2414),r=n(1402),a=n(8500);(()=>{const e=!0===(0,a.detectSSR)()||void 0,t=e?(0,s.documentSSR)():window.document;globalThis._nano={isSSR:e,location:{pathname:"/"},document:t}})(),t.initSSR=(e="/")=>{_nano.location={pathname:e},globalThis.document=_nano.document=(0,i.isSSR)()?(0,s.documentSSR)():window.document},t.renderSSR=(e,n={})=>{const{pathname:s,clearState:a=!0}=n;return(0,t.initSSR)(s),a&&r._state.clear(),(0,i.render)(e,null,!0).join("")},t.clearState=()=>{r._state.clear()}},1402:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t._clearState=t._state=void 0,t._state=new Map,t._clearState=()=>{t._state.clear()}},6543:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Store=void 0;const i=n(5961);t.Store=class{constructor(e,t="",n="memory"){if(this._listeners=new Map,(0,i.isSSR)()&&(n="memory"),this._id=t,this._storage=n,this._state=this._prevState=e,"memory"===n||!n)return;const s="local"===n?localStorage:sessionStorage,r=s.getItem(this._id);r?this._state=this._prevState=JSON.parse(r):s.setItem(this._id,JSON.stringify(e))}persist(e){"memory"!==this._storage&&("local"===this._storage?localStorage:sessionStorage).setItem(this._id,JSON.stringify(e))}clear(){this._state=this._prevState=void 0,"local"===this._storage?localStorage.removeItem(this._id):"session"===this._storage&&sessionStorage.removeItem(this._id)}setState(e){this.state=e}set state(e){this._prevState=this._state,this._state=e,this.persist(e),this._listeners.forEach((e=>{e(this._state,this._prevState)}))}get state(){return this._state}use(){const e=Math.random().toString(36).substring(2,9),t=this;return{get state(){return t.state},setState:e=>{this.state=e},subscribe:t=>{this._listeners.set(e,t)},cancel:()=>{this._listeners.has(e)&&this._listeners.delete(e)}}}}},7038:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.VERSION=void 0,t.VERSION="0.0.23"},3005:function(e,t,n){"use strict";var i=this&&this.__rest||function(e,t){var n={};for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.indexOf(i)<0&&(n[i]=e[i]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var s=0;for(i=Object.getOwnPropertySymbols(e);s<i.length;s++)t.indexOf(i[s])<0&&Object.prototype.propertyIsEnumerable.call(e,i[s])&&(n[i[s]]=e[i[s]])}return n};Object.defineProperty(t,"__esModule",{value:!0}),t.withStyles=void 0;const s=n(5961),r=n(3526),a=n(8151),o=n(1635);t.withStyles=e=>t=>class extends r.Component{render(){const n=this.props,{children:r}=n,d=i(n,["children"]),l=(0,s.h)(o.Helmet,null,(0,s.h)("style",null,e.toString())),u=r&&r.length>0?(0,s.h)(t,Object.assign({},d),r):(0,s.h)(t,Object.assign({},this.props));return(0,s.h)(a.Fragment,null,l,u)}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,