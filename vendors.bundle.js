/*! For license information please see vendors.bundle.js.LICENSE.txt */
(self.webpackChunkger_vac_viz=self.webpackChunkger_vac_viz||[]).push([[216],{2181:(e,t,n)=>{"use strict";n.r(t),n.d(t,{Animation:()=>tn,Animations:()=>rn,ArcElement:()=>Xi,BarController:()=>Ln,BarElement:()=>gr,BasePlatform:()=>Zn,BasicPlatform:()=>Qn,BubbleController:()=>vn,CategoryScale:()=>na,Chart:()=>$i,DatasetController:()=>pn,Decimation:()=>Lr,DomPlatform:()=>ci,DoughnutController:()=>wn,Element:()=>hi,Filler:()=>Rr,Interaction:()=>In,Legend:()=>Ir,LineController:()=>Yn,LineElement:()=>or,LinearScale:()=>ra,LogarithmicScale:()=>sa,PieController:()=>Dn,PointElement:()=>lr,PolarAreaController:()=>kn,RadarController:()=>xn,RadialLinearScale:()=>_a,Scale:()=>vi,ScatterController:()=>Tn,Ticks:()=>mi,TimeScale:()=>La,TimeSeriesScale:()=>wa,Title:()=>Nr,Tooltip:()=>ea,_adapters:()=>jn,animator:()=>Qt,controllers:()=>Sn,defaults:()=>Ce,elements:()=>yr,layouts:()=>Kn,plugins:()=>ta,registerables:()=>ka,registry:()=>Yi,scales:()=>Ya});const i="undefined"==typeof window?function(e){return e()}:window.requestAnimationFrame;function r(e,t,n){const r=n||(e=>Array.prototype.slice.call(e));let a=!1,s=[];return function(...n){s=r(n),a||(a=!0,i.call(window,(()=>{a=!1,e.apply(t,s)})))}}const a=e=>"start"===e?"left":"end"===e?"right":"center",s=(e,t,n)=>"start"===e?t:"end"===e?n:(t+n)/2;function o(){}const d=function(){let e=0;return function(){return e++}}();function l(e){return null==e}function u(e){if(Array.isArray&&Array.isArray(e))return!0;const t=Object.prototype.toString.call(e);return"[object"===t.substr(0,7)&&"Array]"===t.substr(-6)}function c(e){return null!==e&&"[object Object]"===Object.prototype.toString.call(e)}const h=e=>("number"==typeof e||e instanceof Number)&&isFinite(+e);function _(e,t){return h(e)?e:t}function m(e,t){return void 0===e?t:e}const f=(e,t)=>"string"==typeof e&&e.endsWith("%")?parseFloat(e)/100*t:+e;function p(e,t,n){if(e&&"function"==typeof e.call)return e.apply(n,t)}function g(e,t,n,i){let r,a,s;if(u(e))if(a=e.length,i)for(r=a-1;r>=0;r--)t.call(n,e[r],r);else for(r=0;r<a;r++)t.call(n,e[r],r);else if(c(e))for(s=Object.keys(e),a=s.length,r=0;r<a;r++)t.call(n,e[s[r]],s[r])}function y(e,t){let n,i,r,a;if(!e||!t||e.length!==t.length)return!1;for(n=0,i=e.length;n<i;++n)if(r=e[n],a=t[n],r.datasetIndex!==a.datasetIndex||r.index!==a.index)return!1;return!0}function M(e){if(u(e))return e.map(M);if(c(e)){const t=Object.create(null),n=Object.keys(e),i=n.length;let r=0;for(;r<i;++r)t[n[r]]=M(e[n[r]]);return t}return e}function b(e){return-1===["__proto__","prototype","constructor"].indexOf(e)}function L(e,t,n,i){if(!b(e))return;const r=t[e],a=n[e];c(r)&&c(a)?v(r,a,i):t[e]=M(a)}function v(e,t,n){const i=u(t)?t:[t],r=i.length;if(!c(e))return e;const a=(n=n||{}).merger||L;for(let s=0;s<r;++s){if(!c(t=i[s]))continue;const r=Object.keys(t);for(let i=0,s=r.length;i<s;++i)a(r[i],e,t,n)}return e}function w(e,t){return v(e,t,{merger:Y})}function Y(e,t,n){if(!b(e))return;const i=t[e],r=n[e];c(i)&&c(r)?w(i,r):Object.prototype.hasOwnProperty.call(t,e)||(t[e]=M(r))}function k(e,t){const n=e.indexOf(".",t);return-1===n?e.length:n}function D(e,t){if(""===t)return e;let n=0,i=k(t,n);for(;e&&i>n;)e=e[t.substr(n,i-n)],n=i+1,i=k(t,n);return e}function x(e){return e.charAt(0).toUpperCase()+e.slice(1)}const T=e=>void 0!==e,S=e=>"function"==typeof e,O=Math.PI,H=2*O,j=H+O,P=Number.POSITIVE_INFINITY,E=O/180,A=O/2,R=O/4,C=2*O/3,W=Math.log10,I=Math.sign;function F(e){const t=Math.pow(10,Math.floor(W(e))),n=e/t;return(n<=1?1:n<=2?2:n<=5?5:10)*t}function N(e){return!isNaN(parseFloat(e))&&isFinite(e)}function z(e,t,n){return Math.abs(e-t)<n}function B(e,t,n){let i,r,a;for(i=0,r=e.length;i<r;i++)a=e[i][n],isNaN(a)||(t.min=Math.min(t.min,a),t.max=Math.max(t.max,a))}function V(e){return e*(O/180)}function U(e){return e*(180/O)}function J(e,t){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))}function $(e,t){return(e-t+j)%H-O}function q(e){return(e%H+H)%H}function G(e,t,n){const i=q(e),r=q(t),a=q(n),s=q(r-i),o=q(a-i),d=q(i-r),l=q(i-a);return i===r||i===a||s>o&&d<l}function K(e,t,n){return Math.max(t,Math.min(n,e))}const Z=e=>0===e||1===e,Q=(e,t,n)=>-Math.pow(2,10*(e-=1))*Math.sin((e-t)*H/n),X=(e,t,n)=>Math.pow(2,-10*e)*Math.sin((e-t)*H/n)+1,ee={linear:e=>e,easeInQuad:e=>e*e,easeOutQuad:e=>-e*(e-2),easeInOutQuad:e=>(e/=.5)<1?.5*e*e:-.5*(--e*(e-2)-1),easeInCubic:e=>e*e*e,easeOutCubic:e=>(e-=1)*e*e+1,easeInOutCubic:e=>(e/=.5)<1?.5*e*e*e:.5*((e-=2)*e*e+2),easeInQuart:e=>e*e*e*e,easeOutQuart:e=>-((e-=1)*e*e*e-1),easeInOutQuart:e=>(e/=.5)<1?.5*e*e*e*e:-.5*((e-=2)*e*e*e-2),easeInQuint:e=>e*e*e*e*e,easeOutQuint:e=>(e-=1)*e*e*e*e+1,easeInOutQuint:e=>(e/=.5)<1?.5*e*e*e*e*e:.5*((e-=2)*e*e*e*e+2),easeInSine:e=>1-Math.cos(e*A),easeOutSine:e=>Math.sin(e*A),easeInOutSine:e=>-.5*(Math.cos(O*e)-1),easeInExpo:e=>0===e?0:Math.pow(2,10*(e-1)),easeOutExpo:e=>1===e?1:1-Math.pow(2,-10*e),easeInOutExpo:e=>Z(e)?e:e<.5?.5*Math.pow(2,10*(2*e-1)):.5*(2-Math.pow(2,-10*(2*e-1))),easeInCirc:e=>e>=1?e:-(Math.sqrt(1-e*e)-1),easeOutCirc:e=>Math.sqrt(1-(e-=1)*e),easeInOutCirc:e=>(e/=.5)<1?-.5*(Math.sqrt(1-e*e)-1):.5*(Math.sqrt(1-(e-=2)*e)+1),easeInElastic:e=>Z(e)?e:Q(e,.075,.3),easeOutElastic:e=>Z(e)?e:X(e,.075,.3),easeInOutElastic(e){const t=.1125;return Z(e)?e:e<.5?.5*Q(2*e,t,.45):.5+.5*X(2*e-1,t,.45)},easeInBack(e){const t=1.70158;return e*e*((t+1)*e-t)},easeOutBack(e){const t=1.70158;return(e-=1)*e*((t+1)*e+t)+1},easeInOutBack(e){let t=1.70158;return(e/=.5)<1?e*e*((1+(t*=1.525))*e-t)*.5:.5*((e-=2)*e*((1+(t*=1.525))*e+t)+2)},easeInBounce:e=>1-ee.easeOutBounce(1-e),easeOutBounce(e){const t=7.5625,n=2.75;return e<1/n?t*e*e:e<2/n?t*(e-=1.5/n)*e+.75:e<2.5/n?t*(e-=2.25/n)*e+.9375:t*(e-=2.625/n)*e+.984375},easeInOutBounce:e=>e<.5?.5*ee.easeInBounce(2*e):.5*ee.easeOutBounce(2*e-1)+.5},te={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},ne="0123456789ABCDEF",ie=e=>ne[15&e],re=e=>ne[(240&e)>>4]+ne[15&e],ae=e=>(240&e)>>4==(15&e);function se(e){return e+.5|0}const oe=(e,t,n)=>Math.max(Math.min(e,n),t);function de(e){return oe(se(2.55*e),0,255)}function le(e){return oe(se(255*e),0,255)}function ue(e){return oe(se(e/2.55)/100,0,1)}function ce(e){return oe(se(100*e),0,100)}const he=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/,_e=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function me(e,t,n){const i=t*Math.min(n,1-n),r=(t,r=(t+e/30)%12)=>n-i*Math.max(Math.min(r-3,9-r,1),-1);return[r(0),r(8),r(4)]}function fe(e,t,n){const i=(i,r=(i+e/60)%6)=>n-n*t*Math.max(Math.min(r,4-r,1),0);return[i(5),i(3),i(1)]}function pe(e,t,n){const i=me(e,1,.5);let r;for(t+n>1&&(r=1/(t+n),t*=r,n*=r),r=0;r<3;r++)i[r]*=1-t-n,i[r]+=t;return i}function ge(e){const t=e.r/255,n=e.g/255,i=e.b/255,r=Math.max(t,n,i),a=Math.min(t,n,i),s=(r+a)/2;let o,d,l;return r!==a&&(l=r-a,d=s>.5?l/(2-r-a):l/(r+a),o=r===t?(n-i)/l+(n<i?6:0):r===n?(i-t)/l+2:(t-n)/l+4,o=60*o+.5),[0|o,d||0,s]}function ye(e,t,n,i){return(Array.isArray(t)?e(t[0],t[1],t[2]):e(t,n,i)).map(le)}function Me(e,t,n){return ye(me,e,t,n)}function be(e){return(e%360+360)%360}const Le={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},ve={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};let we;function Ye(e,t,n){if(e){let i=ge(e);i[t]=Math.max(0,Math.min(i[t]+i[t]*n,0===t?360:1)),i=Me(i),e.r=i[0],e.g=i[1],e.b=i[2]}}function ke(e,t){return e?Object.assign(t||{},e):e}function De(e){var t={r:0,g:0,b:0,a:255};return Array.isArray(e)?e.length>=3&&(t={r:e[0],g:e[1],b:e[2],a:255},e.length>3&&(t.a=le(e[3]))):(t=ke(e,{r:0,g:0,b:0,a:1})).a=le(t.a),t}function xe(e){return"r"===e.charAt(0)?function(e){const t=he.exec(e);let n,i,r,a=255;if(t){if(t[7]!==n){const e=+t[7];a=255&(t[8]?de(e):255*e)}return n=+t[1],i=+t[3],r=+t[5],n=255&(t[2]?de(n):n),i=255&(t[4]?de(i):i),r=255&(t[6]?de(r):r),{r:n,g:i,b:r,a}}}(e):function(e){const t=_e.exec(e);let n,i=255;if(!t)return;t[5]!==n&&(i=t[6]?de(+t[5]):le(+t[5]));const r=be(+t[2]),a=+t[3]/100,s=+t[4]/100;return n="hwb"===t[1]?function(e,t,n){return ye(pe,e,t,n)}(r,a,s):"hsv"===t[1]?function(e,t,n){return ye(fe,e,t,n)}(r,a,s):Me(r,a,s),{r:n[0],g:n[1],b:n[2],a:i}}(e)}class Te{constructor(e){if(e instanceof Te)return e;const t=typeof e;let n;var i,r,a;"object"===t?n=De(e):"string"===t&&(a=(i=e).length,"#"===i[0]&&(4===a||5===a?r={r:255&17*te[i[1]],g:255&17*te[i[2]],b:255&17*te[i[3]],a:5===a?17*te[i[4]]:255}:7!==a&&9!==a||(r={r:te[i[1]]<<4|te[i[2]],g:te[i[3]]<<4|te[i[4]],b:te[i[5]]<<4|te[i[6]],a:9===a?te[i[7]]<<4|te[i[8]]:255})),n=r||function(e){we||(we=function(){const e={},t=Object.keys(ve),n=Object.keys(Le);let i,r,a,s,o;for(i=0;i<t.length;i++){for(s=o=t[i],r=0;r<n.length;r++)a=n[r],o=o.replace(a,Le[a]);a=parseInt(ve[s],16),e[o]=[a>>16&255,a>>8&255,255&a]}return e}(),we.transparent=[0,0,0,0]);const t=we[e.toLowerCase()];return t&&{r:t[0],g:t[1],b:t[2],a:4===t.length?t[3]:255}}(e)||xe(e)),this._rgb=n,this._valid=!!n}get valid(){return this._valid}get rgb(){var e=ke(this._rgb);return e&&(e.a=ue(e.a)),e}set rgb(e){this._rgb=De(e)}rgbString(){return this._valid?(e=this._rgb)&&(e.a<255?`rgba(${e.r}, ${e.g}, ${e.b}, ${ue(e.a)})`:`rgb(${e.r}, ${e.g}, ${e.b})`):this._rgb;var e}hexString(){return this._valid?(e=this._rgb,t=function(e){return ae(e.r)&&ae(e.g)&&ae(e.b)&&ae(e.a)}(e)?ie:re,e?"#"+t(e.r)+t(e.g)+t(e.b)+(e.a<255?t(e.a):""):e):this._rgb;var e,t}hslString(){return this._valid?function(e){if(!e)return;const t=ge(e),n=t[0],i=ce(t[1]),r=ce(t[2]);return e.a<255?`hsla(${n}, ${i}%, ${r}%, ${ue(e.a)})`:`hsl(${n}, ${i}%, ${r}%)`}(this._rgb):this._rgb}mix(e,t){const n=this;if(e){const i=n.rgb,r=e.rgb;let a;const s=t===a?.5:t,o=2*s-1,d=i.a-r.a,l=((o*d==-1?o:(o+d)/(1+o*d))+1)/2;a=1-l,i.r=255&l*i.r+a*r.r+.5,i.g=255&l*i.g+a*r.g+.5,i.b=255&l*i.b+a*r.b+.5,i.a=s*i.a+(1-s)*r.a,n.rgb=i}return n}clone(){return new Te(this.rgb)}alpha(e){return this._rgb.a=le(e),this}clearer(e){return this._rgb.a*=1-e,this}greyscale(){const e=this._rgb,t=se(.3*e.r+.59*e.g+.11*e.b);return e.r=e.g=e.b=t,this}opaquer(e){return this._rgb.a*=1+e,this}negate(){const e=this._rgb;return e.r=255-e.r,e.g=255-e.g,e.b=255-e.b,this}lighten(e){return Ye(this._rgb,2,e),this}darken(e){return Ye(this._rgb,2,-e),this}saturate(e){return Ye(this._rgb,1,e),this}desaturate(e){return Ye(this._rgb,1,-e),this}rotate(e){return function(e,t){var n=ge(e);n[0]=be(n[0]+t),n=Me(n),e.r=n[0],e.g=n[1],e.b=n[2]}(this._rgb,e),this}}function Se(e){return new Te(e)}const Oe=e=>e instanceof CanvasGradient||e instanceof CanvasPattern;function He(e){return Oe(e)?e:Se(e)}function je(e){return Oe(e)?e:Se(e).saturate(.5).darken(.1).hexString()}const Pe=Object.create(null),Ee=Object.create(null);function Ae(e,t){if(!t)return e;const n=t.split(".");for(let t=0,i=n.length;t<i;++t){const i=n[t];e=e[i]||(e[i]=Object.create(null))}return e}function Re(e,t,n){return"string"==typeof t?v(Ae(e,t),n):v(Ae(e,""),t)}var Ce=new class{constructor(e){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=e=>e.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(e,t)=>je(t.backgroundColor),this.hoverBorderColor=(e,t)=>je(t.borderColor),this.hoverColor=(e,t)=>je(t.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.describe(e)}set(e,t){return Re(this,e,t)}get(e){return Ae(this,e)}describe(e,t){return Re(Ee,e,t)}override(e,t){return Re(Pe,e,t)}route(e,t,n,i){const r=Ae(this,e),a=Ae(this,n),s="_"+t;Object.defineProperties(r,{[s]:{value:r[t],writable:!0},[t]:{enumerable:!0,get(){const e=this[s],t=a[i];return c(e)?Object.assign({},t,e):m(e,t)},set(e){this[s]=e}}})}}({_scriptable:e=>!e.startsWith("on"),_indexable:e=>"events"!==e,hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}});function We(e,t,n,i,r){let a=t[r];return a||(a=t[r]=e.measureText(r).width,n.push(r)),a>i&&(i=a),i}function Ie(e,t,n,i){let r=(i=i||{}).data=i.data||{},a=i.garbageCollect=i.garbageCollect||[];i.font!==t&&(r=i.data={},a=i.garbageCollect=[],i.font=t),e.save(),e.font=t;let s=0;const o=n.length;let d,l,c,h,_;for(d=0;d<o;d++)if(h=n[d],null!=h&&!0!==u(h))s=We(e,r,a,s,h);else if(u(h))for(l=0,c=h.length;l<c;l++)_=h[l],null==_||u(_)||(s=We(e,r,a,s,_));e.restore();const m=a.length/2;if(m>n.length){for(d=0;d<m;d++)delete r[a[d]];a.splice(0,m)}return s}function Fe(e,t,n){const i=e.currentDevicePixelRatio,r=0!==n?Math.max(n/2,.5):0;return Math.round((t-r)*i)/i+r}function Ne(e,t){(t=t||e.getContext("2d")).save(),t.resetTransform(),t.clearRect(0,0,e.width,e.height),t.restore()}function ze(e,t,n,i){let r,a,s,o,d;const l=t.pointStyle,u=t.rotation,c=t.radius;let h=(u||0)*E;if(l&&"object"==typeof l&&(r=l.toString(),"[object HTMLImageElement]"===r||"[object HTMLCanvasElement]"===r))return e.save(),e.translate(n,i),e.rotate(h),e.drawImage(l,-l.width/2,-l.height/2,l.width,l.height),void e.restore();if(!(isNaN(c)||c<=0)){switch(e.beginPath(),l){default:e.arc(n,i,c,0,H),e.closePath();break;case"triangle":e.moveTo(n+Math.sin(h)*c,i-Math.cos(h)*c),h+=C,e.lineTo(n+Math.sin(h)*c,i-Math.cos(h)*c),h+=C,e.lineTo(n+Math.sin(h)*c,i-Math.cos(h)*c),e.closePath();break;case"rectRounded":d=.516*c,o=c-d,a=Math.cos(h+R)*o,s=Math.sin(h+R)*o,e.arc(n-a,i-s,d,h-O,h-A),e.arc(n+s,i-a,d,h-A,h),e.arc(n+a,i+s,d,h,h+A),e.arc(n-s,i+a,d,h+A,h+O),e.closePath();break;case"rect":if(!u){o=Math.SQRT1_2*c,e.rect(n-o,i-o,2*o,2*o);break}h+=R;case"rectRot":a=Math.cos(h)*c,s=Math.sin(h)*c,e.moveTo(n-a,i-s),e.lineTo(n+s,i-a),e.lineTo(n+a,i+s),e.lineTo(n-s,i+a),e.closePath();break;case"crossRot":h+=R;case"cross":a=Math.cos(h)*c,s=Math.sin(h)*c,e.moveTo(n-a,i-s),e.lineTo(n+a,i+s),e.moveTo(n+s,i-a),e.lineTo(n-s,i+a);break;case"star":a=Math.cos(h)*c,s=Math.sin(h)*c,e.moveTo(n-a,i-s),e.lineTo(n+a,i+s),e.moveTo(n+s,i-a),e.lineTo(n-s,i+a),h+=R,a=Math.cos(h)*c,s=Math.sin(h)*c,e.moveTo(n-a,i-s),e.lineTo(n+a,i+s),e.moveTo(n+s,i-a),e.lineTo(n-s,i+a);break;case"line":a=Math.cos(h)*c,s=Math.sin(h)*c,e.moveTo(n-a,i-s),e.lineTo(n+a,i+s);break;case"dash":e.moveTo(n,i),e.lineTo(n+Math.cos(h)*c,i+Math.sin(h)*c)}e.fill(),t.borderWidth>0&&e.stroke()}}function Be(e,t,n){return n=n||.5,e&&e.x>t.left-n&&e.x<t.right+n&&e.y>t.top-n&&e.y<t.bottom+n}function Ve(e,t){e.save(),e.beginPath(),e.rect(t.left,t.top,t.right-t.left,t.bottom-t.top),e.clip()}function Ue(e){e.restore()}function Je(e,t,n,i,r){if(!t)return e.lineTo(n.x,n.y);if("middle"===r){const i=(t.x+n.x)/2;e.lineTo(i,t.y),e.lineTo(i,n.y)}else"after"===r!=!!i?e.lineTo(t.x,n.y):e.lineTo(n.x,t.y);e.lineTo(n.x,n.y)}function $e(e,t,n,i){if(!t)return e.lineTo(n.x,n.y);e.bezierCurveTo(i?t.cp1x:t.cp2x,i?t.cp1y:t.cp2y,i?n.cp2x:n.cp1x,i?n.cp2y:n.cp1y,n.x,n.y)}function qe(e,t,n,i,r,a={}){const s=u(t)?t:[t],o=a.strokeWidth>0&&""!==a.strokeColor;let d,c;for(e.save(),a.translation&&e.translate(a.translation[0],a.translation[1]),l(a.rotation)||e.rotate(a.rotation),e.font=r.string,a.color&&(e.fillStyle=a.color),a.textAlign&&(e.textAlign=a.textAlign),a.textBaseline&&(e.textBaseline=a.textBaseline),d=0;d<s.length;++d){if(c=s[d],o&&(a.strokeColor&&(e.strokeStyle=a.strokeColor),l(a.strokeWidth)||(e.lineWidth=a.strokeWidth),e.strokeText(c,n,i,a.maxWidth)),e.fillText(c,n,i,a.maxWidth),a.strikethrough||a.underline){const t=e.measureText(c),r=n-t.actualBoundingBoxLeft,s=n+t.actualBoundingBoxRight,o=i-t.actualBoundingBoxAscent,d=i+t.actualBoundingBoxDescent,l=a.strikethrough?(o+d)/2:d;e.strokeStyle=e.fillStyle,e.beginPath(),e.lineWidth=a.decorationWidth||2,e.moveTo(r,l),e.lineTo(s,l),e.stroke()}i+=r.lineHeight}e.restore()}function Ge(e,t){const{x:n,y:i,w:r,h:a,radius:s}=t;e.arc(n+s.topLeft,i+s.topLeft,s.topLeft,-A,O,!0),e.lineTo(n,i+a-s.bottomLeft),e.arc(n+s.bottomLeft,i+a-s.bottomLeft,s.bottomLeft,O,A,!0),e.lineTo(n+r-s.bottomRight,i+a),e.arc(n+r-s.bottomRight,i+a-s.bottomRight,s.bottomRight,A,0,!0),e.lineTo(n+r,i+s.topRight),e.arc(n+r-s.topRight,i+s.topRight,s.topRight,0,-A,!0),e.lineTo(n+s.topLeft,i)}const Ke=new RegExp(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/),Ze=new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);function Qe(e,t){const n=(""+e).match(Ke);if(!n||"normal"===n[1])return 1.2*t;switch(e=+n[2],n[3]){case"px":return e;case"%":e/=100}return t*e}function Xe(e,t){const n={},i=c(t),r=i?Object.keys(t):t,a=c(e)?i?n=>m(e[n],e[t[n]]):t=>e[t]:()=>e;for(const e of r)n[e]=+a(e)||0;return n}function et(e){return Xe(e,{top:"y",right:"x",bottom:"y",left:"x"})}function tt(e){return Xe(e,["topLeft","topRight","bottomLeft","bottomRight"])}function nt(e){const t=et(e);return t.width=t.left+t.right,t.height=t.top+t.bottom,t}function it(e,t){e=e||{},t=t||Ce.font;let n=m(e.size,t.size);"string"==typeof n&&(n=parseInt(n,10));let i=m(e.style,t.style);i&&!(""+i).match(Ze)&&(console.warn('Invalid font style specified: "'+i+'"'),i="");const r={family:m(e.family,t.family),lineHeight:Qe(m(e.lineHeight,t.lineHeight),n),size:n,style:i,weight:m(e.weight,t.weight),string:""};return r.string=function(e){return!e||l(e.size)||l(e.family)?null:(e.style?e.style+" ":"")+(e.weight?e.weight+" ":"")+e.size+"px "+e.family}(r),r}function rt(e,t,n,i){let r,a,s,o=!0;for(r=0,a=e.length;r<a;++r)if(s=e[r],void 0!==s&&(void 0!==t&&"function"==typeof s&&(s=s(t),o=!1),void 0!==n&&u(s)&&(s=s[n%s.length],o=!1),void 0!==s))return i&&!o&&(i.cacheable=!1),s}function at(e,t,n){n=n||(n=>e[n]<t);let i,r=e.length-1,a=0;for(;r-a>1;)i=a+r>>1,n(i)?a=i:r=i;return{lo:a,hi:r}}const st=(e,t,n)=>at(e,n,(i=>e[i][t]<n)),ot=(e,t,n)=>at(e,n,(i=>e[i][t]>=n)),dt=["push","pop","shift","splice","unshift"];function lt(e,t){const n=e._chartjs;if(!n)return;const i=n.listeners,r=i.indexOf(t);-1!==r&&i.splice(r,1),i.length>0||(dt.forEach((t=>{delete e[t]})),delete e._chartjs)}function ut(e){const t=new Set;let n,i;for(n=0,i=e.length;n<i;++n)t.add(e[n]);if(t.size===i)return e;const r=[];return t.forEach((e=>{r.push(e)})),r}function ct(e,t=[""],n=e,i,r=(()=>e[0])){T(i)||(i=vt("_fallback",e));const a={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:e,_rootScopes:n,_fallback:i,_getTarget:r,override:r=>ct([r,...e],t,n,i)};return new Proxy(a,{deleteProperty:(t,n)=>(delete t[n],delete t._keys,delete e[0][n],!0),get:(n,i)=>pt(n,i,(()=>function(e,t,n,i){let r;for(const a of t)if(r=vt(mt(a,e),n),T(r))return ft(e,r)?bt(n,i,e,r):r}(i,t,e,n))),getOwnPropertyDescriptor:(e,t)=>Reflect.getOwnPropertyDescriptor(e._scopes[0],t),getPrototypeOf:()=>Reflect.getPrototypeOf(e[0]),has:(e,t)=>wt(e).includes(t),ownKeys:e=>wt(e),set:(e,t,n)=>((e._storage||(e._storage=r()))[t]=n,delete e[t],delete e._keys,!0)})}function ht(e,t,n,i){const r={_cacheable:!1,_proxy:e,_context:t,_subProxy:n,_stack:new Set,_descriptors:_t(e,i),setContext:t=>ht(e,t,n,i),override:r=>ht(e.override(r),t,n,i)};return new Proxy(r,{deleteProperty:(t,n)=>(delete t[n],delete e[n],!0),get:(e,t,n)=>pt(e,t,(()=>function(e,t,n){const{_proxy:i,_context:r,_subProxy:a,_descriptors:s}=e;let o=i[t];return S(o)&&s.isScriptable(t)&&(o=function(e,t,n,i){const{_proxy:r,_context:a,_subProxy:s,_stack:o}=n;if(o.has(e))throw new Error("Recursion detected: "+[...o].join("->")+"->"+e);return o.add(e),t=t(a,s||i),o.delete(e),c(t)&&(t=bt(r._scopes,r,e,t)),t}(t,o,e,n)),u(o)&&o.length&&(o=function(e,t,n,i){const{_proxy:r,_context:a,_subProxy:s,_descriptors:o}=n;if(T(a.index)&&i(e))t=t[a.index%t.length];else if(c(t[0])){const n=t,i=r._scopes.filter((e=>e!==n));t=[];for(const d of n){const n=bt(i,r,e,d);t.push(ht(n,a,s&&s[e],o))}}return t}(t,o,e,s.isIndexable)),ft(t,o)&&(o=ht(o,r,a&&a[t],s)),o}(e,t,n))),getOwnPropertyDescriptor:(t,n)=>t._descriptors.allKeys?Reflect.has(e,n)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(e,n),getPrototypeOf:()=>Reflect.getPrototypeOf(e),has:(t,n)=>Reflect.has(e,n),ownKeys:()=>Reflect.ownKeys(e),set:(t,n,i)=>(e[n]=i,delete t[n],!0)})}function _t(e,t={scriptable:!0,indexable:!0}){const{_scriptable:n=t.scriptable,_indexable:i=t.indexable,_allKeys:r=t.allKeys}=e;return{allKeys:r,scriptable:n,indexable:i,isScriptable:S(n)?n:()=>n,isIndexable:S(i)?i:()=>i}}const mt=(e,t)=>e?e+x(t):t,ft=(e,t)=>c(t)&&"adapters"!==e;function pt(e,t,n){let i=e[t];return T(i)||(i=n(),T(i)&&(e[t]=i)),i}function gt(e,t,n){return S(e)?e(t,n):e}const yt=(e,t)=>!0===e?t:"string"==typeof e?D(t,e):void 0;function Mt(e,t,n,i){for(const r of t){const t=yt(n,r);if(t){e.add(t);const r=gt(t._fallback,n,t);if(T(r)&&r!==n&&r!==i)return r}else if(!1===t&&T(i)&&n!==i)return null}return!1}function bt(e,t,n,i){const r=t._rootScopes,a=gt(t._fallback,n,i),s=[...e,...r],o=new Set;o.add(i);let d=Lt(o,s,n,a||n);return null!==d&&(!T(a)||a===n||(d=Lt(o,s,a,d),null!==d))&&ct([...o],[""],r,a,(()=>{const e=t._getTarget();return n in e||(e[n]={}),e[n]}))}function Lt(e,t,n,i){for(;n;)n=Mt(e,t,n,i);return n}function vt(e,t){for(const n of t){if(!n)continue;const t=n[e];if(T(t))return t}}function wt(e){let t=e._keys;return t||(t=e._keys=function(e){const t=new Set;for(const n of e)for(const e of Object.keys(n).filter((e=>!e.startsWith("_"))))t.add(e);return[...t]}(e._scopes)),t}const Yt=Number.EPSILON||1e-14,kt=(e,t)=>t<e.length&&!e[t].skip&&e[t];function Dt(e,t,n,i){const r=e.skip?t:e,a=t,s=n.skip?t:n,o=J(a,r),d=J(s,a);let l=o/(o+d),u=d/(o+d);l=isNaN(l)?0:l,u=isNaN(u)?0:u;const c=i*l,h=i*u;return{previous:{x:a.x-c*(s.x-r.x),y:a.y-c*(s.y-r.y)},next:{x:a.x+h*(s.x-r.x),y:a.y+h*(s.y-r.y)}}}function xt(e,t,n){return Math.max(Math.min(e,n),t)}function Tt(e,t,n,i){let r,a,s,o;if(t.spanGaps&&(e=e.filter((e=>!e.skip))),"monotone"===t.cubicInterpolationMode)!function(e){const t=e.length,n=Array(t).fill(0),i=Array(t);let r,a,s,o=kt(e,0);for(r=0;r<t;++r)if(a=s,s=o,o=kt(e,r+1),s){if(o){const e=o.x-s.x;n[r]=0!==e?(o.y-s.y)/e:0}i[r]=a?o?I(n[r-1])!==I(n[r])?0:(n[r-1]+n[r])/2:n[r-1]:n[r]}!function(e,t,n){const i=e.length;let r,a,s,o,d,l=kt(e,0);for(let u=0;u<i-1;++u)d=l,l=kt(e,u+1),d&&l&&(z(t[u],0,Yt)?n[u]=n[u+1]=0:(r=n[u]/t[u],a=n[u+1]/t[u],o=Math.pow(r,2)+Math.pow(a,2),o<=9||(s=3/Math.sqrt(o),n[u]=r*s*t[u],n[u+1]=a*s*t[u])))}(e,n,i),function(e,t){const n=e.length;let i,r,a,s=kt(e,0);for(let o=0;o<n;++o){if(r=a,a=s,s=kt(e,o+1),!a)continue;const{x:n,y:d}=a;r&&(i=(n-r.x)/3,a.cp1x=n-i,a.cp1y=d-i*t[o]),s&&(i=(s.x-n)/3,a.cp2x=n+i,a.cp2y=d+i*t[o])}}(e,i)}(e);else{let n=i?e[e.length-1]:e[0];for(r=0,a=e.length;r<a;++r)s=e[r],o=Dt(n,s,e[Math.min(r+1,a-(i?0:1))%a],t.tension),s.cp1x=o.previous.x,s.cp1y=o.previous.y,s.cp2x=o.next.x,s.cp2y=o.next.y,n=s}t.capBezierPoints&&function(e,t){let n,i,r,a,s,o=Be(e[0],t);for(n=0,i=e.length;n<i;++n)s=a,a=o,o=n<i-1&&Be(e[n+1],t),a&&(r=e[n],s&&(r.cp1x=xt(r.cp1x,t.left,t.right),r.cp1y=xt(r.cp1y,t.top,t.bottom)),o&&(r.cp2x=xt(r.cp2x,t.left,t.right),r.cp2y=xt(r.cp2y,t.top,t.bottom)))}(e,n)}function St(e){let t=e.parentNode;return t&&"[object ShadowRoot]"===t.toString()&&(t=t.host),t}function Ot(e,t,n){let i;return"string"==typeof e?(i=parseInt(e,10),-1!==e.indexOf("%")&&(i=i/100*t.parentNode[n])):i=e,i}const Ht=e=>window.getComputedStyle(e,null),jt=["top","right","bottom","left"];function Pt(e,t,n){const i={};n=n?"-"+n:"";for(let r=0;r<4;r++){const a=jt[r];i[a]=parseFloat(e[t+"-"+a+n])||0}return i.width=i.left+i.right,i.height=i.top+i.bottom,i}function Et(e,t){const{canvas:n,currentDevicePixelRatio:i}=t,r=Ht(n),a="border-box"===r.boxSizing,s=Pt(r,"padding"),o=Pt(r,"border","width"),{x:d,y:l,box:u}=function(e,t){const n=e.native||e,i=n.touches,r=i&&i.length?i[0]:n,{offsetX:a,offsetY:s}=r;let o,d,l=!1;if(((e,t,n)=>(e>0||t>0)&&(!n||!n.shadowRoot))(a,s,n.target))o=a,d=s;else{const e=t.getBoundingClientRect();o=r.clientX-e.left,d=r.clientY-e.top,l=!0}return{x:o,y:d,box:l}}(e,n),c=s.left+(u&&o.left),h=s.top+(u&&o.top);let{width:_,height:m}=t;return a&&(_-=s.width+o.width,m-=s.height+o.height),{x:Math.round((d-c)/_*n.width/i),y:Math.round((l-h)/m*n.height/i)}}const At=e=>Math.round(10*e)/10;function Rt(e,t,n){const i=e.currentDevicePixelRatio=t||1,{canvas:r,width:a,height:s}=e;r.height=s*i,r.width=a*i,e.ctx.setTransform(i,0,0,i,0,0),r.style&&(n||!r.style.height&&!r.style.width)&&(r.style.height=s+"px",r.style.width=a+"px")}const Ct=function(){let e=!1;try{const t={get passive(){return e=!0,!1}};window.addEventListener("test",null,t),window.removeEventListener("test",null,t)}catch(e){}return e}();function Wt(e,t){const n=function(e,t){return Ht(e).getPropertyValue(t)}(e,t),i=n&&n.match(/^(\d+)(\.\d+)?px$/);return i?+i[1]:void 0}function It(e,t,n,i){return{x:e.x+n*(t.x-e.x),y:e.y+n*(t.y-e.y)}}function Ft(e,t,n,i){return{x:e.x+n*(t.x-e.x),y:"middle"===i?n<.5?e.y:t.y:"after"===i?n<1?e.y:t.y:n>0?t.y:e.y}}function Nt(e,t,n,i){const r={x:e.cp2x,y:e.cp2y},a={x:t.cp1x,y:t.cp1y},s=It(e,r,n),o=It(r,a,n),d=It(a,t,n),l=It(s,o,n),u=It(o,d,n);return It(l,u,n)}const zt=new Map;function Bt(e,t,n){return function(e,t){t=t||{};const n=e+JSON.stringify(t);let i=zt.get(n);return i||(i=new Intl.NumberFormat(e,t),zt.set(n,i)),i}(t,n).format(e)}function Vt(e,t,n){return e?function(e,t){return{x:n=>e+e+t-n,setWidth(e){t=e},textAlign:e=>"center"===e?e:"right"===e?"left":"right",xPlus:(e,t)=>e-t,leftForLtr:(e,t)=>e-t}}(t,n):{x:e=>e,setWidth(e){},textAlign:e=>e,xPlus:(e,t)=>e+t,leftForLtr:(e,t)=>e}}function Ut(e,t){let n,i;"ltr"!==t&&"rtl"!==t||(n=e.canvas.style,i=[n.getPropertyValue("direction"),n.getPropertyPriority("direction")],n.setProperty("direction",t,"important"),e.prevTextDirection=i)}function Jt(e,t){void 0!==t&&(delete e.prevTextDirection,e.canvas.style.setProperty("direction",t[0],t[1]))}function $t(e){return"angle"===e?{between:G,compare:$,normalize:q}:{between:(e,t,n)=>e>=Math.min(t,n)&&e<=Math.max(n,t),compare:(e,t)=>e-t,normalize:e=>e}}function qt({start:e,end:t,count:n,loop:i,style:r}){return{start:e%n,end:t%n,loop:i&&(t-e+1)%n==0,style:r}}function Gt(e,t,n){if(!n)return[e];const{property:i,start:r,end:a}=n,s=t.length,{compare:o,between:d,normalize:l}=$t(i),{start:u,end:c,loop:h,style:_}=function(e,t,n){const{property:i,start:r,end:a}=n,{between:s,normalize:o}=$t(i),d=t.length;let l,u,{start:c,end:h,loop:_}=e;if(_){for(c+=d,h+=d,l=0,u=d;l<u&&s(o(t[c%d][i]),r,a);++l)c--,h--;c%=d,h%=d}return h<c&&(h+=d),{start:c,end:h,loop:_,style:e.style}}(e,t,n),m=[];let f,p,g,y=!1,M=null;for(let e=u,n=u;e<=c;++e)p=t[e%s],p.skip||(f=l(p[i]),y=d(f,r,a),null===M&&(y||d(r,g,f)&&0!==o(r,g))&&(M=0===o(f,r)?e:n),null!==M&&(!y||0===o(a,f)||d(a,g,f))&&(m.push(qt({start:M,end:e,loop:h,count:s,style:_})),M=null),n=e,g=f);return null!==M&&m.push(qt({start:M,end:c,loop:h,count:s,style:_})),m}function Kt(e,t){const n=[],i=e.segments;for(let r=0;r<i.length;r++){const a=Gt(i[r],e.points,t);a.length&&n.push(...a)}return n}function Zt(e,t){return t&&JSON.stringify(e)!==JSON.stringify(t)}var Qt=new class{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(e,t,n,i){const r=t.listeners[i],a=t.duration;r.forEach((i=>i({chart:e,initial:t.initial,numSteps:a,currentStep:Math.min(n-t.start,a)})))}_refresh(){const e=this;e._request||(e._running=!0,e._request=i.call(window,(()=>{e._update(),e._request=null,e._running&&e._refresh()})))}_update(e=Date.now()){const t=this;let n=0;t._charts.forEach(((i,r)=>{if(!i.running||!i.items.length)return;const a=i.items;let s,o=a.length-1,d=!1;for(;o>=0;--o)s=a[o],s._active?(s._total>i.duration&&(i.duration=s._total),s.tick(e),d=!0):(a[o]=a[a.length-1],a.pop());d&&(r.draw(),t._notify(r,i,e,"progress")),a.length||(i.running=!1,t._notify(r,i,e,"complete"),i.initial=!1),n+=a.length})),t._lastDate=e,0===n&&(t._running=!1)}_getAnims(e){const t=this._charts;let n=t.get(e);return n||(n={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},t.set(e,n)),n}listen(e,t,n){this._getAnims(e).listeners[t].push(n)}add(e,t){t&&t.length&&this._getAnims(e).items.push(...t)}has(e){return this._getAnims(e).items.length>0}start(e){const t=this._charts.get(e);t&&(t.running=!0,t.start=Date.now(),t.duration=t.items.reduce(((e,t)=>Math.max(e,t._duration)),0),this._refresh())}running(e){if(!this._running)return!1;const t=this._charts.get(e);return!!(t&&t.running&&t.items.length)}stop(e){const t=this._charts.get(e);if(!t||!t.items.length)return;const n=t.items;let i=n.length-1;for(;i>=0;--i)n[i].cancel();t.items=[],this._notify(e,t,Date.now(),"complete")}remove(e){return this._charts.delete(e)}};const Xt="transparent",en={boolean:(e,t,n)=>n>.5?t:e,color(e,t,n){const i=He(e||Xt),r=i.valid&&He(t||Xt);return r&&r.valid?r.mix(i,n).hexString():t},number:(e,t,n)=>e+(t-e)*n};class tn{constructor(e,t,n,i){const r=t[n];i=rt([e.to,i,r,e.from]);const a=rt([e.from,r,i]);this._active=!0,this._fn=e.fn||en[e.type||typeof a],this._easing=ee[e.easing]||ee.linear,this._start=Math.floor(Date.now()+(e.delay||0)),this._duration=this._total=Math.floor(e.duration),this._loop=!!e.loop,this._target=t,this._prop=n,this._from=a,this._to=i,this._promises=void 0}active(){return this._active}update(e,t,n){const i=this;if(i._active){i._notify(!1);const r=i._target[i._prop],a=n-i._start,s=i._duration-a;i._start=n,i._duration=Math.floor(Math.max(s,e.duration)),i._total+=a,i._loop=!!e.loop,i._to=rt([e.to,t,r,e.from]),i._from=rt([e.from,r,t])}}cancel(){const e=this;e._active&&(e.tick(Date.now()),e._active=!1,e._notify(!1))}tick(e){const t=this,n=e-t._start,i=t._duration,r=t._prop,a=t._from,s=t._loop,o=t._to;let d;if(t._active=a!==o&&(s||n<i),!t._active)return t._target[r]=o,void t._notify(!0);n<0?t._target[r]=a:(d=n/i%2,d=s&&d>1?2-d:d,d=t._easing(Math.min(1,Math.max(0,d))),t._target[r]=t._fn(a,o,d))}wait(){const e=this._promises||(this._promises=[]);return new Promise(((t,n)=>{e.push({res:t,rej:n})}))}_notify(e){const t=e?"res":"rej",n=this._promises||[];for(let e=0;e<n.length;e++)n[e][t]()}}Ce.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0});const nn=Object.keys(Ce.animation);Ce.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:e=>"onProgress"!==e&&"onComplete"!==e&&"fn"!==e}),Ce.set("animations",{colors:{type:"color",properties:["color","borderColor","backgroundColor"]},numbers:{type:"number",properties:["x","y","borderWidth","radius","tension"]}}),Ce.describe("animations",{_fallback:"animation"}),Ce.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:e=>0|e}}}});class rn{constructor(e,t){this._chart=e,this._properties=new Map,this.configure(t)}configure(e){if(!c(e))return;const t=this._properties;Object.getOwnPropertyNames(e).forEach((n=>{const i=e[n];if(!c(i))return;const r={};for(const e of nn)r[e]=i[e];(u(i.properties)&&i.properties||[n]).forEach((e=>{e!==n&&t.has(e)||t.set(e,r)}))}))}_animateOptions(e,t){const n=t.options,i=function(e,t){if(!t)return;let n=e.options;if(n)return n.$shared&&(e.options=n=Object.assign({},n,{$shared:!1,$animations:{}})),n;e.options=t}(e,n);if(!i)return[];const r=this._createAnimations(i,n);return n.$shared&&function(e,t){const n=[],i=Object.keys(t);for(let t=0;t<i.length;t++){const r=e[i[t]];r&&r.active()&&n.push(r.wait())}return Promise.all(n)}(e.options.$animations,n).then((()=>{e.options=n}),(()=>{})),r}_createAnimations(e,t){const n=this._properties,i=[],r=e.$animations||(e.$animations={}),a=Object.keys(t),s=Date.now();let o;for(o=a.length-1;o>=0;--o){const d=a[o];if("$"===d.charAt(0))continue;if("options"===d){i.push(...this._animateOptions(e,t));continue}const l=t[d];let u=r[d];const c=n.get(d);if(u){if(c&&u.active()){u.update(c,l,s);continue}u.cancel()}c&&c.duration?(r[d]=u=new tn(c,e,d,l),i.push(u)):e[d]=l}return i}update(e,t){if(0===this._properties.size)return void Object.assign(e,t);const n=this._createAnimations(e,t);return n.length?(Qt.add(this._chart,n),!0):void 0}}function an(e,t){const n=e&&e.options||{},i=n.reverse,r=void 0===n.min?t:0,a=void 0===n.max?t:0;return{start:i?a:r,end:i?r:a}}function sn(e,t){const n=[],i=e._getSortedDatasetMetas(t);let r,a;for(r=0,a=i.length;r<a;++r)n.push(i[r].index);return n}function on(e,t,n,i){const r=e.keys,a="single"===i.mode;let s,o,d,l;if(null!==t){for(s=0,o=r.length;s<o;++s){if(d=+r[s],d===n){if(i.all)continue;break}l=e.values[d],h(l)&&(a||0===t||I(t)===I(l))&&(t+=l)}return t}}function dn(e,t){const n=e&&e.options.stacked;return n||void 0===n&&void 0!==t.stack}function ln(e,t,n){const i=e[t]||(e[t]={});return i[n]||(i[n]={})}function un(e,t,n){for(const i of t.getMatchingVisibleMetas("bar").reverse()){const t=e[i.index];if(n&&t>0||!n&&t<0)return i.index}return null}function cn(e,t){const{chart:n,_cachedMeta:i}=e,r=n._stacks||(n._stacks={}),{iScale:a,vScale:s,index:o}=i,d=a.axis,l=s.axis,u=function(e,t,n){return`${e.id}.${t.id}.${n.stack||n.type}`}(a,s,i),c=t.length;let h;for(let e=0;e<c;++e){const n=t[e],{[d]:i,[l]:a}=n;h=(n._stacks||(n._stacks={}))[l]=ln(r,u,i),h[o]=a,h._top=un(h,s,!0),h._bottom=un(h,s,!1)}}function hn(e,t){const n=e.scales;return Object.keys(n).filter((e=>n[e].axis===t)).shift()}function _n(e,t){t=t||e._parsed;for(const n of t){const t=n._stacks;if(!t||void 0===t[e.vScale.id]||void 0===t[e.vScale.id][e.index])return;delete t[e.vScale.id][e.index]}}const mn=e=>"reset"===e||"none"===e,fn=(e,t)=>t?e:Object.assign({},e);class pn{constructor(e,t){this.chart=e,this._ctx=e.ctx,this.index=t,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.$context=void 0,this.initialize()}initialize(){const e=this,t=e._cachedMeta;e.configure(),e.linkScales(),t._stacked=dn(t.vScale,t),e.addElements()}updateIndex(e){this.index=e}linkScales(){const e=this,t=e.chart,n=e._cachedMeta,i=e.getDataset(),r=(e,t,n,i)=>"x"===e?t:"r"===e?i:n,a=n.xAxisID=m(i.xAxisID,hn(t,"x")),s=n.yAxisID=m(i.yAxisID,hn(t,"y")),o=n.rAxisID=m(i.rAxisID,hn(t,"r")),d=n.indexAxis,l=n.iAxisID=r(d,a,s,o),u=n.vAxisID=r(d,s,a,o);n.xScale=e.getScaleForId(a),n.yScale=e.getScaleForId(s),n.rScale=e.getScaleForId(o),n.iScale=e.getScaleForId(l),n.vScale=e.getScaleForId(u)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(e){return this.chart.scales[e]}_getOtherScale(e){const t=this._cachedMeta;return e===t.iScale?t.vScale:t.iScale}reset(){this._update("reset")}_destroy(){const e=this._cachedMeta;this._data&&lt(this._data,this),e._stacked&&_n(e)}_dataCheck(){const e=this,t=e.getDataset(),n=t.data||(t.data=[]);var i,r;c(n)?e._data=function(e){const t=Object.keys(e),n=new Array(t.length);let i,r,a;for(i=0,r=t.length;i<r;++i)a=t[i],n[i]={x:a,y:e[a]};return n}(n):e._data!==n&&(e._data&&(lt(e._data,e),_n(e._cachedMeta)),n&&Object.isExtensible(n)&&(r=e,(i=n)._chartjs?i._chartjs.listeners.push(r):(Object.defineProperty(i,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[r]}}),dt.forEach((e=>{const t="_onData"+x(e),n=i[e];Object.defineProperty(i,e,{configurable:!0,enumerable:!1,value(...e){const r=n.apply(this,e);return i._chartjs.listeners.forEach((n=>{"function"==typeof n[t]&&n[t](...e)})),r}})})))),e._data=n)}addElements(){const e=this,t=e._cachedMeta;e._dataCheck(),e.datasetElementType&&(t.dataset=new e.datasetElementType)}buildOrUpdateElements(e){const t=this,n=t._cachedMeta,i=t.getDataset();let r=!1;t._dataCheck(),n._stacked=dn(n.vScale,n),n.stack!==i.stack&&(r=!0,_n(n),n.stack=i.stack),t._resyncElements(e),r&&cn(t,n._parsed)}configure(){const e=this,t=e.chart.config,n=t.datasetScopeKeys(e._type),i=t.getOptionScopes(e.getDataset(),n,!0);e.options=t.createResolver(i,e.getContext()),e._parsing=e.options.parsing}parse(e,t){const n=this,{_cachedMeta:i,_data:r}=n,{iScale:a,_stacked:s}=i,o=a.axis;let d,l,h,_=0===e&&t===r.length||i._sorted,m=e>0&&i._parsed[e-1];if(!1===n._parsing)i._parsed=r,i._sorted=!0,h=r;else{h=u(r[e])?n.parseArrayData(i,r,e,t):c(r[e])?n.parseObjectData(i,r,e,t):n.parsePrimitiveData(i,r,e,t);const a=()=>null===l[o]||m&&l[o]<m[o];for(d=0;d<t;++d)i._parsed[d+e]=l=h[d],_&&(a()&&(_=!1),m=l);i._sorted=_}s&&cn(n,h)}parsePrimitiveData(e,t,n,i){const{iScale:r,vScale:a}=e,s=r.axis,o=a.axis,d=r.getLabels(),l=r===a,u=new Array(i);let c,h,_;for(c=0,h=i;c<h;++c)_=c+n,u[c]={[s]:l||r.parse(d[_],_),[o]:a.parse(t[_],_)};return u}parseArrayData(e,t,n,i){const{xScale:r,yScale:a}=e,s=new Array(i);let o,d,l,u;for(o=0,d=i;o<d;++o)l=o+n,u=t[l],s[o]={x:r.parse(u[0],l),y:a.parse(u[1],l)};return s}parseObjectData(e,t,n,i){const{xScale:r,yScale:a}=e,{xAxisKey:s="x",yAxisKey:o="y"}=this._parsing,d=new Array(i);let l,u,c,h;for(l=0,u=i;l<u;++l)c=l+n,h=t[c],d[l]={x:r.parse(D(h,s),c),y:a.parse(D(h,o),c)};return d}getParsed(e){return this._cachedMeta._parsed[e]}getDataElement(e){return this._cachedMeta.data[e]}applyStack(e,t,n){const i=this.chart,r=this._cachedMeta,a=t[e.axis];return on({keys:sn(i,!0),values:t._stacks[e.axis]},a,r.index,{mode:n})}updateRangeFromParsed(e,t,n,i){const r=n[t.axis];let a=null===r?NaN:r;const s=i&&n._stacks[t.axis];i&&s&&(i.values=s,e.min=Math.min(e.min,a),e.max=Math.max(e.max,a),a=on(i,r,this._cachedMeta.index,{all:!0})),e.min=Math.min(e.min,a),e.max=Math.max(e.max,a)}getMinMax(e,t){const n=this,i=n._cachedMeta,r=i._parsed,a=i._sorted&&e===i.iScale,s=r.length,o=n._getOtherScale(e),d=t&&i._stacked&&{keys:sn(n.chart,!0),values:null},l={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:u,max:c}=function(e){const{min:t,max:n,minDefined:i,maxDefined:r}=e.getUserBounds();return{min:i?t:Number.NEGATIVE_INFINITY,max:r?n:Number.POSITIVE_INFINITY}}(o);let _,m,f,p;function g(){return f=r[_],m=f[e.axis],p=f[o.axis],!h(m)||u>p||c<p}for(_=0;_<s&&(g()||(n.updateRangeFromParsed(l,e,f,d),!a));++_);if(a)for(_=s-1;_>=0;--_)if(!g()){n.updateRangeFromParsed(l,e,f,d);break}return l}getAllParsedValues(e){const t=this._cachedMeta._parsed,n=[];let i,r,a;for(i=0,r=t.length;i<r;++i)a=t[i][e.axis],h(a)&&n.push(a);return n}getMaxOverflow(){return!1}getLabelAndValue(e){const t=this._cachedMeta,n=t.iScale,i=t.vScale,r=this.getParsed(e);return{label:n?""+n.getLabelForValue(r[n.axis]):"",value:i?""+i.getLabelForValue(r[i.axis]):""}}_update(e){const t=this,n=t._cachedMeta;t.configure(),t._cachedDataOpts={},t.update(e||"default"),n._clip=function(e){let t,n,i,r;return c(e)?(t=e.top,n=e.right,i=e.bottom,r=e.left):t=n=i=r=e,{top:t,right:n,bottom:i,left:r}}(m(t.options.clip,function(e,t,n){if(!1===n)return!1;const i=an(e,n),r=an(t,n);return{top:r.end,right:i.end,bottom:r.start,left:i.start}}(n.xScale,n.yScale,t.getMaxOverflow())))}update(e){}draw(){const e=this,t=e._ctx,n=e.chart,i=e._cachedMeta,r=i.data||[],a=n.chartArea,s=[],o=e._drawStart||0,d=e._drawCount||r.length-o;let l;for(i.dataset&&i.dataset.draw(t,a,o,d),l=o;l<o+d;++l){const e=r[l];e.active?s.push(e):e.draw(t,a)}for(l=0;l<s.length;++l)s[l].draw(t,a)}getStyle(e,t){const n=t?"active":"default";return void 0===e&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(n):this.resolveDataElementOptions(e||0,n)}getContext(e,t,n){const i=this,r=i.getDataset();let a;if(e>=0&&e<i._cachedMeta.data.length){const t=i._cachedMeta.data[e];a=t.$context||(t.$context=function(e,t,n){return Object.assign(Object.create(e),{active:!1,dataIndex:t,parsed:void 0,raw:void 0,element:n,index:t,mode:"default",type:"data"})}(i.getContext(),e,t)),a.parsed=i.getParsed(e),a.raw=r.data[e]}else a=i.$context||(i.$context=function(e,t){return Object.assign(Object.create(e),{active:!1,dataset:void 0,datasetIndex:t,index:t,mode:"default",type:"dataset"})}(i.chart.getContext(),i.index)),a.dataset=r;return a.active=!!t,a.mode=n,a}resolveDatasetElementOptions(e){return this._resolveElementOptions(this.datasetElementType.id,e)}resolveDataElementOptions(e,t){return this._resolveElementOptions(this.dataElementType.id,t,e)}_resolveElementOptions(e,t="default",n){const i=this,r="active"===t,a=i._cachedDataOpts,s=e+"-"+t,o=a[s],d=i.enableOptionSharing&&T(n);if(o)return fn(o,d);const l=i.chart.config,u=l.datasetElementScopeKeys(i._type,e),c=r?[`${e}Hover`,"hover",e,""]:[e,""],h=l.getOptionScopes(i.getDataset(),u),_=Object.keys(Ce.elements[e]),m=l.resolveNamedOptions(h,_,(()=>i.getContext(n,r)),c);return m.$shared&&(m.$shared=d,a[s]=Object.freeze(fn(m,d))),m}_resolveAnimations(e,t,n){const i=this,r=i.chart,a=i._cachedDataOpts,s=`animation-${t}`,o=a[s];if(o)return o;let d;if(!1!==r.options.animation){const r=i.chart.config,a=r.datasetAnimationScopeKeys(i._type,t),s=r.getOptionScopes(i.getDataset(),a);d=r.createResolver(s,i.getContext(e,n,t))}const l=new rn(r,d&&d.animations);return d&&d._cacheable&&(a[s]=Object.freeze(l)),l}getSharedOptions(e){if(e.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},e))}includeOptions(e,t){return!t||mn(e)||this.chart._animationsDisabled}updateElement(e,t,n,i){mn(i)?Object.assign(e,n):this._resolveAnimations(t,i).update(e,n)}updateSharedOptions(e,t,n){e&&!mn(t)&&this._resolveAnimations(void 0,t).update(e,n)}_setStyle(e,t,n,i){e.active=i;const r=this.getStyle(t,i);this._resolveAnimations(t,n,i).update(e,{options:!i&&this.getSharedOptions(r)||r})}removeHoverStyle(e,t,n){this._setStyle(e,n,"active",!1)}setHoverStyle(e,t,n){this._setStyle(e,n,"active",!0)}_removeDatasetHoverStyle(){const e=this._cachedMeta.dataset;e&&this._setStyle(e,void 0,"active",!1)}_setDatasetHoverStyle(){const e=this._cachedMeta.dataset;e&&this._setStyle(e,void 0,"active",!0)}_resyncElements(e){const t=this,n=t._cachedMeta.data.length,i=t._data.length;i>n?t._insertElements(n,i-n,e):i<n&&t._removeElements(i,n-i);const r=Math.min(i,n);r&&t.parse(0,r)}_insertElements(e,t,n=!0){const i=this,r=i._cachedMeta,a=r.data,s=e+t;let o;const d=e=>{for(e.length+=t,o=e.length-1;o>=s;o--)e[o]=e[o-t]};for(d(a),o=e;o<s;++o)a[o]=new i.dataElementType;i._parsing&&d(r._parsed),i.parse(e,t),n&&i.updateElements(a,e,t,"reset")}updateElements(e,t,n,i){}_removeElements(e,t){const n=this._cachedMeta;if(this._parsing){const i=n._parsed.splice(e,t);n._stacked&&_n(n,i)}n.data.splice(e,t)}_onDataPush(){const e=arguments.length;this._insertElements(this.getDataset().data.length-e,e)}_onDataPop(){this._removeElements(this._cachedMeta.data.length-1,1)}_onDataShift(){this._removeElements(0,1)}_onDataSplice(e,t){this._removeElements(e,t),this._insertElements(e,arguments.length-2)}_onDataUnshift(){this._insertElements(0,arguments.length)}}function gn(e){const t=function(e){if(!e._cache.$bar){const t=e.getMatchingVisibleMetas("bar");let n=[];for(let i=0,r=t.length;i<r;i++)n=n.concat(t[i].controller.getAllParsedValues(e));e._cache.$bar=ut(n.sort(((e,t)=>e-t)))}return e._cache.$bar}(e);let n,i,r,a,s=e._length;const o=()=>{32767!==r&&-32768!==r&&(T(a)&&(s=Math.min(s,Math.abs(r-a)||s)),a=r)};for(n=0,i=t.length;n<i;++n)r=e.getPixelForValue(t[n]),o();for(a=void 0,n=0,i=e.ticks.length;n<i;++n)r=e.getPixelForTick(n),o();return s}function yn(e,t,n,i){return u(e)?function(e,t,n,i){const r=n.parse(e[0],i),a=n.parse(e[1],i),s=Math.min(r,a),o=Math.max(r,a);let d=s,l=o;Math.abs(s)>Math.abs(o)&&(d=o,l=s),t[n.axis]=l,t._custom={barStart:d,barEnd:l,start:r,end:a,min:s,max:o}}(e,t,n,i):t[n.axis]=n.parse(e,i),t}function Mn(e,t,n,i){const r=e.iScale,a=e.vScale,s=r.getLabels(),o=r===a,d=[];let l,u,c,h;for(l=n,u=n+i;l<u;++l)h=t[l],c={},c[r.axis]=o||r.parse(s[l],l),d.push(yn(h,c,a,l));return d}function bn(e){return e&&void 0!==e.barStart&&void 0!==e.barEnd}pn.defaults={},pn.prototype.datasetElementType=null,pn.prototype.dataElementType=null;class Ln extends pn{parsePrimitiveData(e,t,n,i){return Mn(e,t,n,i)}parseArrayData(e,t,n,i){return Mn(e,t,n,i)}parseObjectData(e,t,n,i){const{iScale:r,vScale:a}=e,{xAxisKey:s="x",yAxisKey:o="y"}=this._parsing,d="x"===r.axis?s:o,l="x"===a.axis?s:o,u=[];let c,h,_,m;for(c=n,h=n+i;c<h;++c)m=t[c],_={},_[r.axis]=r.parse(D(m,d),c),u.push(yn(D(m,l),_,a,c));return u}updateRangeFromParsed(e,t,n,i){super.updateRangeFromParsed(e,t,n,i);const r=n._custom;r&&t===this._cachedMeta.vScale&&(e.min=Math.min(e.min,r.min),e.max=Math.max(e.max,r.max))}getLabelAndValue(e){const t=this._cachedMeta,{iScale:n,vScale:i}=t,r=this.getParsed(e),a=r._custom,s=bn(a)?"["+a.start+", "+a.end+"]":""+i.getLabelForValue(r[i.axis]);return{label:""+n.getLabelForValue(r[n.axis]),value:s}}initialize(){const e=this;e.enableOptionSharing=!0,super.initialize(),e._cachedMeta.stack=e.getDataset().stack}update(e){const t=this._cachedMeta;this.updateElements(t.data,0,t.data.length,e)}updateElements(e,t,n,i){const r=this,a="reset"===i,s=r._cachedMeta.vScale,o=s.getBasePixel(),d=s.isHorizontal(),u=r._getRuler(),c=r.resolveDataElementOptions(t,i),h=r.getSharedOptions(c),_=r.includeOptions(i,h);r.updateSharedOptions(h,i,c);for(let c=t;c<t+n;c++){const t=r.getParsed(c),n=a||l(t[s.axis])?{base:o,head:o}:r._calculateBarValuePixels(c),m=r._calculateBarIndexPixels(c,u),f=(t._stacks||{})[s.axis],p={horizontal:d,base:n.base,enableBorderRadius:!f||bn(t._custom)||r.index===f._top||r.index===f._bottom,x:d?n.head:m.center,y:d?m.center:n.head,height:d?m.size:void 0,width:d?void 0:m.size};_&&(p.options=h||r.resolveDataElementOptions(c,i)),r.updateElement(e[c],c,p,i)}}_getStacks(e,t){const n=this._cachedMeta.iScale,i=n.getMatchingVisibleMetas(this._type),r=n.options.stacked,a=i.length,s=[];let o,d;for(o=0;o<a;++o){if(d=i[o],void 0!==t){const e=d.controller.getParsed(t)[d.controller._cachedMeta.vScale.axis];if(l(e)||isNaN(e))continue}if((!1===r||-1===s.indexOf(d.stack)||void 0===r&&void 0===d.stack)&&s.push(d.stack),d.index===e)break}return s.length||s.push(void 0),s}_getStackCount(e){return this._getStacks(void 0,e).length}_getStackIndex(e,t,n){const i=this._getStacks(e,n),r=void 0!==t?i.indexOf(t):-1;return-1===r?i.length-1:r}_getRuler(){const e=this,t=e.options,n=e._cachedMeta,i=n.iScale,r=[];let a,s;for(a=0,s=n.data.length;a<s;++a)r.push(i.getPixelForValue(e.getParsed(a)[i.axis],a));const o=t.barThickness;return{min:o||gn(i),pixels:r,start:i._startPixel,end:i._endPixel,stackCount:e._getStackCount(),scale:i,grouped:t.grouped,ratio:o?1:t.categoryPercentage*t.barPercentage}}_calculateBarValuePixels(e){const t=this,{vScale:n,_stacked:i}=t._cachedMeta,{base:r,minBarLength:a}=t.options,s=t.getParsed(e),o=s._custom,d=bn(o);let u,c,h=s[n.axis],_=0,m=i?t.applyStack(n,s,i):h;m!==h&&(_=m-h,m=h),d&&(h=o.barStart,m=o.barEnd-o.barStart,0!==h&&I(h)!==I(o.barEnd)&&(_=0),_+=h);const f=l(r)||d?_:r;let p=n.getPixelForValue(f);u=this.chart.getDataVisibility(e)?n.getPixelForValue(_+m):p,c=u-p,void 0!==a&&Math.abs(c)<a&&(c=c<0?-a:a,0===h&&(p-=c/2),u=p+c);const g=r||0;if(p===n.getPixelForValue(g)){const e=n.getLineWidthForValue(g)/2;c>0?(p+=e,c-=e):c<0&&(p-=e,c+=e)}return{size:c,base:p,head:u,center:u+c/2}}_calculateBarIndexPixels(e,t){const n=this,i=t.scale,r=n.options,a=r.skipNull,s=m(r.maxBarThickness,1/0);let o,d;if(t.grouped){const i=a?n._getStackCount(e):t.stackCount,u="flex"===r.barThickness?function(e,t,n,i){const r=t.pixels,a=r[e];let s=e>0?r[e-1]:null,o=e<r.length-1?r[e+1]:null;const d=n.categoryPercentage;null===s&&(s=a-(null===o?t.end-t.start:o-a)),null===o&&(o=a+a-s);const l=a-(a-Math.min(s,o))/2*d;return{chunk:Math.abs(o-s)/2*d/i,ratio:n.barPercentage,start:l}}(e,t,r,i):function(e,t,n,i){const r=n.barThickness;let a,s;return l(r)?(a=t.min*n.categoryPercentage,s=n.barPercentage):(a=r*i,s=1),{chunk:a/i,ratio:s,start:t.pixels[e]-a/2}}(e,t,r,i),c=n._getStackIndex(n.index,n._cachedMeta.stack,a?e:void 0);o=u.start+u.chunk*c+u.chunk/2,d=Math.min(s,u.chunk*u.ratio)}else o=i.getPixelForValue(n.getParsed(e)[i.axis],e),d=Math.min(s,t.min*t.ratio);return{base:o-d/2,head:o+d/2,center:o,size:d}}draw(){const e=this,t=e.chart,n=e._cachedMeta,i=n.vScale,r=n.data,a=r.length;let s=0;for(Ve(t.ctx,t.chartArea);s<a;++s)null!==e.getParsed(s)[i.axis]&&r[s].draw(e._ctx);Ue(t.ctx)}}Ln.id="bar",Ln.defaults={datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}},Ln.overrides={interaction:{mode:"index"},scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}};class vn extends pn{initialize(){this.enableOptionSharing=!0,super.initialize()}parseObjectData(e,t,n,i){const{xScale:r,yScale:a}=e,{xAxisKey:s="x",yAxisKey:o="y"}=this._parsing,d=[];let l,u,c;for(l=n,u=n+i;l<u;++l)c=t[l],d.push({x:r.parse(D(c,s),l),y:a.parse(D(c,o),l),_custom:c&&c.r&&+c.r});return d}getMaxOverflow(){const{data:e,_parsed:t}=this._cachedMeta;let n=0;for(let i=e.length-1;i>=0;--i)n=Math.max(n,e[i].size()/2,t[i]._custom);return n>0&&n}getLabelAndValue(e){const t=this._cachedMeta,{xScale:n,yScale:i}=t,r=this.getParsed(e),a=n.getLabelForValue(r.x),s=i.getLabelForValue(r.y),o=r._custom;return{label:t.label,value:"("+a+", "+s+(o?", "+o:"")+")"}}update(e){const t=this._cachedMeta.data;this.updateElements(t,0,t.length,e)}updateElements(e,t,n,i){const r=this,a="reset"===i,{xScale:s,yScale:o}=r._cachedMeta,d=r.resolveDataElementOptions(t,i),l=r.getSharedOptions(d),u=r.includeOptions(i,l);for(let d=t;d<t+n;d++){const t=e[d],n=!a&&r.getParsed(d),l=a?s.getPixelForDecimal(.5):s.getPixelForValue(n.x),c=a?o.getBasePixel():o.getPixelForValue(n.y),h={x:l,y:c,skip:isNaN(l)||isNaN(c)};u&&(h.options=r.resolveDataElementOptions(d,i),a&&(h.options.radius=0)),r.updateElement(t,d,h,i)}r.updateSharedOptions(l,i,d)}resolveDataElementOptions(e,t){const n=this.getParsed(e);let i=super.resolveDataElementOptions(e,t);i.$shared&&(i=Object.assign({},i,{$shared:!1}));const r=i.radius;return"active"!==t&&(i.radius=0),i.radius+=m(n&&n._custom,r),i}}vn.id="bubble",vn.defaults={datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}},vn.overrides={scales:{x:{type:"linear"},y:{type:"linear"}},plugins:{tooltip:{callbacks:{title:()=>""}}}};class wn extends pn{constructor(e,t){super(e,t),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(e,t){const n=this.getDataset().data,i=this._cachedMeta;let r,a;for(r=e,a=e+t;r<a;++r)i._parsed[r]=+n[r]}_getRotation(){return V(this.options.rotation-90)}_getCircumference(){return V(this.options.circumference)}_getRotationExtents(){let e=H,t=-H;const n=this;for(let i=0;i<n.chart.data.datasets.length;++i)if(n.chart.isDatasetVisible(i)){const r=n.chart.getDatasetMeta(i).controller,a=r._getRotation(),s=r._getCircumference();e=Math.min(e,a),t=Math.max(t,a+s)}return{rotation:e,circumference:t-e}}update(e){const t=this,n=t.chart,{chartArea:i}=n,r=t._cachedMeta,a=r.data,s=t.getMaxBorderWidth()+t.getMaxOffset(a),o=Math.max((Math.min(i.width,i.height)-s)/2,0),d=Math.min((u=o,"string"==typeof(l=t.options.cutout)&&l.endsWith("%")?parseFloat(l)/100:l/u),1);var l,u;const c=t._getRingWeight(t.index),{circumference:h,rotation:_}=t._getRotationExtents(),{ratioX:m,ratioY:p,offsetX:g,offsetY:y}=function(e,t,n){let i=1,r=1,a=0,s=0;if(t<H){const o=e,d=o+t,l=Math.cos(o),u=Math.sin(o),c=Math.cos(d),h=Math.sin(d),_=(e,t,i)=>G(e,o,d)?1:Math.max(t,t*n,i,i*n),m=(e,t,i)=>G(e,o,d)?-1:Math.min(t,t*n,i,i*n),f=_(0,l,c),p=_(A,u,h),g=m(O,l,c),y=m(O+A,u,h);i=(f-g)/2,r=(p-y)/2,a=-(f+g)/2,s=-(p+y)/2}return{ratioX:i,ratioY:r,offsetX:a,offsetY:s}}(_,h,d),M=(i.width-s)/m,b=(i.height-s)/p,L=Math.max(Math.min(M,b)/2,0),v=f(t.options.radius,L),w=(v-Math.max(v*d,0))/t._getVisibleDatasetWeightTotal();t.offsetX=g*v,t.offsetY=y*v,r.total=t.calculateTotal(),t.outerRadius=v-w*t._getRingWeightOffset(t.index),t.innerRadius=Math.max(t.outerRadius-w*c,0),t.updateElements(a,0,a.length,e)}_circumference(e,t){const n=this,i=n.options,r=n._cachedMeta,a=n._getCircumference();return t&&i.animation.animateRotate||!this.chart.getDataVisibility(e)||null===r._parsed[e]?0:n.calculateCircumference(r._parsed[e]*a/H)}updateElements(e,t,n,i){const r=this,a="reset"===i,s=r.chart,o=s.chartArea,d=s.options.animation,l=(o.left+o.right)/2,u=(o.top+o.bottom)/2,c=a&&d.animateScale,h=c?0:r.innerRadius,_=c?0:r.outerRadius,m=r.resolveDataElementOptions(t,i),f=r.getSharedOptions(m),p=r.includeOptions(i,f);let g,y=r._getRotation();for(g=0;g<t;++g)y+=r._circumference(g,a);for(g=t;g<t+n;++g){const t=r._circumference(g,a),n=e[g],s={x:l+r.offsetX,y:u+r.offsetY,startAngle:y,endAngle:y+t,circumference:t,outerRadius:_,innerRadius:h};p&&(s.options=f||r.resolveDataElementOptions(g,i)),y+=t,r.updateElement(n,g,s,i)}r.updateSharedOptions(f,i,m)}calculateTotal(){const e=this._cachedMeta,t=e.data;let n,i=0;for(n=0;n<t.length;n++){const t=e._parsed[n];null!==t&&!isNaN(t)&&this.chart.getDataVisibility(n)&&(i+=Math.abs(t))}return i}calculateCircumference(e){const t=this._cachedMeta.total;return t>0&&!isNaN(e)?H*(Math.abs(e)/t):0}getLabelAndValue(e){const t=this._cachedMeta,n=this.chart,i=n.data.labels||[],r=Bt(t._parsed[e],n.options.locale);return{label:i[e]||"",value:r}}getMaxBorderWidth(e){const t=this;let n=0;const i=t.chart;let r,a,s,o,d;if(!e)for(r=0,a=i.data.datasets.length;r<a;++r)if(i.isDatasetVisible(r)){s=i.getDatasetMeta(r),e=s.data,o=s.controller,o!==t&&o.configure();break}if(!e)return 0;for(r=0,a=e.length;r<a;++r)d=o.resolveDataElementOptions(r),"inner"!==d.borderAlign&&(n=Math.max(n,d.borderWidth||0,d.hoverBorderWidth||0));return n}getMaxOffset(e){let t=0;for(let n=0,i=e.length;n<i;++n){const e=this.resolveDataElementOptions(n);t=Math.max(t,e.offset||0,e.hoverOffset||0)}return t}_getRingWeightOffset(e){let t=0;for(let n=0;n<e;++n)this.chart.isDatasetVisible(n)&&(t+=this._getRingWeight(n));return t}_getRingWeight(e){return Math.max(m(this.chart.data.datasets[e].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}}wn.id="doughnut",wn.defaults={datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",indexAxis:"r"},wn.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(e){const t=e.data;return t.labels.length&&t.datasets.length?t.labels.map(((t,n)=>{const i=e.getDatasetMeta(0).controller.getStyle(n);return{text:t,fillStyle:i.backgroundColor,strokeStyle:i.borderColor,lineWidth:i.borderWidth,hidden:!e.getDataVisibility(n),index:n}})):[]}},onClick(e,t,n){n.chart.toggleDataVisibility(t.index),n.chart.update()}},tooltip:{callbacks:{title:()=>"",label(e){let t=e.label;const n=": "+e.formattedValue;return u(t)?(t=t.slice(),t[0]+=n):t+=n,t}}}}};class Yn extends pn{initialize(){this.enableOptionSharing=!0,super.initialize()}update(e){const t=this,n=t._cachedMeta,{dataset:i,data:r=[],_dataset:a}=n,s=t.chart._animationsDisabled;let{start:o,count:d}=function(e,t,n){const i=t.length;let r=0,a=i;if(e._sorted){const{iScale:s,_parsed:o}=e,d=s.axis,{min:l,max:u,minDefined:c,maxDefined:h}=s.getUserBounds();c&&(r=K(Math.min(st(o,s.axis,l).lo,n?i:st(t,d,s.getPixelForValue(l)).lo),0,i-1)),a=h?K(Math.max(st(o,s.axis,u).hi+1,n?0:st(t,d,s.getPixelForValue(u)).hi+1),r,i)-r:i-r}return{start:r,count:a}}(n,r,s);t._drawStart=o,t._drawCount=d,function(e){const{xScale:t,yScale:n,_scaleRanges:i}=e,r={xmin:t.min,xmax:t.max,ymin:n.min,ymax:n.max};if(!i)return e._scaleRanges=r,!0;const a=i.xmin!==t.min||i.xmax!==t.max||i.ymin!==n.min||i.ymax!==n.max;return Object.assign(i,r),a}(n)&&(o=0,d=r.length),i._decimated=!!a._decimated,i.points=r;const l=t.resolveDatasetElementOptions(e);t.options.showLine||(l.borderWidth=0),l.segment=t.options.segment,t.updateElement(i,void 0,{animated:!s,options:l},e),t.updateElements(r,o,d,e)}updateElements(e,t,n,i){const r=this,a="reset"===i,{xScale:s,yScale:o,_stacked:d}=r._cachedMeta,u=r.resolveDataElementOptions(t,i),c=r.getSharedOptions(u),h=r.includeOptions(i,c),_=r.options.spanGaps,m=N(_)?_:Number.POSITIVE_INFINITY,f=r.chart._animationsDisabled||a||"none"===i;let p=t>0&&r.getParsed(t-1);for(let u=t;u<t+n;++u){const t=e[u],n=r.getParsed(u),_=f?t:{},g=l(n.y),y=_.x=s.getPixelForValue(n.x,u),M=_.y=a||g?o.getBasePixel():o.getPixelForValue(d?r.applyStack(o,n,d):n.y,u);_.skip=isNaN(y)||isNaN(M)||g,_.stop=u>0&&n.x-p.x>m,_.parsed=n,h&&(_.options=c||r.resolveDataElementOptions(u,i)),f||r.updateElement(t,u,_,i),p=n}r.updateSharedOptions(c,i,u)}getMaxOverflow(){const e=this,t=e._cachedMeta,n=t.dataset,i=n.options&&n.options.borderWidth||0,r=t.data||[];if(!r.length)return i;const a=r[0].size(e.resolveDataElementOptions(0)),s=r[r.length-1].size(e.resolveDataElementOptions(r.length-1));return Math.max(i,a,s)/2}draw(){this._cachedMeta.dataset.updateControlPoints(this.chart.chartArea),super.draw()}}Yn.id="line",Yn.defaults={datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1},Yn.overrides={scales:{_index_:{type:"category"},_value_:{type:"linear"}}};class kn extends pn{constructor(e,t){super(e,t),this.innerRadius=void 0,this.outerRadius=void 0}update(e){const t=this._cachedMeta.data;this._updateRadius(),this.updateElements(t,0,t.length,e)}_updateRadius(){const e=this,t=e.chart,n=t.chartArea,i=t.options,r=Math.min(n.right-n.left,n.bottom-n.top),a=Math.max(r/2,0),s=(a-Math.max(i.cutoutPercentage?a/100*i.cutoutPercentage:1,0))/t.getVisibleDatasetCount();e.outerRadius=a-s*e.index,e.innerRadius=e.outerRadius-s}updateElements(e,t,n,i){const r=this,a="reset"===i,s=r.chart,o=r.getDataset(),d=s.options.animation,l=r._cachedMeta.rScale,u=l.xCenter,c=l.yCenter,h=l.getIndexAngle(0)-.5*O;let _,m=h;const f=360/r.countVisibleElements();for(_=0;_<t;++_)m+=r._computeAngle(_,i,f);for(_=t;_<t+n;_++){const t=e[_];let n=m,p=m+r._computeAngle(_,i,f),g=s.getDataVisibility(_)?l.getDistanceFromCenterForValue(o.data[_]):0;m=p,a&&(d.animateScale&&(g=0),d.animateRotate&&(n=p=h));const y={x:u,y:c,innerRadius:0,outerRadius:g,startAngle:n,endAngle:p,options:r.resolveDataElementOptions(_,i)};r.updateElement(t,_,y,i)}}countVisibleElements(){const e=this.getDataset(),t=this._cachedMeta;let n=0;return t.data.forEach(((t,i)=>{!isNaN(e.data[i])&&this.chart.getDataVisibility(i)&&n++})),n}_computeAngle(e,t,n){return this.chart.getDataVisibility(e)?V(this.resolveDataElementOptions(e,t).angle||n):0}}kn.id="polarArea",kn.defaults={dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0},kn.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(e){const t=e.data;return t.labels.length&&t.datasets.length?t.labels.map(((t,n)=>{const i=e.getDatasetMeta(0).controller.getStyle(n);return{text:t,fillStyle:i.backgroundColor,strokeStyle:i.borderColor,lineWidth:i.borderWidth,hidden:!e.getDataVisibility(n),index:n}})):[]}},onClick(e,t,n){n.chart.toggleDataVisibility(t.index),n.chart.update()}},tooltip:{callbacks:{title:()=>"",label:e=>e.chart.data.labels[e.dataIndex]+": "+e.formattedValue}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}};class Dn extends wn{}Dn.id="pie",Dn.defaults={cutout:0,rotation:0,circumference:360,radius:"100%"};class xn extends pn{getLabelAndValue(e){const t=this._cachedMeta.vScale,n=this.getParsed(e);return{label:t.getLabels()[e],value:""+t.getLabelForValue(n[t.axis])}}update(e){const t=this,n=t._cachedMeta,i=n.dataset,r=n.data||[],a=n.iScale.getLabels();if(i.points=r,"resize"!==e){const n=t.resolveDatasetElementOptions(e);t.options.showLine||(n.borderWidth=0);const s={_loop:!0,_fullLoop:a.length===r.length,options:n};t.updateElement(i,void 0,s,e)}t.updateElements(r,0,r.length,e)}updateElements(e,t,n,i){const r=this,a=r.getDataset(),s=r._cachedMeta.rScale,o="reset"===i;for(let d=t;d<t+n;d++){const t=e[d],n=r.resolveDataElementOptions(d,i),l=s.getPointPositionForValue(d,a.data[d]),u=o?s.xCenter:l.x,c=o?s.yCenter:l.y,h={x:u,y:c,angle:l.angle,skip:isNaN(u)||isNaN(c),options:n};r.updateElement(t,d,h,i)}}}xn.id="radar",xn.defaults={datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}},xn.overrides={aspectRatio:1,scales:{r:{type:"radialLinear"}}};class Tn extends Yn{}Tn.id="scatter",Tn.defaults={showLine:!1,fill:!1},Tn.overrides={interaction:{mode:"point"},plugins:{tooltip:{callbacks:{title:()=>"",label:e=>"("+e.label+", "+e.formattedValue+")"}}},scales:{x:{type:"linear"},y:{type:"linear"}}};var Sn=Object.freeze({__proto__:null,BarController:Ln,BubbleController:vn,DoughnutController:wn,LineController:Yn,PolarAreaController:kn,PieController:Dn,RadarController:xn,ScatterController:Tn});function On(){throw new Error("This method is not implemented: either no adapter can be found or an incomplete integration was provided.")}class Hn{constructor(e){this.options=e||{}}formats(){return On()}parse(e,t){return On()}format(e,t){return On()}add(e,t,n){return On()}diff(e,t,n){return On()}startOf(e,t,n){return On()}endOf(e,t){return On()}}Hn.override=function(e){Object.assign(Hn.prototype,e)};var jn={_date:Hn};function Pn(e,t){return"native"in e?{x:e.x,y:e.y}:Et(e,t)}function En(e,t,n,i){const{controller:r,data:a,_sorted:s}=e,o=r._cachedMeta.iScale;if(o&&t===o.axis&&s&&a.length){const e=o._reversePixels?ot:st;if(!i)return e(a,t,n);if(r._sharedOptions){const i=a[0],r="function"==typeof i.getRange&&i.getRange(t);if(r){const i=e(a,t,n-r),s=e(a,t,n+r);return{lo:i.lo,hi:s.hi}}}}return{lo:0,hi:a.length-1}}function An(e,t,n,i,r){const a=e.getSortedVisibleDatasetMetas(),s=n[t];for(let e=0,n=a.length;e<n;++e){const{index:n,data:o}=a[e],{lo:d,hi:l}=En(a[e],t,s,r);for(let e=d;e<=l;++e){const t=o[e];t.skip||i(t,n,e)}}}function Rn(e,t,n,i){const r=[];return Be(t,e.chartArea,e._minPadding)?(An(e,n,t,(function(e,n,a){e.inRange(t.x,t.y,i)&&r.push({element:e,datasetIndex:n,index:a})}),!0),r):r}function Cn(e,t,n,i,r){const a=function(e){const t=-1!==e.indexOf("x"),n=-1!==e.indexOf("y");return function(e,i){const r=t?Math.abs(e.x-i.x):0,a=n?Math.abs(e.y-i.y):0;return Math.sqrt(Math.pow(r,2)+Math.pow(a,2))}}(n);let s=Number.POSITIVE_INFINITY,o=[];return Be(t,e.chartArea,e._minPadding)?(An(e,n,t,(function(e,n,d){if(i&&!e.inRange(t.x,t.y,r))return;const l=e.getCenterPoint(r),u=a(t,l);u<s?(o=[{element:e,datasetIndex:n,index:d}],s=u):u===s&&o.push({element:e,datasetIndex:n,index:d})})),o):o}function Wn(e,t,n,i){const r=Pn(t,e),a=[],s=n.axis,o="x"===s?"inXRange":"inYRange";let d=!1;return function(e,t){const n=e.getSortedVisibleDatasetMetas();let i,r,a;for(let e=0,s=n.length;e<s;++e){({index:i,data:r}=n[e]);for(let e=0,n=r.length;e<n;++e)a=r[e],a.skip||t(a,i,e)}}(e,((e,t,n)=>{e[o](r[s],i)&&a.push({element:e,datasetIndex:t,index:n}),e.inRange(r.x,r.y,i)&&(d=!0)})),n.intersect&&!d?[]:a}var In={modes:{index(e,t,n,i){const r=Pn(t,e),a=n.axis||"x",s=n.intersect?Rn(e,r,a,i):Cn(e,r,a,!1,i),o=[];return s.length?(e.getSortedVisibleDatasetMetas().forEach((e=>{const t=s[0].index,n=e.data[t];n&&!n.skip&&o.push({element:n,datasetIndex:e.index,index:t})})),o):[]},dataset(e,t,n,i){const r=Pn(t,e),a=n.axis||"xy";let s=n.intersect?Rn(e,r,a,i):Cn(e,r,a,!1,i);if(s.length>0){const t=s[0].datasetIndex,n=e.getDatasetMeta(t).data;s=[];for(let e=0;e<n.length;++e)s.push({element:n[e],datasetIndex:t,index:e})}return s},point:(e,t,n,i)=>Rn(e,Pn(t,e),n.axis||"xy",i),nearest:(e,t,n,i)=>Cn(e,Pn(t,e),n.axis||"xy",n.intersect,i),x:(e,t,n,i)=>(n.axis="x",Wn(e,t,n,i)),y:(e,t,n,i)=>(n.axis="y",Wn(e,t,n,i))}};const Fn=["left","top","right","bottom"];function Nn(e,t){return e.filter((e=>e.pos===t))}function zn(e,t){return e.filter((e=>-1===Fn.indexOf(e.pos)&&e.box.axis===t))}function Bn(e,t){return e.sort(((e,n)=>{const i=t?n:e,r=t?e:n;return i.weight===r.weight?i.index-r.index:i.weight-r.weight}))}function Vn(e,t,n,i){return Math.max(e[n],t[n])+Math.max(e[i],t[i])}function Un(e,t){e.top=Math.max(e.top,t.top),e.left=Math.max(e.left,t.left),e.bottom=Math.max(e.bottom,t.bottom),e.right=Math.max(e.right,t.right)}function Jn(e,t,n){const i=n.box,r=e.maxPadding;c(n.pos)||(n.size&&(e[n.pos]-=n.size),n.size=n.horizontal?i.height:i.width,e[n.pos]+=n.size),i.getPadding&&Un(r,i.getPadding());const a=Math.max(0,t.outerWidth-Vn(r,e,"left","right")),s=Math.max(0,t.outerHeight-Vn(r,e,"top","bottom")),o=a!==e.w,d=s!==e.h;return e.w=a,e.h=s,n.horizontal?{same:o,other:d}:{same:d,other:o}}function $n(e,t){const n=t.maxPadding;return function(e){const i={left:0,top:0,right:0,bottom:0};return e.forEach((e=>{i[e]=Math.max(t[e],n[e])})),i}(e?["left","right"]:["top","bottom"])}function qn(e,t,n){const i=[];let r,a,s,o,d,l;for(r=0,a=e.length,d=0;r<a;++r){s=e[r],o=s.box,o.update(s.width||t.w,s.height||t.h,$n(s.horizontal,t));const{same:a,other:u}=Jn(t,n,s);d|=a&&i.length,l=l||u,o.fullSize||i.push(s)}return d&&qn(i,t,n)||l}function Gn(e,t,n){const i=n.padding;let r,a,s,o,d=t.x,l=t.y;for(r=0,a=e.length;r<a;++r)s=e[r],o=s.box,s.horizontal?(o.left=o.fullSize?i.left:t.left,o.right=o.fullSize?n.outerWidth-i.right:t.left+t.w,o.top=l,o.bottom=l+o.height,o.width=o.right-o.left,l=o.bottom):(o.left=d,o.right=d+o.width,o.top=o.fullSize?i.top:t.top,o.bottom=o.fullSize?n.outerHeight-i.right:t.top+t.h,o.height=o.bottom-o.top,d=o.right);t.x=d,t.y=l}Ce.set("layout",{padding:{top:0,right:0,bottom:0,left:0}});var Kn={addBox(e,t){e.boxes||(e.boxes=[]),t.fullSize=t.fullSize||!1,t.position=t.position||"top",t.weight=t.weight||0,t._layers=t._layers||function(){return[{z:0,draw(e){t.draw(e)}}]},e.boxes.push(t)},removeBox(e,t){const n=e.boxes?e.boxes.indexOf(t):-1;-1!==n&&e.boxes.splice(n,1)},configure(e,t,n){t.fullSize=n.fullSize,t.position=n.position,t.weight=n.weight},update(e,t,n,i){if(!e)return;const r=nt(e.options.layout.padding),a=t-r.width,s=n-r.height,o=function(e){const t=function(e){const t=[];let n,i,r;for(n=0,i=(e||[]).length;n<i;++n)r=e[n],t.push({index:n,box:r,pos:r.position,horizontal:r.isHorizontal(),weight:r.weight});return t}(e),n=Bn(t.filter((e=>e.box.fullSize)),!0),i=Bn(Nn(t,"left"),!0),r=Bn(Nn(t,"right")),a=Bn(Nn(t,"top"),!0),s=Bn(Nn(t,"bottom")),o=zn(t,"x"),d=zn(t,"y");return{fullSize:n,leftAndTop:i.concat(a),rightAndBottom:r.concat(d).concat(s).concat(o),chartArea:Nn(t,"chartArea"),vertical:i.concat(r).concat(d),horizontal:a.concat(s).concat(o)}}(e.boxes),d=o.vertical,l=o.horizontal;g(e.boxes,(e=>{"function"==typeof e.beforeLayout&&e.beforeLayout()}));const u=d.reduce(((e,t)=>t.box.options&&!1===t.box.options.display?e:e+1),0)||1,c=Object.freeze({outerWidth:t,outerHeight:n,padding:r,availableWidth:a,availableHeight:s,vBoxMaxWidth:a/2/u,hBoxMaxHeight:s/2}),h=Object.assign({},r);Un(h,nt(i));const _=Object.assign({maxPadding:h,w:a,h:s,x:r.left,y:r.top},r);!function(e,t){let n,i,r;for(n=0,i=e.length;n<i;++n)r=e[n],r.horizontal?(r.width=r.box.fullSize&&t.availableWidth,r.height=t.hBoxMaxHeight):(r.width=t.vBoxMaxWidth,r.height=r.box.fullSize&&t.availableHeight)}(d.concat(l),c),qn(o.fullSize,_,c),qn(d,_,c),qn(l,_,c)&&qn(d,_,c),function(e){const t=e.maxPadding;function n(n){const i=Math.max(t[n]-e[n],0);return e[n]+=i,i}e.y+=n("top"),e.x+=n("left"),n("right"),n("bottom")}(_),Gn(o.leftAndTop,_,c),_.x+=_.w,_.y+=_.h,Gn(o.rightAndBottom,_,c),e.chartArea={left:_.left,top:_.top,right:_.left+_.w,bottom:_.top+_.h,height:_.h,width:_.w},g(o.chartArea,(t=>{const n=t.box;Object.assign(n,e.chartArea),n.update(_.w,_.h)}))}};class Zn{acquireContext(e,t){}releaseContext(e){return!1}addEventListener(e,t,n){}removeEventListener(e,t,n){}getDevicePixelRatio(){return 1}getMaximumSize(e,t,n,i){return t=Math.max(0,t||e.width),n=n||e.height,{width:t,height:Math.max(0,i?Math.floor(t/i):n)}}isAttached(e){return!0}}class Qn extends Zn{acquireContext(e){return e&&e.getContext&&e.getContext("2d")||null}}const Xn={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},ei=e=>null===e||""===e,ti=!!Ct&&{passive:!0};function ni(e,t,n){e.canvas.removeEventListener(t,n,ti)}function ii(e,t,n){const i=e.canvas,r=i&&St(i)||i,a=new MutationObserver((e=>{const t=St(r);e.forEach((e=>{for(let i=0;i<e.addedNodes.length;i++){const a=e.addedNodes[i];a!==r&&a!==t||n(e.target)}}))}));return a.observe(document,{childList:!0,subtree:!0}),a}function ri(e,t,n){const i=e.canvas,r=i&&St(i);if(!r)return;const a=new MutationObserver((e=>{e.forEach((e=>{for(let t=0;t<e.removedNodes.length;t++)if(e.removedNodes[t]===i){n();break}}))}));return a.observe(r,{childList:!0}),a}const ai=new Map;let si=0;function oi(){const e=window.devicePixelRatio;e!==si&&(si=e,ai.forEach(((t,n)=>{n.currentDevicePixelRatio!==e&&t()})))}function di(e,t,n){const i=e.canvas,a=i&&St(i);if(!a)return;const s=r(((e,t)=>{const i=a.clientWidth;n(e,t),i<a.clientWidth&&n()}),window),o=new ResizeObserver((e=>{const t=e[0],n=t.contentRect.width,i=t.contentRect.height;0===n&&0===i||s(n,i)}));return o.observe(a),function(e,t){ai.size||window.addEventListener("resize",oi),ai.set(e,t)}(e,s),o}function li(e,t,n){n&&n.disconnect(),"resize"===t&&function(e){ai.delete(e),ai.size||window.removeEventListener("resize",oi)}(e)}function ui(e,t,n){const i=e.canvas,a=r((t=>{null!==e.ctx&&n(function(e,t){const n=Xn[e.type]||e.type,{x:i,y:r}=Et(e,t);return{type:n,chart:t,native:e,x:void 0!==i?i:null,y:void 0!==r?r:null}}(t,e))}),e,(e=>{const t=e[0];return[t,t.offsetX,t.offsetY]}));return function(e,t,n){e.addEventListener(t,n,ti)}(i,t,a),a}class ci extends Zn{acquireContext(e,t){const n=e&&e.getContext&&e.getContext("2d");return n&&n.canvas===e?(function(e,t){const n=e.style,i=e.getAttribute("height"),r=e.getAttribute("width");if(e.$chartjs={initial:{height:i,width:r,style:{display:n.display,height:n.height,width:n.width}}},n.display=n.display||"block",n.boxSizing=n.boxSizing||"border-box",ei(r)){const t=Wt(e,"width");void 0!==t&&(e.width=t)}if(ei(i))if(""===e.style.height)e.height=e.width/(t||2);else{const t=Wt(e,"height");void 0!==t&&(e.height=t)}}(e,t),n):null}releaseContext(e){const t=e.canvas;if(!t.$chartjs)return!1;const n=t.$chartjs.initial;["height","width"].forEach((e=>{const i=n[e];l(i)?t.removeAttribute(e):t.setAttribute(e,i)}));const i=n.style||{};return Object.keys(i).forEach((e=>{t.style[e]=i[e]})),t.width=t.width,delete t.$chartjs,!0}addEventListener(e,t,n){this.removeEventListener(e,t);const i=e.$proxies||(e.$proxies={}),r={attach:ii,detach:ri,resize:di}[t]||ui;i[t]=r(e,t,n)}removeEventListener(e,t){const n=e.$proxies||(e.$proxies={}),i=n[t];i&&(({attach:li,detach:li,resize:li}[t]||ni)(e,t,i),n[t]=void 0)}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(e,t,n,i){return function(e,t,n,i){const r=Ht(e),a=Pt(r,"margin"),s=Ot(r.maxWidth,e,"clientWidth")||P,o=Ot(r.maxHeight,e,"clientHeight")||P,d=function(e,t,n){let i,r;if(void 0===t||void 0===n){const a=St(e);if(a){const e=a.getBoundingClientRect(),s=Ht(a),o=Pt(s,"border","width"),d=Pt(s,"padding");t=e.width-d.width-o.width,n=e.height-d.height-o.height,i=Ot(s.maxWidth,a,"clientWidth"),r=Ot(s.maxHeight,a,"clientHeight")}else t=e.clientWidth,n=e.clientHeight}return{width:t,height:n,maxWidth:i||P,maxHeight:r||P}}(e,t,n);let{width:l,height:u}=d;if("content-box"===r.boxSizing){const e=Pt(r,"border","width"),t=Pt(r,"padding");l-=t.width+e.width,u-=t.height+e.height}return l=Math.max(0,l-a.width),u=Math.max(0,i?Math.floor(l/i):u-a.height),l=At(Math.min(l,s,d.maxWidth)),u=At(Math.min(u,o,d.maxHeight)),l&&!u&&(u=At(l/2)),{width:l,height:u}}(e,t,n,i)}isAttached(e){const t=St(e);return!(!t||!St(t))}}class hi{constructor(){this.x=void 0,this.y=void 0,this.active=!1,this.options=void 0,this.$animations=void 0}tooltipPosition(e){const{x:t,y:n}=this.getProps(["x","y"],e);return{x:t,y:n}}hasValue(){return N(this.x)&&N(this.y)}getProps(e,t){const n=this,i=this.$animations;if(!t||!i)return n;const r={};return e.forEach((e=>{r[e]=i[e]&&i[e].active()?i[e]._to:n[e]})),r}}hi.defaults={},hi.defaultRoutes=void 0;const _i={values:e=>u(e)?e:""+e,numeric(e,t,n){if(0===e)return"0";const i=this.chart.options.locale;let r,a=e;if(n.length>1){const t=Math.max(Math.abs(n[0].value),Math.abs(n[n.length-1].value));(t<1e-4||t>1e15)&&(r="scientific"),a=function(e,t){let n=t.length>3?t[2].value-t[1].value:t[1].value-t[0].value;return Math.abs(n)>1&&e!==Math.floor(e)&&(n=e-Math.floor(e)),n}(e,n)}const s=W(Math.abs(a)),o=Math.max(Math.min(-1*Math.floor(s),20),0),d={notation:r,minimumFractionDigits:o,maximumFractionDigits:o};return Object.assign(d,this.options.ticks.format),Bt(e,i,d)},logarithmic(e,t,n){if(0===e)return"0";const i=e/Math.pow(10,Math.floor(W(e)));return 1===i||2===i||5===i?_i.numeric.call(this,e,t,n):""}};var mi={formatters:_i};function fi(e,t,n,i,r){const a=m(i,0),s=Math.min(m(r,e.length),e.length);let o,d,l,u=0;for(n=Math.ceil(n),r&&(o=r-i,n=o/Math.floor(o/n)),l=a;l<0;)u++,l=Math.round(a+u*n);for(d=Math.max(a,0);d<s;d++)d===l&&(t.push(e[d]),u++,l=Math.round(a+u*n))}Ce.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",grace:0,grid:{display:!0,lineWidth:1,drawBorder:!0,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(e,t)=>t.lineWidth,tickColor:(e,t)=>t.color,offset:!1,borderDash:[],borderDashOffset:0,borderWidth:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:mi.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),Ce.route("scale.ticks","color","","color"),Ce.route("scale.grid","color","","borderColor"),Ce.route("scale.grid","borderColor","","borderColor"),Ce.route("scale.title","color","","color"),Ce.describe("scale",{_fallback:!1,_scriptable:e=>!e.startsWith("before")&&!e.startsWith("after")&&"callback"!==e&&"parser"!==e,_indexable:e=>"borderDash"!==e&&"tickBorderDash"!==e}),Ce.describe("scales",{_fallback:"scale"});const pi=(e,t,n)=>"top"===t||"left"===t?e[t]+n:e[t]-n;function gi(e,t){const n=[],i=e.length/t,r=e.length;let a=0;for(;a<r;a+=i)n.push(e[Math.floor(a)]);return n}function yi(e,t,n){const i=e.ticks.length,r=Math.min(t,i-1),a=e._startPixel,s=e._endPixel,o=1e-6;let d,l=e.getPixelForTick(r);if(!(n&&(d=1===i?Math.max(l-a,s-l):0===t?(e.getPixelForTick(1)-l)/2:(l-e.getPixelForTick(r-1))/2,l+=r<t?d:-d,l<a-o||l>s+o)))return l}function Mi(e){return e.drawTicks?e.tickLength:0}function bi(e,t){if(!e.display)return 0;const n=it(e.font,t),i=nt(e.padding);return(u(e.text)?e.text.length:1)*n.lineHeight+i.height}function Li(e,t,n){let i=a(e);return(n&&"right"!==t||!n&&"right"===t)&&(i=(e=>"left"===e?"right":"right"===e?"left":e)(i)),i}class vi extends hi{constructor(e){super(),this.id=e.id,this.type=e.type,this.options=void 0,this.ctx=e.ctx,this.chart=e.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(e){const t=this;t.options=e.setContext(t.getContext()),t.axis=e.axis,t._userMin=t.parse(e.min),t._userMax=t.parse(e.max),t._suggestedMin=t.parse(e.suggestedMin),t._suggestedMax=t.parse(e.suggestedMax)}parse(e,t){return e}getUserBounds(){let{_userMin:e,_userMax:t,_suggestedMin:n,_suggestedMax:i}=this;return e=_(e,Number.POSITIVE_INFINITY),t=_(t,Number.NEGATIVE_INFINITY),n=_(n,Number.POSITIVE_INFINITY),i=_(i,Number.NEGATIVE_INFINITY),{min:_(e,n),max:_(t,i),minDefined:h(e),maxDefined:h(t)}}getMinMax(e){const t=this;let n,{min:i,max:r,minDefined:a,maxDefined:s}=t.getUserBounds();if(a&&s)return{min:i,max:r};const o=t.getMatchingVisibleMetas();for(let d=0,l=o.length;d<l;++d)n=o[d].controller.getMinMax(t,e),a||(i=Math.min(i,n.min)),s||(r=Math.max(r,n.max));return{min:_(i,_(r,i)),max:_(r,_(i,r))}}getPadding(){const e=this;return{left:e.paddingLeft||0,top:e.paddingTop||0,right:e.paddingRight||0,bottom:e.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){const e=this.chart.data;return this.options.labels||(this.isHorizontal()?e.xLabels:e.yLabels)||e.labels||[]}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){p(this.options.beforeUpdate,[this])}update(e,t,n){const i=this,r=i.options.ticks,a=r.sampleSize;i.beforeUpdate(),i.maxWidth=e,i.maxHeight=t,i._margins=n=Object.assign({left:0,right:0,top:0,bottom:0},n),i.ticks=null,i._labelSizes=null,i._gridLineItems=null,i._labelItems=null,i.beforeSetDimensions(),i.setDimensions(),i.afterSetDimensions(),i._maxLength=i.isHorizontal()?i.width+n.left+n.right:i.height+n.top+n.bottom,i._dataLimitsCached||(i.beforeDataLimits(),i.determineDataLimits(),i.afterDataLimits(),i._range=function(e,t){const{min:n,max:i}=e;return{min:n-Math.abs(f(t,n)),max:i+f(t,i)}}(i,i.options.grace),i._dataLimitsCached=!0),i.beforeBuildTicks(),i.ticks=i.buildTicks()||[],i.afterBuildTicks();const s=a<i.ticks.length;i._convertTicksToLabels(s?gi(i.ticks,a):i.ticks),i.configure(),i.beforeCalculateLabelRotation(),i.calculateLabelRotation(),i.afterCalculateLabelRotation(),r.display&&(r.autoSkip||"auto"===r.source)&&(i.ticks=function(e,t){const n=e.options.ticks,i=n.maxTicksLimit||function(e){const t=e.options.offset,n=e._tickSize(),i=e._length/n+(t?0:1),r=e._maxLength/n;return Math.floor(Math.min(i,r))}(e),r=n.major.enabled?function(e){const t=[];let n,i;for(n=0,i=e.length;n<i;n++)e[n].major&&t.push(n);return t}(t):[],a=r.length,s=r[0],o=r[a-1],d=[];if(a>i)return function(e,t,n,i){let r,a=0,s=n[0];for(i=Math.ceil(i),r=0;r<e.length;r++)r===s&&(t.push(e[r]),a++,s=n[a*i])}(t,d,r,a/i),d;const u=function(e,t,n){const i=function(e){const t=e.length;let n,i;if(t<2)return!1;for(i=e[0],n=1;n<t;++n)if(e[n]-e[n-1]!==i)return!1;return i}(e),r=t.length/n;if(!i)return Math.max(r,1);const a=function(e){const t=[],n=Math.sqrt(e);let i;for(i=1;i<n;i++)e%i==0&&(t.push(i),t.push(e/i));return n===(0|n)&&t.push(n),t.sort(((e,t)=>e-t)).pop(),t}(i);for(let e=0,t=a.length-1;e<t;e++){const t=a[e];if(t>r)return t}return Math.max(r,1)}(r,t,i);if(a>0){let e,n;const i=a>1?Math.round((o-s)/(a-1)):null;for(fi(t,d,u,l(i)?0:s-i,s),e=0,n=a-1;e<n;e++)fi(t,d,u,r[e],r[e+1]);return fi(t,d,u,o,l(i)?t.length:o+i),d}return fi(t,d,u),d}(i,i.ticks),i._labelSizes=null),s&&i._convertTicksToLabels(i.ticks),i.beforeFit(),i.fit(),i.afterFit(),i.afterUpdate()}configure(){const e=this;let t,n,i=e.options.reverse;e.isHorizontal()?(t=e.left,n=e.right):(t=e.top,n=e.bottom,i=!i),e._startPixel=t,e._endPixel=n,e._reversePixels=i,e._length=n-t,e._alignToPixels=e.options.alignToPixels}afterUpdate(){p(this.options.afterUpdate,[this])}beforeSetDimensions(){p(this.options.beforeSetDimensions,[this])}setDimensions(){const e=this;e.isHorizontal()?(e.width=e.maxWidth,e.left=0,e.right=e.width):(e.height=e.maxHeight,e.top=0,e.bottom=e.height),e.paddingLeft=0,e.paddingTop=0,e.paddingRight=0,e.paddingBottom=0}afterSetDimensions(){p(this.options.afterSetDimensions,[this])}_callHooks(e){const t=this;t.chart.notifyPlugins(e,t.getContext()),p(t.options[e],[t])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){p(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(e){const t=this,n=t.options.ticks;let i,r,a;for(i=0,r=e.length;i<r;i++)a=e[i],a.label=p(n.callback,[a.value,i,e],t);for(i=0;i<r;i++)l(e[i].label)&&(e.splice(i,1),r--,i--)}afterTickToLabelConversion(){p(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){p(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){const e=this,t=e.options,n=t.ticks,i=e.ticks.length,r=n.minRotation||0,a=n.maxRotation;let s,o,d,l=r;if(!e._isVisible()||!n.display||r>=a||i<=1||!e.isHorizontal())return void(e.labelRotation=r);const u=e._getLabelSizes(),c=u.widest.width,h=u.highest.height,_=K(e.chart.width-c,0,e.maxWidth);s=t.offset?e.maxWidth/i:_/(i-1),c+6>s&&(s=_/(i-(t.offset?.5:1)),o=e.maxHeight-Mi(t.grid)-n.padding-bi(t.title,e.chart.options.font),d=Math.sqrt(c*c+h*h),l=U(Math.min(Math.asin(Math.min((u.highest.height+6)/s,1)),Math.asin(Math.min(o/d,1))-Math.asin(h/d))),l=Math.max(r,Math.min(a,l))),e.labelRotation=l}afterCalculateLabelRotation(){p(this.options.afterCalculateLabelRotation,[this])}beforeFit(){p(this.options.beforeFit,[this])}fit(){const e=this,t={width:0,height:0},{chart:n,options:{ticks:i,title:r,grid:a}}=e,s=e._isVisible(),o=e.isHorizontal();if(s){const s=bi(r,n.options.font);if(o?(t.width=e.maxWidth,t.height=Mi(a)+s):(t.height=e.maxHeight,t.width=Mi(a)+s),i.display&&e.ticks.length){const{first:n,last:r,widest:a,highest:s}=e._getLabelSizes(),d=2*i.padding,l=V(e.labelRotation),u=Math.cos(l),c=Math.sin(l);if(o){const n=i.mirror?0:c*a.width+u*s.height;t.height=Math.min(e.maxHeight,t.height+n+d)}else{const n=i.mirror?0:u*a.width+c*s.height;t.width=Math.min(e.maxWidth,t.width+n+d)}e._calculatePadding(n,r,c,u)}}e._handleMargins(),o?(e.width=e._length=n.width-e._margins.left-e._margins.right,e.height=t.height):(e.width=t.width,e.height=e._length=n.height-e._margins.top-e._margins.bottom)}_calculatePadding(e,t,n,i){const r=this,{ticks:{align:a,padding:s},position:o}=r.options,d=0!==r.labelRotation,l="top"!==o&&"x"===r.axis;if(r.isHorizontal()){const o=r.getPixelForTick(0)-r.left,u=r.right-r.getPixelForTick(r.ticks.length-1);let c=0,h=0;d?l?(c=i*e.width,h=n*t.height):(c=n*e.height,h=i*t.width):"start"===a?h=t.width:"end"===a?c=e.width:(c=e.width/2,h=t.width/2),r.paddingLeft=Math.max((c-o+s)*r.width/(r.width-o),0),r.paddingRight=Math.max((h-u+s)*r.width/(r.width-u),0)}else{let n=t.height/2,i=e.height/2;"start"===a?(n=0,i=e.height):"end"===a&&(n=t.height,i=0),r.paddingTop=n+s,r.paddingBottom=i+s}}_handleMargins(){const e=this;e._margins&&(e._margins.left=Math.max(e.paddingLeft,e._margins.left),e._margins.top=Math.max(e.paddingTop,e._margins.top),e._margins.right=Math.max(e.paddingRight,e._margins.right),e._margins.bottom=Math.max(e.paddingBottom,e._margins.bottom))}afterFit(){p(this.options.afterFit,[this])}isHorizontal(){const{axis:e,position:t}=this.options;return"top"===t||"bottom"===t||"x"===e}isFullSize(){return this.options.fullSize}_convertTicksToLabels(e){const t=this;t.beforeTickToLabelConversion(),t.generateTickLabels(e),t.afterTickToLabelConversion()}_getLabelSizes(){const e=this;let t=e._labelSizes;if(!t){const n=e.options.ticks.sampleSize;let i=e.ticks;n<i.length&&(i=gi(i,n)),e._labelSizes=t=e._computeLabelSizes(i,i.length)}return t}_computeLabelSizes(e,t){const{ctx:n,_longestTextCache:i}=this,r=[],a=[];let s,o,d,c,h,_,m,f,p,y,M,b=0,L=0;for(s=0;s<t;++s){if(c=e[s].label,h=this._resolveTickFontOptions(s),n.font=_=h.string,m=i[_]=i[_]||{data:{},gc:[]},f=h.lineHeight,p=y=0,l(c)||u(c)){if(u(c))for(o=0,d=c.length;o<d;++o)M=c[o],l(M)||u(M)||(p=We(n,m.data,m.gc,p,M),y+=f)}else p=We(n,m.data,m.gc,p,c),y=f;r.push(p),a.push(y),b=Math.max(p,b),L=Math.max(y,L)}!function(e,t){g(e,(e=>{const n=e.gc,i=n.length/2;let r;if(i>t){for(r=0;r<i;++r)delete e.data[n[r]];n.splice(0,i)}}))}(i,t);const v=r.indexOf(b),w=a.indexOf(L),Y=e=>({width:r[e]||0,height:a[e]||0});return{first:Y(0),last:Y(t-1),widest:Y(v),highest:Y(w),widths:r,heights:a}}getLabelForValue(e){return e}getPixelForValue(e,t){return NaN}getValueForPixel(e){}getPixelForTick(e){const t=this.ticks;return e<0||e>t.length-1?null:this.getPixelForValue(t[e].value)}getPixelForDecimal(e){const t=this;t._reversePixels&&(e=1-e);const n=t._startPixel+e*t._length;return K(t._alignToPixels?Fe(t.chart,n,0):n,-32768,32767)}getDecimalForPixel(e){const t=(e-this._startPixel)/this._length;return this._reversePixels?1-t:t}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){const{min:e,max:t}=this;return e<0&&t<0?t:e>0&&t>0?e:0}getContext(e){const t=this,n=t.ticks||[];if(e>=0&&e<n.length){const i=n[e];return i.$context||(i.$context=function(e,t,n){return Object.assign(Object.create(e),{tick:n,index:t,type:"tick"})}(t.getContext(),e,i))}return t.$context||(t.$context=(i=t.chart.getContext(),r=t,Object.assign(Object.create(i),{scale:r,type:"scale"})));var i,r}_tickSize(){const e=this,t=e.options.ticks,n=V(e.labelRotation),i=Math.abs(Math.cos(n)),r=Math.abs(Math.sin(n)),a=e._getLabelSizes(),s=t.autoSkipPadding||0,o=a?a.widest.width+s:0,d=a?a.highest.height+s:0;return e.isHorizontal()?d*i>o*r?o/i:d/r:d*r<o*i?d/i:o/r}_isVisible(){const e=this.options.display;return"auto"!==e?!!e:this.getMatchingVisibleMetas().length>0}_computeGridLineItems(e){const t=this,n=t.axis,i=t.chart,r=t.options,{grid:a,position:s}=r,o=a.offset,d=t.isHorizontal(),l=t.ticks.length+(o?1:0),u=Mi(a),h=[],_=a.setContext(t.getContext()),m=_.drawBorder?_.borderWidth:0,f=m/2,p=function(e){return Fe(i,e,m)};let g,y,M,b,L,v,w,Y,k,D,x,T;if("top"===s)g=p(t.bottom),v=t.bottom-u,Y=g-f,D=p(e.top)+f,T=e.bottom;else if("bottom"===s)g=p(t.top),D=e.top,T=p(e.bottom)-f,v=g+f,Y=t.top+u;else if("left"===s)g=p(t.right),L=t.right-u,w=g-f,k=p(e.left)+f,x=e.right;else if("right"===s)g=p(t.left),k=e.left,x=p(e.right)-f,L=g+f,w=t.left+u;else if("x"===n){if("center"===s)g=p((e.top+e.bottom)/2+.5);else if(c(s)){const e=Object.keys(s)[0],n=s[e];g=p(t.chart.scales[e].getPixelForValue(n))}D=e.top,T=e.bottom,v=g+f,Y=v+u}else if("y"===n){if("center"===s)g=p((e.left+e.right)/2);else if(c(s)){const e=Object.keys(s)[0],n=s[e];g=p(t.chart.scales[e].getPixelForValue(n))}L=g-f,w=L-u,k=e.left,x=e.right}for(y=0;y<l;++y){const e=a.setContext(t.getContext(y)),n=e.lineWidth,r=e.color,s=a.borderDash||[],l=e.borderDashOffset,u=e.tickWidth,c=e.tickColor,_=e.tickBorderDash||[],m=e.tickBorderDashOffset;M=yi(t,y,o),void 0!==M&&(b=Fe(i,M,n),d?L=w=k=x=b:v=Y=D=T=b,h.push({tx1:L,ty1:v,tx2:w,ty2:Y,x1:k,y1:D,x2:x,y2:T,width:n,color:r,borderDash:s,borderDashOffset:l,tickWidth:u,tickColor:c,tickBorderDash:_,tickBorderDashOffset:m}))}return t._ticksLength=l,t._borderValue=g,h}_computeLabelItems(e){const t=this,n=t.axis,i=t.options,{position:r,ticks:a}=i,s=t.isHorizontal(),o=t.ticks,{align:d,crossAlign:l,padding:h,mirror:_}=a,m=Mi(i.grid),f=m+h,p=_?-h:f,g=-V(t.labelRotation),y=[];let M,b,L,v,w,Y,k,D,x,T,S,O,H="middle";if("top"===r)Y=t.bottom-p,k=t._getXAxisLabelAlignment();else if("bottom"===r)Y=t.top+p,k=t._getXAxisLabelAlignment();else if("left"===r){const e=t._getYAxisLabelAlignment(m);k=e.textAlign,w=e.x}else if("right"===r){const e=t._getYAxisLabelAlignment(m);k=e.textAlign,w=e.x}else if("x"===n){if("center"===r)Y=(e.top+e.bottom)/2+f;else if(c(r)){const e=Object.keys(r)[0],n=r[e];Y=t.chart.scales[e].getPixelForValue(n)+f}k=t._getXAxisLabelAlignment()}else if("y"===n){if("center"===r)w=(e.left+e.right)/2-f;else if(c(r)){const e=Object.keys(r)[0],n=r[e];w=t.chart.scales[e].getPixelForValue(n)}k=t._getYAxisLabelAlignment(m).textAlign}"y"===n&&("start"===d?H="top":"end"===d&&(H="bottom"));const j=t._getLabelSizes();for(M=0,b=o.length;M<b;++M){L=o[M],v=L.label;const e=a.setContext(t.getContext(M));D=t.getPixelForTick(M)+a.labelOffset,x=t._resolveTickFontOptions(M),T=x.lineHeight,S=u(v)?v.length:1;const n=S/2,i=e.color,d=e.textStrokeColor,c=e.textStrokeWidth;let h;if(s?(w=D,O="top"===r?"near"===l||0!==g?-S*T+T/2:"center"===l?-j.highest.height/2-n*T+T:-j.highest.height+T/2:"near"===l||0!==g?T/2:"center"===l?j.highest.height/2-n*T:j.highest.height-S*T,_&&(O*=-1)):(Y=D,O=(1-S)*T/2),e.showLabelBackdrop){const t=nt(e.backdropPadding),n=j.heights[M],i=j.widths[M];let r=Y+O-t.top,a=w-t.left;switch(H){case"middle":r-=n/2;break;case"bottom":r-=n}switch(k){case"center":a-=i/2;break;case"right":a-=i}h={left:a,top:r,width:i+t.width,height:n+t.height,color:e.backdropColor}}y.push({rotation:g,label:v,font:x,color:i,strokeColor:d,strokeWidth:c,textOffset:O,textAlign:k,textBaseline:H,translation:[w,Y],backdrop:h})}return y}_getXAxisLabelAlignment(){const{position:e,ticks:t}=this.options;if(-V(this.labelRotation))return"top"===e?"left":"right";let n="center";return"start"===t.align?n="left":"end"===t.align&&(n="right"),n}_getYAxisLabelAlignment(e){const t=this,{position:n,ticks:{crossAlign:i,mirror:r,padding:a}}=t.options,s=e+a,o=t._getLabelSizes().widest.width;let d,l;return"left"===n?r?(d="left",l=t.right+a):(l=t.right-s,"near"===i?d="right":"center"===i?(d="center",l-=o/2):(d="left",l=t.left)):"right"===n?r?(d="right",l=t.left+a):(l=t.left+s,"near"===i?d="left":"center"===i?(d="center",l+=o/2):(d="right",l=t.right)):d="right",{textAlign:d,x:l}}_computeLabelArea(){const e=this;if(e.options.ticks.mirror)return;const t=e.chart,n=e.options.position;return"left"===n||"right"===n?{top:0,left:e.left,bottom:t.height,right:e.right}:"top"===n||"bottom"===n?{top:e.top,left:0,bottom:e.bottom,right:t.width}:void 0}drawBackground(){const{ctx:e,options:{backgroundColor:t},left:n,top:i,width:r,height:a}=this;t&&(e.save(),e.fillStyle=t,e.fillRect(n,i,r,a),e.restore())}getLineWidthForValue(e){const t=this,n=t.options.grid;if(!t._isVisible()||!n.display)return 0;const i=t.ticks.findIndex((t=>t.value===e));return i>=0?n.setContext(t.getContext(i)).lineWidth:0}drawGrid(e){const t=this,n=t.options.grid,i=t.ctx,r=t._gridLineItems||(t._gridLineItems=t._computeGridLineItems(e));let a,s;const o=(e,t,n)=>{n.width&&n.color&&(i.save(),i.lineWidth=n.width,i.strokeStyle=n.color,i.setLineDash(n.borderDash||[]),i.lineDashOffset=n.borderDashOffset,i.beginPath(),i.moveTo(e.x,e.y),i.lineTo(t.x,t.y),i.stroke(),i.restore())};if(n.display)for(a=0,s=r.length;a<s;++a){const e=r[a];n.drawOnChartArea&&o({x:e.x1,y:e.y1},{x:e.x2,y:e.y2},e),n.drawTicks&&o({x:e.tx1,y:e.ty1},{x:e.tx2,y:e.ty2},{color:e.tickColor,width:e.tickWidth,borderDash:e.tickBorderDash,borderDashOffset:e.tickBorderDashOffset})}}drawBorder(){const e=this,{chart:t,ctx:n,options:{grid:i}}=e,r=i.setContext(e.getContext()),a=i.drawBorder?r.borderWidth:0;if(!a)return;const s=i.setContext(e.getContext(0)).lineWidth,o=e._borderValue;let d,l,u,c;e.isHorizontal()?(d=Fe(t,e.left,a)-a/2,l=Fe(t,e.right,s)+s/2,u=c=o):(u=Fe(t,e.top,a)-a/2,c=Fe(t,e.bottom,s)+s/2,d=l=o),n.save(),n.lineWidth=r.borderWidth,n.strokeStyle=r.borderColor,n.beginPath(),n.moveTo(d,u),n.lineTo(l,c),n.stroke(),n.restore()}drawLabels(e){const t=this;if(!t.options.ticks.display)return;const n=t.ctx,i=t._computeLabelArea();i&&Ve(n,i);const r=t._labelItems||(t._labelItems=t._computeLabelItems(e));let a,s;for(a=0,s=r.length;a<s;++a){const e=r[a],t=e.font,i=e.label;e.backdrop&&(n.fillStyle=e.backdrop.color,n.fillRect(e.backdrop.left,e.backdrop.top,e.backdrop.width,e.backdrop.height)),qe(n,i,0,e.textOffset,t,e)}i&&Ue(n)}drawTitle(){const{ctx:e,options:{position:t,title:n,reverse:i}}=this;if(!n.display)return;const r=it(n.font),a=nt(n.padding),o=n.align;let d=r.lineHeight/2;"bottom"===t?(d+=a.bottom,u(n.text)&&(d+=r.lineHeight*(n.text.length-1))):d+=a.top;const{titleX:l,titleY:c,maxWidth:h,rotation:_}=function(e,t,n,i){const{top:r,left:a,bottom:o,right:d}=e;let l,u,c,h=0;return e.isHorizontal()?(u=s(i,a,d),c=pi(e,n,t),l=d-a):(u=pi(e,n,t),c=s(i,o,r),h="left"===n?-A:A),{titleX:u,titleY:c,maxWidth:l,rotation:h}}(this,d,t,o);qe(e,n.text,0,0,r,{color:n.color,maxWidth:h,rotation:_,textAlign:Li(o,t,i),textBaseline:"middle",translation:[l,c]})}draw(e){const t=this;t._isVisible()&&(t.drawBackground(),t.drawGrid(e),t.drawBorder(),t.drawTitle(),t.drawLabels(e))}_layers(){const e=this,t=e.options,n=t.ticks&&t.ticks.z||0,i=t.grid&&t.grid.z||0;return e._isVisible()&&e.draw===vi.prototype.draw?[{z:i,draw(t){e.drawBackground(),e.drawGrid(t),e.drawTitle()}},{z:i+1,draw(){e.drawBorder()}},{z:n,draw(t){e.drawLabels(t)}}]:[{z:n,draw(t){e.draw(t)}}]}getMatchingVisibleMetas(e){const t=this,n=t.chart.getSortedVisibleDatasetMetas(),i=t.axis+"AxisID",r=[];let a,s;for(a=0,s=n.length;a<s;++a){const s=n[a];s[i]!==t.id||e&&s.type!==e||r.push(s)}return r}_resolveTickFontOptions(e){return it(this.options.ticks.setContext(this.getContext(e)).font)}_maxDigits(){const e=this,t=e._resolveTickFontOptions(0).lineHeight;return e.isHorizontal()?e.width/t/.7:e.height/t}}class wi{constructor(e,t,n){this.type=e,this.scope=t,this.override=n,this.items=Object.create(null)}isForType(e){return Object.prototype.isPrototypeOf.call(this.type.prototype,e.prototype)}register(e){const t=this,n=Object.getPrototypeOf(e);let i;(function(e){return"id"in e&&"defaults"in e})(n)&&(i=t.register(n));const r=t.items,a=e.id,s=t.scope+"."+a;if(!a)throw new Error("class does not have id: "+e);return a in r||(r[a]=e,function(e,t,n){const i=v(Object.create(null),[n?Ce.get(n):{},Ce.get(t),e.defaults]);Ce.set(t,i),e.defaultRoutes&&function(e,t){Object.keys(t).forEach((n=>{const i=n.split("."),r=i.pop(),a=[e].concat(i).join("."),s=t[n].split("."),o=s.pop(),d=s.join(".");Ce.route(a,r,d,o)}))}(t,e.defaultRoutes),e.descriptors&&Ce.describe(t,e.descriptors)}(e,s,i),t.override&&Ce.override(e.id,e.overrides)),s}get(e){return this.items[e]}unregister(e){const t=this.items,n=e.id,i=this.scope;n in t&&delete t[n],i&&n in Ce[i]&&(delete Ce[i][n],this.override&&delete Pe[n])}}var Yi=new class{constructor(){this.controllers=new wi(pn,"datasets",!0),this.elements=new wi(hi,"elements"),this.plugins=new wi(Object,"plugins"),this.scales=new wi(vi,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...e){this._each("register",e)}remove(...e){this._each("unregister",e)}addControllers(...e){this._each("register",e,this.controllers)}addElements(...e){this._each("register",e,this.elements)}addPlugins(...e){this._each("register",e,this.plugins)}addScales(...e){this._each("register",e,this.scales)}getController(e){return this._get(e,this.controllers,"controller")}getElement(e){return this._get(e,this.elements,"element")}getPlugin(e){return this._get(e,this.plugins,"plugin")}getScale(e){return this._get(e,this.scales,"scale")}removeControllers(...e){this._each("unregister",e,this.controllers)}removeElements(...e){this._each("unregister",e,this.elements)}removePlugins(...e){this._each("unregister",e,this.plugins)}removeScales(...e){this._each("unregister",e,this.scales)}_each(e,t,n){const i=this;[...t].forEach((t=>{const r=n||i._getRegistryForType(t);n||r.isForType(t)||r===i.plugins&&t.id?i._exec(e,r,t):g(t,(t=>{const r=n||i._getRegistryForType(t);i._exec(e,r,t)}))}))}_exec(e,t,n){const i=x(e);p(n["before"+i],[],n),t[e](n),p(n["after"+i],[],n)}_getRegistryForType(e){for(let t=0;t<this._typedRegistries.length;t++){const n=this._typedRegistries[t];if(n.isForType(e))return n}return this.plugins}_get(e,t,n){const i=t.get(e);if(void 0===i)throw new Error('"'+e+'" is not a registered '+n+".");return i}};class ki{constructor(){this._init=[]}notify(e,t,n,i){const r=this;"beforeInit"===t&&(r._init=r._createDescriptors(e,!0),r._notify(r._init,e,"install"));const a=i?r._descriptors(e).filter(i):r._descriptors(e),s=r._notify(a,e,t,n);return"destroy"===t&&(r._notify(a,e,"stop"),r._notify(r._init,e,"uninstall")),s}_notify(e,t,n,i){i=i||{};for(const r of e){const e=r.plugin;if(!1===p(e[n],[t,i,r.options],e)&&i.cancelable)return!1}return!0}invalidate(){l(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(e){if(this._cache)return this._cache;const t=this._cache=this._createDescriptors(e);return this._notifyStateChanges(e),t}_createDescriptors(e,t){const n=e&&e.config,i=m(n.options&&n.options.plugins,{}),r=function(e){const t=[],n=Object.keys(Yi.plugins.items);for(let e=0;e<n.length;e++)t.push(Yi.getPlugin(n[e]));const i=e.plugins||[];for(let e=0;e<i.length;e++){const n=i[e];-1===t.indexOf(n)&&t.push(n)}return t}(n);return!1!==i||t?function(e,t,n,i){const r=[],a=e.getContext();for(let s=0;s<t.length;s++){const o=t[s],d=Di(n[o.id],i);null!==d&&r.push({plugin:o,options:xi(e.config,o,d,a)})}return r}(e,r,i,t):[]}_notifyStateChanges(e){const t=this._oldCache||[],n=this._cache,i=(e,t)=>e.filter((e=>!t.some((t=>e.plugin.id===t.plugin.id))));this._notify(i(t,n),e,"stop"),this._notify(i(n,t),e,"start")}}function Di(e,t){return t||!1!==e?!0===e?{}:e:null}function xi(e,t,n,i){const r=e.pluginScopeKeys(t),a=e.getOptionScopes(n,r);return e.createResolver(a,i,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function Ti(e,t){const n=Ce.datasets[e]||{};return((t.datasets||{})[e]||{}).indexAxis||t.indexAxis||n.indexAxis||"x"}function Si(e,t){return"x"===e||"y"===e?e:t.axis||("top"===(n=t.position)||"bottom"===n?"x":"left"===n||"right"===n?"y":void 0)||e.charAt(0).toLowerCase();var n}function Oi(e){const t=e.options||(e.options={});t.plugins=m(t.plugins,{}),t.scales=function(e,t){const n=Pe[e.type]||{scales:{}},i=t.scales||{},r=Ti(e.type,t),a=Object.create(null),s=Object.create(null);return Object.keys(i).forEach((e=>{const t=i[e],o=Si(e,t),d=function(e,t){return e===t?"_index_":"_value_"}(o,r),l=n.scales||{};a[o]=a[o]||e,s[e]=w(Object.create(null),[{axis:o},t,l[o],l[d]])})),e.data.datasets.forEach((n=>{const r=n.type||e.type,o=n.indexAxis||Ti(r,t),d=(Pe[r]||{}).scales||{};Object.keys(d).forEach((e=>{const t=function(e,t){let n=e;return"_index_"===e?n=t:"_value_"===e&&(n="x"===t?"y":"x"),n}(e,o),r=n[t+"AxisID"]||a[t]||t;s[r]=s[r]||Object.create(null),w(s[r],[{axis:t},i[r],d[e]])}))})),Object.keys(s).forEach((e=>{const t=s[e];w(t,[Ce.scales[t.type],Ce.scale])})),s}(e,t)}function Hi(e){return(e=e||{}).datasets=e.datasets||[],e.labels=e.labels||[],e}const ji=new Map,Pi=new Set;function Ei(e,t){let n=ji.get(e);return n||(n=t(),ji.set(e,n),Pi.add(n)),n}const Ai=(e,t,n)=>{const i=D(t,n);void 0!==i&&e.add(i)};class Ri{constructor(e){this._config=function(e){return(e=e||{}).data=Hi(e.data),Oi(e),e}(e),this._scopeCache=new Map,this._resolverCache=new Map}get type(){return this._config.type}set type(e){this._config.type=e}get data(){return this._config.data}set data(e){this._config.data=Hi(e)}get options(){return this._config.options}set options(e){this._config.options=e}get plugins(){return this._config.plugins}update(){const e=this._config;this.clearCache(),Oi(e)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(e){return Ei(e,(()=>[[`datasets.${e}`,""]]))}datasetAnimationScopeKeys(e,t){return Ei(`${e}.transition.${t}`,(()=>[[`datasets.${e}.transitions.${t}`,`transitions.${t}`],[`datasets.${e}`,""]]))}datasetElementScopeKeys(e,t){return Ei(`${e}-${t}`,(()=>[[`datasets.${e}.elements.${t}`,`datasets.${e}`,`elements.${t}`,""]]))}pluginScopeKeys(e){const t=e.id;return Ei(`${this.type}-plugin-${t}`,(()=>[[`plugins.${t}`,...e.additionalOptionScopes||[]]]))}_cachedScopes(e,t){const n=this._scopeCache;let i=n.get(e);return i&&!t||(i=new Map,n.set(e,i)),i}getOptionScopes(e,t,n){const{options:i,type:r}=this,a=this._cachedScopes(e,n),s=a.get(t);if(s)return s;const o=new Set;t.forEach((t=>{e&&(o.add(e),t.forEach((t=>Ai(o,e,t)))),t.forEach((e=>Ai(o,i,e))),t.forEach((e=>Ai(o,Pe[r]||{},e))),t.forEach((e=>Ai(o,Ce,e))),t.forEach((e=>Ai(o,Ee,e)))}));const d=[...o];return Pi.has(t)&&a.set(t,d),d}chartOptionScopes(){const{options:e,type:t}=this;return[e,Pe[t]||{},Ce.datasets[t]||{},{type:t},Ce,Ee]}resolveNamedOptions(e,t,n,i=[""]){const r={$shared:!0},{resolver:a,subPrefixes:s}=Ci(this._resolverCache,e,i);let o=a;(function(e,t){const{isScriptable:n,isIndexable:i}=_t(e);for(const r of t)if(n(r)&&S(e[r])||i(r)&&u(e[r]))return!0;return!1})(a,t)&&(r.$shared=!1,o=ht(a,n=S(n)?n():n,this.createResolver(e,n,s)));for(const e of t)r[e]=o[e];return r}createResolver(e,t,n=[""],i){const{resolver:r}=Ci(this._resolverCache,e,n);return c(t)?ht(r,t,void 0,i):r}}function Ci(e,t,n){let i=e.get(t);i||(i=new Map,e.set(t,i));const r=n.join();let a=i.get(r);return a||(a={resolver:ct(t,n),subPrefixes:n.filter((e=>!e.toLowerCase().includes("hover")))},i.set(r,a)),a}const Wi=["top","bottom","left","right","chartArea"];function Ii(e,t){return"top"===e||"bottom"===e||-1===Wi.indexOf(e)&&"x"===t}function Fi(e,t){return function(n,i){return n[e]===i[e]?n[t]-i[t]:n[e]-i[e]}}function Ni(e){const t=e.chart,n=t.options.animation;t.notifyPlugins("afterRender"),p(n&&n.onComplete,[e],t)}function zi(e){const t=e.chart,n=t.options.animation;p(n&&n.onProgress,[e],t)}function Bi(){return"undefined"!=typeof window&&"undefined"!=typeof document}function Vi(e){return Bi()&&"string"==typeof e?e=document.getElementById(e):e&&e.length&&(e=e[0]),e&&e.canvas&&(e=e.canvas),e}const Ui={},Ji=e=>{const t=Vi(e);return Object.values(Ui).filter((e=>e.canvas===t)).pop()};class $i{constructor(e,t){const n=this;this.config=t=new Ri(t);const i=Vi(e),r=Ji(i);if(r)throw new Error("Canvas is already in use. Chart with ID '"+r.id+"' must be destroyed before the canvas can be reused.");const a=t.createResolver(t.chartOptionScopes(),n.getContext());this.platform=n._initializePlatform(i,t);const s=n.platform.acquireContext(i,a.aspectRatio),o=s&&s.canvas,l=o&&o.height,u=o&&o.width;this.id=d(),this.ctx=s,this.canvas=o,this.width=u,this.height=l,this._options=a,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._sortedMetasets=[],this.scales={},this.scale=void 0,this._plugins=new ki,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=function(e,t){let n;return function(){return t?(clearTimeout(n),n=setTimeout(e,t)):e(),t}}((()=>this.update("resize")),a.resizeDelay||0),Ui[n.id]=n,s&&o?(Qt.listen(n,"complete",Ni),Qt.listen(n,"progress",zi),n._initialize(),n.attached&&n.update()):console.error("Failed to create chart: can't acquire context from the given item")}get aspectRatio(){const{options:{aspectRatio:e,maintainAspectRatio:t},width:n,height:i,_aspectRatio:r}=this;return l(e)?t&&r?r:i?n/i:null:e}get data(){return this.config.data}set data(e){this.config.data=e}get options(){return this._options}set options(e){this.config.options=e}_initialize(){const e=this;return e.notifyPlugins("beforeInit"),e.options.responsive?e.resize():Rt(e,e.options.devicePixelRatio),e.bindEvents(),e.notifyPlugins("afterInit"),e}_initializePlatform(e,t){return t.platform?new t.platform:!Bi()||"undefined"!=typeof OffscreenCanvas&&e instanceof OffscreenCanvas?new Qn:new ci}clear(){return Ne(this.canvas,this.ctx),this}stop(){return Qt.stop(this),this}resize(e,t){Qt.running(this)?this._resizeBeforeDraw={width:e,height:t}:this._resize(e,t)}_resize(e,t){const n=this,i=n.options,r=n.canvas,a=i.maintainAspectRatio&&n.aspectRatio,s=n.platform.getMaximumSize(r,e,t,a),o=n.currentDevicePixelRatio,d=i.devicePixelRatio||n.platform.getDevicePixelRatio();n.width===s.width&&n.height===s.height&&o===d||(n.width=s.width,n.height=s.height,n._aspectRatio=n.aspectRatio,Rt(n,d,!0),n.notifyPlugins("resize",{size:s}),p(i.onResize,[n,s],n),n.attached&&n._doResize()&&n.render())}ensureScalesHaveIDs(){g(this.options.scales||{},((e,t)=>{e.id=t}))}buildOrUpdateScales(){const e=this,t=e.options,n=t.scales,i=e.scales,r=Object.keys(i).reduce(((e,t)=>(e[t]=!1,e)),{});let a=[];n&&(a=a.concat(Object.keys(n).map((e=>{const t=n[e],i=Si(e,t),r="r"===i,a="x"===i;return{options:t,dposition:r?"chartArea":a?"bottom":"left",dtype:r?"radialLinear":a?"category":"linear"}})))),g(a,(n=>{const a=n.options,s=a.id,o=Si(s,a),d=m(a.type,n.dtype);void 0!==a.position&&Ii(a.position,o)===Ii(n.dposition)||(a.position=n.dposition),r[s]=!0;let l=null;s in i&&i[s].type===d?l=i[s]:(l=new(Yi.getScale(d))({id:s,type:d,ctx:e.ctx,chart:e}),i[l.id]=l),l.init(a,t)})),g(r,((e,t)=>{e||delete i[t]})),g(i,(t=>{Kn.configure(e,t,t.options),Kn.addBox(e,t)}))}_updateMetasetIndex(e,t){const n=this._metasets,i=e.index;i!==t&&(n[i]=n[t],n[t]=e,e.index=t)}_updateMetasets(){const e=this,t=e._metasets,n=e.data.datasets.length,i=t.length;if(i>n){for(let t=n;t<i;++t)e._destroyDatasetMeta(t);t.splice(n,i-n)}e._sortedMetasets=t.slice(0).sort(Fi("order","index"))}_removeUnreferencedMetasets(){const e=this,{_metasets:t,data:{datasets:n}}=e;t.length>n.length&&delete e._stacks,t.forEach(((t,i)=>{0===n.filter((e=>e===t._dataset)).length&&e._destroyDatasetMeta(i)}))}buildOrUpdateControllers(){const e=this,t=[],n=e.data.datasets;let i,r;for(e._removeUnreferencedMetasets(),i=0,r=n.length;i<r;i++){const r=n[i];let a=e.getDatasetMeta(i);const s=r.type||e.config.type;if(a.type&&a.type!==s&&(e._destroyDatasetMeta(i),a=e.getDatasetMeta(i)),a.type=s,a.indexAxis=r.indexAxis||Ti(s,e.options),a.order=r.order||0,e._updateMetasetIndex(a,i),a.label=""+r.label,a.visible=e.isDatasetVisible(i),a.controller)a.controller.updateIndex(i),a.controller.linkScales();else{const n=Yi.getController(s),{datasetElementType:r,dataElementType:o}=Ce.datasets[s];Object.assign(n.prototype,{dataElementType:Yi.getElement(o),datasetElementType:r&&Yi.getElement(r)}),a.controller=new n(e,i),t.push(a.controller)}}return e._updateMetasets(),t}_resetElements(){const e=this;g(e.data.datasets,((t,n)=>{e.getDatasetMeta(n).controller.reset()}),e)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(e){const t=this,n=t.config;n.update(),t._options=n.createResolver(n.chartOptionScopes(),t.getContext()),g(t.scales,(e=>{Kn.removeBox(t,e)}));const i=t._animationsDisabled=!t.options.animation;if(t.ensureScalesHaveIDs(),t.buildOrUpdateScales(),((e,t)=>{if(e.size!==t.size)return!1;for(const n of e)if(!t.has(n))return!1;return!0})(new Set(Object.keys(t._listeners)),new Set(t.options.events))||(t.unbindEvents(),t.bindEvents()),t._plugins.invalidate(),!1===t.notifyPlugins("beforeUpdate",{mode:e,cancelable:!0}))return;const r=t.buildOrUpdateControllers();t.notifyPlugins("beforeElementsUpdate");let a=0;for(let e=0,n=t.data.datasets.length;e<n;e++){const{controller:n}=t.getDatasetMeta(e),s=!i&&-1===r.indexOf(n);n.buildOrUpdateElements(s),a=Math.max(+n.getMaxOverflow(),a)}t._minPadding=a,t._updateLayout(a),i||g(r,(e=>{e.reset()})),t._updateDatasets(e),t.notifyPlugins("afterUpdate",{mode:e}),t._layers.sort(Fi("z","_idx")),t._lastEvent&&t._eventHandler(t._lastEvent,!0),t.render()}_updateLayout(e){const t=this;if(!1===t.notifyPlugins("beforeLayout",{cancelable:!0}))return;Kn.update(t,t.width,t.height,e);const n=t.chartArea,i=n.width<=0||n.height<=0;t._layers=[],g(t.boxes,(e=>{i&&"chartArea"===e.position||(e.configure&&e.configure(),t._layers.push(...e._layers()))}),t),t._layers.forEach(((e,t)=>{e._idx=t})),t.notifyPlugins("afterLayout")}_updateDatasets(e){const t=this,n="function"==typeof e;if(!1!==t.notifyPlugins("beforeDatasetsUpdate",{mode:e,cancelable:!0})){for(let i=0,r=t.data.datasets.length;i<r;++i)t._updateDataset(i,n?e({datasetIndex:i}):e);t.notifyPlugins("afterDatasetsUpdate",{mode:e})}}_updateDataset(e,t){const n=this,i=n.getDatasetMeta(e),r={meta:i,index:e,mode:t,cancelable:!0};!1!==n.notifyPlugins("beforeDatasetUpdate",r)&&(i.controller._update(t),r.cancelable=!1,n.notifyPlugins("afterDatasetUpdate",r))}render(){const e=this;!1!==e.notifyPlugins("beforeRender",{cancelable:!0})&&(Qt.has(e)?e.attached&&!Qt.running(e)&&Qt.start(e):(e.draw(),Ni({chart:e})))}draw(){const e=this;let t;if(e._resizeBeforeDraw){const{width:t,height:n}=e._resizeBeforeDraw;e._resize(t,n),e._resizeBeforeDraw=null}if(e.clear(),e.width<=0||e.height<=0)return;if(!1===e.notifyPlugins("beforeDraw",{cancelable:!0}))return;const n=e._layers;for(t=0;t<n.length&&n[t].z<=0;++t)n[t].draw(e.chartArea);for(e._drawDatasets();t<n.length;++t)n[t].draw(e.chartArea);e.notifyPlugins("afterDraw")}_getSortedDatasetMetas(e){const t=this._sortedMetasets,n=[];let i,r;for(i=0,r=t.length;i<r;++i){const r=t[i];e&&!r.visible||n.push(r)}return n}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){const e=this;if(!1===e.notifyPlugins("beforeDatasetsDraw",{cancelable:!0}))return;const t=e.getSortedVisibleDatasetMetas();for(let n=t.length-1;n>=0;--n)e._drawDataset(t[n]);e.notifyPlugins("afterDatasetsDraw")}_drawDataset(e){const t=this,n=t.ctx,i=e._clip,r=t.chartArea,a={meta:e,index:e.index,cancelable:!0};!1!==t.notifyPlugins("beforeDatasetDraw",a)&&(Ve(n,{left:!1===i.left?0:r.left-i.left,right:!1===i.right?t.width:r.right+i.right,top:!1===i.top?0:r.top-i.top,bottom:!1===i.bottom?t.height:r.bottom+i.bottom}),e.controller.draw(),Ue(n),a.cancelable=!1,t.notifyPlugins("afterDatasetDraw",a))}getElementsAtEventForMode(e,t,n,i){const r=In.modes[t];return"function"==typeof r?r(this,e,n,i):[]}getDatasetMeta(e){const t=this.data.datasets[e],n=this._metasets;let i=n.filter((e=>e&&e._dataset===t)).pop();return i||(i=n[e]={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:t&&t.order||0,index:e,_dataset:t,_parsed:[],_sorted:!1}),i}getContext(){return this.$context||(this.$context={chart:this,type:"chart"})}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(e){const t=this.data.datasets[e];if(!t)return!1;const n=this.getDatasetMeta(e);return"boolean"==typeof n.hidden?!n.hidden:!t.hidden}setDatasetVisibility(e,t){this.getDatasetMeta(e).hidden=!t}toggleDataVisibility(e){this._hiddenIndices[e]=!this._hiddenIndices[e]}getDataVisibility(e){return!this._hiddenIndices[e]}_updateDatasetVisibility(e,t){const n=this,i=t?"show":"hide",r=n.getDatasetMeta(e),a=r.controller._resolveAnimations(void 0,i);n.setDatasetVisibility(e,t),a.update(r,{visible:t}),n.update((t=>t.datasetIndex===e?i:void 0))}hide(e){this._updateDatasetVisibility(e,!1)}show(e){this._updateDatasetVisibility(e,!0)}_destroyDatasetMeta(e){const t=this,n=t._metasets&&t._metasets[e];n&&n.controller&&(n.controller._destroy(),delete t._metasets[e])}destroy(){const e=this,{canvas:t,ctx:n}=e;let i,r;for(e.stop(),Qt.remove(e),i=0,r=e.data.datasets.length;i<r;++i)e._destroyDatasetMeta(i);e.config.clearCache(),t&&(e.unbindEvents(),Ne(t,n),e.platform.releaseContext(n),e.canvas=null,e.ctx=null),e.notifyPlugins("destroy"),delete Ui[e.id]}toBase64Image(...e){return this.canvas.toDataURL(...e)}bindEvents(){const e=this,t=e._listeners,n=e.platform,i=(i,r)=>{n.addEventListener(e,i,r),t[i]=r},r=(i,r)=>{t[i]&&(n.removeEventListener(e,i,r),delete t[i])};let a=function(t,n,i){t.offsetX=n,t.offsetY=i,e._eventHandler(t)};if(g(e.options.events,(e=>i(e,a))),e.options.responsive){let t;a=(t,n)=>{e.canvas&&e.resize(t,n)};const s=()=>{r("attach",s),e.attached=!0,e.resize(),i("resize",a),i("detach",t)};t=()=>{e.attached=!1,r("resize",a),i("attach",s)},n.isAttached(e.canvas)?s():t()}else e.attached=!0}unbindEvents(){const e=this,t=e._listeners;t&&(e._listeners={},g(t,((t,n)=>{e.platform.removeEventListener(e,n,t)})))}updateHoverStyle(e,t,n){const i=n?"set":"remove";let r,a,s,o;for("dataset"===t&&(r=this.getDatasetMeta(e[0].datasetIndex),r.controller["_"+i+"DatasetHoverStyle"]()),s=0,o=e.length;s<o;++s){a=e[s];const t=a&&this.getDatasetMeta(a.datasetIndex).controller;t&&t[i+"HoverStyle"](a.element,a.datasetIndex,a.index)}}getActiveElements(){return this._active||[]}setActiveElements(e){const t=this,n=t._active||[],i=e.map((({datasetIndex:e,index:n})=>{const i=t.getDatasetMeta(e);if(!i)throw new Error("No dataset found at index "+e);return{datasetIndex:e,element:i.data[n],index:n}}));!y(i,n)&&(t._active=i,t._updateHoverStyles(i,n))}notifyPlugins(e,t,n){return this._plugins.notify(this,e,t,n)}_updateHoverStyles(e,t,n){const i=this,r=i.options.hover,a=(e,t)=>e.filter((e=>!t.some((t=>e.datasetIndex===t.datasetIndex&&e.index===t.index)))),s=a(t,e),o=n?e:a(e,t);s.length&&i.updateHoverStyle(s,r.mode,!1),o.length&&r.mode&&i.updateHoverStyle(o,r.mode,!0)}_eventHandler(e,t){const n=this,i={event:e,replay:t,cancelable:!0},r=t=>(t.options.events||this.options.events).includes(e.type);if(!1===n.notifyPlugins("beforeEvent",i,r))return;const a=n._handleEvent(e,t);return i.cancelable=!1,n.notifyPlugins("afterEvent",i,r),(a||i.changed)&&n.render(),n}_handleEvent(e,t){const n=this,{_active:i=[],options:r}=n,a=r.hover,s=t;let o=[],d=!1,l=null;return"mouseout"!==e.type&&(o=n.getElementsAtEventForMode(e,a.mode,a,s),l="click"===e.type?n._lastEvent:e),n._lastEvent=null,Be(e,n.chartArea,n._minPadding)&&(p(r.onHover,[e,o,n],n),"mouseup"!==e.type&&"click"!==e.type&&"contextmenu"!==e.type||p(r.onClick,[e,o,n],n)),d=!y(o,i),(d||t)&&(n._active=o,n._updateHoverStyles(o,i,t)),n._lastEvent=l,d}}const qi=()=>g($i.instances,(e=>e._plugins.invalidate())),Gi=!0;function Ki(e,t){const{startAngle:n,endAngle:i,pixelMargin:r,x:a,y:s,outerRadius:o,innerRadius:d}=t;let l=r/o;e.beginPath(),e.arc(a,s,o,n-l,i+l),d>r?(l=r/d,e.arc(a,s,d,i+l,n-l,!0)):e.arc(a,s,r,i+A,n-A),e.closePath(),e.clip()}function Zi(e,t,n,i){return{x:n+e*Math.cos(t),y:i+e*Math.sin(t)}}function Qi(e,t){const{x:n,y:i,startAngle:r,endAngle:a,pixelMargin:s}=t,o=Math.max(t.outerRadius-s,0),d=t.innerRadius+s,{outerStart:l,outerEnd:u,innerStart:c,innerEnd:h}=function(e,t,n,i){const r=Xe(e.options.borderRadius,["outerStart","outerEnd","innerStart","innerEnd"]),a=(n-t)/2,s=Math.min(a,i*t/2),o=e=>{const t=(n-Math.min(a,e))*i/2;return K(e,0,Math.min(a,t))};return{outerStart:o(r.outerStart),outerEnd:o(r.outerEnd),innerStart:K(r.innerStart,0,s),innerEnd:K(r.innerEnd,0,s)}}(t,d,o,a-r),_=o-l,m=o-u,f=r+l/_,p=a-u/m,g=d+c,y=d+h,M=r+c/g,b=a-h/y;if(e.beginPath(),e.arc(n,i,o,f,p),u>0){const t=Zi(m,p,n,i);e.arc(t.x,t.y,u,p,a+A)}const L=Zi(y,a,n,i);if(e.lineTo(L.x,L.y),h>0){const t=Zi(y,b,n,i);e.arc(t.x,t.y,h,a+A,b+Math.PI)}if(e.arc(n,i,d,a-h/d,r+c/d,!0),c>0){const t=Zi(g,M,n,i);e.arc(t.x,t.y,c,M+Math.PI,r-A)}const v=Zi(_,r,n,i);if(e.lineTo(v.x,v.y),l>0){const t=Zi(_,f,n,i);e.arc(t.x,t.y,l,r-A,f)}e.closePath()}Object.defineProperties($i,{defaults:{enumerable:Gi,value:Ce},instances:{enumerable:Gi,value:Ui},overrides:{enumerable:Gi,value:Pe},registry:{enumerable:Gi,value:Yi},version:{enumerable:Gi,value:"3.2.1"},getChart:{enumerable:Gi,value:Ji},register:{enumerable:Gi,value:(...e)=>{Yi.add(...e),qi()}},unregister:{enumerable:Gi,value:(...e)=>{Yi.remove(...e),qi()}}});class Xi extends hi{constructor(e){super(),this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,e&&Object.assign(this,e)}inRange(e,t,n){const i=this.getProps(["x","y"],n),{angle:r,distance:a}=function(e,t){const n=t.x-e.x,i=t.y-e.y,r=Math.sqrt(n*n+i*i);let a=Math.atan2(i,n);return a<-.5*O&&(a+=H),{angle:a,distance:r}}(i,{x:e,y:t}),{startAngle:s,endAngle:o,innerRadius:d,outerRadius:l,circumference:u}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],n);return(u>=H||G(r,s,o))&&a>=d&&a<=l}getCenterPoint(e){const{x:t,y:n,startAngle:i,endAngle:r,innerRadius:a,outerRadius:s}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius"],e),o=(i+r)/2,d=(a+s)/2;return{x:t+Math.cos(o)*d,y:n+Math.sin(o)*d}}tooltipPosition(e){return this.getCenterPoint(e)}draw(e){const t=this,n=t.options,i=n.offset||0;if(t.pixelMargin="inner"===n.borderAlign?.33:0,t.fullCircles=Math.floor(t.circumference/H),!(0===t.circumference||t.innerRadius<0||t.outerRadius<0)){if(e.save(),i&&t.circumference<H){const n=(t.startAngle+t.endAngle)/2;e.translate(Math.cos(n)*i,Math.sin(n)*i)}e.fillStyle=n.backgroundColor,e.strokeStyle=n.borderColor,function(e,t){if(t.fullCircles){t.endAngle=t.startAngle+H,Qi(e,t);for(let n=0;n<t.fullCircles;++n)e.fill()}isNaN(t.circumference)||(t.endAngle=t.startAngle+t.circumference%H),Qi(e,t),e.fill()}(e,t),function(e,t){const{options:n}=t,i="inner"===n.borderAlign;n.borderWidth&&(i?(e.lineWidth=2*n.borderWidth,e.lineJoin="round"):(e.lineWidth=n.borderWidth,e.lineJoin="bevel"),t.fullCircles&&function(e,t,n){const{x:i,y:r,startAngle:a,endAngle:s,pixelMargin:o}=t,d=Math.max(t.outerRadius-o,0),l=t.innerRadius+o;let u;for(n&&(t.endAngle=t.startAngle+H,Ki(e,t),t.endAngle=s,t.endAngle===t.startAngle&&(t.endAngle+=H,t.fullCircles--)),e.beginPath(),e.arc(i,r,l,a+H,a,!0),u=0;u<t.fullCircles;++u)e.stroke();for(e.beginPath(),e.arc(i,r,d,a,a+H),u=0;u<t.fullCircles;++u)e.stroke()}(e,t,i),i&&Ki(e,t),Qi(e,t),e.stroke())}(e,t),e.restore()}}}function er(e,t,n=t){e.lineCap=m(n.borderCapStyle,t.borderCapStyle),e.setLineDash(m(n.borderDash,t.borderDash)),e.lineDashOffset=m(n.borderDashOffset,t.borderDashOffset),e.lineJoin=m(n.borderJoinStyle,t.borderJoinStyle),e.lineWidth=m(n.borderWidth,t.borderWidth),e.strokeStyle=m(n.borderColor,t.borderColor)}function tr(e,t,n){e.lineTo(n.x,n.y)}function nr(e,t,n={}){const i=e.length,{start:r=0,end:a=i-1}=n,{start:s,end:o}=t,d=Math.max(r,s),l=Math.min(a,o),u=r<s&&a<s||r>o&&a>o;return{count:i,start:d,loop:t.loop,ilen:l<d&&!u?i+l-d:l-d}}function ir(e,t,n,i){const{points:r,options:a}=t,{count:s,start:o,loop:d,ilen:l}=nr(r,n,i),u=function(e){return e.stepped?Je:e.tension||"monotone"===e.cubicInterpolationMode?$e:tr}(a);let c,h,_,{move:m=!0,reverse:f}=i||{};for(c=0;c<=l;++c)h=r[(o+(f?l-c:c))%s],h.skip||(m?(e.moveTo(h.x,h.y),m=!1):u(e,_,h,f,a.stepped),_=h);return d&&(h=r[(o+(f?l:0))%s],u(e,_,h,f,a.stepped)),!!d}function rr(e,t,n,i){const r=t.points,{count:a,start:s,ilen:o}=nr(r,n,i),{move:d=!0,reverse:l}=i||{};let u,c,h,_,m,f,p=0,g=0;const y=e=>(s+(l?o-e:e))%a,M=()=>{_!==m&&(e.lineTo(p,m),e.lineTo(p,_),e.lineTo(p,f))};for(d&&(c=r[y(0)],e.moveTo(c.x,c.y)),u=0;u<=o;++u){if(c=r[y(u)],c.skip)continue;const t=c.x,n=c.y,i=0|t;i===h?(n<_?_=n:n>m&&(m=n),p=(g*p+t)/++g):(M(),e.lineTo(t,n),h=i,g=0,_=m=n),f=n}M()}function ar(e){const t=e.options,n=t.borderDash&&t.borderDash.length;return e._decimated||e._loop||t.tension||"monotone"===t.cubicInterpolationMode||t.stepped||n?ir:rr}Xi.id="arc",Xi.defaults={borderAlign:"center",borderColor:"#fff",borderRadius:0,borderWidth:2,offset:0,angle:void 0},Xi.defaultRoutes={backgroundColor:"backgroundColor"};const sr="function"==typeof Path2D;class or extends hi{constructor(e){super(),this.animated=!0,this.options=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,e&&Object.assign(this,e)}updateControlPoints(e){const t=this,n=t.options;if((n.tension||"monotone"===n.cubicInterpolationMode)&&!n.stepped&&!t._pointsUpdated){const i=n.spanGaps?t._loop:t._fullLoop;Tt(t._points,n,e,i),t._pointsUpdated=!0}}set points(e){const t=this;t._points=e,delete t._segments,delete t._path,t._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=function(e,t){const n=e.points,i=e.options.spanGaps,r=n.length;if(!r)return[];const a=!!e._loop,{start:s,end:o}=function(e,t,n,i){let r=0,a=t-1;if(n&&!i)for(;r<t&&!e[r].skip;)r++;for(;r<t&&e[r].skip;)r++;for(r%=t,n&&(a+=r);a>r&&e[a%t].skip;)a--;return a%=t,{start:r,end:a}}(n,r,a,i);return function(e,t,n){return n&&n.setContext&&t?function(e,t,n){const i=t.length,r=[];let a=e[0].start,s=a;for(const d of e){let e,l,u=t[a%i];for(s=a+1;s<=d.end;s++){const c=t[s%i];l={backgroundColor:(o=n.setContext({type:"segment",p0:u,p1:c})).backgroundColor,borderCapStyle:o.borderCapStyle,borderDash:o.borderDash,borderDashOffset:o.borderDashOffset,borderJoinStyle:o.borderJoinStyle,borderWidth:o.borderWidth,borderColor:o.borderColor},Zt(l,e)&&(r.push({start:a,end:s-1,loop:d.loop,style:e}),e=l,a=s-1),u=c,e=l}a<s-1&&(r.push({start:a,end:s-1,loop:d.loop,style:l}),a=s-1)}var o;return r}(e,t,n):e}(!0===i?[{start:s,end:o,loop:a}]:function(e,t,n,i){const r=e.length,a=[];let s,o=t,d=e[t];for(s=t+1;s<=n;++s){const n=e[s%r];n.skip||n.stop?d.skip||(i=!1,a.push({start:t%r,end:(s-1)%r,loop:i}),t=o=n.stop?s:null):(o=s,d.skip&&(t=s)),d=n}return null!==o&&a.push({start:t%r,end:o%r,loop:i}),a}(n,s,o<s?o+r:o,!!e._fullLoop&&0===s&&o===r-1),n,t)}(this,this.options.segment))}first(){const e=this.segments,t=this.points;return e.length&&t[e[0].start]}last(){const e=this.segments,t=this.points,n=e.length;return n&&t[e[n-1].end]}interpolate(e,t){const n=this,i=n.options,r=e[t],a=n.points,s=Kt(n,{property:t,start:r,end:r});if(!s.length)return;const o=[],d=function(e){return e.stepped?Ft:e.tension||"monotone"===e.cubicInterpolationMode?Nt:It}(i);let l,u;for(l=0,u=s.length;l<u;++l){const{start:n,end:u}=s[l],c=a[n],h=a[u];if(c===h){o.push(c);continue}const _=d(c,h,Math.abs((r-c[t])/(h[t]-c[t])),i.stepped);_[t]=e[t],o.push(_)}return 1===o.length?o[0]:o}pathSegment(e,t,n){return ar(this)(e,this,t,n)}path(e,t,n){const i=this,r=i.segments,a=ar(i);let s=i._loop;t=t||0,n=n||i.points.length-t;for(const o of r)s&=a(e,i,o,{start:t,end:t+n-1});return!!s}draw(e,t,n,i){const r=this,a=r.options||{};(r.points||[]).length&&a.borderWidth&&(e.save(),function(e,t,n,i){sr&&1===t.segments.length?function(e,t,n,i){let r=t._path;r||(r=t._path=new Path2D,t.path(r,n,i)&&r.closePath()),er(e,t.options),e.stroke(r)}(e,t,n,i):function(e,t,n,i){const{segments:r,options:a}=t,s=ar(t);for(const o of r)er(e,a,o.style),e.beginPath(),s(e,t,o,{start:n,end:n+i-1})&&e.closePath(),e.stroke()}(e,t,n,i)}(e,r,n,i),e.restore(),r.animated&&(r._pointsUpdated=!1,r._path=void 0))}}function dr(e,t,n,i){const r=e.options,{[n]:a}=e.getProps([n],i);return Math.abs(t-a)<r.radius+r.hitRadius}or.id="line",or.defaults={borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0},or.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"},or.descriptors={_scriptable:!0,_indexable:e=>"borderDash"!==e&&"fill"!==e};class lr extends hi{constructor(e){super(),this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,e&&Object.assign(this,e)}inRange(e,t,n){const i=this.options,{x:r,y:a}=this.getProps(["x","y"],n);return Math.pow(e-r,2)+Math.pow(t-a,2)<Math.pow(i.hitRadius+i.radius,2)}inXRange(e,t){return dr(this,e,"x",t)}inYRange(e,t){return dr(this,e,"y",t)}getCenterPoint(e){const{x:t,y:n}=this.getProps(["x","y"],e);return{x:t,y:n}}size(e){let t=(e=e||this.options||{}).radius||0;return t=Math.max(t,t&&e.hoverRadius||0),2*(t+(t&&e.borderWidth||0))}draw(e){const t=this,n=t.options;t.skip||n.radius<.1||(e.strokeStyle=n.borderColor,e.lineWidth=n.borderWidth,e.fillStyle=n.backgroundColor,ze(e,n,t.x,t.y))}getRange(){const e=this.options||{};return e.radius+e.hitRadius}}function ur(e,t){const{x:n,y:i,base:r,width:a,height:s}=e.getProps(["x","y","base","width","height"],t);let o,d,l,u,c;return e.horizontal?(c=s/2,o=Math.min(n,r),d=Math.max(n,r),l=i-c,u=i+c):(c=a/2,o=n-c,d=n+c,l=Math.min(i,r),u=Math.max(i,r)),{left:o,top:l,right:d,bottom:u}}function cr(e){let t=e.options.borderSkipped;const n={};return t?(t=e.horizontal?hr(t,"left","right",e.base>e.x):hr(t,"bottom","top",e.base<e.y),n[t]=!0,n):n}function hr(e,t,n,i){var r,a,s;return i?(s=n,e=_r(e=(r=e)===(a=t)?s:r===s?a:r,n,t)):e=_r(e,t,n),e}function _r(e,t,n){return"start"===e?t:"end"===e?n:e}function mr(e,t,n,i){return e?0:Math.max(Math.min(t,i),n)}function fr(e,t,n,i){const r=null===t,a=null===n,s=e&&!(r&&a)&&ur(e,i);return s&&(r||t>=s.left&&t<=s.right)&&(a||n>=s.top&&n<=s.bottom)}function pr(e,t){e.rect(t.x,t.y,t.w,t.h)}lr.id="point",lr.defaults={borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0},lr.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};class gr extends hi{constructor(e){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,e&&Object.assign(this,e)}draw(e){const t=this.options,{inner:n,outer:i}=function(e){const t=ur(e),n=t.right-t.left,i=t.bottom-t.top,r=function(e,t,n){const i=e.options.borderWidth,r=cr(e),a=et(i);return{t:mr(r.top,a.top,0,n),r:mr(r.right,a.right,0,t),b:mr(r.bottom,a.bottom,0,n),l:mr(r.left,a.left,0,t)}}(e,n/2,i/2),a=function(e,t,n){const{enableBorderRadius:i}=e.getProps(["enableBorderRadius"]),r=e.options.borderRadius,a=tt(r),s=Math.min(t,n),o=cr(e),d=i||c(r);return{topLeft:mr(!d||o.top||o.left,a.topLeft,0,s),topRight:mr(!d||o.top||o.right,a.topRight,0,s),bottomLeft:mr(!d||o.bottom||o.left,a.bottomLeft,0,s),bottomRight:mr(!d||o.bottom||o.right,a.bottomRight,0,s)}}(e,n/2,i/2);return{outer:{x:t.left,y:t.top,w:n,h:i,radius:a},inner:{x:t.left+r.l,y:t.top+r.t,w:n-r.l-r.r,h:i-r.t-r.b,radius:{topLeft:Math.max(0,a.topLeft-Math.max(r.t,r.l)),topRight:Math.max(0,a.topRight-Math.max(r.t,r.r)),bottomLeft:Math.max(0,a.bottomLeft-Math.max(r.b,r.l)),bottomRight:Math.max(0,a.bottomRight-Math.max(r.b,r.r))}}}}(this),r=(a=i.radius).topLeft||a.topRight||a.bottomLeft||a.bottomRight?Ge:pr;var a;e.save(),i.w===n.w&&i.h===n.h||(e.beginPath(),r(e,i),e.clip(),r(e,n),e.fillStyle=t.borderColor,e.fill("evenodd")),e.beginPath(),r(e,n),e.fillStyle=t.backgroundColor,e.fill(),e.restore()}inRange(e,t,n){return fr(this,e,t,n)}inXRange(e,t){return fr(this,e,null,t)}inYRange(e,t){return fr(this,null,e,t)}getCenterPoint(e){const{x:t,y:n,base:i,horizontal:r}=this.getProps(["x","y","base","horizontal"],e);return{x:r?(t+i)/2:t,y:r?n:(n+i)/2}}getRange(e){return"x"===e?this.width/2:this.height/2}}gr.id="bar",gr.defaults={borderSkipped:"start",borderWidth:0,borderRadius:0,enableBorderRadius:!0,pointStyle:void 0},gr.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};var yr=Object.freeze({__proto__:null,ArcElement:Xi,LineElement:or,PointElement:lr,BarElement:gr});function Mr(e){if(e._decimated){const t=e._data;delete e._decimated,delete e._data,Object.defineProperty(e,"data",{value:t})}}function br(e){e.data.datasets.forEach((e=>{Mr(e)}))}var Lr={id:"decimation",defaults:{algorithm:"min-max",enabled:!1},beforeElementsUpdate:(e,t,n)=>{if(!n.enabled)return void br(e);const i=e.width;e.data.datasets.forEach(((t,r)=>{const{_data:a,indexAxis:s}=t,o=e.getDatasetMeta(r),d=a||t.data;if("y"===rt([s,e.options.indexAxis]))return;if("line"!==o.type)return;const u=e.scales[o.xAxisID];if("linear"!==u.type&&"time"!==u.type)return;if(e.options.parsing)return;let c,{start:h,count:_}=function(e,t){const n=t.length;let i,r=0;const{iScale:a}=e,{min:s,max:o,minDefined:d,maxDefined:l}=a.getUserBounds();return d&&(r=K(st(t,a.axis,s).lo,0,n-1)),i=l?K(st(t,a.axis,o).hi+1,r,n)-r:n-r,{start:r,count:i}}(o,d);if(_<=4*i)Mr(t);else{switch(l(a)&&(t._data=d,delete t.data,Object.defineProperty(t,"data",{configurable:!0,enumerable:!0,get:function(){return this._decimated},set:function(e){this._data=e}})),n.algorithm){case"lttb":c=function(e,t,n,i,r){const a=r.samples||i;if(a>=n)return e.slice(t,t+n);const s=[],o=(n-2)/(a-2);let d=0;const l=t+n-1;let u,c,h,_,m,f=t;for(s[d++]=e[f],u=0;u<a-2;u++){let i,r=0,a=0;const l=Math.floor((u+1)*o)+1+t,p=Math.min(Math.floor((u+2)*o)+1,n)+t,g=p-l;for(i=l;i<p;i++)r+=e[i].x,a+=e[i].y;r/=g,a/=g;const y=Math.floor(u*o)+1+t,M=Math.floor((u+1)*o)+1+t,{x:b,y:L}=e[f];for(h=_=-1,i=y;i<M;i++)_=.5*Math.abs((b-r)*(e[i].y-L)-(b-e[i].x)*(a-L)),_>h&&(h=_,c=e[i],m=i);s[d++]=c,f=m}return s[d++]=e[l],s}(d,h,_,i,n);break;case"min-max":c=function(e,t,n,i){let r,a,s,o,d,u,c,h,_,m,f=0,p=0;const g=[],y=t+n-1,M=e[t].x,b=e[y].x-M;for(r=t;r<t+n;++r){a=e[r],s=(a.x-M)/b*i,o=a.y;const t=0|s;if(t===d)o<_?(_=o,u=r):o>m&&(m=o,c=r),f=(p*f+a.x)/++p;else{const n=r-1;if(!l(u)&&!l(c)){const t=Math.min(u,c),i=Math.max(u,c);t!==h&&t!==n&&g.push({...e[t],x:f}),i!==h&&i!==n&&g.push({...e[i],x:f})}r>0&&n!==h&&g.push(e[n]),g.push(a),d=t,p=0,_=m=o,u=c=h=r}}return g}(d,h,_,i);break;default:throw new Error(`Unsupported decimation algorithm '${n.algorithm}'`)}t._decimated=c}}))},destroy(e){br(e)}};function vr(e,t,n){const i=function(e){const t=e.options,n=t.fill;let i=m(n&&n.target,n);return void 0===i&&(i=!!t.backgroundColor),!1!==i&&null!==i&&(!0===i?"origin":i)}(e);if(c(i))return!isNaN(i.value)&&i;let r=parseFloat(i);return h(r)&&Math.floor(r)===r?("-"!==i[0]&&"+"!==i[0]||(r=t+r),!(r===t||r<0||r>=n)&&r):["origin","start","end","stack"].indexOf(i)>=0&&i}class wr{constructor(e){this.x=e.x,this.y=e.y,this.radius=e.radius}pathSegment(e,t,n){const{x:i,y:r,radius:a}=this;return t=t||{start:0,end:H},e.arc(i,r,a,t.end,t.start,!0),!n.bounds}interpolate(e){const{x:t,y:n,radius:i}=this,r=e.angle;return{x:t+Math.cos(r)*i,y:n+Math.sin(r)*i,angle:r}}}const Yr=e=>"line"===e.type&&!e.hidden;function kr(e,t,n){const i=[];for(let r=0;r<n.length;r++){const a=n[r],{first:s,last:o,point:d}=Dr(a,t,"x");if(!(!d||s&&o))if(s)i.unshift(d);else if(e.push(d),!o)break}e.push(...i)}function Dr(e,t,n){const i=e.interpolate(t,n);if(!i)return{};const r=i[n],a=e.segments,s=e.points;let o=!1,d=!1;for(let e=0;e<a.length;e++){const t=a[e],i=s[t.start][n],l=s[t.end][n];if(r>=i&&r<=l){o=r===i,d=r===l;break}}return{first:o,last:d,point:i}}function xr(e,t){let n=[],i=!1;return u(e)?(i=!0,n=e):n=function(e,t){const{x:n=null,y:i=null}=e||{},r=t.points,a=[];return t.segments.forEach((e=>{const t=r[e.start],s=r[e.end];null!==i?(a.push({x:t.x,y:i}),a.push({x:s.x,y:i})):null!==n&&(a.push({x:n,y:t.y}),a.push({x:n,y:s.y}))})),a}(e,t),n.length?new or({points:n,options:{tension:0},_loop:i,_fullLoop:i}):null}function Tr(e,t,n){let i=e[t].fill;const r=[t];let a;if(!n)return i;for(;!1!==i&&-1===r.indexOf(i);){if(!h(i))return i;if(a=e[i],!a)return!1;if(a.visible)return i;r.push(i),i=a.fill}return!1}function Sr(e,t,n){e.beginPath(),t.path(e),e.lineTo(t.last().x,n),e.lineTo(t.first().x,n),e.closePath(),e.clip()}function Or(e,t,n,i){if(i)return;let r=t[e],a=n[e];return"angle"===e&&(r=q(r),a=q(a)),{property:e,start:r,end:a}}function Hr(e,t,n,i){return e&&t?i(e[n],t[n]):e?e[n]:t?t[n]:0}function jr(e,t,n){const{top:i,bottom:r}=t.chart.chartArea,{property:a,start:s,end:o}=n||{};"x"===a&&(e.beginPath(),e.rect(s,i,o-s,r-i),e.clip())}function Pr(e,t,n,i){const r=t.interpolate(n,i);r&&e.lineTo(r.x,r.y)}function Er(e,t){const{line:n,target:i,property:r,color:a,scale:s}=t,o=function(e,t,n){const i=e.segments,r=e.points,a=t.points,s=[];for(const e of i){const i=Or(n,r[e.start],r[e.end],e.loop);if(!t.segments){s.push({source:e,target:i,start:r[e.start],end:r[e.end]});continue}const o=Kt(t,i);for(const t of o){const o=Or(n,a[t.start],a[t.end],t.loop),d=Gt(e,r,o);for(const e of d)s.push({source:e,target:t,start:{[n]:Hr(i,o,"start",Math.max)},end:{[n]:Hr(i,o,"end",Math.min)}})}}return s}(n,i,r);for(const{source:t,target:d,start:l,end:u}of o){const{style:{backgroundColor:o=a}={}}=t;e.save(),e.fillStyle=o,jr(e,s,Or(r,l,u)),e.beginPath();const c=!!n.pathSegment(e,t);c?e.closePath():Pr(e,i,u,r);const h=!!i.pathSegment(e,d,{move:c,reverse:!0}),_=c&&h;_||Pr(e,i,l,r),e.closePath(),e.fill(_?"evenodd":"nonzero"),e.restore()}}function Ar(e,t,n){const i=function(e){const{chart:t,fill:n,line:i}=e;if(h(n))return function(e,t){const n=e.getDatasetMeta(t);return n&&e.isDatasetVisible(t)?n.dataset:null}(t,n);if("stack"===n)return function(e){const{chart:t,scale:n,index:i,line:r}=e,a=[],s=r.segments,o=r.points,d=function(e,t){const n=[],i=e.getSortedVisibleDatasetMetas();for(let e=0;e<i.length;e++){const r=i[e];if(r.index===t)break;Yr(r)&&n.unshift(r.dataset)}return n}(t,i);d.push(xr({x:null,y:n.bottom},r));for(let e=0;e<s.length;e++){const t=s[e];for(let e=t.start;e<=t.end;e++)kr(a,o[e],d)}return new or({points:a,options:{}})}(e);const r=function(e){return(e.scale||{}).getPointPositionForValue?function(e){const{scale:t,fill:n}=e,i=t.options,r=t.getLabels().length,a=[],s=i.reverse?t.max:t.min,o=i.reverse?t.min:t.max;let d,l,u;if(u="start"===n?s:"end"===n?o:c(n)?n.value:t.getBaseValue(),i.grid.circular)return l=t.getPointPositionForValue(0,s),new wr({x:l.x,y:l.y,radius:t.getDistanceFromCenterForValue(u)});for(d=0;d<r;++d)a.push(t.getPointPositionForValue(d,u));return a}(e):function(e){const{scale:t={},fill:n}=e;let i,r=null;return"start"===n?r=t.bottom:"end"===n?r=t.top:c(n)?r=t.getPixelForValue(n.value):t.getBasePixel&&(r=t.getBasePixel()),h(r)?(i=t.isHorizontal(),{x:i?r:null,y:i?null:r}):null}(e)}(e);return r instanceof wr?r:xr(r,i)}(t),{line:r,scale:a,axis:s}=t,o=r.options,d=o.fill,l=o.backgroundColor,{above:u=l,below:_=l}=d||{};i&&r.points.length&&(Ve(e,n),function(e,t){const{line:n,target:i,above:r,below:a,area:s,scale:o}=t,d=n._loop?"angle":t.axis;e.save(),"x"===d&&a!==r&&(Sr(e,i,s.top),Er(e,{line:n,target:i,color:r,scale:o,property:d}),e.restore(),e.save(),Sr(e,i,s.bottom)),Er(e,{line:n,target:i,color:a,scale:o,property:d}),e.restore()}(e,{line:r,target:i,above:u,below:_,area:n,scale:a,axis:s}),Ue(e))}var Rr={id:"filler",afterDatasetsUpdate(e,t,n){const i=(e.data.datasets||[]).length,r=[];let a,s,o,d;for(s=0;s<i;++s)a=e.getDatasetMeta(s),o=a.dataset,d=null,o&&o.options&&o instanceof or&&(d={visible:e.isDatasetVisible(s),index:s,fill:vr(o,s,i),chart:e,axis:a.controller.options.indexAxis,scale:a.vScale,line:o}),a.$filler=d,r.push(d);for(s=0;s<i;++s)d=r[s],d&&!1!==d.fill&&(d.fill=Tr(r,s,n.propagate))},beforeDraw(e,t,n){const i="beforeDraw"===n.drawTime,r=e.getSortedVisibleDatasetMetas(),a=e.chartArea;for(let t=r.length-1;t>=0;--t){const n=r[t].$filler;n&&(n.line.updateControlPoints(a),i&&Ar(e.ctx,n,a))}},beforeDatasetsDraw(e,t,n){if("beforeDatasetsDraw"!==n.drawTime)return;const i=e.getSortedVisibleDatasetMetas();for(let t=i.length-1;t>=0;--t){const n=i[t].$filler;n&&Ar(e.ctx,n,e.chartArea)}},beforeDatasetDraw(e,t,n){const i=t.meta.$filler;i&&!1!==i.fill&&"beforeDatasetDraw"===n.drawTime&&Ar(e.ctx,i,e.chartArea)},defaults:{propagate:!0,drawTime:"beforeDatasetDraw"}};const Cr=(e,t)=>{let{boxHeight:n=t,boxWidth:i=t}=e;return e.usePointStyle&&(n=Math.min(n,t),i=Math.min(i,t)),{boxWidth:i,boxHeight:n,itemHeight:Math.max(t,n)}};class Wr extends hi{constructor(e){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=e.chart,this.options=e.options,this.ctx=e.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(e,t,n){const i=this;i.maxWidth=e,i.maxHeight=t,i._margins=n,i.setDimensions(),i.buildLabels(),i.fit()}setDimensions(){const e=this;e.isHorizontal()?(e.width=e.maxWidth,e.left=0,e.right=e.width):(e.height=e.maxHeight,e.top=0,e.bottom=e.height)}buildLabels(){const e=this,t=e.options.labels||{};let n=p(t.generateLabels,[e.chart],e)||[];t.filter&&(n=n.filter((n=>t.filter(n,e.chart.data)))),t.sort&&(n=n.sort(((n,i)=>t.sort(n,i,e.chart.data)))),e.options.reverse&&n.reverse(),e.legendItems=n}fit(){const e=this,{options:t,ctx:n}=e;if(!t.display)return void(e.width=e.height=0);const i=t.labels,r=it(i.font),a=r.size,s=e._computeTitleHeight(),{boxWidth:o,itemHeight:d}=Cr(i,a);let l,u;n.font=r.string,e.isHorizontal()?(l=e.maxWidth,u=e._fitRows(s,a,o,d)+10):(u=e.maxHeight,l=e._fitCols(s,a,o,d)+10),e.width=Math.min(l,t.maxWidth||e.maxWidth),e.height=Math.min(u,t.maxHeight||e.maxHeight)}_fitRows(e,t,n,i){const r=this,{ctx:a,maxWidth:s,options:{labels:{padding:o}}}=r,d=r.legendHitBoxes=[],l=r.lineWidths=[0],u=i+o;let c=e;a.textAlign="left",a.textBaseline="middle";let h=-1,_=-u;return r.legendItems.forEach(((e,r)=>{const m=n+t/2+a.measureText(e.text).width;(0===r||l[l.length-1]+m+2*o>s)&&(c+=u,l[l.length-(r>0?0:1)]=0,_+=u,h++),d[r]={left:0,top:_,row:h,width:m,height:i},l[l.length-1]+=m+o})),c}_fitCols(e,t,n,i){const r=this,{ctx:a,maxHeight:s,options:{labels:{padding:o}}}=r,d=r.legendHitBoxes=[],l=r.columnSizes=[],u=s-e;let c=o,h=0,_=0,m=0,f=0,p=0;return r.legendItems.forEach(((e,r)=>{const s=n+t/2+a.measureText(e.text).width;r>0&&_+t+2*o>u&&(c+=h+o,l.push({width:h,height:_}),m+=h+o,p++,f=0,h=_=0),h=Math.max(h,s),_+=t+o,d[r]={left:m,top:f,col:p,width:s,height:i},f+=i+o})),c+=h,l.push({width:h,height:_}),c}adjustHitBoxes(){const e=this;if(!e.options.display)return;const t=e._computeTitleHeight(),{legendHitBoxes:n,options:{align:i,labels:{padding:r}}}=e;if(this.isHorizontal()){let a=0,o=s(i,e.left+r,e.right-e.lineWidths[a]);for(const d of n)a!==d.row&&(a=d.row,o=s(i,e.left+r,e.right-e.lineWidths[a])),d.top+=e.top+t+r,d.left=o,o+=d.width+r}else{let a=0,o=s(i,e.top+t+r,e.bottom-e.columnSizes[a].height);for(const d of n)d.col!==a&&(a=d.col,o=s(i,e.top+t+r,e.bottom-e.columnSizes[a].height)),d.top=o,d.left+=e.left+r,o+=d.height+r}}isHorizontal(){return"top"===this.options.position||"bottom"===this.options.position}draw(){const e=this;if(e.options.display){const t=e.ctx;Ve(t,e),e._draw(),Ue(t)}}_draw(){const e=this,{options:t,columnSizes:n,lineWidths:i,ctx:r}=e,{align:a,labels:o}=t,d=Ce.color,l=Vt(t.rtl,e.left,e.width),u=it(o.font),{color:c,padding:h}=o,_=u.size,f=_/2;let p;e.drawTitle(),r.textAlign=l.textAlign("left"),r.textBaseline="middle",r.lineWidth=.5,r.font=u.string;const{boxWidth:g,boxHeight:y,itemHeight:M}=Cr(o,_),b=e.isHorizontal(),L=this._computeTitleHeight();p=b?{x:s(a,e.left+h,e.right-i[0]),y:e.top+h+L,line:0}:{x:e.left+h,y:s(a,e.top+L+h,e.bottom-n[0].height),line:0},Ut(e.ctx,t.textDirection);const v=M+h;e.legendItems.forEach(((t,w)=>{r.strokeStyle=t.fontColor||c,r.fillStyle=t.fontColor||c;const Y=r.measureText(t.text).width,k=l.textAlign(t.textAlign||(t.textAlign=o.textAlign)),D=g+_/2+Y;let x=p.x,T=p.y;l.setWidth(e.width),b?w>0&&x+D+h>e.right&&(T=p.y+=v,p.line++,x=p.x=s(a,e.left+h,e.right-i[p.line])):w>0&&T+v>e.bottom&&(x=p.x=x+n[p.line].width+h,p.line++,T=p.y=s(a,e.top+L+h,e.bottom-n[p.line].height)),function(e,t,n){if(isNaN(g)||g<=0||isNaN(y)||y<0)return;r.save();const i=m(n.lineWidth,1);if(r.fillStyle=m(n.fillStyle,d),r.lineCap=m(n.lineCap,"butt"),r.lineDashOffset=m(n.lineDashOffset,0),r.lineJoin=m(n.lineJoin,"miter"),r.lineWidth=i,r.strokeStyle=m(n.strokeStyle,d),r.setLineDash(m(n.lineDash,[])),o.usePointStyle){const a={radius:g*Math.SQRT2/2,pointStyle:n.pointStyle,rotation:n.rotation,borderWidth:i},s=l.xPlus(e,g/2);ze(r,a,s,t+f)}else{const a=t+Math.max((_-y)/2,0),s=l.leftForLtr(e,g),o=tt(n.borderRadius);r.beginPath(),Object.values(o).some((e=>0!==e))?Ge(r,{x:s,y:a,w:g,h:y,radius:o}):r.rect(s,a,g,y),r.fill(),0!==i&&r.stroke()}r.restore()}(l.x(x),T,t),x=((e,t,n)=>"right"===e?n:"center"===e?(t+n)/2:t)(k,x+g+f,e.right),function(e,t,n){qe(r,n.text,e,t+M/2,u,{strikethrough:n.hidden,textAlign:n.textAlign})}(l.x(x),T,t),b?p.x+=D+h:p.y+=v})),Jt(e.ctx,t.textDirection)}drawTitle(){const e=this,t=e.options,n=t.title,i=it(n.font),r=nt(n.padding);if(!n.display)return;const o=Vt(t.rtl,e.left,e.width),d=e.ctx,l=n.position,u=i.size/2,c=r.top+u;let h,_=e.left,m=e.width;if(this.isHorizontal())m=Math.max(...e.lineWidths),h=e.top+c,_=s(t.align,_,e.right-m);else{const n=e.columnSizes.reduce(((e,t)=>Math.max(e,t.height)),0);h=c+s(t.align,e.top,e.bottom-n-t.labels.padding-e._computeTitleHeight())}const f=s(l,_,_+m);d.textAlign=o.textAlign(a(l)),d.textBaseline="middle",d.strokeStyle=n.color,d.fillStyle=n.color,d.font=i.string,qe(d,n.text,f,h,i)}_computeTitleHeight(){const e=this.options.title,t=it(e.font),n=nt(e.padding);return e.display?t.lineHeight+n.height:0}_getLegendItemAt(e,t){const n=this;let i,r,a;if(e>=n.left&&e<=n.right&&t>=n.top&&t<=n.bottom)for(a=n.legendHitBoxes,i=0;i<a.length;++i)if(r=a[i],e>=r.left&&e<=r.left+r.width&&t>=r.top&&t<=r.top+r.height)return n.legendItems[i];return null}handleEvent(e){const t=this,n=t.options;if(!function(e,t){return!("mousemove"!==e||!t.onHover&&!t.onLeave)||!(!t.onClick||"click"!==e&&"mouseup"!==e)}(e.type,n))return;const i=t._getLegendItemAt(e.x,e.y);if("mousemove"===e.type){const s=t._hoveredItem,o=(a=i,null!==(r=s)&&null!==a&&r.datasetIndex===a.datasetIndex&&r.index===a.index);s&&!o&&p(n.onLeave,[e,s,t],t),t._hoveredItem=i,i&&!o&&p(n.onHover,[e,i,t],t)}else i&&p(n.onClick,[e,i,t],t);var r,a}}var Ir={id:"legend",_element:Wr,start(e,t,n){const i=e.legend=new Wr({ctx:e.ctx,options:n,chart:e});Kn.configure(e,i,n),Kn.addBox(e,i)},stop(e){Kn.removeBox(e,e.legend),delete e.legend},beforeUpdate(e,t,n){const i=e.legend;Kn.configure(e,i,n),i.options=n},afterUpdate(e){const t=e.legend;t.buildLabels(),t.adjustHitBoxes()},afterEvent(e,t){t.replay||e.legend.handleEvent(t.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(e,t,n){const i=t.datasetIndex,r=n.chart;r.isDatasetVisible(i)?(r.hide(i),t.hidden=!0):(r.show(i),t.hidden=!1)},onHover:null,onLeave:null,labels:{color:e=>e.chart.options.color,boxWidth:40,padding:10,generateLabels(e){const t=e.data.datasets,{labels:{usePointStyle:n,pointStyle:i,textAlign:r,color:a}}=e.legend.options;return e._getSortedDatasetMetas().map((e=>{const s=e.controller.getStyle(n?0:void 0),o=nt(s.borderWidth);return{text:t[e.index].label,fillStyle:s.backgroundColor,fontColor:a,hidden:!e.visible,lineCap:s.borderCapStyle,lineDash:s.borderDash,lineDashOffset:s.borderDashOffset,lineJoin:s.borderJoinStyle,lineWidth:(o.width+o.height)/4,strokeStyle:s.borderColor,pointStyle:i||s.pointStyle,rotation:s.rotation,textAlign:r||s.textAlign,borderRadius:0,datasetIndex:e.index}}),this)}},title:{color:e=>e.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:e=>!e.startsWith("on"),labels:{_scriptable:e=>!["generateLabels","filter","sort"].includes(e)}}};class Fr extends hi{constructor(e){super(),this.chart=e.chart,this.options=e.options,this.ctx=e.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(e,t){const n=this,i=n.options;if(n.left=0,n.top=0,!i.display)return void(n.width=n.height=n.right=n.bottom=0);n.width=n.right=e,n.height=n.bottom=t;const r=u(i.text)?i.text.length:1;n._padding=nt(i.padding);const a=r*it(i.font).lineHeight+n._padding.height;n.isHorizontal()?n.height=a:n.width=a}isHorizontal(){const e=this.options.position;return"top"===e||"bottom"===e}_drawArgs(e){const{top:t,left:n,bottom:i,right:r,options:a}=this,o=a.align;let d,l,u,c=0;return this.isHorizontal()?(l=s(o,n,r),u=t+e,d=r-n):("left"===a.position?(l=n+e,u=s(o,i,t),c=-.5*O):(l=r-e,u=s(o,t,i),c=.5*O),d=i-t),{titleX:l,titleY:u,maxWidth:d,rotation:c}}draw(){const e=this,t=e.ctx,n=e.options;if(!n.display)return;const i=it(n.font),r=i.lineHeight/2+e._padding.top,{titleX:s,titleY:o,maxWidth:d,rotation:l}=e._drawArgs(r);qe(t,n.text,0,0,i,{color:n.color,maxWidth:d,rotation:l,textAlign:a(n.align),textBaseline:"middle",translation:[s,o]})}}var Nr={id:"title",_element:Fr,start(e,t,n){!function(e,t){const n=new Fr({ctx:e.ctx,options:t,chart:e});Kn.configure(e,n,t),Kn.addBox(e,n),e.titleBlock=n}(e,n)},stop(e){const t=e.titleBlock;Kn.removeBox(e,t),delete e.titleBlock},beforeUpdate(e,t,n){const i=e.titleBlock;Kn.configure(e,i,n),i.options=n},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const zr={average(e){if(!e.length)return!1;let t,n,i=0,r=0,a=0;for(t=0,n=e.length;t<n;++t){const n=e[t].element;if(n&&n.hasValue()){const e=n.tooltipPosition();i+=e.x,r+=e.y,++a}}return{x:i/a,y:r/a}},nearest(e,t){if(!e.length)return!1;let n,i,r,a=t.x,s=t.y,o=Number.POSITIVE_INFINITY;for(n=0,i=e.length;n<i;++n){const i=e[n].element;if(i&&i.hasValue()){const e=J(t,i.getCenterPoint());e<o&&(o=e,r=i)}}if(r){const e=r.tooltipPosition();a=e.x,s=e.y}return{x:a,y:s}}};function Br(e,t){return t&&(u(t)?Array.prototype.push.apply(e,t):e.push(t)),e}function Vr(e){return("string"==typeof e||e instanceof String)&&e.indexOf("\n")>-1?e.split("\n"):e}function Ur(e,t){const{element:n,datasetIndex:i,index:r}=t,a=e.getDatasetMeta(i).controller,{label:s,value:o}=a.getLabelAndValue(r);return{chart:e,label:s,parsed:a.getParsed(r),raw:e.data.datasets[i].data[r],formattedValue:o,dataset:a.getDataset(),dataIndex:r,datasetIndex:i,element:n}}function Jr(e,t){const n=e._chart.ctx,{body:i,footer:r,title:a}=e,{boxWidth:s,boxHeight:o}=t,d=it(t.bodyFont),l=it(t.titleFont),u=it(t.footerFont),c=a.length,h=r.length,_=i.length,m=nt(t.padding);let f=m.height,p=0,y=i.reduce(((e,t)=>e+t.before.length+t.lines.length+t.after.length),0);y+=e.beforeBody.length+e.afterBody.length,c&&(f+=c*l.lineHeight+(c-1)*t.titleSpacing+t.titleMarginBottom),y&&(f+=_*(t.displayColors?Math.max(o,d.lineHeight):d.lineHeight)+(y-_)*d.lineHeight+(y-1)*t.bodySpacing),h&&(f+=t.footerMarginTop+h*u.lineHeight+(h-1)*t.footerSpacing);let M=0;const b=function(e){p=Math.max(p,n.measureText(e).width+M)};return n.save(),n.font=l.string,g(e.title,b),n.font=d.string,g(e.beforeBody.concat(e.afterBody),b),M=t.displayColors?s+2:0,g(i,(e=>{g(e.before,b),g(e.lines,b),g(e.after,b)})),M=0,n.font=u.string,g(e.footer,b),n.restore(),p+=m.width,{width:p,height:f}}function $r(e,t,n,i){const{x:r,width:a}=n,{width:s,chartArea:{left:o,right:d}}=e;let l="center";return"center"===i?l=r<=(o+d)/2?"left":"right":r<=a/2?l="left":r>=s-a/2&&(l="right"),function(e,t,n,i){const{x:r,width:a}=i,s=n.caretSize+n.caretPadding;return"left"===e&&r+a+s>t.width||"right"===e&&r-a-s<0||void 0}(l,e,t,n)&&(l="center"),l}function qr(e,t,n){const i=t.yAlign||function(e,t){const{y:n,height:i}=t;return n<i/2?"top":n>e.height-i/2?"bottom":"center"}(e,n);return{xAlign:t.xAlign||$r(e,t,n,i),yAlign:i}}function Gr(e,t,n,i){const{caretSize:r,caretPadding:a,cornerRadius:s}=e,{xAlign:o,yAlign:d}=n,l=r+a,u=s+a;let c=function(e,t){let{x:n,width:i}=e;return"right"===t?n-=i:"center"===t&&(n-=i/2),n}(t,o);const h=function(e,t,n){let{y:i,height:r}=e;return"top"===t?i+=n:i-="bottom"===t?r+n:r/2,i}(t,d,l);return"center"===d?"left"===o?c+=l:"right"===o&&(c-=l):"left"===o?c-=u:"right"===o&&(c+=u),{x:K(c,0,i.width-t.width),y:K(h,0,i.height-t.height)}}function Kr(e,t,n){const i=nt(n.padding);return"center"===t?e.x+e.width/2:"right"===t?e.x+e.width-i.right:e.x+i.left}function Zr(e){return Br([],Vr(e))}function Qr(e,t){const n=t&&t.dataset&&t.dataset.tooltip&&t.dataset.tooltip.callbacks;return n?e.override(n):e}class Xr extends hi{constructor(e){super(),this.opacity=0,this._active=[],this._chart=e._chart,this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.options=e.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(e){this.options=e,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){const e=this,t=e._cachedAnimations;if(t)return t;const n=e._chart,i=e.options.setContext(e.getContext()),r=i.enabled&&n.options.animation&&i.animations,a=new rn(e._chart,r);return r._cacheable&&(e._cachedAnimations=Object.freeze(a)),a}getContext(){const e=this;return e.$context||(e.$context=(t=e._chart.getContext(),n=e,i=e._tooltipItems,Object.assign(Object.create(t),{tooltip:n,tooltipItems:i,type:"tooltip"})));var t,n,i}getTitle(e,t){const n=this,{callbacks:i}=t,r=i.beforeTitle.apply(n,[e]),a=i.title.apply(n,[e]),s=i.afterTitle.apply(n,[e]);let o=[];return o=Br(o,Vr(r)),o=Br(o,Vr(a)),o=Br(o,Vr(s)),o}getBeforeBody(e,t){return Zr(t.callbacks.beforeBody.apply(this,[e]))}getBody(e,t){const n=this,{callbacks:i}=t,r=[];return g(e,(e=>{const t={before:[],lines:[],after:[]},a=Qr(i,e);Br(t.before,Vr(a.beforeLabel.call(n,e))),Br(t.lines,a.label.call(n,e)),Br(t.after,Vr(a.afterLabel.call(n,e))),r.push(t)})),r}getAfterBody(e,t){return Zr(t.callbacks.afterBody.apply(this,[e]))}getFooter(e,t){const n=this,{callbacks:i}=t,r=i.beforeFooter.apply(n,[e]),a=i.footer.apply(n,[e]),s=i.afterFooter.apply(n,[e]);let o=[];return o=Br(o,Vr(r)),o=Br(o,Vr(a)),o=Br(o,Vr(s)),o}_createItems(e){const t=this,n=t._active,i=t._chart.data,r=[],a=[],s=[];let o,d,l=[];for(o=0,d=n.length;o<d;++o)l.push(Ur(t._chart,n[o]));return e.filter&&(l=l.filter(((t,n,r)=>e.filter(t,n,r,i)))),e.itemSort&&(l=l.sort(((t,n)=>e.itemSort(t,n,i)))),g(l,(n=>{const i=Qr(e.callbacks,n);r.push(i.labelColor.call(t,n)),a.push(i.labelPointStyle.call(t,n)),s.push(i.labelTextColor.call(t,n))})),t.labelColors=r,t.labelPointStyles=a,t.labelTextColors=s,t.dataPoints=l,l}update(e,t){const n=this,i=n.options.setContext(n.getContext()),r=n._active;let a,s=[];if(r.length){const e=zr[i.position].call(n,r,n._eventPosition);s=n._createItems(i),n.title=n.getTitle(s,i),n.beforeBody=n.getBeforeBody(s,i),n.body=n.getBody(s,i),n.afterBody=n.getAfterBody(s,i),n.footer=n.getFooter(s,i);const t=n._size=Jr(n,i),o=Object.assign({},e,t),d=qr(n._chart,i,o),l=Gr(i,o,d,n._chart);n.xAlign=d.xAlign,n.yAlign=d.yAlign,a={opacity:1,x:l.x,y:l.y,width:t.width,height:t.height,caretX:e.x,caretY:e.y}}else 0!==n.opacity&&(a={opacity:0});n._tooltipItems=s,n.$context=void 0,a&&n._resolveAnimations().update(n,a),e&&i.external&&i.external.call(n,{chart:n._chart,tooltip:n,replay:t})}drawCaret(e,t,n,i){const r=this.getCaretPosition(e,n,i);t.lineTo(r.x1,r.y1),t.lineTo(r.x2,r.y2),t.lineTo(r.x3,r.y3)}getCaretPosition(e,t,n){const{xAlign:i,yAlign:r}=this,{cornerRadius:a,caretSize:s}=n,{x:o,y:d}=e,{width:l,height:u}=t;let c,h,_,m,f,p;return"center"===r?(f=d+u/2,"left"===i?(c=o,h=c-s,m=f+s,p=f-s):(c=o+l,h=c+s,m=f-s,p=f+s),_=c):(h="left"===i?o+a+s:"right"===i?o+l-a-s:this.caretX,"top"===r?(m=d,f=m-s,c=h-s,_=h+s):(m=d+u,f=m+s,c=h+s,_=h-s),p=m),{x1:c,x2:h,x3:_,y1:m,y2:f,y3:p}}drawTitle(e,t,n){const i=this,r=i.title,a=r.length;let s,o,d;if(a){const l=Vt(n.rtl,i.x,i.width);for(e.x=Kr(i,n.titleAlign,n),t.textAlign=l.textAlign(n.titleAlign),t.textBaseline="middle",s=it(n.titleFont),o=n.titleSpacing,t.fillStyle=n.titleColor,t.font=s.string,d=0;d<a;++d)t.fillText(r[d],l.x(e.x),e.y+s.lineHeight/2),e.y+=s.lineHeight+o,d+1===a&&(e.y+=n.titleMarginBottom-o)}}_drawColorBox(e,t,n,i,r){const a=this,s=a.labelColors[n],o=a.labelPointStyles[n],{boxHeight:d,boxWidth:l}=r,u=it(r.bodyFont),c=Kr(a,"left",r),h=i.x(c),_=d<u.lineHeight?(u.lineHeight-d)/2:0,m=t.y+_;if(r.usePointStyle){const t={radius:Math.min(l,d)/2,pointStyle:o.pointStyle,rotation:o.rotation,borderWidth:1},n=i.leftForLtr(h,l)+l/2,a=m+d/2;e.strokeStyle=r.multiKeyBackground,e.fillStyle=r.multiKeyBackground,ze(e,t,n,a),e.strokeStyle=s.borderColor,e.fillStyle=s.backgroundColor,ze(e,t,n,a)}else{e.lineWidth=s.borderWidth||1,e.strokeStyle=s.borderColor,e.setLineDash(s.borderDash||[]),e.lineDashOffset=s.borderDashOffset||0;const t=i.leftForLtr(h,l),n=i.leftForLtr(i.xPlus(h,1),l-2),a=tt(s.borderRadius);Object.values(a).some((e=>0!==e))?(e.beginPath(),e.fillStyle=r.multiKeyBackground,Ge(e,{x:t,y:m,w:l,h:d,radius:a}),e.fill(),e.stroke(),e.fillStyle=s.backgroundColor,e.beginPath(),Ge(e,{x:n,y:m+1,w:l-2,h:d-2,radius:a}),e.fill()):(e.fillStyle=r.multiKeyBackground,e.fillRect(t,m,l,d),e.strokeRect(t,m,l,d),e.fillStyle=s.backgroundColor,e.fillRect(n,m+1,l-2,d-2))}e.fillStyle=a.labelTextColors[n]}drawBody(e,t,n){const i=this,{body:r}=i,{bodySpacing:a,bodyAlign:s,displayColors:o,boxHeight:d,boxWidth:l}=n,u=it(n.bodyFont);let c=u.lineHeight,h=0;const _=Vt(n.rtl,i.x,i.width),m=function(n){t.fillText(n,_.x(e.x+h),e.y+c/2),e.y+=c+a},f=_.textAlign(s);let p,y,M,b,L,v,w;for(t.textAlign=s,t.textBaseline="middle",t.font=u.string,e.x=Kr(i,f,n),t.fillStyle=n.bodyColor,g(i.beforeBody,m),h=o&&"right"!==f?"center"===s?l/2+1:l+2:0,b=0,v=r.length;b<v;++b){for(p=r[b],y=i.labelTextColors[b],t.fillStyle=y,g(p.before,m),M=p.lines,o&&M.length&&(i._drawColorBox(t,e,b,_,n),c=Math.max(u.lineHeight,d)),L=0,w=M.length;L<w;++L)m(M[L]),c=u.lineHeight;g(p.after,m)}h=0,c=u.lineHeight,g(i.afterBody,m),e.y-=a}drawFooter(e,t,n){const i=this,r=i.footer,a=r.length;let s,o;if(a){const d=Vt(n.rtl,i.x,i.width);for(e.x=Kr(i,n.footerAlign,n),e.y+=n.footerMarginTop,t.textAlign=d.textAlign(n.footerAlign),t.textBaseline="middle",s=it(n.footerFont),t.fillStyle=n.footerColor,t.font=s.string,o=0;o<a;++o)t.fillText(r[o],d.x(e.x),e.y+s.lineHeight/2),e.y+=s.lineHeight+n.footerSpacing}}drawBackground(e,t,n,i){const{xAlign:r,yAlign:a}=this,{x:s,y:o}=e,{width:d,height:l}=n,u=i.cornerRadius;t.fillStyle=i.backgroundColor,t.strokeStyle=i.borderColor,t.lineWidth=i.borderWidth,t.beginPath(),t.moveTo(s+u,o),"top"===a&&this.drawCaret(e,t,n,i),t.lineTo(s+d-u,o),t.quadraticCurveTo(s+d,o,s+d,o+u),"center"===a&&"right"===r&&this.drawCaret(e,t,n,i),t.lineTo(s+d,o+l-u),t.quadraticCurveTo(s+d,o+l,s+d-u,o+l),"bottom"===a&&this.drawCaret(e,t,n,i),t.lineTo(s+u,o+l),t.quadraticCurveTo(s,o+l,s,o+l-u),"center"===a&&"left"===r&&this.drawCaret(e,t,n,i),t.lineTo(s,o+u),t.quadraticCurveTo(s,o,s+u,o),t.closePath(),t.fill(),i.borderWidth>0&&t.stroke()}_updateAnimationTarget(e){const t=this,n=t._chart,i=t.$animations,r=i&&i.x,a=i&&i.y;if(r||a){const i=zr[e.position].call(t,t._active,t._eventPosition);if(!i)return;const s=t._size=Jr(t,e),o=Object.assign({},i,t._size),d=qr(n,e,o),l=Gr(e,o,d,n);r._to===l.x&&a._to===l.y||(t.xAlign=d.xAlign,t.yAlign=d.yAlign,t.width=s.width,t.height=s.height,t.caretX=i.x,t.caretY=i.y,t._resolveAnimations().update(t,l))}}draw(e){const t=this,n=t.options.setContext(t.getContext());let i=t.opacity;if(!i)return;t._updateAnimationTarget(n);const r={width:t.width,height:t.height},a={x:t.x,y:t.y};i=Math.abs(i)<.001?0:i;const s=nt(n.padding),o=t.title.length||t.beforeBody.length||t.body.length||t.afterBody.length||t.footer.length;n.enabled&&o&&(e.save(),e.globalAlpha=i,t.drawBackground(a,e,r,n),Ut(e,n.textDirection),a.y+=s.top,t.drawTitle(a,e,n),t.drawBody(a,e,n),t.drawFooter(a,e,n),Jt(e,n.textDirection),e.restore())}getActiveElements(){return this._active||[]}setActiveElements(e,t){const n=this,i=n._active,r=e.map((({datasetIndex:e,index:t})=>{const i=n._chart.getDatasetMeta(e);if(!i)throw new Error("Cannot find a dataset at index "+e);return{datasetIndex:e,element:i.data[t],index:t}})),a=!y(i,r),s=n._positionChanged(r,t);(a||s)&&(n._active=r,n._eventPosition=t,n.update(!0))}handleEvent(e,t){const n=this,i=n.options,r=n._active||[];let a=!1,s=[];"mouseout"!==e.type&&(s=n._chart.getElementsAtEventForMode(e,i.mode,i,t),i.reverse&&s.reverse());const o=n._positionChanged(s,e);return a=t||!y(s,r)||o,a&&(n._active=s,(i.enabled||i.external)&&(n._eventPosition={x:e.x,y:e.y},n.update(!0,t))),a}_positionChanged(e,t){const{caretX:n,caretY:i,options:r}=this,a=zr[r.position].call(this,e,t);return!1!==a&&(n!==a.x||i!==a.y)}}Xr.positioners=zr;var ea={id:"tooltip",_element:Xr,positioners:zr,afterInit(e,t,n){n&&(e.tooltip=new Xr({_chart:e,options:n}))},beforeUpdate(e,t,n){e.tooltip&&e.tooltip.initialize(n)},reset(e,t,n){e.tooltip&&e.tooltip.initialize(n)},afterDraw(e){const t=e.tooltip,n={tooltip:t};!1!==e.notifyPlugins("beforeTooltipDraw",n)&&(t&&t.draw(e.ctx),e.notifyPlugins("afterTooltipDraw",n))},afterEvent(e,t){if(e.tooltip){const n=t.replay;e.tooltip.handleEvent(t.event,n)&&(t.changed=!0)}},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(e,t)=>t.bodyFont.size,boxWidth:(e,t)=>t.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:{beforeTitle:o,title(e){if(e.length>0){const t=e[0],n=t.chart.data.labels,i=n?n.length:0;if(this&&this.options&&"dataset"===this.options.mode)return t.dataset.label||"";if(t.label)return t.label;if(i>0&&t.dataIndex<i)return n[t.dataIndex]}return""},afterTitle:o,beforeBody:o,beforeLabel:o,label(e){if(this&&this.options&&"dataset"===this.options.mode)return e.label+": "+e.formattedValue||e.formattedValue;let t=e.dataset.label||"";t&&(t+=": ");const n=e.formattedValue;return l(n)||(t+=n),t},labelColor(e){const t=e.chart.getDatasetMeta(e.datasetIndex).controller.getStyle(e.dataIndex);return{borderColor:t.borderColor,backgroundColor:t.backgroundColor,borderWidth:t.borderWidth,borderDash:t.borderDash,borderDashOffset:t.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(e){const t=e.chart.getDatasetMeta(e.datasetIndex).controller.getStyle(e.dataIndex);return{pointStyle:t.pointStyle,rotation:t.rotation}},afterLabel:o,afterBody:o,beforeFooter:o,footer:o,afterFooter:o}},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:e=>"filter"!==e&&"itemSort"!==e&&"external"!==e,_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]},ta=Object.freeze({__proto__:null,Decimation:Lr,Filler:Rr,Legend:Ir,Title:Nr,Tooltip:ea});class na extends vi{constructor(e){super(e),this._startValue=void 0,this._valueRange=0}parse(e,t){if(l(e))return null;const n=this.getLabels();return((e,t)=>null===e?null:K(Math.round(e),0,t))(t=isFinite(t)&&n[t]===e?t:function(e,t,n){const i=e.indexOf(t);return-1===i?((e,t,n)=>"string"==typeof t?e.push(t)-1:isNaN(t)?null:n)(e,t,n):i!==e.lastIndexOf(t)?n:i}(n,e,m(t,e)),n.length-1)}determineDataLimits(){const e=this,{minDefined:t,maxDefined:n}=e.getUserBounds();let{min:i,max:r}=e.getMinMax(!0);"ticks"===e.options.bounds&&(t||(i=0),n||(r=e.getLabels().length-1)),e.min=i,e.max=r}buildTicks(){const e=this,t=e.min,n=e.max,i=e.options.offset,r=[];let a=e.getLabels();a=0===t&&n===a.length-1?a:a.slice(t,n+1),e._valueRange=Math.max(a.length-(i?0:1),1),e._startValue=e.min-(i?.5:0);for(let e=t;e<=n;e++)r.push({value:e});return r}getLabelForValue(e){const t=this.getLabels();return e>=0&&e<t.length?t[e]:e}configure(){const e=this;super.configure(),e.isHorizontal()||(e._reversePixels=!e._reversePixels)}getPixelForValue(e){const t=this;return"number"!=typeof e&&(e=t.parse(e)),null===e?NaN:t.getPixelForDecimal((e-t._startValue)/t._valueRange)}getPixelForTick(e){const t=this.ticks;return e<0||e>t.length-1?null:this.getPixelForValue(t[e].value)}getValueForPixel(e){const t=this;return Math.round(t._startValue+t.getDecimalForPixel(e)*t._valueRange)}getBasePixel(){return this.bottom}}na.id="category",na.defaults={ticks:{callback:na.prototype.getLabelForValue}};class ia extends vi{constructor(e){super(e),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(e,t){return l(e)||("number"==typeof e||e instanceof Number)&&!isFinite(+e)?null:+e}handleTickRangeOptions(){const e=this,{beginAtZero:t,stacked:n}=e.options,{minDefined:i,maxDefined:r}=e.getUserBounds();let{min:a,max:s}=e;const o=e=>a=i?a:e,d=e=>s=r?s:e;if(t||n){const e=I(a),t=I(s);e<0&&t<0?d(0):e>0&&t>0&&o(0)}a===s&&(d(s+1),t||o(a-1)),e.min=a,e.max=s}getTickLimit(){const e=this,t=e.options.ticks;let n,{maxTicksLimit:i,stepSize:r}=t;return r?n=Math.ceil(e.max/r)-Math.floor(e.min/r)+1:(n=e.computeTickLimit(),i=i||11),i&&(n=Math.min(i,n)),n}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){const e=this,t=e.options,n=t.ticks;let i=e.getTickLimit();i=Math.max(2,i);const r=function(e,t){const n=[],{step:i,min:r,max:a,precision:s,count:o,maxTicks:d,maxDigits:u,horizontal:c}=e,_=i||1,m=d-1,{min:f,max:p}=t,g=!l(r),y=!l(a),M=!l(o),b=(p-f)/u;let L,v,w,Y,k=F((p-f)/m/_)*_;if(k<1e-14&&!g&&!y)return[{value:f},{value:p}];Y=Math.ceil(p/k)-Math.floor(f/k),Y>m&&(k=F(Y*k/m/_)*_),l(s)||(L=Math.pow(10,s),k=Math.ceil(k*L)/L),v=Math.floor(f/k)*k,w=Math.ceil(p/k)*k,g&&y&&i&&function(e,t){const n=Math.round(e);return n-t<=e&&n+t>=e}((a-r)/i,k/1e3)?(Y=Math.min((a-r)/k,d),k=(a-r)/Y,v=r,w=a):M?(v=g?r:v,w=y?a:w,Y=o-1,k=(w-v)/Y):(Y=(w-v)/k,Y=z(Y,Math.round(Y),k/1e3)?Math.round(Y):Math.ceil(Y)),L=Math.pow(10,l(s)?function(e){if(!h(e))return;let t=1,n=0;for(;Math.round(e*t)/t!==e;)t*=10,n++;return n}(k):s),v=Math.round(v*L)/L,w=Math.round(w*L)/L;let D=0;for(g&&(n.push({value:r}),v<=r&&D++,z(Math.round((v+D*k)*L)/L,r,b*(c?(""+r).length:1))&&D++);D<Y;++D)n.push({value:Math.round((v+D*k)*L)/L});return y?z(n[n.length-1].value,a,b*(c?(""+a).length:1))?n[n.length-1].value=a:n.push({value:a}):n.push({value:w}),n}({maxTicks:i,min:t.min,max:t.max,precision:n.precision,step:n.stepSize,count:n.count,maxDigits:e._maxDigits(),horizontal:e.isHorizontal()},e._range||e);return"ticks"===t.bounds&&B(r,e,"value"),t.reverse?(r.reverse(),e.start=e.max,e.end=e.min):(e.start=e.min,e.end=e.max),r}configure(){const e=this,t=e.ticks;let n=e.min,i=e.max;if(super.configure(),e.options.offset&&t.length){const e=(i-n)/Math.max(t.length-1,1)/2;n-=e,i+=e}e._startValue=n,e._endValue=i,e._valueRange=i-n}getLabelForValue(e){return Bt(e,this.chart.options.locale)}}class ra extends ia{determineDataLimits(){const e=this,{min:t,max:n}=e.getMinMax(!0);e.min=h(t)?t:0,e.max=h(n)?n:1,e.handleTickRangeOptions()}computeTickLimit(){const e=this;if(e.isHorizontal())return Math.ceil(e.width/40);const t=e._resolveTickFontOptions(0);return Math.ceil(e.height/t.lineHeight)}getPixelForValue(e){return null===e?NaN:this.getPixelForDecimal((e-this._startValue)/this._valueRange)}getValueForPixel(e){return this._startValue+this.getDecimalForPixel(e)*this._valueRange}}function aa(e){return 1==e/Math.pow(10,Math.floor(W(e)))}ra.id="linear",ra.defaults={ticks:{callback:mi.formatters.numeric}};class sa extends vi{constructor(e){super(e),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(e,t){const n=ia.prototype.parse.apply(this,[e,t]);if(0!==n)return h(n)&&n>0?n:null;this._zero=!0}determineDataLimits(){const e=this,{min:t,max:n}=e.getMinMax(!0);e.min=h(t)?Math.max(0,t):null,e.max=h(n)?Math.max(0,n):null,e.options.beginAtZero&&(e._zero=!0),e.handleTickRangeOptions()}handleTickRangeOptions(){const e=this,{minDefined:t,maxDefined:n}=e.getUserBounds();let i=e.min,r=e.max;const a=e=>i=t?i:e,s=e=>r=n?r:e,o=(e,t)=>Math.pow(10,Math.floor(W(e))+t);i===r&&(i<=0?(a(1),s(10)):(a(o(i,-1)),s(o(r,1)))),i<=0&&a(o(r,-1)),r<=0&&s(o(i,1)),e._zero&&e.min!==e._suggestedMin&&i===o(e.min,0)&&a(o(i,-1)),e.min=i,e.max=r}buildTicks(){const e=this,t=e.options,n=function(e,t){const n=Math.floor(W(t.max)),i=Math.ceil(t.max/Math.pow(10,n)),r=[];let a=_(e.min,Math.pow(10,Math.floor(W(t.min)))),s=Math.floor(W(a)),o=Math.floor(a/Math.pow(10,s)),d=s<0?Math.pow(10,Math.abs(s)):1;do{r.push({value:a,major:aa(a)}),++o,10===o&&(o=1,++s,d=s>=0?1:d),a=Math.round(o*Math.pow(10,s)*d)/d}while(s<n||s===n&&o<i);const l=_(e.max,a);return r.push({value:l,major:aa(a)}),r}({min:e._userMin,max:e._userMax},e);return"ticks"===t.bounds&&B(n,e,"value"),t.reverse?(n.reverse(),e.start=e.max,e.end=e.min):(e.start=e.min,e.end=e.max),n}getLabelForValue(e){return void 0===e?"0":Bt(e,this.chart.options.locale)}configure(){const e=this,t=e.min;super.configure(),e._startValue=W(t),e._valueRange=W(e.max)-W(t)}getPixelForValue(e){const t=this;return void 0!==e&&0!==e||(e=t.min),null===e||isNaN(e)?NaN:t.getPixelForDecimal(e===t.min?0:(W(e)-t._startValue)/t._valueRange)}getValueForPixel(e){const t=this,n=t.getDecimalForPixel(e);return Math.pow(10,t._startValue+n*t._valueRange)}}function oa(e){const t=e.ticks;if(t.display&&e.display){const e=nt(t.backdropPadding);return m(t.font&&t.font.size,Ce.font.size)+e.height}return 0}function da(e,t,n,i,r){return e===i||e===r?{start:t-n/2,end:t+n/2}:e<i||e>r?{start:t-n,end:t}:{start:t,end:t+n}}function la(e){return 0===e||180===e?"center":e<180?"left":"right"}function ua(e,t,n){90===e||270===e?n.y-=t.h/2:(e>270||e<90)&&(n.y-=t.h)}function ca(e,t,n,i){const{ctx:r}=e;if(n)r.arc(e.xCenter,e.yCenter,t,0,H);else{let n=e.getPointPosition(0,t);r.moveTo(n.x,n.y);for(let a=1;a<i;a++)n=e.getPointPosition(a,t),r.lineTo(n.x,n.y)}}function ha(e){return N(e)?e:0}sa.id="logarithmic",sa.defaults={ticks:{callback:mi.formatters.logarithmic,major:{enabled:!0}}};class _a extends ia{constructor(e){super(e),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){const e=this;e.width=e.maxWidth,e.height=e.maxHeight,e.paddingTop=oa(e.options)/2,e.xCenter=Math.floor(e.width/2),e.yCenter=Math.floor((e.height-e.paddingTop)/2),e.drawingArea=Math.min(e.height-e.paddingTop,e.width)/2}determineDataLimits(){const e=this,{min:t,max:n}=e.getMinMax(!1);e.min=h(t)&&!isNaN(t)?t:0,e.max=h(n)&&!isNaN(n)?n:0,e.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/oa(this.options))}generateTickLabels(e){const t=this;ia.prototype.generateTickLabels.call(t,e),t._pointLabels=t.getLabels().map(((e,n)=>{const i=p(t.options.pointLabels.callback,[e,n],t);return i||0===i?i:""}))}fit(){const e=this,t=e.options;t.display&&t.pointLabels.display?function(e){const t={l:0,r:e.width,t:0,b:e.height-e.paddingTop},n={};let i,r,a;const s=[],o=[],d=e.getLabels().length;for(i=0;i<d;i++){const d=e.options.pointLabels.setContext(e.getContext(i));o[i]=d.padding,a=e.getPointPosition(i,e.drawingArea+o[i]);const _=it(d.font);e.ctx.font=_.string,l=e.ctx,c=_.lineHeight,r=u(h=e._pointLabels[i])?{w:Ie(l,l.font,h),h:h.length*c}:{w:l.measureText(h).width,h:c},s[i]=r;const m=e.getIndexAngle(i),f=U(m),p=da(f,a.x,r.w,0,180),g=da(f,a.y,r.h,90,270);p.start<t.l&&(t.l=p.start,n.l=m),p.end>t.r&&(t.r=p.end,n.r=m),g.start<t.t&&(t.t=g.start,n.t=m),g.end>t.b&&(t.b=g.end,n.b=m)}var l,c,h;e._setReductions(e.drawingArea,t,n),e._pointLabelItems=[];const _=e.options,m=oa(_),f=e.getDistanceFromCenterForValue(_.ticks.reverse?e.min:e.max);for(i=0;i<d;i++){const t=0===i?m/2:0,n=e.getPointPosition(i,f+t+o[i]),r=U(e.getIndexAngle(i)),a=s[i];ua(r,a,n);const d=la(r);let l;l="left"===d?n.x:"center"===d?n.x-a.w/2:n.x-a.w;const u=l+a.w;e._pointLabelItems[i]={x:n.x,y:n.y,textAlign:d,left:l,top:n.y,right:u,bottom:n.y+a.h}}}(e):e.setCenterPoint(0,0,0,0)}_setReductions(e,t,n){const i=this;let r=t.l/Math.sin(n.l),a=Math.max(t.r-i.width,0)/Math.sin(n.r),s=-t.t/Math.cos(n.t),o=-Math.max(t.b-(i.height-i.paddingTop),0)/Math.cos(n.b);r=ha(r),a=ha(a),s=ha(s),o=ha(o),i.drawingArea=Math.max(e/2,Math.min(Math.floor(e-(r+a)/2),Math.floor(e-(s+o)/2))),i.setCenterPoint(r,a,s,o)}setCenterPoint(e,t,n,i){const r=this,a=r.width-t-r.drawingArea,s=e+r.drawingArea,o=n+r.drawingArea,d=r.height-r.paddingTop-i-r.drawingArea;r.xCenter=Math.floor((s+a)/2+r.left),r.yCenter=Math.floor((o+d)/2+r.top+r.paddingTop)}getIndexAngle(e){return q(e*(H/this.getLabels().length)+V(this.options.startAngle||0))}getDistanceFromCenterForValue(e){const t=this;if(l(e))return NaN;const n=t.drawingArea/(t.max-t.min);return t.options.reverse?(t.max-e)*n:(e-t.min)*n}getValueForDistanceFromCenter(e){if(l(e))return NaN;const t=this,n=e/(t.drawingArea/(t.max-t.min));return t.options.reverse?t.max-n:t.min+n}getPointPosition(e,t){const n=this,i=n.getIndexAngle(e)-A;return{x:Math.cos(i)*t+n.xCenter,y:Math.sin(i)*t+n.yCenter,angle:i}}getPointPositionForValue(e,t){return this.getPointPosition(e,this.getDistanceFromCenterForValue(t))}getBasePosition(e){return this.getPointPositionForValue(e||0,this.getBaseValue())}getPointLabelPosition(e){const{left:t,top:n,right:i,bottom:r}=this._pointLabelItems[e];return{left:t,top:n,right:i,bottom:r}}drawBackground(){const e=this,{backgroundColor:t,grid:{circular:n}}=e.options;if(t){const i=e.ctx;i.save(),i.beginPath(),ca(e,e.getDistanceFromCenterForValue(e._endValue),n,e.getLabels().length),i.closePath(),i.fillStyle=t,i.fill(),i.restore()}}drawGrid(){const e=this,t=e.ctx,n=e.options,{angleLines:i,grid:r}=n,a=e.getLabels().length;let s,o,d;if(n.pointLabels.display&&function(e,t){const{ctx:n,options:{pointLabels:i}}=e;for(let r=t-1;r>=0;r--){const t=i.setContext(e.getContext(r)),a=it(t.font),{x:s,y:o,textAlign:d,left:u,top:c,right:h,bottom:_}=e._pointLabelItems[r],{backdropColor:m}=t;if(!l(m)){const e=nt(t.backdropPadding);n.fillStyle=m,n.fillRect(u-e.left,c-e.top,h-u+e.width,_-c+e.height)}qe(n,e._pointLabels[r],s,o+a.lineHeight/2,a,{color:t.color,textAlign:d,textBaseline:"middle"})}}(e,a),r.display&&e.ticks.forEach(((t,n)=>{if(0!==n){o=e.getDistanceFromCenterForValue(t.value);const i=r.setContext(e.getContext(n-1));!function(e,t,n,i){const r=e.ctx,a=t.circular,{color:s,lineWidth:o}=t;!a&&!i||!s||!o||n<0||(r.save(),r.strokeStyle=s,r.lineWidth=o,r.setLineDash(t.borderDash),r.lineDashOffset=t.borderDashOffset,r.beginPath(),ca(e,n,a,i),r.closePath(),r.stroke(),r.restore())}(e,i,o,a)}})),i.display){for(t.save(),s=e.getLabels().length-1;s>=0;s--){const r=i.setContext(e.getContext(s)),{color:a,lineWidth:l}=r;l&&a&&(t.lineWidth=l,t.strokeStyle=a,t.setLineDash(r.borderDash),t.lineDashOffset=r.borderDashOffset,o=e.getDistanceFromCenterForValue(n.ticks.reverse?e.min:e.max),d=e.getPointPosition(s,o),t.beginPath(),t.moveTo(e.xCenter,e.yCenter),t.lineTo(d.x,d.y),t.stroke())}t.restore()}}drawBorder(){}drawLabels(){const e=this,t=e.ctx,n=e.options,i=n.ticks;if(!i.display)return;const r=e.getIndexAngle(0);let a,s;t.save(),t.translate(e.xCenter,e.yCenter),t.rotate(r),t.textAlign="center",t.textBaseline="middle",e.ticks.forEach(((r,o)=>{if(0===o&&!n.reverse)return;const d=i.setContext(e.getContext(o)),l=it(d.font);if(a=e.getDistanceFromCenterForValue(e.ticks[o].value),d.showLabelBackdrop){s=t.measureText(r.label).width,t.fillStyle=d.backdropColor;const e=nt(d.backdropPadding);t.fillRect(-s/2-e.left,-a-l.size/2-e.top,s+e.width,l.size+e.height)}qe(t,r.label,0,-a,l,{color:d.color})})),t.restore()}drawTitle(){}}_a.id="radialLinear",_a.defaults={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:mi.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback:e=>e,padding:5}},_a.defaultRoutes={"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"},_a.descriptors={angleLines:{_fallback:"grid"}};const ma={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},fa=Object.keys(ma);function pa(e,t){return e-t}function ga(e,t){if(l(t))return null;const n=e._adapter,{parser:i,round:r,isoWeekday:a}=e._parseOpts;let s=t;return"function"==typeof i&&(s=i(s)),h(s)||(s="string"==typeof i?n.parse(s,i):n.parse(s)),null===s?null:(r&&(s="week"!==r||!N(a)&&!0!==a?n.startOf(s,r):n.startOf(s,"isoWeek",a)),+s)}function ya(e,t,n,i){const r=fa.length;for(let a=fa.indexOf(e);a<r-1;++a){const e=ma[fa[a]],r=e.steps?e.steps:Number.MAX_SAFE_INTEGER;if(e.common&&Math.ceil((n-t)/(r*e.size))<=i)return fa[a]}return fa[r-1]}function Ma(e,t,n){if(n){if(n.length){const{lo:i,hi:r}=at(n,t);e[n[i]>=t?n[i]:n[r]]=!0}}else e[t]=!0}function ba(e,t,n){const i=[],r={},a=t.length;let s,o;for(s=0;s<a;++s)o=t[s],r[o]=s,i.push({value:o,major:!1});return 0!==a&&n?function(e,t,n,i){const r=e._adapter,a=+r.startOf(t[0].value,i),s=t[t.length-1].value;let o,d;for(o=a;o<=s;o=+r.add(o,1,i))d=n[o],d>=0&&(t[d].major=!0);return t}(e,i,r,n):i}class La extends vi{constructor(e){super(e),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(e,t){const n=e.time||(e.time={}),i=this._adapter=new jn._date(e.adapters.date);w(n.displayFormats,i.formats()),this._parseOpts={parser:n.parser,round:n.round,isoWeekday:n.isoWeekday},super.init(e),this._normalized=t.normalized}parse(e,t){return void 0===e?null:ga(this,e)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){const e=this,t=e.options,n=e._adapter,i=t.time.unit||"day";let{min:r,max:a,minDefined:s,maxDefined:o}=e.getUserBounds();function d(e){s||isNaN(e.min)||(r=Math.min(r,e.min)),o||isNaN(e.max)||(a=Math.max(a,e.max))}s&&o||(d(e._getLabelBounds()),"ticks"===t.bounds&&"labels"===t.ticks.source||d(e.getMinMax(!1))),r=h(r)&&!isNaN(r)?r:+n.startOf(Date.now(),i),a=h(a)&&!isNaN(a)?a:+n.endOf(Date.now(),i)+1,e.min=Math.min(r,a-1),e.max=Math.max(r+1,a)}_getLabelBounds(){const e=this.getLabelTimestamps();let t=Number.POSITIVE_INFINITY,n=Number.NEGATIVE_INFINITY;return e.length&&(t=e[0],n=e[e.length-1]),{min:t,max:n}}buildTicks(){const e=this,t=e.options,n=t.time,i=t.ticks,r="labels"===i.source?e.getLabelTimestamps():e._generate();"ticks"===t.bounds&&r.length&&(e.min=e._userMin||r[0],e.max=e._userMax||r[r.length-1]);const a=e.min,s=function(e,t,n){let i=0,r=e.length;for(;i<r&&e[i]<t;)i++;for(;r>i&&e[r-1]>n;)r--;return i>0||r<e.length?e.slice(i,r):e}(r,a,e.max);return e._unit=n.unit||(i.autoSkip?ya(n.minUnit,e.min,e.max,e._getLabelCapacity(a)):function(e,t,n,i,r){for(let a=fa.length-1;a>=fa.indexOf(n);a--){const n=fa[a];if(ma[n].common&&e._adapter.diff(r,i,n)>=t-1)return n}return fa[n?fa.indexOf(n):0]}(e,s.length,n.minUnit,e.min,e.max)),e._majorUnit=i.major.enabled&&"year"!==e._unit?function(e){for(let t=fa.indexOf(e)+1,n=fa.length;t<n;++t)if(ma[fa[t]].common)return fa[t]}(e._unit):void 0,e.initOffsets(r),t.reverse&&s.reverse(),ba(e,s,e._majorUnit)}initOffsets(e){const t=this;let n,i,r=0,a=0;t.options.offset&&e.length&&(n=t.getDecimalForValue(e[0]),r=1===e.length?1-n:(t.getDecimalForValue(e[1])-n)/2,i=t.getDecimalForValue(e[e.length-1]),a=1===e.length?i:(i-t.getDecimalForValue(e[e.length-2]))/2);const s=e.length<3?.5:.25;r=K(r,0,s),a=K(a,0,s),t._offsets={start:r,end:a,factor:1/(r+1+a)}}_generate(){const e=this,t=e._adapter,n=e.min,i=e.max,r=e.options,a=r.time,s=a.unit||ya(a.minUnit,n,i,e._getLabelCapacity(n)),o=m(a.stepSize,1),d="week"===s&&a.isoWeekday,l=N(d)||!0===d,u={};let c,h,_=n;if(l&&(_=+t.startOf(_,"isoWeek",d)),_=+t.startOf(_,l?"day":s),t.diff(i,n,s)>1e5*o)throw new Error(n+" and "+i+" are too far apart with stepSize of "+o+" "+s);const f="data"===r.ticks.source&&e.getDataTimestamps();for(c=_,h=0;c<i;c=+t.add(c,o,s),h++)Ma(u,c,f);return c!==i&&"ticks"!==r.bounds&&1!==h||Ma(u,c,f),Object.keys(u).sort(((e,t)=>e-t)).map((e=>+e))}getLabelForValue(e){const t=this._adapter,n=this.options.time;return n.tooltipFormat?t.format(e,n.tooltipFormat):t.format(e,n.displayFormats.datetime)}_tickFormatFunction(e,t,n,i){const r=this,a=r.options,s=a.time.displayFormats,o=r._unit,d=r._majorUnit,l=o&&s[o],u=d&&s[d],c=n[t],h=d&&u&&c&&c.major,_=r._adapter.format(e,i||(h?u:l)),m=a.ticks.callback;return m?p(m,[_,t,n],r):_}generateTickLabels(e){let t,n,i;for(t=0,n=e.length;t<n;++t)i=e[t],i.label=this._tickFormatFunction(i.value,t,e)}getDecimalForValue(e){const t=this;return null===e?NaN:(e-t.min)/(t.max-t.min)}getPixelForValue(e){const t=this,n=t._offsets,i=t.getDecimalForValue(e);return t.getPixelForDecimal((n.start+i)*n.factor)}getValueForPixel(e){const t=this,n=t._offsets,i=t.getDecimalForPixel(e)/n.factor-n.end;return t.min+i*(t.max-t.min)}_getLabelSize(e){const t=this,n=t.options.ticks,i=t.ctx.measureText(e).width,r=V(t.isHorizontal()?n.maxRotation:n.minRotation),a=Math.cos(r),s=Math.sin(r),o=t._resolveTickFontOptions(0).size;return{w:i*a+o*s,h:i*s+o*a}}_getLabelCapacity(e){const t=this,n=t.options.time,i=n.displayFormats,r=i[n.unit]||i.millisecond,a=t._tickFormatFunction(e,0,ba(t,[e],t._majorUnit),r),s=t._getLabelSize(a),o=Math.floor(t.isHorizontal()?t.width/s.w:t.height/s.h)-1;return o>0?o:1}getDataTimestamps(){const e=this;let t,n,i=e._cache.data||[];if(i.length)return i;const r=e.getMatchingVisibleMetas();if(e._normalized&&r.length)return e._cache.data=r[0].controller.getAllParsedValues(e);for(t=0,n=r.length;t<n;++t)i=i.concat(r[t].controller.getAllParsedValues(e));return e._cache.data=e.normalize(i)}getLabelTimestamps(){const e=this,t=e._cache.labels||[];let n,i;if(t.length)return t;const r=e.getLabels();for(n=0,i=r.length;n<i;++n)t.push(ga(e,r[n]));return e._cache.labels=e._normalized?t:e.normalize(t)}normalize(e){return ut(e.sort(pa))}}function va(e,t,n){let i,r,a,s;if(n)i=Math.floor(t),r=Math.ceil(t),a=e[i],s=e[r];else{const n=at(e,t);a=n.lo,s=n.hi,i=e[a],r=e[s]}const o=r-i;return o?a+(s-a)*(t-i)/o:a}La.id="time",La.defaults={bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",major:{enabled:!1}}};class wa extends La{constructor(e){super(e),this._table=[],this._maxIndex=void 0}initOffsets(){const e=this,t=e._getTimestampsForTable();e._table=e.buildLookupTable(t),e._maxIndex=e._table.length-1,super.initOffsets(t)}buildLookupTable(e){const{min:t,max:n}=this;if(!e.length)return[{time:t,pos:0},{time:n,pos:1}];const i=[t];let r,a,s;for(r=0,a=e.length;r<a;++r)s=e[r],s>t&&s<n&&i.push(s);return i.push(n),i}_getTimestampsForTable(){const e=this;let t=e._cache.all||[];if(t.length)return t;const n=e.getDataTimestamps(),i=e.getLabelTimestamps();return t=n.length&&i.length?e.normalize(n.concat(i)):n.length?n:i,t=e._cache.all=t,t}getPixelForValue(e,t){const n=this,i=n._offsets,r=n._normalized&&n._maxIndex>0&&!l(t)?t/n._maxIndex:n.getDecimalForValue(e);return n.getPixelForDecimal((i.start+r)*i.factor)}getDecimalForValue(e){return va(this._table,e)/this._maxIndex}getValueForPixel(e){const t=this,n=t._offsets,i=t.getDecimalForPixel(e)/n.factor-n.end;return va(t._table,i*this._maxIndex,!0)}}wa.id="timeseries",wa.defaults=La.defaults;var Ya=Object.freeze({__proto__:null,CategoryScale:na,LinearScale:ra,LogarithmicScale:sa,RadialLinearScale:_a,TimeScale:La,TimeSeriesScale:wa});const ka=[Sn,yr,ta,Ya]},3572:(e,t,n)=>{e.exports=function e(t,n,i){function r(s,o){if(!n[s]){if(!t[s]){if(a)return a(s,!0);var d=new Error("Cannot find module '"+s+"'");throw d.code="MODULE_NOT_FOUND",d}var l=n[s]={exports:{}};t[s][0].call(l.exports,(function(e){return r(t[s][1][e]||e)}),l,l.exports,e,t,n,i)}return n[s].exports}for(var a=void 0,s=0;s<i.length;s++)r(i[s]);return r}({1:[function(e,t,n){(function(e){(function(){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var r=function(){function t(){var i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:100;n(this,t),this.size=i,this.length=0,this.buf=e.alloc(i)}return r=t,(a=[{key:"prepend",value:function(t){if(e.isBuffer(t)){var n=this.length+t.length;if(n>=this.size&&(this.resize(),n>=this.size))throw Error("INVALID_BUFFER_STATE");var i=this.buf;this.buf=e.alloc(this.size),t.copy(this.buf,0),i.copy(this.buf,t.length),this.length+=t.length}else{var r=this.length++;r===this.size&&this.resize();var a=this.clone();this.buf[0]=t,a.copy(this.buf,1,0,r)}}},{key:"append",value:function(e){var t=this.length++;t===this.size&&this.resize(),this.buf[t]=e}},{key:"clone",value:function(){return e.from(this.buf.slice(0,this.length))}},{key:"resize",value:function(){var t=this.length;this.size=2*this.size;var n=e.alloc(this.size);this.buf.copy(n,0,0,t),this.buf=n}},{key:"toString",value:function(e){return e?this.buf.slice(0,this.length).toString(e):Uint8Array.prototype.slice.call(this.buf.slice(0,this.length))}},{key:"toJSON",value:function(){return this.toString("utf8")}},{key:"reset",value:function(){this.length=0}}])&&i(r.prototype,a),s&&i(r,s),t;var r,a,s}();t.exports=r}).call(this)}).call(this,e("buffer").Buffer)},{buffer:5}],2:[function(e,t,n){(function(n,i){(function(){"use strict";function r(e){var t="function"==typeof Map?new Map:void 0;return(r=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,i)}function i(){return a(e,arguments,v(this).constructor)}return i.prototype=Object.create(e.prototype,{constructor:{value:i,enumerable:!1,writable:!0,configurable:!0}}),g(i,e)})(e)}function a(e,t,n){return(a=L()?Reflect.construct:function(e,t,n){var i=[null];i.push.apply(i,t);var r=new(Function.bind.apply(e,i));return n&&g(r,n.prototype),r}).apply(null,arguments)}function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],i=!0,r=!1,a=void 0;try{for(var s,o=e[Symbol.iterator]();!(i=(s=o.next()).done)&&(n.push(s.value),!t||n.length!==t);i=!0);}catch(e){r=!0,a=e}finally{try{i||null==o.return||o.return()}finally{if(r)throw a}}return n}}(e,t)||l(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function d(e){return function(e){if(Array.isArray(e))return u(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||l(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function l(e,t){if(e){if("string"==typeof e)return u(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?u(e,t):void 0}}function u(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,i=new Array(t);n<t;n++)i[n]=e[n];return i}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function h(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){_(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function _(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function m(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function f(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function p(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&g(e,t)}function g(e,t){return(g=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function y(e){var t=L();return function(){var n,i=v(e);if(t){var r=v(this).constructor;n=Reflect.construct(i,arguments,r)}else n=i.apply(this,arguments);return M(this,n)}}function M(e,t){return!t||"object"!==s(t)&&"function"!=typeof t?b(e):t}function b(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function L(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function v(e){return(v=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var w=e("stream").Transform,Y=e("./ResizeableBuffer"),k={utf8:n.from([239,187,191]),utf16le:n.from([255,254])},D=function(e){p(s,e);var t,i,r,a=y(s);function s(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return m(this,s),(e=a.call(this,h(h(h({},{readableObjectMode:!0}),t),{},{encoding:null}))).__originalOptions=t,e.__normalizeOptions(t),e}return t=s,(i=[{key:"__normalizeOptions",value:function(e){var t={};for(var i in e)t[S(i)]=e[i];if(void 0===t.encoding||!0===t.encoding)t.encoding="utf8";else if(null===t.encoding||!1===t.encoding)t.encoding=null;else if("string"!=typeof t.encoding&&null!==t.encoding)throw new T("CSV_INVALID_OPTION_ENCODING",["Invalid option encoding:","encoding must be a string or null to return a buffer,","got ".concat(JSON.stringify(t.encoding))],t);if(void 0===t.bom||null===t.bom||!1===t.bom)t.bom=!1;else if(!0!==t.bom)throw new T("CSV_INVALID_OPTION_BOM",["Invalid option bom:","bom must be true,","got ".concat(JSON.stringify(t.bom))],t);var r=null;if(void 0===t.cast||null===t.cast||!1===t.cast||""===t.cast)t.cast=void 0;else if("function"==typeof t.cast)r=t.cast,t.cast=!0;else if(!0!==t.cast)throw new T("CSV_INVALID_OPTION_CAST",["Invalid option cast:","cast must be true or a function,","got ".concat(JSON.stringify(t.cast))],t);if(void 0===t.cast_date||null===t.cast_date||!1===t.cast_date||""===t.cast_date)t.cast_date=!1;else if(!0===t.cast_date)t.cast_date=function(e){var t=Date.parse(e);return isNaN(t)?e:new Date(t)};else if("function"!=typeof t.cast_date)throw new T("CSV_INVALID_OPTION_CAST_DATE",["Invalid option cast_date:","cast_date must be true or a function,","got ".concat(JSON.stringify(t.cast_date))],t);var a=null;if(!0===t.columns)a=void 0;else if("function"==typeof t.columns)a=t.columns,t.columns=!0;else if(Array.isArray(t.columns))t.columns=j(t.columns);else{if(void 0!==t.columns&&null!==t.columns&&!1!==t.columns)throw new T("CSV_INVALID_OPTION_COLUMNS",["Invalid option columns:","expect an object, a function or true,","got ".concat(JSON.stringify(t.columns))],t);t.columns=!1}if(void 0===t.columns_duplicates_to_array||null===t.columns_duplicates_to_array||!1===t.columns_duplicates_to_array)t.columns_duplicates_to_array=!1;else if(!0!==t.columns_duplicates_to_array)throw new T("CSV_INVALID_OPTION_COLUMNS_DUPLICATES_TO_ARRAY",["Invalid option columns_duplicates_to_array:","expect an boolean,","got ".concat(JSON.stringify(t.columns_duplicates_to_array))],t);if(void 0===t.comment||null===t.comment||!1===t.comment||""===t.comment)t.comment=null;else if("string"==typeof t.comment&&(t.comment=n.from(t.comment,t.encoding)),!n.isBuffer(t.comment))throw new T("CSV_INVALID_OPTION_COMMENT",["Invalid option comment:","comment must be a buffer or a string,","got ".concat(JSON.stringify(t.comment))],t);var s=JSON.stringify(t.delimiter);if(Array.isArray(t.delimiter)||(t.delimiter=[t.delimiter]),0===t.delimiter.length)throw new T("CSV_INVALID_OPTION_DELIMITER",["Invalid option delimiter:","delimiter must be a non empty string or buffer or array of string|buffer,","got ".concat(s)],t);if(t.delimiter=t.delimiter.map((function(e){if(null==e||!1===e)return n.from(",",t.encoding);if("string"==typeof e&&(e=n.from(e,t.encoding)),!n.isBuffer(e)||0===e.length)throw new T("CSV_INVALID_OPTION_DELIMITER",["Invalid option delimiter:","delimiter must be a non empty string or buffer or array of string|buffer,","got ".concat(s)],t);return e})),void 0===t.escape||!0===t.escape?t.escape=n.from('"',t.encoding):"string"==typeof t.escape?t.escape=n.from(t.escape,t.encoding):null!==t.escape&&!1!==t.escape||(t.escape=null),null!==t.escape&&!n.isBuffer(t.escape))throw new Error("Invalid Option: escape must be a buffer, a string or a boolean, got ".concat(JSON.stringify(t.escape)));if(void 0===t.from||null===t.from)t.from=1;else{if("string"==typeof t.from&&/\d+/.test(t.from)&&(t.from=parseInt(t.from)),!Number.isInteger(t.from))throw new Error("Invalid Option: from must be an integer, got ".concat(JSON.stringify(t.from)));if(t.from<0)throw new Error("Invalid Option: from must be a positive integer, got ".concat(JSON.stringify(e.from)))}if(void 0===t.from_line||null===t.from_line)t.from_line=1;else{if("string"==typeof t.from_line&&/\d+/.test(t.from_line)&&(t.from_line=parseInt(t.from_line)),!Number.isInteger(t.from_line))throw new Error("Invalid Option: from_line must be an integer, got ".concat(JSON.stringify(e.from_line)));if(t.from_line<=0)throw new Error("Invalid Option: from_line must be a positive integer greater than 0, got ".concat(JSON.stringify(e.from_line)))}if(void 0===t.ignore_last_delimiters||null===t.ignore_last_delimiters)t.ignore_last_delimiters=!1;else if("number"==typeof t.ignore_last_delimiters)t.ignore_last_delimiters=Math.floor(t.ignore_last_delimiters),0===t.ignore_last_delimiters&&(t.ignore_last_delimiters=!1);else if("boolean"!=typeof t.ignore_last_delimiters)throw new T("CSV_INVALID_OPTION_IGNORE_LAST_DELIMITERS",["Invalid option `ignore_last_delimiters`:","the value must be a boolean value or an integer,","got ".concat(JSON.stringify(t.ignore_last_delimiters))],t);if(!0===t.ignore_last_delimiters&&!1===t.columns)throw new T("CSV_IGNORE_LAST_DELIMITERS_REQUIRES_COLUMNS",["The option `ignore_last_delimiters`","requires the activation of the `columns` option"],t);if(void 0===t.info||null===t.info||!1===t.info)t.info=!1;else if(!0!==t.info)throw new Error("Invalid Option: info must be true, got ".concat(JSON.stringify(t.info)));if(void 0===t.max_record_size||null===t.max_record_size||!1===t.max_record_size)t.max_record_size=0;else if(Number.isInteger(t.max_record_size)&&t.max_record_size>=0);else{if("string"!=typeof t.max_record_size||!/\d+/.test(t.max_record_size))throw new Error("Invalid Option: max_record_size must be a positive integer, got ".concat(JSON.stringify(t.max_record_size)));t.max_record_size=parseInt(t.max_record_size)}if(void 0===t.objname||null===t.objname||!1===t.objname)t.objname=void 0;else if(n.isBuffer(t.objname)){if(0===t.objname.length)throw new Error("Invalid Option: objname must be a non empty buffer");null===t.encoding||(t.objname=t.objname.toString(t.encoding))}else{if("string"!=typeof t.objname)throw new Error("Invalid Option: objname must be a string or a buffer, got ".concat(t.objname));if(0===t.objname.length)throw new Error("Invalid Option: objname must be a non empty string")}if(void 0===t.on_record||null===t.on_record)t.on_record=void 0;else if("function"!=typeof t.on_record)throw new T("CSV_INVALID_OPTION_ON_RECORD",["Invalid option `on_record`:","expect a function,","got ".concat(JSON.stringify(t.on_record))],t);if(null===t.quote||!1===t.quote||""===t.quote)t.quote=null;else if(void 0===t.quote||!0===t.quote?t.quote=n.from('"',t.encoding):"string"==typeof t.quote&&(t.quote=n.from(t.quote,t.encoding)),!n.isBuffer(t.quote))throw new Error("Invalid Option: quote must be a buffer or a string, got ".concat(JSON.stringify(t.quote)));if(void 0===t.raw||null===t.raw||!1===t.raw)t.raw=!1;else if(!0!==t.raw)throw new Error("Invalid Option: raw must be true, got ".concat(JSON.stringify(t.raw)));if(t.record_delimiter?Array.isArray(t.record_delimiter)||(t.record_delimiter=[t.record_delimiter]):t.record_delimiter=[],t.record_delimiter=t.record_delimiter.map((function(e){return"string"==typeof e&&(e=n.from(e,t.encoding)),e})),"boolean"==typeof t.relax);else{if(void 0!==t.relax&&null!==t.relax)throw new Error("Invalid Option: relax must be a boolean, got ".concat(JSON.stringify(t.relax)));t.relax=!1}if("boolean"==typeof t.relax_column_count);else{if(void 0!==t.relax_column_count&&null!==t.relax_column_count)throw new Error("Invalid Option: relax_column_count must be a boolean, got ".concat(JSON.stringify(t.relax_column_count)));t.relax_column_count=!1}if("boolean"==typeof t.relax_column_count_less);else{if(void 0!==t.relax_column_count_less&&null!==t.relax_column_count_less)throw new Error("Invalid Option: relax_column_count_less must be a boolean, got ".concat(JSON.stringify(t.relax_column_count_less)));t.relax_column_count_less=!1}if("boolean"==typeof t.relax_column_count_more);else{if(void 0!==t.relax_column_count_more&&null!==t.relax_column_count_more)throw new Error("Invalid Option: relax_column_count_more must be a boolean, got ".concat(JSON.stringify(t.relax_column_count_more)));t.relax_column_count_more=!1}if("boolean"==typeof t.skip_empty_lines);else{if(void 0!==t.skip_empty_lines&&null!==t.skip_empty_lines)throw new Error("Invalid Option: skip_empty_lines must be a boolean, got ".concat(JSON.stringify(t.skip_empty_lines)));t.skip_empty_lines=!1}if("boolean"==typeof t.skip_lines_with_empty_values);else{if(void 0!==t.skip_lines_with_empty_values&&null!==t.skip_lines_with_empty_values)throw new Error("Invalid Option: skip_lines_with_empty_values must be a boolean, got ".concat(JSON.stringify(t.skip_lines_with_empty_values)));t.skip_lines_with_empty_values=!1}if("boolean"==typeof t.skip_lines_with_error);else{if(void 0!==t.skip_lines_with_error&&null!==t.skip_lines_with_error)throw new Error("Invalid Option: skip_lines_with_error must be a boolean, got ".concat(JSON.stringify(t.skip_lines_with_error)));t.skip_lines_with_error=!1}if(void 0===t.rtrim||null===t.rtrim||!1===t.rtrim)t.rtrim=!1;else if(!0!==t.rtrim)throw new Error("Invalid Option: rtrim must be a boolean, got ".concat(JSON.stringify(t.rtrim)));if(void 0===t.ltrim||null===t.ltrim||!1===t.ltrim)t.ltrim=!1;else if(!0!==t.ltrim)throw new Error("Invalid Option: ltrim must be a boolean, got ".concat(JSON.stringify(t.ltrim)));if(void 0===t.trim||null===t.trim||!1===t.trim)t.trim=!1;else if(!0!==t.trim)throw new Error("Invalid Option: trim must be a boolean, got ".concat(JSON.stringify(t.trim)));if(!0===t.trim&&!1!==e.ltrim?t.ltrim=!0:!0!==t.ltrim&&(t.ltrim=!1),!0===t.trim&&!1!==e.rtrim?t.rtrim=!0:!0!==t.rtrim&&(t.rtrim=!1),void 0===t.to||null===t.to)t.to=-1;else{if("string"==typeof t.to&&/\d+/.test(t.to)&&(t.to=parseInt(t.to)),!Number.isInteger(t.to))throw new Error("Invalid Option: to must be an integer, got ".concat(JSON.stringify(e.to)));if(t.to<=0)throw new Error("Invalid Option: to must be a positive integer greater than 0, got ".concat(JSON.stringify(e.to)))}if(void 0===t.to_line||null===t.to_line)t.to_line=-1;else{if("string"==typeof t.to_line&&/\d+/.test(t.to_line)&&(t.to_line=parseInt(t.to_line)),!Number.isInteger(t.to_line))throw new Error("Invalid Option: to_line must be an integer, got ".concat(JSON.stringify(e.to_line)));if(t.to_line<=0)throw new Error("Invalid Option: to_line must be a positive integer greater than 0, got ".concat(JSON.stringify(e.to_line)))}this.info={comment_lines:0,empty_lines:0,invalid_field_length:0,lines:1,records:0},this.options=t,this.state={bomSkipped:!1,castField:r,commenting:!1,error:void 0,enabled:1===t.from_line,escaping:!1,escapeIsQuote:n.isBuffer(t.escape)&&n.isBuffer(t.quote)&&0===n.compare(t.escape,t.quote),expectedRecordLength:null===t.columns?0:t.columns.length,field:new Y(20),firstLineToHeaders:a,info:Object.assign({},this.info),needMoreDataSize:Math.max.apply(Math,[null!==t.comment?t.comment.length:0].concat(d(t.delimiter.map((function(e){return e.length}))),[null!==t.quote?t.quote.length:0])),previousBuf:void 0,quoting:!1,stop:!1,rawBuffer:new Y(100),record:[],recordHasError:!1,record_length:0,recordDelimiterMaxLength:0===t.record_delimiter.length?2:Math.max.apply(Math,d(t.record_delimiter.map((function(e){return e.length})))),trimChars:[n.from(" ",t.encoding)[0],n.from("\t",t.encoding)[0]],wasQuoting:!1,wasRowDelimiter:!1}}},{key:"_transform",value:function(e,t,n){if(!0!==this.state.stop){var i=this.__parse(e,!1);void 0!==i&&(this.state.stop=!0),n(i)}}},{key:"_flush",value:function(e){!0!==this.state.stop&&e(this.__parse(void 0,!0))}},{key:"__parse",value:function(e,t){var i,r=this.options,a=r.bom,s=r.comment,o=r.escape,d=r.from_line,l=r.info,u=r.ltrim,c=r.max_record_size,_=r.quote,m=r.raw,f=r.relax,p=r.rtrim,g=r.skip_empty_lines,y=r.to,M=r.to_line,b=this.options.record_delimiter,L=this.state,v=L.bomSkipped,w=L.previousBuf,Y=L.rawBuffer,D=L.escapeIsQuote;if(void 0===w){if(void 0===e)return void this.push(null);i=e}else i=void 0!==w&&void 0===e?w:n.concat([w,e]);if(!1===v)if(!1===a)this.state.bomSkipped=!0;else if(i.length<3){if(!1===t)return void(this.state.previousBuf=i)}else{for(var x in k)if(0===k[x].compare(i,0,k[x].length)){i=i.slice(k[x].length),this.__normalizeOptions(h(h({},this.__originalOptions),{},{encoding:x}));break}this.state.bomSkipped=!0}var S,O=i.length;for(S=0;S<O&&!this.__needMoreData(S,O,t);S++){if(!0===this.state.wasRowDelimiter&&(this.info.lines++,!0===l&&0===this.state.record.length&&0===this.state.field.length&&!1===this.state.wasQuoting&&(this.state.info=Object.assign({},this.info)),this.state.wasRowDelimiter=!1),-1!==M&&this.info.lines>M)return this.state.stop=!0,void this.push(null);!1===this.state.quoting&&0===b.length&&this.__autoDiscoverRecordDelimiter(i,S)&&(b=this.options.record_delimiter);var H=i[S];if(!0===m&&Y.append(H),13!==H&&10!==H||!1!==this.state.wasRowDelimiter||(this.state.wasRowDelimiter=!0),!0===this.state.escaping)this.state.escaping=!1;else{if(null!==o&&!0===this.state.quoting&&this.__isEscape(i,S,H)&&S+o.length<O){if(!D){this.state.escaping=!0,S+=o.length-1;continue}if(this.__isQuote(i,S+o.length)){this.state.escaping=!0,S+=o.length-1;continue}}if(!1===this.state.commenting&&this.__isQuote(i,S))if(!0===this.state.quoting){var j=i[S+_.length],P=p&&this.__isCharTrimable(j),E=null!==s&&this.__compareBytes(s,i,S+_.length,j),A=this.__isDelimiter(i,S+_.length,j),R=0===b.length?this.__autoDiscoverRecordDelimiter(i,S+_.length):this.__isRecordDelimiter(j,i,S+_.length);if(null!==o&&this.__isEscape(i,S,H)&&this.__isQuote(i,S+o.length))S+=o.length-1;else{if(!j||A||R||E||P){this.state.quoting=!1,this.state.wasQuoting=!0,S+=_.length-1;continue}if(!1===f){var C=this.__error(new T("CSV_INVALID_CLOSING_QUOTE",["Invalid Closing Quote:",'got "'.concat(String.fromCharCode(j),'"'),"at line ".concat(this.info.lines),"instead of delimiter, record delimiter, trimable character","(if activated) or comment"],this.options,this.__context()));if(void 0!==C)return C}else this.state.quoting=!1,this.state.wasQuoting=!0,this.state.field.prepend(_),S+=_.length-1}}else{if(0===this.state.field.length){this.state.quoting=!0,S+=_.length-1;continue}if(!1===f){var W=this.__error(new T("INVALID_OPENING_QUOTE",["Invalid Opening Quote:","a quote is found inside a field at line ".concat(this.info.lines)],this.options,this.__context(),{field:this.state.field}));if(void 0!==W)return W}}if(!1===this.state.quoting){var I=this.__isRecordDelimiter(H,i,S);if(0!==I){if(this.state.commenting&&!1===this.state.wasQuoting&&0===this.state.record.length&&0===this.state.field.length)this.info.comment_lines++;else{if(!1===this.state.enabled&&this.info.lines+(!0===this.state.wasRowDelimiter?1:0)>=d){this.state.enabled=!0,this.__resetField(),this.__resetRecord(),S+=I-1;continue}if(!0===g&&!1===this.state.wasQuoting&&0===this.state.record.length&&0===this.state.field.length){this.info.empty_lines++,S+=I-1;continue}var F=this.__onField();if(void 0!==F)return F;var N=this.__onRecord();if(void 0!==N)return N;if(-1!==y&&this.info.records>=y)return this.state.stop=!0,void this.push(null)}this.state.commenting=!1,S+=I-1;continue}if(this.state.commenting)continue;if(0!==(null===s?0:this.__compareBytes(s,i,S,H))){this.state.commenting=!0;continue}var z=this.__isDelimiter(i,S,H);if(0!==z){var B=this.__onField();if(void 0!==B)return B;S+=z-1;continue}}}if(!1===this.state.commenting&&0!==c&&this.state.record_length+this.state.field.length>c){var V=this.__error(new T("CSV_MAX_RECORD_SIZE",["Max Record Size:","record exceed the maximum number of tolerated bytes","of ".concat(c),"at line ".concat(this.info.lines)],this.options,this.__context()));if(void 0!==V)return V}var U=!1===u||!0===this.state.quoting||0!==this.state.field.length||!this.__isCharTrimable(H),J=!1===p||!1===this.state.wasQuoting;if(!0===U&&!0===J)this.state.field.append(H);else if(!0===p&&!this.__isCharTrimable(H)){var $=this.__error(new T("CSV_NON_TRIMABLE_CHAR_AFTER_CLOSING_QUOTE",["Invalid Closing Quote:","found non trimable byte after quote","at line ".concat(this.info.lines)],this.options,this.__context()));if(void 0!==$)return $}}if(!0===t)if(!0===this.state.quoting){var q=this.__error(new T("CSV_QUOTE_NOT_CLOSED",["Quote Not Closed:","the parsing is finished with an opening quote at line ".concat(this.info.lines)],this.options,this.__context()));if(void 0!==q)return q}else if(!0===this.state.wasQuoting||0!==this.state.record.length||0!==this.state.field.length){var G=this.__onField();if(void 0!==G)return G;var K=this.__onRecord();if(void 0!==K)return K}else!0===this.state.wasRowDelimiter?this.info.empty_lines++:!0===this.state.commenting&&this.info.comment_lines++;else this.state.previousBuf=i.slice(S);!0===this.state.wasRowDelimiter&&(this.info.lines++,this.state.wasRowDelimiter=!1)}},{key:"__onRecord",value:function(){var e=this.options,t=e.columns,n=e.columns_duplicates_to_array,i=e.encoding,r=e.info,a=e.from,s=e.relax_column_count,o=e.relax_column_count_less,d=e.relax_column_count_more,l=e.raw,u=e.skip_lines_with_empty_values,c=this.state,h=c.enabled,_=c.record;if(!1===h)return this.__resetRecord();var m=_.length;if(!0===t)return H(_)?void this.__resetRecord():this.__firstLineToColumns(_);if(!1===t&&0===this.info.records&&(this.state.expectedRecordLength=m),m!==this.state.expectedRecordLength){var f=!1===t?new T("CSV_INCONSISTENT_RECORD_LENGTH",["Invalid Record Length:","expect ".concat(this.state.expectedRecordLength,","),"got ".concat(m," on line ").concat(this.info.lines)],this.options,this.__context(),{record:_}):new T("CSV_RECORD_DONT_MATCH_COLUMNS_LENGTH",["Invalid Record Length:","columns length is ".concat(t.length,","),"got ".concat(m," on line ").concat(this.info.lines)],this.options,this.__context(),{record:_});if(!0===s||!0===o&&m<this.state.expectedRecordLength||!0===d&&m>this.state.expectedRecordLength)this.info.invalid_field_length++,this.state.error=f;else{var p=this.__error(f);if(p)return p}}if(!0===u&&H(_))this.__resetRecord();else{if(!0===this.state.recordHasError)return this.__resetRecord(),void(this.state.recordHasError=!1);if(this.info.records++,1===a||this.info.records>=a)if(!1!==t){for(var g={},y=0,M=_.length;y<M;y++)void 0===t[y]||t[y].disabled||(!0===n&&void 0!==g[t[y].name]?Array.isArray(g[t[y].name])?g[t[y].name]=g[t[y].name].concat(_[y]):g[t[y].name]=[g[t[y].name],_[y]]:g[t[y].name]=_[y]);var b=this.options.objname;if(void 0===b)if(!0===l||!0===r){var L=this.__push(Object.assign({record:g},!0===l?{raw:this.state.rawBuffer.toString(i)}:{},!0===r?{info:this.state.info}:{}));if(L)return L}else{var v=this.__push(g);if(v)return v}else if(!0===l||!0===r){var w=this.__push(Object.assign({record:[g[b],g]},!0===l?{raw:this.state.rawBuffer.toString(i)}:{},!0===r?{info:this.state.info}:{}));if(w)return w}else{var Y=this.__push([g[b],g]);if(Y)return Y}}else if(!0===l||!0===r){var k=this.__push(Object.assign({record:_},!0===l?{raw:this.state.rawBuffer.toString(i)}:{},!0===r?{info:this.state.info}:{}));if(k)return k}else{var D=this.__push(_);if(D)return D}this.__resetRecord()}}},{key:"__firstLineToColumns",value:function(e){var t=this.state.firstLineToHeaders;try{var n=void 0===t?e:t.call(null,e);if(!Array.isArray(n))return this.__error(new T("CSV_INVALID_COLUMN_MAPPING",["Invalid Column Mapping:","expect an array from column function,","got ".concat(JSON.stringify(n))],this.options,this.__context(),{headers:n}));var i=j(n);return this.state.expectedRecordLength=i.length,this.options.columns=i,void this.__resetRecord()}catch(e){return e}}},{key:"__resetRecord",value:function(){!0===this.options.raw&&this.state.rawBuffer.reset(),this.state.error=void 0,this.state.record=[],this.state.record_length=0}},{key:"__onField",value:function(){var e=this.options,t=e.cast,n=e.encoding,i=e.rtrim,r=e.max_record_size,a=this.state,s=a.enabled,d=a.wasQuoting;if(!1===s)return this.__resetField();var l=this.state.field.toString(n);if(!0===i&&!1===d&&(l=l.trimRight()),!0===t){var u=o(this.__cast(l),2),c=u[0],h=u[1];if(void 0!==c)return c;l=h}this.state.record.push(l),0!==r&&"string"==typeof l&&(this.state.record_length+=l.length),this.__resetField()}},{key:"__resetField",value:function(){this.state.field.reset(),this.state.wasQuoting=!1}},{key:"__push",value:function(e){var t=this.options.on_record;if(void 0!==t){var n=this.__context();try{e=t.call(null,e,n)}catch(e){return e}if(null==e)return}this.push(e)}},{key:"__cast",value:function(e){var t=this.options,n=t.columns,i=t.relax_column_count;if(!0===Array.isArray(n)&&i&&this.options.columns.length<=this.state.record.length)return[void 0,void 0];var r=this.__context();if(null!==this.state.castField)try{return[void 0,this.state.castField.call(null,e,r)]}catch(e){return[e]}return this.__isFloat(e)?[void 0,parseFloat(e)]:!1!==this.options.cast_date?[void 0,this.options.cast_date.call(null,e,r)]:[void 0,e]}},{key:"__isCharTrimable",value:function(e){return 32===e||9===e||13===e||10===e||12===e}},{key:"__isFloat",value:function(e){return e-parseFloat(e)+1>=0}},{key:"__compareBytes",value:function(e,t,n,i){if(e[0]!==i)return 0;for(var r=e.length,a=1;a<r;a++)if(e[a]!==t[n+a])return 0;return r}},{key:"__needMoreData",value:function(e,t,n){if(n)return!1;var i=this.options.quote,r=this.state,a=r.quoting,s=r.needMoreDataSize,o=r.recordDelimiterMaxLength;return t-e-1<Math.max(s,o,a?i.length+o:0)}},{key:"__isDelimiter",value:function(e,t,n){var i=this.options,r=i.delimiter,a=i.ignore_last_delimiters;if(!0===a&&this.state.record.length===this.options.columns.length-1)return 0;if(!1!==a&&"number"==typeof a&&this.state.record.length===a-1)return 0;e:for(var s=0;s<r.length;s++){var o=r[s];if(o[0]===n){for(var d=1;d<o.length;d++)if(o[d]!==e[t+d])continue e;return o.length}}return 0}},{key:"__isRecordDelimiter",value:function(e,t,n){var i=this.options.record_delimiter,r=i.length;e:for(var a=0;a<r;a++){var s=i[a],o=s.length;if(s[0]===e){for(var d=1;d<o;d++)if(s[d]!==t[n+d])continue e;return s.length}}return 0}},{key:"__isEscape",value:function(e,t,n){var i=this.options.escape;if(null===i)return!1;var r=i.length;if(i[0]===n){for(var a=0;a<r;a++)if(i[a]!==e[t+a])return!1;return!0}return!1}},{key:"__isQuote",value:function(e,t){var n=this.options.quote;if(null===n)return!1;for(var i=n.length,r=0;r<i;r++)if(n[r]!==e[t+r])return!1;return!0}},{key:"__autoDiscoverRecordDelimiter",value:function(e,t){var i=this.options.encoding,r=e[t];return 13===r?10===e[t+1]?(this.options.record_delimiter.push(n.from("\r\n",i)),this.state.recordDelimiterMaxLength=2,2):(this.options.record_delimiter.push(n.from("\r",i)),this.state.recordDelimiterMaxLength=1,1):10===r?(this.options.record_delimiter.push(n.from("\n",i)),this.state.recordDelimiterMaxLength=1,1):0}},{key:"__error",value:function(e){var t=this.options.skip_lines_with_error,n="string"==typeof e?new Error(e):e;return t?(this.state.recordHasError=!0,void this.emit("skip",n)):n}},{key:"__context",value:function(){var e=this.options.columns;return{column:!0===Array.isArray(e)?e.length>this.state.record.length?e[this.state.record.length].name:null:this.state.record.length,empty_lines:this.info.empty_lines,error:this.state.error,header:!0===e,index:this.state.record.length,invalid_field_length:this.info.invalid_field_length,quoting:this.state.wasQuoting,lines:this.info.lines,records:this.info.records}}}])&&f(t.prototype,i),r&&f(t,r),s}(w),x=function(){var e,t,r;for(var a in arguments){var o=arguments[a],d=s(o);if(void 0!==e||"string"!=typeof o&&!n.isBuffer(o))if(void 0===t&&O(o))t=o;else{if(void 0!==r||"function"!==d)throw new T("CSV_INVALID_ARGUMENT",["Invalid argument:","got ".concat(JSON.stringify(o)," at index ").concat(a)],this.options);r=o}else e=o}var l=new D(t);if(r){var u=void 0===t||void 0===t.objname?[]:{};l.on("readable",(function(){for(var e;null!==(e=this.read());)void 0===t||void 0===t.objname?u.push(e):u[e[0]]=e[1]})),l.on("error",(function(e){r(e,void 0,l.info)})),l.on("end",(function(){r(void 0,u,l.info)}))}return void 0!==e&&("function"==typeof i?i((function(){l.write(e),l.end()})):(l.write(e),l.end())),l},T=function(e){p(i,e);var t=y(i);function i(e,r,a){var s;m(this,i),Array.isArray(r)&&(r=r.join(" ")),s=t.call(this,r),void 0!==Error.captureStackTrace&&Error.captureStackTrace(b(s),i),s.code=e;for(var o=arguments.length,d=new Array(o>3?o-3:0),l=3;l<o;l++)d[l-3]=arguments[l];for(var u=0,c=d;u<c.length;u++){var h=c[u];for(var _ in h){var f=h[_];s[_]=n.isBuffer(f)?f.toString(a.encoding):null==f?f:JSON.parse(JSON.stringify(f))}}return s}return i}(r(Error));x.Parser=D,x.CsvError=T,t.exports=x;var S=function(e){return e.replace(/([A-Z])/g,(function(e,t){return"_"+t.toLowerCase()}))},O=function(e){return"object"===s(e)&&null!==e&&!Array.isArray(e)},H=function(e){return e.every((function(e){return null==e||e.toString&&""===e.toString().trim()}))},j=function(e){for(var t=[],n=0,i=e.length;n<i;n++){var r=e[n];if(null==r||!1===r)t[n]={disabled:!0};else if("string"==typeof r)t[n]={name:r};else{if(!O(r))throw new T("CSV_INVALID_COLUMN_DEFINITION",["Invalid column definition:","expect a string or a literal object,","got ".concat(JSON.stringify(r)," at position ").concat(n)]);if("string"!=typeof r.name)throw new T("CSV_OPTION_COLUMNS_MISSING_NAME",["Option columns missing name:",'property "name" is required at position '.concat(n),"when column is an object literal"]);t[n]=r}}return t}}).call(this)}).call(this,e("buffer").Buffer,e("timers").setImmediate)},{"./ResizeableBuffer":1,buffer:5,stream:11,timers:27}],3:[function(e,t,n){"use strict";n.byteLength=function(e){var t=l(e),n=t[0],i=t[1];return 3*(n+i)/4-i},n.toByteArray=function(e){var t,n,i=l(e),s=i[0],o=i[1],d=new a(function(e,t,n){return 3*(t+n)/4-n}(0,s,o)),u=0,c=o>0?s-4:s;for(n=0;n<c;n+=4)t=r[e.charCodeAt(n)]<<18|r[e.charCodeAt(n+1)]<<12|r[e.charCodeAt(n+2)]<<6|r[e.charCodeAt(n+3)],d[u++]=t>>16&255,d[u++]=t>>8&255,d[u++]=255&t;return 2===o&&(t=r[e.charCodeAt(n)]<<2|r[e.charCodeAt(n+1)]>>4,d[u++]=255&t),1===o&&(t=r[e.charCodeAt(n)]<<10|r[e.charCodeAt(n+1)]<<4|r[e.charCodeAt(n+2)]>>2,d[u++]=t>>8&255,d[u++]=255&t),d},n.fromByteArray=function(e){for(var t,n=e.length,r=n%3,a=[],s=16383,o=0,d=n-r;o<d;o+=s)a.push(u(e,o,o+s>d?d:o+s));return 1===r?(t=e[n-1],a.push(i[t>>2]+i[t<<4&63]+"==")):2===r&&(t=(e[n-2]<<8)+e[n-1],a.push(i[t>>10]+i[t>>4&63]+i[t<<2&63]+"=")),a.join("")};for(var i=[],r=[],a="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",o=0,d=s.length;o<d;++o)i[o]=s[o],r[s.charCodeAt(o)]=o;function l(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function u(e,t,n){for(var r,a=[],s=t;s<n;s+=3)r=(e[s]<<16&16711680)+(e[s+1]<<8&65280)+(255&e[s+2]),a.push(i[(o=r)>>18&63]+i[o>>12&63]+i[o>>6&63]+i[63&o]);var o;return a.join("")}r["-".charCodeAt(0)]=62,r["_".charCodeAt(0)]=63},{}],4:[function(e,t,n){},{}],5:[function(e,t,n){(function(t){(function(){"use strict";var t=e("base64-js"),i=e("ieee754");n.Buffer=s,n.SlowBuffer=function(e){return+e!=e&&(e=0),s.alloc(+e)},n.INSPECT_MAX_BYTES=50;var r=2147483647;function a(e){if(e>r)throw new RangeError('The value "'+e+'" is invalid for option "size"');var t=new Uint8Array(e);return t.__proto__=s.prototype,t}function s(e,t,n){if("number"==typeof e){if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return l(e)}return o(e,t,n)}function o(e,t,n){if("string"==typeof e)return function(e,t){if("string"==typeof t&&""!==t||(t="utf8"),!s.isEncoding(t))throw new TypeError("Unknown encoding: "+t);var n=0|h(e,t),i=a(n),r=i.write(e,t);return r!==n&&(i=i.slice(0,r)),i}(e,t);if(ArrayBuffer.isView(e))return u(e);if(null==e)throw TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(I(e,ArrayBuffer)||e&&I(e.buffer,ArrayBuffer))return function(e,t,n){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(n||0))throw new RangeError('"length" is outside of buffer bounds');var i;return(i=void 0===t&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,t):new Uint8Array(e,t,n)).__proto__=s.prototype,i}(e,t,n);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');var i=e.valueOf&&e.valueOf();if(null!=i&&i!==e)return s.from(i,t,n);var r=function(e){if(s.isBuffer(e)){var t=0|c(e.length),n=a(t);return 0===n.length||e.copy(n,0,0,t),n}return void 0!==e.length?"number"!=typeof e.length||F(e.length)?a(0):u(e):"Buffer"===e.type&&Array.isArray(e.data)?u(e.data):void 0}(e);if(r)return r;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return s.from(e[Symbol.toPrimitive]("string"),t,n);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function d(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function l(e){return d(e),a(e<0?0:0|c(e))}function u(e){for(var t=e.length<0?0:0|c(e.length),n=a(t),i=0;i<t;i+=1)n[i]=255&e[i];return n}function c(e){if(e>=r)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+r.toString(16)+" bytes");return 0|e}function h(e,t){if(s.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||I(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);var n=e.length,i=arguments.length>2&&!0===arguments[2];if(!i&&0===n)return 0;for(var r=!1;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":return R(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return C(e).length;default:if(r)return i?-1:R(e).length;t=(""+t).toLowerCase(),r=!0}}function _(e,t,n){var i=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return T(this,t,n);case"utf8":case"utf-8":return Y(this,t,n);case"ascii":return D(this,t,n);case"latin1":case"binary":return x(this,t,n);case"base64":return w(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return S(this,t,n);default:if(i)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),i=!0}}function m(e,t,n){var i=e[t];e[t]=e[n],e[n]=i}function f(e,t,n,i,r){if(0===e.length)return-1;if("string"==typeof n?(i=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),F(n=+n)&&(n=r?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(r)return-1;n=e.length-1}else if(n<0){if(!r)return-1;n=0}if("string"==typeof t&&(t=s.from(t,i)),s.isBuffer(t))return 0===t.length?-1:p(e,t,n,i,r);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?r?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):p(e,[t],n,i,r);throw new TypeError("val must be string, number or Buffer")}function p(e,t,n,i,r){var a,s=1,o=e.length,d=t.length;if(void 0!==i&&("ucs2"===(i=String(i).toLowerCase())||"ucs-2"===i||"utf16le"===i||"utf-16le"===i)){if(e.length<2||t.length<2)return-1;s=2,o/=2,d/=2,n/=2}function l(e,t){return 1===s?e[t]:e.readUInt16BE(t*s)}if(r){var u=-1;for(a=n;a<o;a++)if(l(e,a)===l(t,-1===u?0:a-u)){if(-1===u&&(u=a),a-u+1===d)return u*s}else-1!==u&&(a-=a-u),u=-1}else for(n+d>o&&(n=o-d),a=n;a>=0;a--){for(var c=!0,h=0;h<d;h++)if(l(e,a+h)!==l(t,h)){c=!1;break}if(c)return a}return-1}function g(e,t,n,i){n=Number(n)||0;var r=e.length-n;i?(i=Number(i))>r&&(i=r):i=r;var a=t.length;i>a/2&&(i=a/2);for(var s=0;s<i;++s){var o=parseInt(t.substr(2*s,2),16);if(F(o))return s;e[n+s]=o}return s}function y(e,t,n,i){return W(R(t,e.length-n),e,n,i)}function M(e,t,n,i){return W(function(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,i)}function b(e,t,n,i){return M(e,t,n,i)}function L(e,t,n,i){return W(C(t),e,n,i)}function v(e,t,n,i){return W(function(e,t){for(var n,i,r,a=[],s=0;s<e.length&&!((t-=2)<0);++s)i=(n=e.charCodeAt(s))>>8,r=n%256,a.push(r),a.push(i);return a}(t,e.length-n),e,n,i)}function w(e,n,i){return 0===n&&i===e.length?t.fromByteArray(e):t.fromByteArray(e.slice(n,i))}function Y(e,t,n){n=Math.min(e.length,n);for(var i=[],r=t;r<n;){var a,s,o,d,l=e[r],u=null,c=l>239?4:l>223?3:l>191?2:1;if(r+c<=n)switch(c){case 1:l<128&&(u=l);break;case 2:128==(192&(a=e[r+1]))&&(d=(31&l)<<6|63&a)>127&&(u=d);break;case 3:a=e[r+1],s=e[r+2],128==(192&a)&&128==(192&s)&&(d=(15&l)<<12|(63&a)<<6|63&s)>2047&&(d<55296||d>57343)&&(u=d);break;case 4:a=e[r+1],s=e[r+2],o=e[r+3],128==(192&a)&&128==(192&s)&&128==(192&o)&&(d=(15&l)<<18|(63&a)<<12|(63&s)<<6|63&o)>65535&&d<1114112&&(u=d)}null===u?(u=65533,c=1):u>65535&&(u-=65536,i.push(u>>>10&1023|55296),u=56320|1023&u),i.push(u),r+=c}return function(e){var t=e.length;if(t<=k)return String.fromCharCode.apply(String,e);for(var n="",i=0;i<t;)n+=String.fromCharCode.apply(String,e.slice(i,i+=k));return n}(i)}n.kMaxLength=r,s.TYPED_ARRAY_SUPPORT=function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()}catch(e){return!1}}(),s.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(s.prototype,"parent",{enumerable:!0,get:function(){if(s.isBuffer(this))return this.buffer}}),Object.defineProperty(s.prototype,"offset",{enumerable:!0,get:function(){if(s.isBuffer(this))return this.byteOffset}}),"undefined"!=typeof Symbol&&null!=Symbol.species&&s[Symbol.species]===s&&Object.defineProperty(s,Symbol.species,{value:null,configurable:!0,enumerable:!1,writable:!1}),s.poolSize=8192,s.from=function(e,t,n){return o(e,t,n)},s.prototype.__proto__=Uint8Array.prototype,s.__proto__=Uint8Array,s.alloc=function(e,t,n){return function(e,t,n){return d(e),e<=0?a(e):void 0!==t?"string"==typeof n?a(e).fill(t,n):a(e).fill(t):a(e)}(e,t,n)},s.allocUnsafe=function(e){return l(e)},s.allocUnsafeSlow=function(e){return l(e)},s.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==s.prototype},s.compare=function(e,t){if(I(e,Uint8Array)&&(e=s.from(e,e.offset,e.byteLength)),I(t,Uint8Array)&&(t=s.from(t,t.offset,t.byteLength)),!s.isBuffer(e)||!s.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;for(var n=e.length,i=t.length,r=0,a=Math.min(n,i);r<a;++r)if(e[r]!==t[r]){n=e[r],i=t[r];break}return n<i?-1:i<n?1:0},s.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},s.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return s.alloc(0);var n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;var i=s.allocUnsafe(t),r=0;for(n=0;n<e.length;++n){var a=e[n];if(I(a,Uint8Array)&&(a=s.from(a)),!s.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(i,r),r+=a.length}return i},s.byteLength=h,s.prototype._isBuffer=!0,s.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)m(this,t,t+1);return this},s.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)m(this,t,t+3),m(this,t+1,t+2);return this},s.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)m(this,t,t+7),m(this,t+1,t+6),m(this,t+2,t+5),m(this,t+3,t+4);return this},s.prototype.toString=function(){var e=this.length;return 0===e?"":0===arguments.length?Y(this,0,e):_.apply(this,arguments)},s.prototype.toLocaleString=s.prototype.toString,s.prototype.equals=function(e){if(!s.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===s.compare(this,e)},s.prototype.inspect=function(){var e="",t=n.INSPECT_MAX_BYTES;return e=this.toString("hex",0,t).replace(/(.{2})/g,"$1 ").trim(),this.length>t&&(e+=" ... "),"<Buffer "+e+">"},s.prototype.compare=function(e,t,n,i,r){if(I(e,Uint8Array)&&(e=s.from(e,e.offset,e.byteLength)),!s.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===i&&(i=0),void 0===r&&(r=this.length),t<0||n>e.length||i<0||r>this.length)throw new RangeError("out of range index");if(i>=r&&t>=n)return 0;if(i>=r)return-1;if(t>=n)return 1;if(this===e)return 0;for(var a=(r>>>=0)-(i>>>=0),o=(n>>>=0)-(t>>>=0),d=Math.min(a,o),l=this.slice(i,r),u=e.slice(t,n),c=0;c<d;++c)if(l[c]!==u[c]){a=l[c],o=u[c];break}return a<o?-1:o<a?1:0},s.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},s.prototype.indexOf=function(e,t,n){return f(this,e,t,n,!0)},s.prototype.lastIndexOf=function(e,t,n){return f(this,e,t,n,!1)},s.prototype.write=function(e,t,n,i){if(void 0===t)i="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)i=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(n)?(n>>>=0,void 0===i&&(i="utf8")):(i=n,n=void 0)}var r=this.length-t;if((void 0===n||n>r)&&(n=r),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");i||(i="utf8");for(var a=!1;;)switch(i){case"hex":return g(this,e,t,n);case"utf8":case"utf-8":return y(this,e,t,n);case"ascii":return M(this,e,t,n);case"latin1":case"binary":return b(this,e,t,n);case"base64":return L(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return v(this,e,t,n);default:if(a)throw new TypeError("Unknown encoding: "+i);i=(""+i).toLowerCase(),a=!0}},s.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var k=4096;function D(e,t,n){var i="";n=Math.min(e.length,n);for(var r=t;r<n;++r)i+=String.fromCharCode(127&e[r]);return i}function x(e,t,n){var i="";n=Math.min(e.length,n);for(var r=t;r<n;++r)i+=String.fromCharCode(e[r]);return i}function T(e,t,n){var i,r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);for(var a="",s=t;s<n;++s)a+=(i=e[s])<16?"0"+i.toString(16):i.toString(16);return a}function S(e,t,n){for(var i=e.slice(t,n),r="",a=0;a<i.length;a+=2)r+=String.fromCharCode(i[a]+256*i[a+1]);return r}function O(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function H(e,t,n,i,r,a){if(!s.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>r||t<a)throw new RangeError('"value" argument is out of bounds');if(n+i>e.length)throw new RangeError("Index out of range")}function j(e,t,n,i,r,a){if(n+i>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function P(e,t,n,r,a){return t=+t,n>>>=0,a||j(e,0,n,4),i.write(e,t,n,r,23,4),n+4}function E(e,t,n,r,a){return t=+t,n>>>=0,a||j(e,0,n,8),i.write(e,t,n,r,52,8),n+8}s.prototype.slice=function(e,t){var n=this.length;(e=~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e);var i=this.subarray(e,t);return i.__proto__=s.prototype,i},s.prototype.readUIntLE=function(e,t,n){e>>>=0,t>>>=0,n||O(e,t,this.length);for(var i=this[e],r=1,a=0;++a<t&&(r*=256);)i+=this[e+a]*r;return i},s.prototype.readUIntBE=function(e,t,n){e>>>=0,t>>>=0,n||O(e,t,this.length);for(var i=this[e+--t],r=1;t>0&&(r*=256);)i+=this[e+--t]*r;return i},s.prototype.readUInt8=function(e,t){return e>>>=0,t||O(e,1,this.length),this[e]},s.prototype.readUInt16LE=function(e,t){return e>>>=0,t||O(e,2,this.length),this[e]|this[e+1]<<8},s.prototype.readUInt16BE=function(e,t){return e>>>=0,t||O(e,2,this.length),this[e]<<8|this[e+1]},s.prototype.readUInt32LE=function(e,t){return e>>>=0,t||O(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},s.prototype.readUInt32BE=function(e,t){return e>>>=0,t||O(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},s.prototype.readIntLE=function(e,t,n){e>>>=0,t>>>=0,n||O(e,t,this.length);for(var i=this[e],r=1,a=0;++a<t&&(r*=256);)i+=this[e+a]*r;return i>=(r*=128)&&(i-=Math.pow(2,8*t)),i},s.prototype.readIntBE=function(e,t,n){e>>>=0,t>>>=0,n||O(e,t,this.length);for(var i=t,r=1,a=this[e+--i];i>0&&(r*=256);)a+=this[e+--i]*r;return a>=(r*=128)&&(a-=Math.pow(2,8*t)),a},s.prototype.readInt8=function(e,t){return e>>>=0,t||O(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},s.prototype.readInt16LE=function(e,t){e>>>=0,t||O(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},s.prototype.readInt16BE=function(e,t){e>>>=0,t||O(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},s.prototype.readInt32LE=function(e,t){return e>>>=0,t||O(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},s.prototype.readInt32BE=function(e,t){return e>>>=0,t||O(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},s.prototype.readFloatLE=function(e,t){return e>>>=0,t||O(e,4,this.length),i.read(this,e,!0,23,4)},s.prototype.readFloatBE=function(e,t){return e>>>=0,t||O(e,4,this.length),i.read(this,e,!1,23,4)},s.prototype.readDoubleLE=function(e,t){return e>>>=0,t||O(e,8,this.length),i.read(this,e,!0,52,8)},s.prototype.readDoubleBE=function(e,t){return e>>>=0,t||O(e,8,this.length),i.read(this,e,!1,52,8)},s.prototype.writeUIntLE=function(e,t,n,i){e=+e,t>>>=0,n>>>=0,i||H(this,e,t,n,Math.pow(2,8*n)-1,0);var r=1,a=0;for(this[t]=255&e;++a<n&&(r*=256);)this[t+a]=e/r&255;return t+n},s.prototype.writeUIntBE=function(e,t,n,i){e=+e,t>>>=0,n>>>=0,i||H(this,e,t,n,Math.pow(2,8*n)-1,0);var r=n-1,a=1;for(this[t+r]=255&e;--r>=0&&(a*=256);)this[t+r]=e/a&255;return t+n},s.prototype.writeUInt8=function(e,t,n){return e=+e,t>>>=0,n||H(this,e,t,1,255,0),this[t]=255&e,t+1},s.prototype.writeUInt16LE=function(e,t,n){return e=+e,t>>>=0,n||H(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},s.prototype.writeUInt16BE=function(e,t,n){return e=+e,t>>>=0,n||H(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},s.prototype.writeUInt32LE=function(e,t,n){return e=+e,t>>>=0,n||H(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},s.prototype.writeUInt32BE=function(e,t,n){return e=+e,t>>>=0,n||H(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},s.prototype.writeIntLE=function(e,t,n,i){if(e=+e,t>>>=0,!i){var r=Math.pow(2,8*n-1);H(this,e,t,n,r-1,-r)}var a=0,s=1,o=0;for(this[t]=255&e;++a<n&&(s*=256);)e<0&&0===o&&0!==this[t+a-1]&&(o=1),this[t+a]=(e/s>>0)-o&255;return t+n},s.prototype.writeIntBE=function(e,t,n,i){if(e=+e,t>>>=0,!i){var r=Math.pow(2,8*n-1);H(this,e,t,n,r-1,-r)}var a=n-1,s=1,o=0;for(this[t+a]=255&e;--a>=0&&(s*=256);)e<0&&0===o&&0!==this[t+a+1]&&(o=1),this[t+a]=(e/s>>0)-o&255;return t+n},s.prototype.writeInt8=function(e,t,n){return e=+e,t>>>=0,n||H(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},s.prototype.writeInt16LE=function(e,t,n){return e=+e,t>>>=0,n||H(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},s.prototype.writeInt16BE=function(e,t,n){return e=+e,t>>>=0,n||H(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},s.prototype.writeInt32LE=function(e,t,n){return e=+e,t>>>=0,n||H(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},s.prototype.writeInt32BE=function(e,t,n){return e=+e,t>>>=0,n||H(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},s.prototype.writeFloatLE=function(e,t,n){return P(this,e,t,!0,n)},s.prototype.writeFloatBE=function(e,t,n){return P(this,e,t,!1,n)},s.prototype.writeDoubleLE=function(e,t,n){return E(this,e,t,!0,n)},s.prototype.writeDoubleBE=function(e,t,n){return E(this,e,t,!1,n)},s.prototype.copy=function(e,t,n,i){if(!s.isBuffer(e))throw new TypeError("argument should be a Buffer");if(n||(n=0),i||0===i||(i=this.length),t>=e.length&&(t=e.length),t||(t=0),i>0&&i<n&&(i=n),i===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("Index out of range");if(i<0)throw new RangeError("sourceEnd out of bounds");i>this.length&&(i=this.length),e.length-t<i-n&&(i=e.length-t+n);var r=i-n;if(this===e&&"function"==typeof Uint8Array.prototype.copyWithin)this.copyWithin(t,n,i);else if(this===e&&n<t&&t<i)for(var a=r-1;a>=0;--a)e[a+t]=this[a+n];else Uint8Array.prototype.set.call(e,this.subarray(n,i),t);return r},s.prototype.fill=function(e,t,n,i){if("string"==typeof e){if("string"==typeof t?(i=t,t=0,n=this.length):"string"==typeof n&&(i=n,n=this.length),void 0!==i&&"string"!=typeof i)throw new TypeError("encoding must be a string");if("string"==typeof i&&!s.isEncoding(i))throw new TypeError("Unknown encoding: "+i);if(1===e.length){var r=e.charCodeAt(0);("utf8"===i&&r<128||"latin1"===i)&&(e=r)}}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;var a;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(a=t;a<n;++a)this[a]=e;else{var o=s.isBuffer(e)?e:s.from(e,i),d=o.length;if(0===d)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(a=0;a<n-t;++a)this[a+t]=o[a%d]}return this};var A=/[^+/0-9A-Za-z-_]/g;function R(e,t){var n;t=t||1/0;for(var i=e.length,r=null,a=[],s=0;s<i;++s){if((n=e.charCodeAt(s))>55295&&n<57344){if(!r){if(n>56319){(t-=3)>-1&&a.push(239,191,189);continue}if(s+1===i){(t-=3)>-1&&a.push(239,191,189);continue}r=n;continue}if(n<56320){(t-=3)>-1&&a.push(239,191,189),r=n;continue}n=65536+(r-55296<<10|n-56320)}else r&&(t-=3)>-1&&a.push(239,191,189);if(r=null,n<128){if((t-=1)<0)break;a.push(n)}else if(n<2048){if((t-=2)<0)break;a.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;a.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;a.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return a}function C(e){return t.toByteArray(function(e){if((e=(e=e.split("=")[0]).trim().replace(A,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function W(e,t,n,i){for(var r=0;r<i&&!(r+n>=t.length||r>=e.length);++r)t[r+n]=e[r];return r}function I(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function F(e){return e!=e}}).call(this)}).call(this,e("buffer").Buffer)},{"base64-js":3,buffer:5,ieee754:7}],6:[function(e,t,n){"use strict";var i,r="object"==typeof Reflect?Reflect:null,a=r&&"function"==typeof r.apply?r.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};i=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var s=Number.isNaN||function(e){return e!=e};function o(){o.init.call(this)}t.exports=o,t.exports.once=function(e,t){return new Promise((function(n,i){function r(){void 0!==a&&e.removeListener("error",a),n([].slice.call(arguments))}var a;"error"!==t&&(a=function(n){e.removeListener(t,r),i(n)},e.once("error",a)),e.once(t,r)}))},o.EventEmitter=o,o.prototype._events=void 0,o.prototype._eventsCount=0,o.prototype._maxListeners=void 0;var d=10;function l(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function u(e){return void 0===e._maxListeners?o.defaultMaxListeners:e._maxListeners}function c(e,t,n,i){var r,a,s,o;if(l(n),void 0===(a=e._events)?(a=e._events=Object.create(null),e._eventsCount=0):(void 0!==a.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),a=e._events),s=a[t]),void 0===s)s=a[t]=n,++e._eventsCount;else if("function"==typeof s?s=a[t]=i?[n,s]:[s,n]:i?s.unshift(n):s.push(n),(r=u(e))>0&&s.length>r&&!s.warned){s.warned=!0;var d=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");d.name="MaxListenersExceededWarning",d.emitter=e,d.type=t,d.count=s.length,o=d,console&&console.warn&&console.warn(o)}return e}function h(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function _(e,t,n){var i={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},r=h.bind(i);return r.listener=n,i.wrapFn=r,r}function m(e,t,n){var i=e._events;if(void 0===i)return[];var r=i[t];return void 0===r?[]:"function"==typeof r?n?[r.listener||r]:[r]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(r):p(r,r.length)}function f(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function p(e,t){for(var n=new Array(t),i=0;i<t;++i)n[i]=e[i];return n}Object.defineProperty(o,"defaultMaxListeners",{enumerable:!0,get:function(){return d},set:function(e){if("number"!=typeof e||e<0||s(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");d=e}}),o.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},o.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||s(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},o.prototype.getMaxListeners=function(){return u(this)},o.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var i="error"===e,r=this._events;if(void 0!==r)i=i&&void 0===r.error;else if(!i)return!1;if(i){var s;if(t.length>0&&(s=t[0]),s instanceof Error)throw s;var o=new Error("Unhandled error."+(s?" ("+s.message+")":""));throw o.context=s,o}var d=r[e];if(void 0===d)return!1;if("function"==typeof d)a(d,this,t);else{var l=d.length,u=p(d,l);for(n=0;n<l;++n)a(u[n],this,t)}return!0},o.prototype.addListener=function(e,t){return c(this,e,t,!1)},o.prototype.on=o.prototype.addListener,o.prototype.prependListener=function(e,t){return c(this,e,t,!0)},o.prototype.once=function(e,t){return l(t),this.on(e,_(this,e,t)),this},o.prototype.prependOnceListener=function(e,t){return l(t),this.prependListener(e,_(this,e,t)),this},o.prototype.removeListener=function(e,t){var n,i,r,a,s;if(l(t),void 0===(i=this._events))return this;if(void 0===(n=i[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete i[e],i.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(r=-1,a=n.length-1;a>=0;a--)if(n[a]===t||n[a].listener===t){s=n[a].listener,r=a;break}if(r<0)return this;0===r?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,r),1===n.length&&(i[e]=n[0]),void 0!==i.removeListener&&this.emit("removeListener",e,s||t)}return this},o.prototype.off=o.prototype.removeListener,o.prototype.removeAllListeners=function(e){var t,n,i;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var r,a=Object.keys(n);for(i=0;i<a.length;++i)"removeListener"!==(r=a[i])&&this.removeAllListeners(r);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(i=t.length-1;i>=0;i--)this.removeListener(e,t[i]);return this},o.prototype.listeners=function(e){return m(this,e,!0)},o.prototype.rawListeners=function(e){return m(this,e,!1)},o.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):f.call(e,t)},o.prototype.listenerCount=f,o.prototype.eventNames=function(){return this._eventsCount>0?i(this._events):[]}},{}],7:[function(e,t,n){n.read=function(e,t,n,i,r){var a,s,o=8*r-i-1,d=(1<<o)-1,l=d>>1,u=-7,c=n?r-1:0,h=n?-1:1,_=e[t+c];for(c+=h,a=_&(1<<-u)-1,_>>=-u,u+=o;u>0;a=256*a+e[t+c],c+=h,u-=8);for(s=a&(1<<-u)-1,a>>=-u,u+=i;u>0;s=256*s+e[t+c],c+=h,u-=8);if(0===a)a=1-l;else{if(a===d)return s?NaN:1/0*(_?-1:1);s+=Math.pow(2,i),a-=l}return(_?-1:1)*s*Math.pow(2,a-i)},n.write=function(e,t,n,i,r,a){var s,o,d,l=8*a-r-1,u=(1<<l)-1,c=u>>1,h=23===r?Math.pow(2,-24)-Math.pow(2,-77):0,_=i?0:a-1,m=i?1:-1,f=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(o=isNaN(t)?1:0,s=u):(s=Math.floor(Math.log(t)/Math.LN2),t*(d=Math.pow(2,-s))<1&&(s--,d*=2),(t+=s+c>=1?h/d:h*Math.pow(2,1-c))*d>=2&&(s++,d/=2),s+c>=u?(o=0,s=u):s+c>=1?(o=(t*d-1)*Math.pow(2,r),s+=c):(o=t*Math.pow(2,c-1)*Math.pow(2,r),s=0));r>=8;e[n+_]=255&o,_+=m,o/=256,r-=8);for(s=s<<r|o,l+=r;l>0;e[n+_]=255&s,_+=m,s/=256,l-=8);e[n+_-m]|=128*f}},{}],8:[function(e,t,n){"function"==typeof Object.create?t.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:t.exports=function(e,t){if(t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}}},{}],9:[function(e,t,n){var i,r,a=t.exports={};function s(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function d(e){if(i===setTimeout)return setTimeout(e,0);if((i===s||!i)&&setTimeout)return i=setTimeout,setTimeout(e,0);try{return i(e,0)}catch(t){try{return i.call(null,e,0)}catch(t){return i.call(this,e,0)}}}!function(){try{i="function"==typeof setTimeout?setTimeout:s}catch(e){i=s}try{r="function"==typeof clearTimeout?clearTimeout:o}catch(e){r=o}}();var l,u=[],c=!1,h=-1;function _(){c&&l&&(c=!1,l.length?u=l.concat(u):h=-1,u.length&&m())}function m(){if(!c){var e=d(_);c=!0;for(var t=u.length;t;){for(l=u,u=[];++h<t;)l&&l[h].run();h=-1,t=u.length}l=null,c=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===o||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function f(e,t){this.fun=e,this.array=t}function p(){}a.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];u.push(new f(e,t)),1!==u.length||c||d(m)},f.prototype.run=function(){this.fun.apply(null,this.array)},a.title="browser",a.browser=!0,a.env={},a.argv=[],a.version="",a.versions={},a.on=p,a.addListener=p,a.once=p,a.off=p,a.removeListener=p,a.removeAllListeners=p,a.emit=p,a.prependListener=p,a.prependOnceListener=p,a.listeners=function(e){return[]},a.binding=function(e){throw new Error("process.binding is not supported")},a.cwd=function(){return"/"},a.chdir=function(e){throw new Error("process.chdir is not supported")},a.umask=function(){return 0}},{}],10:[function(e,t,n){var i=e("buffer"),r=i.Buffer;function a(e,t){for(var n in e)t[n]=e[n]}function s(e,t,n){return r(e,t,n)}r.from&&r.alloc&&r.allocUnsafe&&r.allocUnsafeSlow?t.exports=i:(a(i,n),n.Buffer=s),s.prototype=Object.create(r.prototype),a(r,s),s.from=function(e,t,n){if("number"==typeof e)throw new TypeError("Argument must not be a number");return r(e,t,n)},s.alloc=function(e,t,n){if("number"!=typeof e)throw new TypeError("Argument must be a number");var i=r(e);return void 0!==t?"string"==typeof n?i.fill(t,n):i.fill(t):i.fill(0),i},s.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return r(e)},s.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return i.SlowBuffer(e)}},{buffer:5}],11:[function(e,t,n){t.exports=r;var i=e("events").EventEmitter;function r(){i.call(this)}e("inherits")(r,i),r.Readable=e("readable-stream/lib/_stream_readable.js"),r.Writable=e("readable-stream/lib/_stream_writable.js"),r.Duplex=e("readable-stream/lib/_stream_duplex.js"),r.Transform=e("readable-stream/lib/_stream_transform.js"),r.PassThrough=e("readable-stream/lib/_stream_passthrough.js"),r.finished=e("readable-stream/lib/internal/streams/end-of-stream.js"),r.pipeline=e("readable-stream/lib/internal/streams/pipeline.js"),r.Stream=r,r.prototype.pipe=function(e,t){var n=this;function r(t){e.writable&&!1===e.write(t)&&n.pause&&n.pause()}function a(){n.readable&&n.resume&&n.resume()}n.on("data",r),e.on("drain",a),e._isStdio||t&&!1===t.end||(n.on("end",o),n.on("close",d));var s=!1;function o(){s||(s=!0,e.end())}function d(){s||(s=!0,"function"==typeof e.destroy&&e.destroy())}function l(e){if(u(),0===i.listenerCount(this,"error"))throw e}function u(){n.removeListener("data",r),e.removeListener("drain",a),n.removeListener("end",o),n.removeListener("close",d),n.removeListener("error",l),e.removeListener("error",l),n.removeListener("end",u),n.removeListener("close",u),e.removeListener("close",u)}return n.on("error",l),e.on("error",l),n.on("end",u),n.on("close",u),e.on("close",u),e.emit("pipe",n),e}},{events:6,inherits:8,"readable-stream/lib/_stream_duplex.js":13,"readable-stream/lib/_stream_passthrough.js":14,"readable-stream/lib/_stream_readable.js":15,"readable-stream/lib/_stream_transform.js":16,"readable-stream/lib/_stream_writable.js":17,"readable-stream/lib/internal/streams/end-of-stream.js":21,"readable-stream/lib/internal/streams/pipeline.js":23}],12:[function(e,t,n){"use strict";var i={};function r(e,t,n){n||(n=Error);var r=function(e){function n(n,i,r){return e.call(this,function(e,n,i){return"string"==typeof t?t:t(e,n,i)}(n,i,r))||this}return r=e,(i=n).prototype=Object.create(r.prototype),i.prototype.constructor=i,i.__proto__=r,n;var i,r}(n);r.prototype.name=n.name,r.prototype.code=e,i[e]=r}function a(e,t){if(Array.isArray(e)){var n=e.length;return e=e.map((function(e){return String(e)})),n>2?"one of ".concat(t," ").concat(e.slice(0,n-1).join(", "),", or ")+e[n-1]:2===n?"one of ".concat(t," ").concat(e[0]," or ").concat(e[1]):"of ".concat(t," ").concat(e[0])}return"of ".concat(t," ").concat(String(e))}r("ERR_INVALID_OPT_VALUE",(function(e,t){return'The value "'+t+'" is invalid for option "'+e+'"'}),TypeError),r("ERR_INVALID_ARG_TYPE",(function(e,t,n){var i,r,s,o;if("string"==typeof t&&(s="not ",t.substr(!o||o<0?0:+o,s.length)===s)?(i="must not be",t=t.replace(/^not /,"")):i="must be",function(e,t,n){return(void 0===n||n>e.length)&&(n=e.length),e.substring(n-t.length,n)===t}(e," argument"))r="The ".concat(e," ").concat(i," ").concat(a(t,"type"));else{var d=function(e,t,n){return"number"!=typeof n&&(n=0),!(n+t.length>e.length)&&-1!==e.indexOf(t,n)}(e,".")?"property":"argument";r='The "'.concat(e,'" ').concat(d," ").concat(i," ").concat(a(t,"type"))}return r+". Received type ".concat(typeof n)}),TypeError),r("ERR_STREAM_PUSH_AFTER_EOF","stream.push() after EOF"),r("ERR_METHOD_NOT_IMPLEMENTED",(function(e){return"The "+e+" method is not implemented"})),r("ERR_STREAM_PREMATURE_CLOSE","Premature close"),r("ERR_STREAM_DESTROYED",(function(e){return"Cannot call "+e+" after a stream was destroyed"})),r("ERR_MULTIPLE_CALLBACK","Callback called multiple times"),r("ERR_STREAM_CANNOT_PIPE","Cannot pipe, not readable"),r("ERR_STREAM_WRITE_AFTER_END","write after end"),r("ERR_STREAM_NULL_VALUES","May not write null values to stream",TypeError),r("ERR_UNKNOWN_ENCODING",(function(e){return"Unknown encoding: "+e}),TypeError),r("ERR_STREAM_UNSHIFT_AFTER_END_EVENT","stream.unshift() after end event"),t.exports.codes=i},{}],13:[function(e,t,n){(function(n){(function(){"use strict";var i=Object.keys||function(e){var t=[];for(var n in e)t.push(n);return t};t.exports=l;var r=e("./_stream_readable"),a=e("./_stream_writable");e("inherits")(l,r);for(var s=i(a.prototype),o=0;o<s.length;o++){var d=s[o];l.prototype[d]||(l.prototype[d]=a.prototype[d])}function l(e){if(!(this instanceof l))return new l(e);r.call(this,e),a.call(this,e),this.allowHalfOpen=!0,e&&(!1===e.readable&&(this.readable=!1),!1===e.writable&&(this.writable=!1),!1===e.allowHalfOpen&&(this.allowHalfOpen=!1,this.once("end",u)))}function u(){this._writableState.ended||n.nextTick(c,this)}function c(e){e.end()}Object.defineProperty(l.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(l.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(l.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(l.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&this._readableState.destroyed&&this._writableState.destroyed},set:function(e){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=e,this._writableState.destroyed=e)}})}).call(this)}).call(this,e("_process"))},{"./_stream_readable":15,"./_stream_writable":17,_process:9,inherits:8}],14:[function(e,t,n){"use strict";t.exports=r;var i=e("./_stream_transform");function r(e){if(!(this instanceof r))return new r(e);i.call(this,e)}e("inherits")(r,i),r.prototype._transform=function(e,t,n){n(null,e)}},{"./_stream_transform":16,inherits:8}],15:[function(e,t,i){(function(n,i){(function(){"use strict";var r;t.exports=k,k.ReadableState=Y,e("events").EventEmitter;var a=function(e,t){return e.listeners(t).length},s=e("./internal/streams/stream"),o=e("buffer").Buffer,d=i.Uint8Array||function(){};var l,u=e("util");l=u&&u.debuglog?u.debuglog("stream"):function(){};var c,h,_,m=e("./internal/streams/buffer_list"),f=e("./internal/streams/destroy"),p=e("./internal/streams/state").getHighWaterMark,g=e("../errors").codes,y=g.ERR_INVALID_ARG_TYPE,M=g.ERR_STREAM_PUSH_AFTER_EOF,b=g.ERR_METHOD_NOT_IMPLEMENTED,L=g.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;e("inherits")(k,s);var v=f.errorOrDestroy,w=["error","close","destroy","pause","resume"];function Y(t,n,i){r=r||e("./_stream_duplex"),t=t||{},"boolean"!=typeof i&&(i=n instanceof r),this.objectMode=!!t.objectMode,i&&(this.objectMode=this.objectMode||!!t.readableObjectMode),this.highWaterMark=p(this,t,"readableHighWaterMark",i),this.buffer=new m,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.paused=!0,this.emitClose=!1!==t.emitClose,this.autoDestroy=!!t.autoDestroy,this.destroyed=!1,this.defaultEncoding=t.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,t.encoding&&(c||(c=e("string_decoder/").StringDecoder),this.decoder=new c(t.encoding),this.encoding=t.encoding)}function k(t){if(r=r||e("./_stream_duplex"),!(this instanceof k))return new k(t);var n=this instanceof r;this._readableState=new Y(t,this,n),this.readable=!0,t&&("function"==typeof t.read&&(this._read=t.read),"function"==typeof t.destroy&&(this._destroy=t.destroy)),s.call(this)}function D(e,t,n,i,r){l("readableAddChunk",t);var a,s=e._readableState;if(null===t)s.reading=!1,function(e,t){if(l("onEofChunk"),!t.ended){if(t.decoder){var n=t.decoder.end();n&&n.length&&(t.buffer.push(n),t.length+=t.objectMode?1:n.length)}t.ended=!0,t.sync?O(e):(t.needReadable=!1,t.emittedReadable||(t.emittedReadable=!0,H(e)))}}(e,s);else if(r||(a=function(e,t){var n;return i=t,o.isBuffer(i)||i instanceof d||"string"==typeof t||void 0===t||e.objectMode||(n=new y("chunk",["string","Buffer","Uint8Array"],t)),n;var i}(s,t)),a)v(e,a);else if(s.objectMode||t&&t.length>0)if("string"==typeof t||s.objectMode||Object.getPrototypeOf(t)===o.prototype||(t=function(e){return o.from(e)}(t)),i)s.endEmitted?v(e,new L):x(e,s,t,!0);else if(s.ended)v(e,new M);else{if(s.destroyed)return!1;s.reading=!1,s.decoder&&!n?(t=s.decoder.write(t),s.objectMode||0!==t.length?x(e,s,t,!1):j(e,s)):x(e,s,t,!1)}else i||(s.reading=!1,j(e,s));return!s.ended&&(s.length<s.highWaterMark||0===s.length)}function x(e,t,n,i){t.flowing&&0===t.length&&!t.sync?(t.awaitDrain=0,e.emit("data",n)):(t.length+=t.objectMode?1:n.length,i?t.buffer.unshift(n):t.buffer.push(n),t.needReadable&&O(e)),j(e,t)}Object.defineProperty(k.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(e){this._readableState&&(this._readableState.destroyed=e)}}),k.prototype.destroy=f.destroy,k.prototype._undestroy=f.undestroy,k.prototype._destroy=function(e,t){t(e)},k.prototype.push=function(e,t){var n,i=this._readableState;return i.objectMode?n=!0:"string"==typeof e&&((t=t||i.defaultEncoding)!==i.encoding&&(e=o.from(e,t),t=""),n=!0),D(this,e,t,!1,n)},k.prototype.unshift=function(e){return D(this,e,null,!0,!1)},k.prototype.isPaused=function(){return!1===this._readableState.flowing},k.prototype.setEncoding=function(t){c||(c=e("string_decoder/").StringDecoder);var n=new c(t);this._readableState.decoder=n,this._readableState.encoding=this._readableState.decoder.encoding;for(var i=this._readableState.buffer.head,r="";null!==i;)r+=n.write(i.data),i=i.next;return this._readableState.buffer.clear(),""!==r&&this._readableState.buffer.push(r),this._readableState.length=r.length,this};var T=1073741824;function S(e,t){return e<=0||0===t.length&&t.ended?0:t.objectMode?1:e!=e?t.flowing&&t.length?t.buffer.head.data.length:t.length:(e>t.highWaterMark&&(t.highWaterMark=function(e){return e>=T?e=T:(e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,e++),e}(e)),e<=t.length?e:t.ended?t.length:(t.needReadable=!0,0))}function O(e){var t=e._readableState;l("emitReadable",t.needReadable,t.emittedReadable),t.needReadable=!1,t.emittedReadable||(l("emitReadable",t.flowing),t.emittedReadable=!0,n.nextTick(H,e))}function H(e){var t=e._readableState;l("emitReadable_",t.destroyed,t.length,t.ended),t.destroyed||!t.length&&!t.ended||(e.emit("readable"),t.emittedReadable=!1),t.needReadable=!t.flowing&&!t.ended&&t.length<=t.highWaterMark,C(e)}function j(e,t){t.readingMore||(t.readingMore=!0,n.nextTick(P,e,t))}function P(e,t){for(;!t.reading&&!t.ended&&(t.length<t.highWaterMark||t.flowing&&0===t.length);){var n=t.length;if(l("maybeReadMore read 0"),e.read(0),n===t.length)break}t.readingMore=!1}function E(e){var t=e._readableState;t.readableListening=e.listenerCount("readable")>0,t.resumeScheduled&&!t.paused?t.flowing=!0:e.listenerCount("data")>0&&e.resume()}function A(e){l("readable nexttick read 0"),e.read(0)}function R(e,t){l("resume",t.reading),t.reading||e.read(0),t.resumeScheduled=!1,e.emit("resume"),C(e),t.flowing&&!t.reading&&e.read(0)}function C(e){var t=e._readableState;for(l("flow",t.flowing);t.flowing&&null!==e.read(););}function W(e,t){return 0===t.length?null:(t.objectMode?n=t.buffer.shift():!e||e>=t.length?(n=t.decoder?t.buffer.join(""):1===t.buffer.length?t.buffer.first():t.buffer.concat(t.length),t.buffer.clear()):n=t.buffer.consume(e,t.decoder),n);var n}function I(e){var t=e._readableState;l("endReadable",t.endEmitted),t.endEmitted||(t.ended=!0,n.nextTick(F,t,e))}function F(e,t){if(l("endReadableNT",e.endEmitted,e.length),!e.endEmitted&&0===e.length&&(e.endEmitted=!0,t.readable=!1,t.emit("end"),e.autoDestroy)){var n=t._writableState;(!n||n.autoDestroy&&n.finished)&&t.destroy()}}function N(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1}k.prototype.read=function(e){l("read",e),e=parseInt(e,10);var t=this._readableState,n=e;if(0!==e&&(t.emittedReadable=!1),0===e&&t.needReadable&&((0!==t.highWaterMark?t.length>=t.highWaterMark:t.length>0)||t.ended))return l("read: emitReadable",t.length,t.ended),0===t.length&&t.ended?I(this):O(this),null;if(0===(e=S(e,t))&&t.ended)return 0===t.length&&I(this),null;var i,r=t.needReadable;return l("need readable",r),(0===t.length||t.length-e<t.highWaterMark)&&l("length less than watermark",r=!0),t.ended||t.reading?l("reading or ended",r=!1):r&&(l("do read"),t.reading=!0,t.sync=!0,0===t.length&&(t.needReadable=!0),this._read(t.highWaterMark),t.sync=!1,t.reading||(e=S(n,t))),null===(i=e>0?W(e,t):null)?(t.needReadable=t.length<=t.highWaterMark,e=0):(t.length-=e,t.awaitDrain=0),0===t.length&&(t.ended||(t.needReadable=!0),n!==e&&t.ended&&I(this)),null!==i&&this.emit("data",i),i},k.prototype._read=function(e){v(this,new b("_read()"))},k.prototype.pipe=function(e,t){var i=this,r=this._readableState;switch(r.pipesCount){case 0:r.pipes=e;break;case 1:r.pipes=[r.pipes,e];break;default:r.pipes.push(e)}r.pipesCount+=1,l("pipe count=%d opts=%j",r.pipesCount,t);var s=t&&!1===t.end||e===n.stdout||e===n.stderr?p:d;function o(t,n){l("onunpipe"),t===i&&n&&!1===n.hasUnpiped&&(n.hasUnpiped=!0,l("cleanup"),e.removeListener("close",m),e.removeListener("finish",f),e.removeListener("drain",u),e.removeListener("error",_),e.removeListener("unpipe",o),i.removeListener("end",d),i.removeListener("end",p),i.removeListener("data",h),c=!0,!r.awaitDrain||e._writableState&&!e._writableState.needDrain||u())}function d(){l("onend"),e.end()}r.endEmitted?n.nextTick(s):i.once("end",s),e.on("unpipe",o);var u=function(e){return function(){var t=e._readableState;l("pipeOnDrain",t.awaitDrain),t.awaitDrain&&t.awaitDrain--,0===t.awaitDrain&&a(e,"data")&&(t.flowing=!0,C(e))}}(i);e.on("drain",u);var c=!1;function h(t){l("ondata");var n=e.write(t);l("dest.write",n),!1===n&&((1===r.pipesCount&&r.pipes===e||r.pipesCount>1&&-1!==N(r.pipes,e))&&!c&&(l("false write response, pause",r.awaitDrain),r.awaitDrain++),i.pause())}function _(t){l("onerror",t),p(),e.removeListener("error",_),0===a(e,"error")&&v(e,t)}function m(){e.removeListener("finish",f),p()}function f(){l("onfinish"),e.removeListener("close",m),p()}function p(){l("unpipe"),i.unpipe(e)}return i.on("data",h),function(e,t,n){if("function"==typeof e.prependListener)return e.prependListener(t,n);e._events&&e._events[t]?Array.isArray(e._events[t])?e._events[t].unshift(n):e._events[t]=[n,e._events[t]]:e.on(t,n)}(e,"error",_),e.once("close",m),e.once("finish",f),e.emit("pipe",i),r.flowing||(l("pipe resume"),i.resume()),e},k.prototype.unpipe=function(e){var t=this._readableState,n={hasUnpiped:!1};if(0===t.pipesCount)return this;if(1===t.pipesCount)return e&&e!==t.pipes||(e||(e=t.pipes),t.pipes=null,t.pipesCount=0,t.flowing=!1,e&&e.emit("unpipe",this,n)),this;if(!e){var i=t.pipes,r=t.pipesCount;t.pipes=null,t.pipesCount=0,t.flowing=!1;for(var a=0;a<r;a++)i[a].emit("unpipe",this,{hasUnpiped:!1});return this}var s=N(t.pipes,e);return-1===s||(t.pipes.splice(s,1),t.pipesCount-=1,1===t.pipesCount&&(t.pipes=t.pipes[0]),e.emit("unpipe",this,n)),this},k.prototype.on=function(e,t){var i=s.prototype.on.call(this,e,t),r=this._readableState;return"data"===e?(r.readableListening=this.listenerCount("readable")>0,!1!==r.flowing&&this.resume()):"readable"===e&&(r.endEmitted||r.readableListening||(r.readableListening=r.needReadable=!0,r.flowing=!1,r.emittedReadable=!1,l("on readable",r.length,r.reading),r.length?O(this):r.reading||n.nextTick(A,this))),i},k.prototype.addListener=k.prototype.on,k.prototype.removeListener=function(e,t){var i=s.prototype.removeListener.call(this,e,t);return"readable"===e&&n.nextTick(E,this),i},k.prototype.removeAllListeners=function(e){var t=s.prototype.removeAllListeners.apply(this,arguments);return"readable"!==e&&void 0!==e||n.nextTick(E,this),t},k.prototype.resume=function(){var e=this._readableState;return e.flowing||(l("resume"),e.flowing=!e.readableListening,function(e,t){t.resumeScheduled||(t.resumeScheduled=!0,n.nextTick(R,e,t))}(this,e)),e.paused=!1,this},k.prototype.pause=function(){return l("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(l("pause"),this._readableState.flowing=!1,this.emit("pause")),this._readableState.paused=!0,this},k.prototype.wrap=function(e){var t=this,n=this._readableState,i=!1;for(var r in e.on("end",(function(){if(l("wrapped end"),n.decoder&&!n.ended){var e=n.decoder.end();e&&e.length&&t.push(e)}t.push(null)})),e.on("data",(function(r){l("wrapped data"),n.decoder&&(r=n.decoder.write(r)),n.objectMode&&null==r||(n.objectMode||r&&r.length)&&(t.push(r)||(i=!0,e.pause()))})),e)void 0===this[r]&&"function"==typeof e[r]&&(this[r]=function(t){return function(){return e[t].apply(e,arguments)}}(r));for(var a=0;a<w.length;a++)e.on(w[a],this.emit.bind(this,w[a]));return this._read=function(t){l("wrapped _read",t),i&&(i=!1,e.resume())},this},"function"==typeof Symbol&&(k.prototype[Symbol.asyncIterator]=function(){return void 0===h&&(h=e("./internal/streams/async_iterator")),h(this)}),Object.defineProperty(k.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),Object.defineProperty(k.prototype,"readableBuffer",{enumerable:!1,get:function(){return this._readableState&&this._readableState.buffer}}),Object.defineProperty(k.prototype,"readableFlowing",{enumerable:!1,get:function(){return this._readableState.flowing},set:function(e){this._readableState&&(this._readableState.flowing=e)}}),k._fromList=W,Object.defineProperty(k.prototype,"readableLength",{enumerable:!1,get:function(){return this._readableState.length}}),"function"==typeof Symbol&&(k.from=function(t,n){return void 0===_&&(_=e("./internal/streams/from")),_(k,t,n)})}).call(this)}).call(this,e("_process"),void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../errors":12,"./_stream_duplex":13,"./internal/streams/async_iterator":18,"./internal/streams/buffer_list":19,"./internal/streams/destroy":20,"./internal/streams/from":22,"./internal/streams/state":24,"./internal/streams/stream":25,_process:9,buffer:5,events:6,inherits:8,"string_decoder/":26,util:4}],16:[function(e,t,n){"use strict";t.exports=u;var i=e("../errors").codes,r=i.ERR_METHOD_NOT_IMPLEMENTED,a=i.ERR_MULTIPLE_CALLBACK,s=i.ERR_TRANSFORM_ALREADY_TRANSFORMING,o=i.ERR_TRANSFORM_WITH_LENGTH_0,d=e("./_stream_duplex");function l(e,t){var n=this._transformState;n.transforming=!1;var i=n.writecb;if(null===i)return this.emit("error",new a);n.writechunk=null,n.writecb=null,null!=t&&this.push(t),i(e);var r=this._readableState;r.reading=!1,(r.needReadable||r.length<r.highWaterMark)&&this._read(r.highWaterMark)}function u(e){if(!(this instanceof u))return new u(e);d.call(this,e),this._transformState={afterTransform:l.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,e&&("function"==typeof e.transform&&(this._transform=e.transform),"function"==typeof e.flush&&(this._flush=e.flush)),this.on("prefinish",c)}function c(){var e=this;"function"!=typeof this._flush||this._readableState.destroyed?h(this,null,null):this._flush((function(t,n){h(e,t,n)}))}function h(e,t,n){if(t)return e.emit("error",t);if(null!=n&&e.push(n),e._writableState.length)throw new o;if(e._transformState.transforming)throw new s;return e.push(null)}e("inherits")(u,d),u.prototype.push=function(e,t){return this._transformState.needTransform=!1,d.prototype.push.call(this,e,t)},u.prototype._transform=function(e,t,n){n(new r("_transform()"))},u.prototype._write=function(e,t,n){var i=this._transformState;if(i.writecb=n,i.writechunk=e,i.writeencoding=t,!i.transforming){var r=this._readableState;(i.needTransform||r.needReadable||r.length<r.highWaterMark)&&this._read(r.highWaterMark)}},u.prototype._read=function(e){var t=this._transformState;null===t.writechunk||t.transforming?t.needTransform=!0:(t.transforming=!0,this._transform(t.writechunk,t.writeencoding,t.afterTransform))},u.prototype._destroy=function(e,t){d.prototype._destroy.call(this,e,(function(e){t(e)}))}},{"../errors":12,"./_stream_duplex":13,inherits:8}],17:[function(e,t,i){(function(n,i){(function(){"use strict";function r(e){var t=this;this.next=null,this.entry=null,this.finish=function(){!function(e,t,n){var i=e.entry;for(e.entry=null;i;){var r=i.callback;t.pendingcb--,r(n),i=i.next}t.corkedRequestsFree.next=e}(t,e)}}var a;t.exports=k,k.WritableState=Y;var s={deprecate:e("util-deprecate")},o=e("./internal/streams/stream"),d=e("buffer").Buffer,l=i.Uint8Array||function(){};var u,c=e("./internal/streams/destroy"),h=e("./internal/streams/state").getHighWaterMark,_=e("../errors").codes,m=_.ERR_INVALID_ARG_TYPE,f=_.ERR_METHOD_NOT_IMPLEMENTED,p=_.ERR_MULTIPLE_CALLBACK,g=_.ERR_STREAM_CANNOT_PIPE,y=_.ERR_STREAM_DESTROYED,M=_.ERR_STREAM_NULL_VALUES,b=_.ERR_STREAM_WRITE_AFTER_END,L=_.ERR_UNKNOWN_ENCODING,v=c.errorOrDestroy;function w(){}function Y(t,i,s){a=a||e("./_stream_duplex"),t=t||{},"boolean"!=typeof s&&(s=i instanceof a),this.objectMode=!!t.objectMode,s&&(this.objectMode=this.objectMode||!!t.writableObjectMode),this.highWaterMark=h(this,t,"writableHighWaterMark",s),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var o=!1===t.decodeStrings;this.decodeStrings=!o,this.defaultEncoding=t.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){!function(e,t){var i=e._writableState,r=i.sync,a=i.writecb;if("function"!=typeof a)throw new p;if(function(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}(i),t)!function(e,t,i,r,a){--t.pendingcb,i?(n.nextTick(a,r),n.nextTick(j,e,t),e._writableState.errorEmitted=!0,v(e,r)):(a(r),e._writableState.errorEmitted=!0,v(e,r),j(e,t))}(e,i,r,t,a);else{var s=O(i)||e.destroyed;s||i.corked||i.bufferProcessing||!i.bufferedRequest||S(e,i),r?n.nextTick(T,e,i,s,a):T(e,i,s,a)}}(i,e)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.emitClose=!1!==t.emitClose,this.autoDestroy=!!t.autoDestroy,this.bufferedRequestCount=0,this.corkedRequestsFree=new r(this)}function k(t){var n=this instanceof(a=a||e("./_stream_duplex"));if(!n&&!u.call(k,this))return new k(t);this._writableState=new Y(t,this,n),this.writable=!0,t&&("function"==typeof t.write&&(this._write=t.write),"function"==typeof t.writev&&(this._writev=t.writev),"function"==typeof t.destroy&&(this._destroy=t.destroy),"function"==typeof t.final&&(this._final=t.final)),o.call(this)}function D(e,t,n,i,r,a){if(!n){var s=function(e,t,n){return e.objectMode||!1===e.decodeStrings||"string"!=typeof t||(t=d.from(t,n)),t}(t,i,r);i!==s&&(n=!0,r="buffer",i=s)}var o=t.objectMode?1:i.length;t.length+=o;var l=t.length<t.highWaterMark;if(l||(t.needDrain=!0),t.writing||t.corked){var u=t.lastBufferedRequest;t.lastBufferedRequest={chunk:i,encoding:r,isBuf:n,callback:a,next:null},u?u.next=t.lastBufferedRequest:t.bufferedRequest=t.lastBufferedRequest,t.bufferedRequestCount+=1}else x(e,t,!1,o,i,r,a);return l}function x(e,t,n,i,r,a,s){t.writelen=i,t.writecb=s,t.writing=!0,t.sync=!0,t.destroyed?t.onwrite(new y("write")):n?e._writev(r,t.onwrite):e._write(r,a,t.onwrite),t.sync=!1}function T(e,t,n,i){n||function(e,t){0===t.length&&t.needDrain&&(t.needDrain=!1,e.emit("drain"))}(e,t),t.pendingcb--,i(),j(e,t)}function S(e,t){t.bufferProcessing=!0;var n=t.bufferedRequest;if(e._writev&&n&&n.next){var i=t.bufferedRequestCount,a=new Array(i),s=t.corkedRequestsFree;s.entry=n;for(var o=0,d=!0;n;)a[o]=n,n.isBuf||(d=!1),n=n.next,o+=1;a.allBuffers=d,x(e,t,!0,t.length,a,"",s.finish),t.pendingcb++,t.lastBufferedRequest=null,s.next?(t.corkedRequestsFree=s.next,s.next=null):t.corkedRequestsFree=new r(t),t.bufferedRequestCount=0}else{for(;n;){var l=n.chunk,u=n.encoding,c=n.callback;if(x(e,t,!1,t.objectMode?1:l.length,l,u,c),n=n.next,t.bufferedRequestCount--,t.writing)break}null===n&&(t.lastBufferedRequest=null)}t.bufferedRequest=n,t.bufferProcessing=!1}function O(e){return e.ending&&0===e.length&&null===e.bufferedRequest&&!e.finished&&!e.writing}function H(e,t){e._final((function(n){t.pendingcb--,n&&v(e,n),t.prefinished=!0,e.emit("prefinish"),j(e,t)}))}function j(e,t){var i=O(t);if(i&&(function(e,t){t.prefinished||t.finalCalled||("function"!=typeof e._final||t.destroyed?(t.prefinished=!0,e.emit("prefinish")):(t.pendingcb++,t.finalCalled=!0,n.nextTick(H,e,t)))}(e,t),0===t.pendingcb&&(t.finished=!0,e.emit("finish"),t.autoDestroy))){var r=e._readableState;(!r||r.autoDestroy&&r.endEmitted)&&e.destroy()}return i}e("inherits")(k,o),Y.prototype.getBuffer=function(){for(var e=this.bufferedRequest,t=[];e;)t.push(e),e=e.next;return t},function(){try{Object.defineProperty(Y.prototype,"buffer",{get:s.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(e){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(u=Function.prototype[Symbol.hasInstance],Object.defineProperty(k,Symbol.hasInstance,{value:function(e){return!!u.call(this,e)||this===k&&e&&e._writableState instanceof Y}})):u=function(e){return e instanceof this},k.prototype.pipe=function(){v(this,new g)},k.prototype.write=function(e,t,i){var r,a=this._writableState,s=!1,o=!a.objectMode&&(r=e,d.isBuffer(r)||r instanceof l);return o&&!d.isBuffer(e)&&(e=function(e){return d.from(e)}(e)),"function"==typeof t&&(i=t,t=null),o?t="buffer":t||(t=a.defaultEncoding),"function"!=typeof i&&(i=w),a.ending?function(e,t){var i=new b;v(e,i),n.nextTick(t,i)}(this,i):(o||function(e,t,i,r){var a;return null===i?a=new M:"string"==typeof i||t.objectMode||(a=new m("chunk",["string","Buffer"],i)),!a||(v(e,a),n.nextTick(r,a),!1)}(this,a,e,i))&&(a.pendingcb++,s=D(this,a,o,e,t,i)),s},k.prototype.cork=function(){this._writableState.corked++},k.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.bufferProcessing||!e.bufferedRequest||S(this,e))},k.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=e.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((e+"").toLowerCase())>-1))throw new L(e);return this._writableState.defaultEncoding=e,this},Object.defineProperty(k.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(k.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),k.prototype._write=function(e,t,n){n(new f("_write()"))},k.prototype._writev=null,k.prototype.end=function(e,t,i){var r=this._writableState;return"function"==typeof e?(i=e,e=null,t=null):"function"==typeof t&&(i=t,t=null),null!=e&&this.write(e,t),r.corked&&(r.corked=1,this.uncork()),r.ending||function(e,t,i){t.ending=!0,j(e,t),i&&(t.finished?n.nextTick(i):e.once("finish",i)),t.ended=!0,e.writable=!1}(this,r,i),this},Object.defineProperty(k.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(k.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(e){this._writableState&&(this._writableState.destroyed=e)}}),k.prototype.destroy=c.destroy,k.prototype._undestroy=c.undestroy,k.prototype._destroy=function(e,t){t(e)}}).call(this)}).call(this,e("_process"),void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../errors":12,"./_stream_duplex":13,"./internal/streams/destroy":20,"./internal/streams/state":24,"./internal/streams/stream":25,_process:9,buffer:5,inherits:8,"util-deprecate":28}],18:[function(e,t,n){(function(n){(function(){"use strict";var i;function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var a=e("./end-of-stream"),s=Symbol("lastResolve"),o=Symbol("lastReject"),d=Symbol("error"),l=Symbol("ended"),u=Symbol("lastPromise"),c=Symbol("handlePromise"),h=Symbol("stream");function _(e,t){return{value:e,done:t}}function m(e){var t=e[s];if(null!==t){var n=e[h].read();null!==n&&(e[u]=null,e[s]=null,e[o]=null,t(_(n,!1)))}}function f(e){n.nextTick(m,e)}var p=Object.getPrototypeOf((function(){})),g=Object.setPrototypeOf((r(i={get stream(){return this[h]},next:function(){var e=this,t=this[d];if(null!==t)return Promise.reject(t);if(this[l])return Promise.resolve(_(void 0,!0));if(this[h].destroyed)return new Promise((function(t,i){n.nextTick((function(){e[d]?i(e[d]):t(_(void 0,!0))}))}));var i,r=this[u];if(r)i=new Promise(function(e,t){return function(n,i){e.then((function(){t[l]?n(_(void 0,!0)):t[c](n,i)}),i)}}(r,this));else{var a=this[h].read();if(null!==a)return Promise.resolve(_(a,!1));i=new Promise(this[c])}return this[u]=i,i}},Symbol.asyncIterator,(function(){return this})),r(i,"return",(function(){var e=this;return new Promise((function(t,n){e[h].destroy(null,(function(e){e?n(e):t(_(void 0,!0))}))}))})),i),p);t.exports=function(e){var t,n=Object.create(g,(r(t={},h,{value:e,writable:!0}),r(t,s,{value:null,writable:!0}),r(t,o,{value:null,writable:!0}),r(t,d,{value:null,writable:!0}),r(t,l,{value:e._readableState.endEmitted,writable:!0}),r(t,c,{value:function(e,t){var i=n[h].read();i?(n[u]=null,n[s]=null,n[o]=null,e(_(i,!1))):(n[s]=e,n[o]=t)},writable:!0}),t));return n[u]=null,a(e,(function(e){if(e&&"ERR_STREAM_PREMATURE_CLOSE"!==e.code){var t=n[o];return null!==t&&(n[u]=null,n[s]=null,n[o]=null,t(e)),void(n[d]=e)}var i=n[s];null!==i&&(n[u]=null,n[s]=null,n[o]=null,i(_(void 0,!0))),n[l]=!0})),e.on("readable",f.bind(null,n)),n}}).call(this)}).call(this,e("_process"))},{"./end-of-stream":21,_process:9}],19:[function(e,t,n){"use strict";function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var s=e("buffer").Buffer,o=e("util").inspect,d=o&&o.custom||"inspect";t.exports=function(){function e(){(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")})(this,e),this.head=null,this.tail=null,this.length=0}return t=e,(n=[{key:"push",value:function(e){var t={data:e,next:null};this.length>0?this.tail.next=t:this.head=t,this.tail=t,++this.length}},{key:"unshift",value:function(e){var t={data:e,next:this.head};0===this.length&&(this.tail=t),this.head=t,++this.length}},{key:"shift",value:function(){if(0!==this.length){var e=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,e}}},{key:"clear",value:function(){this.head=this.tail=null,this.length=0}},{key:"join",value:function(e){if(0===this.length)return"";for(var t=this.head,n=""+t.data;t=t.next;)n+=e+t.data;return n}},{key:"concat",value:function(e){if(0===this.length)return s.alloc(0);for(var t=s.allocUnsafe(e>>>0),n=this.head,i=0;n;)r=n.data,a=t,o=i,s.prototype.copy.call(r,a,o),i+=n.data.length,n=n.next;var r,a,o;return t}},{key:"consume",value:function(e,t){var n;return e<this.head.data.length?(n=this.head.data.slice(0,e),this.head.data=this.head.data.slice(e)):n=e===this.head.data.length?this.shift():t?this._getString(e):this._getBuffer(e),n}},{key:"first",value:function(){return this.head.data}},{key:"_getString",value:function(e){var t=this.head,n=1,i=t.data;for(e-=i.length;t=t.next;){var r=t.data,a=e>r.length?r.length:e;if(a===r.length?i+=r:i+=r.slice(0,e),0==(e-=a)){a===r.length?(++n,t.next?this.head=t.next:this.head=this.tail=null):(this.head=t,t.data=r.slice(a));break}++n}return this.length-=n,i}},{key:"_getBuffer",value:function(e){var t=s.allocUnsafe(e),n=this.head,i=1;for(n.data.copy(t),e-=n.data.length;n=n.next;){var r=n.data,a=e>r.length?r.length:e;if(r.copy(t,t.length-e,0,a),0==(e-=a)){a===r.length?(++i,n.next?this.head=n.next:this.head=this.tail=null):(this.head=n,n.data=r.slice(a));break}++i}return this.length-=i,t}},{key:d,value:function(e,t){return o(this,function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},t,{depth:0,customInspect:!1}))}}])&&a(t.prototype,n),l&&a(t,l),e;var t,n,l}()},{buffer:5,util:4}],20:[function(e,t,n){(function(e){(function(){"use strict";function n(e,t){r(e,t),i(e)}function i(e){e._writableState&&!e._writableState.emitClose||e._readableState&&!e._readableState.emitClose||e.emit("close")}function r(e,t){e.emit("error",t)}t.exports={destroy:function(t,a){var s=this,o=this._readableState&&this._readableState.destroyed,d=this._writableState&&this._writableState.destroyed;return o||d?(a?a(t):t&&(this._writableState?this._writableState.errorEmitted||(this._writableState.errorEmitted=!0,e.nextTick(r,this,t)):e.nextTick(r,this,t)),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(t||null,(function(t){!a&&t?s._writableState?s._writableState.errorEmitted?e.nextTick(i,s):(s._writableState.errorEmitted=!0,e.nextTick(n,s,t)):e.nextTick(n,s,t):a?(e.nextTick(i,s),a(t)):e.nextTick(i,s)})),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finalCalled=!1,this._writableState.prefinished=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)},errorOrDestroy:function(e,t){var n=e._readableState,i=e._writableState;n&&n.autoDestroy||i&&i.autoDestroy?e.destroy(t):e.emit("error",t)}}}).call(this)}).call(this,e("_process"))},{_process:9}],21:[function(e,t,n){"use strict";var i=e("../../../errors").codes.ERR_STREAM_PREMATURE_CLOSE;function r(){}t.exports=function e(t,n,a){if("function"==typeof n)return e(t,null,n);n||(n={}),a=function(e){var t=!1;return function(){if(!t){t=!0;for(var n=arguments.length,i=new Array(n),r=0;r<n;r++)i[r]=arguments[r];e.apply(this,i)}}}(a||r);var s=n.readable||!1!==n.readable&&t.readable,o=n.writable||!1!==n.writable&&t.writable,d=function(){t.writable||u()},l=t._writableState&&t._writableState.finished,u=function(){o=!1,l=!0,s||a.call(t)},c=t._readableState&&t._readableState.endEmitted,h=function(){s=!1,c=!0,o||a.call(t)},_=function(e){a.call(t,e)},m=function(){var e;return s&&!c?(t._readableState&&t._readableState.ended||(e=new i),a.call(t,e)):o&&!l?(t._writableState&&t._writableState.ended||(e=new i),a.call(t,e)):void 0},f=function(){t.req.on("finish",u)};return function(e){return e.setHeader&&"function"==typeof e.abort}(t)?(t.on("complete",u),t.on("abort",m),t.req?f():t.on("request",f)):o&&!t._writableState&&(t.on("end",d),t.on("close",d)),t.on("end",h),t.on("finish",u),!1!==n.error&&t.on("error",_),t.on("close",m),function(){t.removeListener("complete",u),t.removeListener("abort",m),t.removeListener("request",f),t.req&&t.req.removeListener("finish",u),t.removeListener("end",d),t.removeListener("close",d),t.removeListener("finish",u),t.removeListener("end",h),t.removeListener("error",_),t.removeListener("close",m)}}},{"../../../errors":12}],22:[function(e,t,n){t.exports=function(){throw new Error("Readable.from is not available in the browser")}},{}],23:[function(e,t,n){"use strict";var i;var r=e("../../../errors").codes,a=r.ERR_MISSING_ARGS,s=r.ERR_STREAM_DESTROYED;function o(e){if(e)throw e}function d(t,n,r,a){a=function(e){var t=!1;return function(){t||(t=!0,e.apply(void 0,arguments))}}(a);var o=!1;t.on("close",(function(){o=!0})),void 0===i&&(i=e("./end-of-stream")),i(t,{readable:n,writable:r},(function(e){if(e)return a(e);o=!0,a()}));var d=!1;return function(e){if(!o&&!d)return d=!0,function(e){return e.setHeader&&"function"==typeof e.abort}(t)?t.abort():"function"==typeof t.destroy?t.destroy():void a(e||new s("pipe"))}}function l(e){e()}function u(e,t){return e.pipe(t)}function c(e){return e.length?"function"!=typeof e[e.length-1]?o:e.pop():o}t.exports=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var i,r=c(t);if(Array.isArray(t[0])&&(t=t[0]),t.length<2)throw new a("streams");var s=t.map((function(e,n){var a=n<t.length-1;return d(e,a,n>0,(function(e){i||(i=e),e&&s.forEach(l),a||(s.forEach(l),r(i))}))}));return t.reduce(u)}},{"../../../errors":12,"./end-of-stream":21}],24:[function(e,t,n){"use strict";var i=e("../../../errors").codes.ERR_INVALID_OPT_VALUE;t.exports={getHighWaterMark:function(e,t,n,r){var a=function(e,t,n){return null!=e.highWaterMark?e.highWaterMark:t?e[n]:null}(t,r,n);if(null!=a){if(!isFinite(a)||Math.floor(a)!==a||a<0)throw new i(r?n:"highWaterMark",a);return Math.floor(a)}return e.objectMode?16:16384}}},{"../../../errors":12}],25:[function(e,t,n){t.exports=e("events").EventEmitter},{events:6}],26:[function(e,t,n){"use strict";var i=e("safe-buffer").Buffer,r=i.isEncoding||function(e){switch((e=""+e)&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function a(e){var t;switch(this.encoding=function(e){var t=function(e){if(!e)return"utf8";for(var t;;)switch(e){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return e;default:if(t)return;e=(""+e).toLowerCase(),t=!0}}(e);if("string"!=typeof t&&(i.isEncoding===r||!r(e)))throw new Error("Unknown encoding: "+e);return t||e}(e),this.encoding){case"utf16le":this.text=d,this.end=l,t=4;break;case"utf8":this.fillLast=o,t=4;break;case"base64":this.text=u,this.end=c,t=3;break;default:return this.write=h,void(this.end=_)}this.lastNeed=0,this.lastTotal=0,this.lastChar=i.allocUnsafe(t)}function s(e){return e<=127?0:e>>5==6?2:e>>4==14?3:e>>3==30?4:e>>6==2?-1:-2}function o(e){var t=this.lastTotal-this.lastNeed,n=function(e,t,n){if(128!=(192&t[0]))return e.lastNeed=0,"�";if(e.lastNeed>1&&t.length>1){if(128!=(192&t[1]))return e.lastNeed=1,"�";if(e.lastNeed>2&&t.length>2&&128!=(192&t[2]))return e.lastNeed=2,"�"}}(this,e);return void 0!==n?n:this.lastNeed<=e.length?(e.copy(this.lastChar,t,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(e.copy(this.lastChar,t,0,e.length),void(this.lastNeed-=e.length))}function d(e,t){if((e.length-t)%2==0){var n=e.toString("utf16le",t);if(n){var i=n.charCodeAt(n.length-1);if(i>=55296&&i<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1],n.slice(0,-1)}return n}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=e[e.length-1],e.toString("utf16le",t,e.length-1)}function l(e){var t=e&&e.length?this.write(e):"";if(this.lastNeed){var n=this.lastTotal-this.lastNeed;return t+this.lastChar.toString("utf16le",0,n)}return t}function u(e,t){var n=(e.length-t)%3;return 0===n?e.toString("base64",t):(this.lastNeed=3-n,this.lastTotal=3,1===n?this.lastChar[0]=e[e.length-1]:(this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1]),e.toString("base64",t,e.length-n))}function c(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+this.lastChar.toString("base64",0,3-this.lastNeed):t}function h(e){return e.toString(this.encoding)}function _(e){return e&&e.length?this.write(e):""}n.StringDecoder=a,a.prototype.write=function(e){if(0===e.length)return"";var t,n;if(this.lastNeed){if(void 0===(t=this.fillLast(e)))return"";n=this.lastNeed,this.lastNeed=0}else n=0;return n<e.length?t?t+this.text(e,n):this.text(e,n):t||""},a.prototype.end=function(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+"�":t},a.prototype.text=function(e,t){var n=function(e,t,n){var i=t.length-1;if(i<n)return 0;var r=s(t[i]);return r>=0?(r>0&&(e.lastNeed=r-1),r):--i<n||-2===r?0:(r=s(t[i]))>=0?(r>0&&(e.lastNeed=r-2),r):--i<n||-2===r?0:(r=s(t[i]))>=0?(r>0&&(2===r?r=0:e.lastNeed=r-3),r):0}(this,e,t);if(!this.lastNeed)return e.toString("utf8",t);this.lastTotal=n;var i=e.length-(n-this.lastNeed);return e.copy(this.lastChar,0,i),e.toString("utf8",t,i)},a.prototype.fillLast=function(e){if(this.lastNeed<=e.length)return e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,e.length),this.lastNeed-=e.length}},{"safe-buffer":10}],27:[function(e,t,n){(function(t,i){(function(){var r=e("process/browser.js").nextTick,a=Function.prototype.apply,s=Array.prototype.slice,o={},d=0;function l(e,t){this._id=e,this._clearFn=t}n.setTimeout=function(){return new l(a.call(setTimeout,window,arguments),clearTimeout)},n.setInterval=function(){return new l(a.call(setInterval,window,arguments),clearInterval)},n.clearTimeout=n.clearInterval=function(e){e.close()},l.prototype.unref=l.prototype.ref=function(){},l.prototype.close=function(){this._clearFn.call(window,this._id)},n.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},n.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},n._unrefActive=n.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout((function(){e._onTimeout&&e._onTimeout()}),t))},n.setImmediate="function"==typeof t?t:function(e){var t=d++,i=!(arguments.length<2)&&s.call(arguments,1);return o[t]=!0,r((function(){o[t]&&(i?e.apply(null,i):e.call(null),n.clearImmediate(t))})),t},n.clearImmediate="function"==typeof i?i:function(e){delete o[e]}}).call(this)}).call(this,e("timers").setImmediate,e("timers").clearImmediate)},{"process/browser.js":9,timers:27}],28:[function(e,t,i){(function(e){(function(){function n(t){try{if(!e.localStorage)return!1}catch(e){return!1}var n=e.localStorage[t];return null!=n&&"true"===String(n).toLowerCase()}t.exports=function(e,t){if(n("noDeprecation"))return e;var i=!1;return function(){if(!i){if(n("throwDeprecation"))throw new Error(t);n("traceDeprecation")?console.trace(t):console.warn(t),i=!0}return e.apply(this,arguments)}}}).call(this)}).call(this,void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},[2])(2)},2786:function(e,t,n){!function(e){"use strict";e.defineLocale("af",{months:"Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"),weekdays:"Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"),weekdaysShort:"Son_Maa_Din_Woe_Don_Vry_Sat".split("_"),weekdaysMin:"So_Ma_Di_Wo_Do_Vr_Sa".split("_"),meridiemParse:/vm|nm/i,isPM:function(e){return/^nm$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"vm":"VM":n?"nm":"NM"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Vandag om] LT",nextDay:"[Môre om] LT",nextWeek:"dddd [om] LT",lastDay:"[Gister om] LT",lastWeek:"[Laas] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oor %s",past:"%s gelede",s:"'n paar sekondes",ss:"%d sekondes",m:"'n minuut",mm:"%d minute",h:"'n uur",hh:"%d ure",d:"'n dag",dd:"%d dae",M:"'n maand",MM:"%d maande",y:"'n jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(381))},4130:function(e,t,n){!function(e){"use strict";var t=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},n={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},i=function(e){return function(i,r,a,s){var o=t(i),d=n[e][t(i)];return 2===o&&(d=d[r?0:1]),d.replace(/%d/i,i)}},r=["جانفي","فيفري","مارس","أفريل","ماي","جوان","جويلية","أوت","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar-dz",{months:r,monthsShort:r,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:i("s"),ss:i("s"),m:i("m"),mm:i("m"),h:i("h"),hh:i("h"),d:i("d"),dd:i("d"),M:i("M"),MM:i("M"),y:i("y"),yy:i("y")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:0,doy:4}})}(n(381))},6135:function(e,t,n){!function(e){"use strict";e.defineLocale("ar-kw",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:0,doy:12}})}(n(381))},6440:function(e,t,n){!function(e){"use strict";var t={1:"1",2:"2",3:"3",4:"4",5:"5",6:"6",7:"7",8:"8",9:"9",0:"0"},n=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},i={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},r=function(e){return function(t,r,a,s){var o=n(t),d=i[e][n(t)];return 2===o&&(d=d[r?0:1]),d.replace(/%d/i,t)}},a=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar-ly",{months:a,monthsShort:a,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:r("s"),ss:r("s"),m:r("m"),mm:r("m"),h:r("h"),hh:r("h"),d:r("d"),dd:r("d"),M:r("M"),MM:r("M"),y:r("y"),yy:r("y")},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(381))},7702:function(e,t,n){!function(e){"use strict";e.defineLocale("ar-ma",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}})}(n(381))},6040:function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"};e.defineLocale("ar-sa",{months:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:0,doy:6}})}(n(381))},7100:function(e,t,n){!function(e){"use strict";e.defineLocale("ar-tn",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}})}(n(381))},867:function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},i=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},r={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},a=function(e){return function(t,n,a,s){var o=i(t),d=r[e][i(t)];return 2===o&&(d=d[n?0:1]),d.replace(/%d/i,t)}},s=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar",{months:s,monthsShort:s,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:a("s"),ss:a("s"),m:a("m"),mm:a("m"),h:a("h"),hh:a("h"),d:a("d"),dd:a("d"),M:a("M"),MM:a("M"),y:a("y"),yy:a("y")},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(381))},1083:function(e,t,n){!function(e){"use strict";var t={1:"-inci",5:"-inci",8:"-inci",70:"-inci",80:"-inci",2:"-nci",7:"-nci",20:"-nci",50:"-nci",3:"-üncü",4:"-üncü",100:"-üncü",6:"-ncı",9:"-uncu",10:"-uncu",30:"-uncu",60:"-ıncı",90:"-ıncı"};e.defineLocale("az",{months:"yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"),monthsShort:"yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"),weekdays:"Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə".split("_"),weekdaysShort:"Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən".split("_"),weekdaysMin:"Bz_BE_ÇA_Çə_CA_Cü_Şə".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[sabah saat] LT",nextWeek:"[gələn həftə] dddd [saat] LT",lastDay:"[dünən] LT",lastWeek:"[keçən həftə] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s əvvəl",s:"bir neçə saniyə",ss:"%d saniyə",m:"bir dəqiqə",mm:"%d dəqiqə",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir il",yy:"%d il"},meridiemParse:/gecə|səhər|gündüz|axşam/,isPM:function(e){return/^(gündüz|axşam)$/.test(e)},meridiem:function(e,t,n){return e<4?"gecə":e<12?"səhər":e<17?"gündüz":"axşam"},dayOfMonthOrdinalParse:/\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,ordinal:function(e){if(0===e)return e+"-ıncı";var n=e%10;return e+(t[n]||t[e%100-n]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(381))},9808:function(e,t,n){!function(e){"use strict";function t(e,t,n){return"m"===n?t?"хвіліна":"хвіліну":"h"===n?t?"гадзіна":"гадзіну":e+" "+(i=+e,r={ss:t?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:t?"хвіліна_хвіліны_хвілін":"хвіліну_хвіліны_хвілін",hh:t?"гадзіна_гадзіны_гадзін":"гадзіну_гадзіны_гадзін",dd:"дзень_дні_дзён",MM:"месяц_месяцы_месяцаў",yy:"год_гады_гадоў"}[n].split("_"),i%10==1&&i%100!=11?r[0]:i%10>=2&&i%10<=4&&(i%100<10||i%100>=20)?r[1]:r[2]);var i,r}e.defineLocale("be",{months:{format:"студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня".split("_"),standalone:"студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань".split("_")},monthsShort:"студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж".split("_"),weekdays:{format:"нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу".split("_"),standalone:"нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота".split("_"),isFormat:/\[ ?[Ууў] ?(?:мінулую|наступную)? ?\] ?dddd/},weekdaysShort:"нд_пн_ат_ср_чц_пт_сб".split("_"),weekdaysMin:"нд_пн_ат_ср_чц_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., HH:mm",LLLL:"dddd, D MMMM YYYY г., HH:mm"},calendar:{sameDay:"[Сёння ў] LT",nextDay:"[Заўтра ў] LT",lastDay:"[Учора ў] LT",nextWeek:function(){return"[У] dddd [ў] LT"},lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return"[У мінулую] dddd [ў] LT";case 1:case 2:case 4:return"[У мінулы] dddd [ў] LT"}},sameElse:"L"},relativeTime:{future:"праз %s",past:"%s таму",s:"некалькі секунд",m:t,mm:t,h:t,hh:t,d:"дзень",dd:t,M:"месяц",MM:t,y:"год",yy:t},meridiemParse:/ночы|раніцы|дня|вечара/,isPM:function(e){return/^(дня|вечара)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночы":e<12?"раніцы":e<17?"дня":"вечара"},dayOfMonthOrdinalParse:/\d{1,2}-(і|ы|га)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e%10!=2&&e%10!=3||e%100==12||e%100==13?e+"-ы":e+"-і";case"D":return e+"-га";default:return e}},week:{dow:1,doy:7}})}(n(381))},8338:function(e,t,n){!function(e){"use strict";e.defineLocale("bg",{months:"януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),monthsShort:"яну_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),weekdays:"неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),weekdaysShort:"нед_пон_вто_сря_чет_пет_съб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Днес в] LT",nextDay:"[Утре в] LT",nextWeek:"dddd [в] LT",lastDay:"[Вчера в] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Миналата] dddd [в] LT";case 1:case 2:case 4:case 5:return"[Миналия] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"след %s",past:"преди %s",s:"няколко секунди",ss:"%d секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дена",w:"седмица",ww:"%d седмици",M:"месец",MM:"%d месеца",y:"година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&n<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}})}(n(381))},7438:function(e,t,n){!function(e){"use strict";e.defineLocale("bm",{months:"Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_Mɛkalo_Zuwɛnkalo_Zuluyekalo_Utikalo_Sɛtanburukalo_ɔkutɔburukalo_Nowanburukalo_Desanburukalo".split("_"),monthsShort:"Zan_Few_Mar_Awi_Mɛ_Zuw_Zul_Uti_Sɛt_ɔku_Now_Des".split("_"),weekdays:"Kari_Ntɛnɛn_Tarata_Araba_Alamisa_Juma_Sibiri".split("_"),weekdaysShort:"Kar_Ntɛ_Tar_Ara_Ala_Jum_Sib".split("_"),weekdaysMin:"Ka_Nt_Ta_Ar_Al_Ju_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"MMMM [tile] D [san] YYYY",LLL:"MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm",LLLL:"dddd MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm"},calendar:{sameDay:"[Bi lɛrɛ] LT",nextDay:"[Sini lɛrɛ] LT",nextWeek:"dddd [don lɛrɛ] LT",lastDay:"[Kunu lɛrɛ] LT",lastWeek:"dddd [tɛmɛnen lɛrɛ] LT",sameElse:"L"},relativeTime:{future:"%s kɔnɔ",past:"a bɛ %s bɔ",s:"sanga dama dama",ss:"sekondi %d",m:"miniti kelen",mm:"miniti %d",h:"lɛrɛ kelen",hh:"lɛrɛ %d",d:"tile kelen",dd:"tile %d",M:"kalo kelen",MM:"kalo %d",y:"san kelen",yy:"san %d"},week:{dow:1,doy:4}})}(n(381))},6225:function(e,t,n){!function(e){"use strict";var t={1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"},n={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"};e.defineLocale("bn-bd",{months:"জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),weekdaysMin:"রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm সময়",LLLL:"dddd, D MMMM YYYY, A h:mm সময়"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কয়েক সেকেন্ড",ss:"%d সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(e){return e.replace(/[১২৩৪৫৬৭৮৯০]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/রাত|ভোর|সকাল|দুপুর|বিকাল|সন্ধ্যা|রাত/,meridiemHour:function(e,t){return 12===e&&(e=0),"রাত"===t?e<4?e:e+12:"ভোর"===t||"সকাল"===t?e:"দুপুর"===t?e>=3?e:e+12:"বিকাল"===t||"সন্ধ্যা"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"রাত":e<6?"ভোর":e<12?"সকাল":e<15?"দুপুর":e<18?"বিকাল":e<20?"সন্ধ্যা":"রাত"},week:{dow:0,doy:6}})}(n(381))},8905:function(e,t,n){!function(e){"use strict";var t={1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"},n={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"};e.defineLocale("bn",{months:"জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),weekdaysMin:"রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm সময়",LLLL:"dddd, D MMMM YYYY, A h:mm সময়"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কয়েক সেকেন্ড",ss:"%d সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(e){return e.replace(/[১২৩৪৫৬৭৮৯০]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/রাত|সকাল|দুপুর|বিকাল|রাত/,meridiemHour:function(e,t){return 12===e&&(e=0),"রাত"===t&&e>=4||"দুপুর"===t&&e<5||"বিকাল"===t?e+12:e},meridiem:function(e,t,n){return e<4?"রাত":e<10?"সকাল":e<17?"দুপুর":e<20?"বিকাল":"রাত"},week:{dow:0,doy:6}})}(n(381))},1560:function(e,t,n){!function(e){"use strict";var t={1:"༡",2:"༢",3:"༣",4:"༤",5:"༥",6:"༦",7:"༧",8:"༨",9:"༩",0:"༠"},n={"༡":"1","༢":"2","༣":"3","༤":"4","༥":"5","༦":"6","༧":"7","༨":"8","༩":"9","༠":"0"};e.defineLocale("bo",{months:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),monthsShort:"ཟླ་1_ཟླ་2_ཟླ་3_ཟླ་4_ཟླ་5_ཟླ་6_ཟླ་7_ཟླ་8_ཟླ་9_ཟླ་10_ཟླ་11_ཟླ་12".split("_"),monthsShortRegex:/^(ཟླ་\d{1,2})/,monthsParseExact:!0,weekdays:"གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་".split("_"),weekdaysShort:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),weekdaysMin:"ཉི_ཟླ_མིག_ལྷག_ཕུར_སངས_སྤེན".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[དི་རིང] LT",nextDay:"[སང་ཉིན] LT",nextWeek:"[བདུན་ཕྲག་རྗེས་མ], LT",lastDay:"[ཁ་སང] LT",lastWeek:"[བདུན་ཕྲག་མཐའ་མ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ལ་",past:"%s སྔན་ལ",s:"ལམ་སང",ss:"%d སྐར་ཆ།",m:"སྐར་མ་གཅིག",mm:"%d སྐར་མ",h:"ཆུ་ཚོད་གཅིག",hh:"%d ཆུ་ཚོད",d:"ཉིན་གཅིག",dd:"%d ཉིན་",M:"ཟླ་བ་གཅིག",MM:"%d ཟླ་བ",y:"ལོ་གཅིག",yy:"%d ལོ"},preparse:function(e){return e.replace(/[༡༢༣༤༥༦༧༨༩༠]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,meridiemHour:function(e,t){return 12===e&&(e=0),"མཚན་མོ"===t&&e>=4||"ཉིན་གུང"===t&&e<5||"དགོང་དག"===t?e+12:e},meridiem:function(e,t,n){return e<4?"མཚན་མོ":e<10?"ཞོགས་ཀས":e<17?"ཉིན་གུང":e<20?"དགོང་དག":"མཚན་མོ"},week:{dow:0,doy:6}})}(n(381))},1278:function(e,t,n){!function(e){"use strict";function t(e,t,n){return e+" "+function(e,t){return 2===t?function(e){var t={m:"v",b:"v",d:"z"};return void 0===t[e.charAt(0)]?e:t[e.charAt(0)]+e.substring(1)}(e):e}({mm:"munutenn",MM:"miz",dd:"devezh"}[n],e)}function n(e){return e>9?n(e%10):e}var i=[/^gen/i,/^c[ʼ\']hwe/i,/^meu/i,/^ebr/i,/^mae/i,/^(mez|eve)/i,/^gou/i,/^eos/i,/^gwe/i,/^her/i,/^du/i,/^ker/i],r=/^(genver|c[ʼ\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu|gen|c[ʼ\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,a=[/^Su/i,/^Lu/i,/^Me([^r]|$)/i,/^Mer/i,/^Ya/i,/^Gw/i,/^Sa/i];e.defineLocale("br",{months:"Genver_Cʼhwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"),monthsShort:"Gen_Cʼhwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"),weekdays:"Sul_Lun_Meurzh_Mercʼher_Yaou_Gwener_Sadorn".split("_"),weekdaysShort:"Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),weekdaysMin:"Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"),weekdaysParse:a,fullWeekdaysParse:[/^sul/i,/^lun/i,/^meurzh/i,/^merc[ʼ\']her/i,/^yaou/i,/^gwener/i,/^sadorn/i],shortWeekdaysParse:[/^Sul/i,/^Lun/i,/^Meu/i,/^Mer/i,/^Yao/i,/^Gwe/i,/^Sad/i],minWeekdaysParse:a,monthsRegex:r,monthsShortRegex:r,monthsStrictRegex:/^(genver|c[ʼ\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu)/i,monthsShortStrictRegex:/^(gen|c[ʼ\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,monthsParse:i,longMonthsParse:i,shortMonthsParse:i,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [a viz] MMMM YYYY",LLL:"D [a viz] MMMM YYYY HH:mm",LLLL:"dddd, D [a viz] MMMM YYYY HH:mm"},calendar:{sameDay:"[Hiziv da] LT",nextDay:"[Warcʼhoazh da] LT",nextWeek:"dddd [da] LT",lastDay:"[Decʼh da] LT",lastWeek:"dddd [paset da] LT",sameElse:"L"},relativeTime:{future:"a-benn %s",past:"%s ʼzo",s:"un nebeud segondennoù",ss:"%d eilenn",m:"ur vunutenn",mm:t,h:"un eur",hh:"%d eur",d:"un devezh",dd:t,M:"ur miz",MM:t,y:"ur bloaz",yy:function(e){switch(n(e)){case 1:case 3:case 4:case 5:case 9:return e+" bloaz";default:return e+" vloaz"}}},dayOfMonthOrdinalParse:/\d{1,2}(añ|vet)/,ordinal:function(e){return e+(1===e?"añ":"vet")},week:{dow:1,doy:4},meridiemParse:/a.m.|g.m./,isPM:function(e){return"g.m."===e},meridiem:function(e,t,n){return e<12?"a.m.":"g.m."}})}(n(381))},622:function(e,t,n){!function(e){"use strict";function t(e,t,n){var i=e+" ";switch(n){case"ss":return i+(1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi");case"m":return t?"jedna minuta":"jedne minute";case"mm":return i+(1===e?"minuta":2===e||3===e||4===e?"minute":"minuta");case"h":return t?"jedan sat":"jednog sata";case"hh":return i+(1===e?"sat":2===e||3===e||4===e?"sata":"sati");case"dd":return i+(1===e?"dan":"dana");case"MM":return i+(1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci");case"yy":return i+(1===e?"godina":2===e||3===e||4===e?"godine":"godina")}}e.defineLocale("bs",{months:"januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:t,m:t,mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(381))},2468:function(e,t,n){!function(e){"use strict";e.defineLocale("ca",{months:{standalone:"gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),format:"de gener_de febrer_de març_d'abril_de maig_de juny_de juliol_d'agost_de setembre_d'octubre_de novembre_de desembre".split("_"),isFormat:/D[oD]?(\s)+MMMM/},monthsShort:"gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.".split("_"),monthsParseExact:!0,weekdays:"diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dt._dc._dj._dv._ds.".split("_"),weekdaysMin:"dg_dl_dt_dc_dj_dv_ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [de] YYYY",ll:"D MMM YYYY",LLL:"D MMMM [de] YYYY [a les] H:mm",lll:"D MMM YYYY, H:mm",LLLL:"dddd D MMMM [de] YYYY [a les] H:mm",llll:"ddd D MMM YYYY, H:mm"},calendar:{sameDay:function(){return"[avui a "+(1!==this.hours()?"les":"la")+"] LT"},nextDay:function(){return"[demà a "+(1!==this.hours()?"les":"la")+"] LT"},nextWeek:function(){return"dddd [a "+(1!==this.hours()?"les":"la")+"] LT"},lastDay:function(){return"[ahir a "+(1!==this.hours()?"les":"la")+"] LT"},lastWeek:function(){return"[el] dddd [passat a "+(1!==this.hours()?"les":"la")+"] LT"},sameElse:"L"},relativeTime:{future:"d'aquí %s",past:"fa %s",s:"uns segons",ss:"%d segons",m:"un minut",mm:"%d minuts",h:"una hora",hh:"%d hores",d:"un dia",dd:"%d dies",M:"un mes",MM:"%d mesos",y:"un any",yy:"%d anys"},dayOfMonthOrdinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(e,t){var n=1===e?"r":2===e?"n":3===e?"r":4===e?"t":"è";return"w"!==t&&"W"!==t||(n="a"),e+n},week:{dow:1,doy:4}})}(n(381))},5822:function(e,t,n){!function(e){"use strict";var t="leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"),n="led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_"),i=[/^led/i,/^úno/i,/^bře/i,/^dub/i,/^kvě/i,/^(čvn|červen$|června)/i,/^(čvc|červenec|července)/i,/^srp/i,/^zář/i,/^říj/i,/^lis/i,/^pro/i],r=/^(leden|únor|březen|duben|květen|červenec|července|červen|června|srpen|září|říjen|listopad|prosinec|led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i;function a(e){return e>1&&e<5&&1!=~~(e/10)}function s(e,t,n,i){var r=e+" ";switch(n){case"s":return t||i?"pár sekund":"pár sekundami";case"ss":return t||i?r+(a(e)?"sekundy":"sekund"):r+"sekundami";case"m":return t?"minuta":i?"minutu":"minutou";case"mm":return t||i?r+(a(e)?"minuty":"minut"):r+"minutami";case"h":return t?"hodina":i?"hodinu":"hodinou";case"hh":return t||i?r+(a(e)?"hodiny":"hodin"):r+"hodinami";case"d":return t||i?"den":"dnem";case"dd":return t||i?r+(a(e)?"dny":"dní"):r+"dny";case"M":return t||i?"měsíc":"měsícem";case"MM":return t||i?r+(a(e)?"měsíce":"měsíců"):r+"měsíci";case"y":return t||i?"rok":"rokem";case"yy":return t||i?r+(a(e)?"roky":"let"):r+"lety"}}e.defineLocale("cs",{months:t,monthsShort:n,monthsRegex:r,monthsShortRegex:r,monthsStrictRegex:/^(leden|ledna|února|únor|březen|března|duben|dubna|květen|května|červenec|července|červen|června|srpen|srpna|září|říjen|října|listopadu|listopad|prosinec|prosince)/i,monthsShortStrictRegex:/^(led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i,monthsParse:i,longMonthsParse:i,shortMonthsParse:i,weekdays:"neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),weekdaysShort:"ne_po_út_st_čt_pá_so".split("_"),weekdaysMin:"ne_po_út_st_čt_pá_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm",l:"D. M. YYYY"},calendar:{sameDay:"[dnes v] LT",nextDay:"[zítra v] LT",nextWeek:function(){switch(this.day()){case 0:return"[v neděli v] LT";case 1:case 2:return"[v] dddd [v] LT";case 3:return"[ve středu v] LT";case 4:return"[ve čtvrtek v] LT";case 5:return"[v pátek v] LT";case 6:return"[v sobotu v] LT"}},lastDay:"[včera v] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulou neděli v] LT";case 1:case 2:return"[minulé] dddd [v] LT";case 3:return"[minulou středu v] LT";case 4:case 5:return"[minulý] dddd [v] LT";case 6:return"[minulou sobotu v] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"před %s",s,ss:s,m:s,mm:s,h:s,hh:s,d:s,dd:s,M:s,MM:s,y:s,yy:s},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},877:function(e,t,n){!function(e){"use strict";e.defineLocale("cv",{months:"кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав".split("_"),monthsShort:"кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш".split("_"),weekdays:"вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун".split("_"),weekdaysShort:"выр_тун_ытл_юн_кӗҫ_эрн_шӑм".split("_"),weekdaysMin:"вр_тн_ыт_юн_кҫ_эр_шм".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]",LLL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm",LLLL:"dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm"},calendar:{sameDay:"[Паян] LT [сехетре]",nextDay:"[Ыран] LT [сехетре]",lastDay:"[Ӗнер] LT [сехетре]",nextWeek:"[Ҫитес] dddd LT [сехетре]",lastWeek:"[Иртнӗ] dddd LT [сехетре]",sameElse:"L"},relativeTime:{future:function(e){return e+(/сехет$/i.exec(e)?"рен":/ҫул$/i.exec(e)?"тан":"ран")},past:"%s каялла",s:"пӗр-ик ҫеккунт",ss:"%d ҫеккунт",m:"пӗр минут",mm:"%d минут",h:"пӗр сехет",hh:"%d сехет",d:"пӗр кун",dd:"%d кун",M:"пӗр уйӑх",MM:"%d уйӑх",y:"пӗр ҫул",yy:"%d ҫул"},dayOfMonthOrdinalParse:/\d{1,2}-мӗш/,ordinal:"%d-мӗш",week:{dow:1,doy:7}})}(n(381))},7373:function(e,t,n){!function(e){"use strict";e.defineLocale("cy",{months:"Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"),monthsShort:"Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"),weekdays:"Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"),weekdaysShort:"Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"),weekdaysMin:"Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Heddiw am] LT",nextDay:"[Yfory am] LT",nextWeek:"dddd [am] LT",lastDay:"[Ddoe am] LT",lastWeek:"dddd [diwethaf am] LT",sameElse:"L"},relativeTime:{future:"mewn %s",past:"%s yn ôl",s:"ychydig eiliadau",ss:"%d eiliad",m:"munud",mm:"%d munud",h:"awr",hh:"%d awr",d:"diwrnod",dd:"%d diwrnod",M:"mis",MM:"%d mis",y:"blwyddyn",yy:"%d flynedd"},dayOfMonthOrdinalParse:/\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,ordinal:function(e){var t="";return e>20?t=40===e||50===e||60===e||80===e||100===e?"fed":"ain":e>0&&(t=["","af","il","ydd","ydd","ed","ed","ed","fed","fed","fed","eg","fed","eg","eg","fed","eg","eg","fed","eg","fed"][e]),e+t},week:{dow:1,doy:4}})}(n(381))},4780:function(e,t,n){!function(e){"use strict";e.defineLocale("da",{months:"januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"søn_man_tir_ons_tor_fre_lør".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd [d.] D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"på dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[i] dddd[s kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"få sekunder",ss:"%d sekunder",m:"et minut",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dage",M:"en måned",MM:"%d måneder",y:"et år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},217:function(e,t,n){!function(e){"use strict";function t(e,t,n,i){var r={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?r[n][0]:r[n][1]}e.defineLocale("de-at",{months:"Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jän._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,w:t,ww:"%d Wochen",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},894:function(e,t,n){!function(e){"use strict";function t(e,t,n,i){var r={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?r[n][0]:r[n][1]}e.defineLocale("de-ch",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,w:t,ww:"%d Wochen",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},9740:function(e,t,n){!function(e){"use strict";function t(e,t,n,i){var r={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?r[n][0]:r[n][1]}e.defineLocale("de",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,w:t,ww:"%d Wochen",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},5300:function(e,t,n){!function(e){"use strict";var t=["ޖެނުއަރީ","ފެބްރުއަރީ","މާރިޗު","އޭޕްރީލު","މޭ","ޖޫން","ޖުލައި","އޯގަސްޓު","ސެޕްޓެމްބަރު","އޮކްޓޯބަރު","ނޮވެމްބަރު","ޑިސެމްބަރު"],n=["އާދިއްތަ","ހޯމަ","އަންގާރަ","ބުދަ","ބުރާސްފަތި","ހުކުރު","ހޮނިހިރު"];e.defineLocale("dv",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:"އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/M/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/މކ|މފ/,isPM:function(e){return"މފ"===e},meridiem:function(e,t,n){return e<12?"މކ":"މފ"},calendar:{sameDay:"[މިއަދު] LT",nextDay:"[މާދަމާ] LT",nextWeek:"dddd LT",lastDay:"[އިއްޔެ] LT",lastWeek:"[ފާއިތުވި] dddd LT",sameElse:"L"},relativeTime:{future:"ތެރޭގައި %s",past:"ކުރިން %s",s:"ސިކުންތުކޮޅެއް",ss:"d% ސިކުންތު",m:"މިނިޓެއް",mm:"މިނިޓު %d",h:"ގަޑިއިރެއް",hh:"ގަޑިއިރު %d",d:"ދުވަހެއް",dd:"ދުވަސް %d",M:"މަހެއް",MM:"މަސް %d",y:"އަހަރެއް",yy:"އަހަރު %d"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:7,doy:12}})}(n(381))},837:function(e,t,n){!function(e){"use strict";e.defineLocale("el",{monthsNominativeEl:"Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),monthsGenitiveEl:"Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),months:function(e,t){return e?"string"==typeof t&&/D/.test(t.substring(0,t.indexOf("MMMM")))?this._monthsGenitiveEl[e.month()]:this._monthsNominativeEl[e.month()]:this._monthsNominativeEl},monthsShort:"Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),weekdays:"Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),weekdaysShort:"Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),weekdaysMin:"Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),meridiem:function(e,t,n){return e>11?n?"μμ":"ΜΜ":n?"πμ":"ΠΜ"},isPM:function(e){return"μ"===(e+"").toLowerCase()[0]},meridiemParse:/[ΠΜ]\.?Μ?\.?/i,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendarEl:{sameDay:"[Σήμερα {}] LT",nextDay:"[Αύριο {}] LT",nextWeek:"dddd [{}] LT",lastDay:"[Χθες {}] LT",lastWeek:function(){switch(this.day()){case 6:return"[το προηγούμενο] dddd [{}] LT";default:return"[την προηγούμενη] dddd [{}] LT"}},sameElse:"L"},calendar:function(e,t){var n,i=this._calendarEl[e],r=t&&t.hours();return n=i,("undefined"!=typeof Function&&n instanceof Function||"[object Function]"===Object.prototype.toString.call(n))&&(i=i.apply(t)),i.replace("{}",r%12==1?"στη":"στις")},relativeTime:{future:"σε %s",past:"%s πριν",s:"λίγα δευτερόλεπτα",ss:"%d δευτερόλεπτα",m:"ένα λεπτό",mm:"%d λεπτά",h:"μία ώρα",hh:"%d ώρες",d:"μία μέρα",dd:"%d μέρες",M:"ένας μήνας",MM:"%d μήνες",y:"ένας χρόνος",yy:"%d χρόνια"},dayOfMonthOrdinalParse:/\d{1,2}η/,ordinal:"%dη",week:{dow:1,doy:4}})}(n(381))},8348:function(e,t,n){!function(e){"use strict";e.defineLocale("en-au",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:0,doy:4}})}(n(381))},7925:function(e,t,n){!function(e){"use strict";e.defineLocale("en-ca",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"YYYY-MM-DD",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}})}(n(381))},2243:function(e,t,n){!function(e){"use strict";e.defineLocale("en-gb",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(381))},6436:function(e,t,n){!function(e){"use strict";e.defineLocale("en-ie",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(381))},7207:function(e,t,n){!function(e){"use strict";e.defineLocale("en-il",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}})}(n(381))},4175:function(e,t,n){!function(e){"use strict";e.defineLocale("en-in",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:0,doy:6}})}(n(381))},6319:function(e,t,n){!function(e){"use strict";e.defineLocale("en-nz",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(381))},1662:function(e,t,n){!function(e){"use strict";e.defineLocale("en-sg",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(381))},2915:function(e,t,n){!function(e){"use strict";e.defineLocale("eo",{months:"januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split("_"),monthsShort:"jan_feb_mart_apr_maj_jun_jul_aŭg_sept_okt_nov_dec".split("_"),weekdays:"dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato".split("_"),weekdaysShort:"dim_lun_mard_merk_ĵaŭ_ven_sab".split("_"),weekdaysMin:"di_lu_ma_me_ĵa_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"[la] D[-an de] MMMM, YYYY",LLL:"[la] D[-an de] MMMM, YYYY HH:mm",LLLL:"dddd[n], [la] D[-an de] MMMM, YYYY HH:mm",llll:"ddd, [la] D[-an de] MMM, YYYY HH:mm"},meridiemParse:/[ap]\.t\.m/i,isPM:function(e){return"p"===e.charAt(0).toLowerCase()},meridiem:function(e,t,n){return e>11?n?"p.t.m.":"P.T.M.":n?"a.t.m.":"A.T.M."},calendar:{sameDay:"[Hodiaŭ je] LT",nextDay:"[Morgaŭ je] LT",nextWeek:"dddd[n je] LT",lastDay:"[Hieraŭ je] LT",lastWeek:"[pasintan] dddd[n je] LT",sameElse:"L"},relativeTime:{future:"post %s",past:"antaŭ %s",s:"kelkaj sekundoj",ss:"%d sekundoj",m:"unu minuto",mm:"%d minutoj",h:"unu horo",hh:"%d horoj",d:"unu tago",dd:"%d tagoj",M:"unu monato",MM:"%d monatoj",y:"unu jaro",yy:"%d jaroj"},dayOfMonthOrdinalParse:/\d{1,2}a/,ordinal:"%da",week:{dow:1,doy:7}})}(n(381))},5251:function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),i=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],r=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-do",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,i){return e?/-MMM-/.test(i)?n[e.month()]:t[e.month()]:t},monthsRegex:r,monthsShortRegex:r,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:i,longMonthsParse:i,shortMonthsParse:i,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(381))},6112:function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),i=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],r=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-mx",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,i){return e?/-MMM-/.test(i)?n[e.month()]:t[e.month()]:t},monthsRegex:r,monthsShortRegex:r,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:i,longMonthsParse:i,shortMonthsParse:i,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:0,doy:4},invalidDate:"Fecha inválida"})}(n(381))},1146:function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),i=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],r=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-us",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,i){return e?/-MMM-/.test(i)?n[e.month()]:t[e.month()]:t},monthsRegex:r,monthsShortRegex:r,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:i,longMonthsParse:i,shortMonthsParse:i,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"MM/DD/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:0,doy:6}})}(n(381))},5655:function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),i=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],r=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,i){return e?/-MMM-/.test(i)?n[e.month()]:t[e.month()]:t},monthsRegex:r,monthsShortRegex:r,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:i,longMonthsParse:i,shortMonthsParse:i,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4},invalidDate:"Fecha inválida"})}(n(381))},5603:function(e,t,n){!function(e){"use strict";function t(e,t,n,i){var r={s:["mõne sekundi","mõni sekund","paar sekundit"],ss:[e+"sekundi",e+"sekundit"],m:["ühe minuti","üks minut"],mm:[e+" minuti",e+" minutit"],h:["ühe tunni","tund aega","üks tund"],hh:[e+" tunni",e+" tundi"],d:["ühe päeva","üks päev"],M:["kuu aja","kuu aega","üks kuu"],MM:[e+" kuu",e+" kuud"],y:["ühe aasta","aasta","üks aasta"],yy:[e+" aasta",e+" aastat"]};return t?r[n][2]?r[n][2]:r[n][1]:i?r[n][0]:r[n][1]}e.defineLocale("et",{months:"jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"),monthsShort:"jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"),weekdays:"pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split("_"),weekdaysShort:"P_E_T_K_N_R_L".split("_"),weekdaysMin:"P_E_T_K_N_R_L".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[Täna,] LT",nextDay:"[Homme,] LT",nextWeek:"[Järgmine] dddd LT",lastDay:"[Eile,] LT",lastWeek:"[Eelmine] dddd LT",sameElse:"L"},relativeTime:{future:"%s pärast",past:"%s tagasi",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:"%d päeva",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},7763:function(e,t,n){!function(e){"use strict";e.defineLocale("eu",{months:"urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"),monthsShort:"urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"),monthsParseExact:!0,weekdays:"igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"),weekdaysShort:"ig._al._ar._az._og._ol._lr.".split("_"),weekdaysMin:"ig_al_ar_az_og_ol_lr".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY[ko] MMMM[ren] D[a]",LLL:"YYYY[ko] MMMM[ren] D[a] HH:mm",LLLL:"dddd, YYYY[ko] MMMM[ren] D[a] HH:mm",l:"YYYY-M-D",ll:"YYYY[ko] MMM D[a]",lll:"YYYY[ko] MMM D[a] HH:mm",llll:"ddd, YYYY[ko] MMM D[a] HH:mm"},calendar:{sameDay:"[gaur] LT[etan]",nextDay:"[bihar] LT[etan]",nextWeek:"dddd LT[etan]",lastDay:"[atzo] LT[etan]",lastWeek:"[aurreko] dddd LT[etan]",sameElse:"L"},relativeTime:{future:"%s barru",past:"duela %s",s:"segundo batzuk",ss:"%d segundo",m:"minutu bat",mm:"%d minutu",h:"ordu bat",hh:"%d ordu",d:"egun bat",dd:"%d egun",M:"hilabete bat",MM:"%d hilabete",y:"urte bat",yy:"%d urte"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(381))},6959:function(e,t,n){!function(e){"use strict";var t={1:"۱",2:"۲",3:"۳",4:"۴",5:"۵",6:"۶",7:"۷",8:"۸",9:"۹",0:"۰"},n={"۱":"1","۲":"2","۳":"3","۴":"4","۵":"5","۶":"6","۷":"7","۸":"8","۹":"9","۰":"0"};e.defineLocale("fa",{months:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),monthsShort:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),weekdays:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysShort:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysMin:"ی_د_س_چ_پ_ج_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/قبل از ظهر|بعد از ظهر/,isPM:function(e){return/بعد از ظهر/.test(e)},meridiem:function(e,t,n){return e<12?"قبل از ظهر":"بعد از ظهر"},calendar:{sameDay:"[امروز ساعت] LT",nextDay:"[فردا ساعت] LT",nextWeek:"dddd [ساعت] LT",lastDay:"[دیروز ساعت] LT",lastWeek:"dddd [پیش] [ساعت] LT",sameElse:"L"},relativeTime:{future:"در %s",past:"%s پیش",s:"چند ثانیه",ss:"%d ثانیه",m:"یک دقیقه",mm:"%d دقیقه",h:"یک ساعت",hh:"%d ساعت",d:"یک روز",dd:"%d روز",M:"یک ماه",MM:"%d ماه",y:"یک سال",yy:"%d سال"},preparse:function(e){return e.replace(/[۰-۹]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},dayOfMonthOrdinalParse:/\d{1,2}م/,ordinal:"%dم",week:{dow:6,doy:12}})}(n(381))},1897:function(e,t,n){!function(e){"use strict";var t="nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" "),n=["nolla","yhden","kahden","kolmen","neljän","viiden","kuuden",t[7],t[8],t[9]];function i(e,i,r,a){var s="";switch(r){case"s":return a?"muutaman sekunnin":"muutama sekunti";case"ss":s=a?"sekunnin":"sekuntia";break;case"m":return a?"minuutin":"minuutti";case"mm":s=a?"minuutin":"minuuttia";break;case"h":return a?"tunnin":"tunti";case"hh":s=a?"tunnin":"tuntia";break;case"d":return a?"päivän":"päivä";case"dd":s=a?"päivän":"päivää";break;case"M":return a?"kuukauden":"kuukausi";case"MM":s=a?"kuukauden":"kuukautta";break;case"y":return a?"vuoden":"vuosi";case"yy":s=a?"vuoden":"vuotta"}return function(e,i){return e<10?i?n[e]:t[e]:e}(e,a)+" "+s}e.defineLocale("fi",{months:"tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),monthsShort:"tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),weekdays:"sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),weekdaysShort:"su_ma_ti_ke_to_pe_la".split("_"),weekdaysMin:"su_ma_ti_ke_to_pe_la".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"Do MMMM[ta] YYYY",LLL:"Do MMMM[ta] YYYY, [klo] HH.mm",LLLL:"dddd, Do MMMM[ta] YYYY, [klo] HH.mm",l:"D.M.YYYY",ll:"Do MMM YYYY",lll:"Do MMM YYYY, [klo] HH.mm",llll:"ddd, Do MMM YYYY, [klo] HH.mm"},calendar:{sameDay:"[tänään] [klo] LT",nextDay:"[huomenna] [klo] LT",nextWeek:"dddd [klo] LT",lastDay:"[eilen] [klo] LT",lastWeek:"[viime] dddd[na] [klo] LT",sameElse:"L"},relativeTime:{future:"%s päästä",past:"%s sitten",s:i,ss:i,m:i,mm:i,h:i,hh:i,d:i,dd:i,M:i,MM:i,y:i,yy:i},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},2549:function(e,t,n){!function(e){"use strict";e.defineLocale("fil",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"LT [ngayong araw]",nextDay:"[Bukas ng] LT",nextWeek:"LT [sa susunod na] dddd",lastDay:"LT [kahapon]",lastWeek:"LT [noong nakaraang] dddd",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",ss:"%d segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(381))},4694:function(e,t,n){!function(e){"use strict";e.defineLocale("fo",{months:"januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur".split("_"),weekdaysShort:"sun_mán_týs_mik_hós_frí_ley".split("_"),weekdaysMin:"su_má_tý_mi_hó_fr_le".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D. MMMM, YYYY HH:mm"},calendar:{sameDay:"[Í dag kl.] LT",nextDay:"[Í morgin kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[Í gjár kl.] LT",lastWeek:"[síðstu] dddd [kl] LT",sameElse:"L"},relativeTime:{future:"um %s",past:"%s síðani",s:"fá sekund",ss:"%d sekundir",m:"ein minuttur",mm:"%d minuttir",h:"ein tími",hh:"%d tímar",d:"ein dagur",dd:"%d dagar",M:"ein mánaður",MM:"%d mánaðir",y:"eitt ár",yy:"%d ár"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},3049:function(e,t,n){!function(e){"use strict";e.defineLocale("fr-ca",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}}})}(n(381))},2330:function(e,t,n){!function(e){"use strict";e.defineLocale("fr-ch",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}})}(n(381))},4470:function(e,t,n){!function(e){"use strict";var t=/(janv\.?|févr\.?|mars|avr\.?|mai|juin|juil\.?|août|sept\.?|oct\.?|nov\.?|déc\.?|janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i,n=[/^janv/i,/^févr/i,/^mars/i,/^avr/i,/^mai/i,/^juin/i,/^juil/i,/^août/i,/^sept/i,/^oct/i,/^nov/i,/^déc/i];e.defineLocale("fr",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsRegex:t,monthsShortRegex:t,monthsStrictRegex:/^(janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i,monthsShortStrictRegex:/(janv\.?|févr\.?|mars|avr\.?|mai|juin|juil\.?|août|sept\.?|oct\.?|nov\.?|déc\.?)/i,monthsParse:n,longMonthsParse:n,shortMonthsParse:n,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",w:"une semaine",ww:"%d semaines",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|)/,ordinal:function(e,t){switch(t){case"D":return e+(1===e?"er":"");default:case"M":case"Q":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}})}(n(381))},5044:function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.".split("_"),n="jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_");e.defineLocale("fy",{months:"jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber".split("_"),monthsShort:function(e,i){return e?/-MMM-/.test(i)?n[e.month()]:t[e.month()]:t},monthsParseExact:!0,weekdays:"snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon".split("_"),weekdaysShort:"si._mo._ti._wo._to._fr._so.".split("_"),weekdaysMin:"Si_Mo_Ti_Wo_To_Fr_So".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[hjoed om] LT",nextDay:"[moarn om] LT",nextWeek:"dddd [om] LT",lastDay:"[juster om] LT",lastWeek:"[ôfrûne] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oer %s",past:"%s lyn",s:"in pear sekonden",ss:"%d sekonden",m:"ien minút",mm:"%d minuten",h:"ien oere",hh:"%d oeren",d:"ien dei",dd:"%d dagen",M:"ien moanne",MM:"%d moannen",y:"ien jier",yy:"%d jierren"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(381))},9295:function(e,t,n){!function(e){"use strict";e.defineLocale("ga",{months:["Eanáir","Feabhra","Márta","Aibreán","Bealtaine","Meitheamh","Iúil","Lúnasa","Meán Fómhair","Deireadh Fómhair","Samhain","Nollaig"],monthsShort:["Ean","Feabh","Márt","Aib","Beal","Meith","Iúil","Lún","M.F.","D.F.","Samh","Noll"],monthsParseExact:!0,weekdays:["Dé Domhnaigh","Dé Luain","Dé Máirt","Dé Céadaoin","Déardaoin","Dé hAoine","Dé Sathairn"],weekdaysShort:["Domh","Luan","Máirt","Céad","Déar","Aoine","Sath"],weekdaysMin:["Do","Lu","Má","Cé","Dé","A","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Inniu ag] LT",nextDay:"[Amárach ag] LT",nextWeek:"dddd [ag] LT",lastDay:"[Inné ag] LT",lastWeek:"dddd [seo caite] [ag] LT",sameElse:"L"},relativeTime:{future:"i %s",past:"%s ó shin",s:"cúpla soicind",ss:"%d soicind",m:"nóiméad",mm:"%d nóiméad",h:"uair an chloig",hh:"%d uair an chloig",d:"lá",dd:"%d lá",M:"mí",MM:"%d míonna",y:"bliain",yy:"%d bliain"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){return e+(1===e?"d":e%10==2?"na":"mh")},week:{dow:1,doy:4}})}(n(381))},2101:function(e,t,n){!function(e){"use strict";e.defineLocale("gd",{months:["Am Faoilleach","An Gearran","Am Màrt","An Giblean","An Cèitean","An t-Ògmhios","An t-Iuchar","An Lùnastal","An t-Sultain","An Dàmhair","An t-Samhain","An Dùbhlachd"],monthsShort:["Faoi","Gear","Màrt","Gibl","Cèit","Ògmh","Iuch","Lùn","Sult","Dàmh","Samh","Dùbh"],monthsParseExact:!0,weekdays:["Didòmhnaich","Diluain","Dimàirt","Diciadain","Diardaoin","Dihaoine","Disathairne"],weekdaysShort:["Did","Dil","Dim","Dic","Dia","Dih","Dis"],weekdaysMin:["Dò","Lu","Mà","Ci","Ar","Ha","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[An-diugh aig] LT",nextDay:"[A-màireach aig] LT",nextWeek:"dddd [aig] LT",lastDay:"[An-dè aig] LT",lastWeek:"dddd [seo chaidh] [aig] LT",sameElse:"L"},relativeTime:{future:"ann an %s",past:"bho chionn %s",s:"beagan diogan",ss:"%d diogan",m:"mionaid",mm:"%d mionaidean",h:"uair",hh:"%d uairean",d:"latha",dd:"%d latha",M:"mìos",MM:"%d mìosan",y:"bliadhna",yy:"%d bliadhna"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){return e+(1===e?"d":e%10==2?"na":"mh")},week:{dow:1,doy:4}})}(n(381))},8794:function(e,t,n){!function(e){"use strict";e.defineLocale("gl",{months:"xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro".split("_"),monthsShort:"xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"domingo_luns_martes_mércores_xoves_venres_sábado".split("_"),weekdaysShort:"dom._lun._mar._mér._xov._ven._sáb.".split("_"),weekdaysMin:"do_lu_ma_mé_xo_ve_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoxe "+(1!==this.hours()?"ás":"á")+"] LT"},nextDay:function(){return"[mañá "+(1!==this.hours()?"ás":"á")+"] LT"},nextWeek:function(){return"dddd ["+(1!==this.hours()?"ás":"a")+"] LT"},lastDay:function(){return"[onte "+(1!==this.hours()?"á":"a")+"] LT"},lastWeek:function(){return"[o] dddd [pasado "+(1!==this.hours()?"ás":"a")+"] LT"},sameElse:"L"},relativeTime:{future:function(e){return 0===e.indexOf("un")?"n"+e:"en "+e},past:"hai %s",s:"uns segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"unha hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(381))},7884:function(e,t,n){!function(e){"use strict";function t(e,t,n,i){var r={s:["थोडया सॅकंडांनी","थोडे सॅकंड"],ss:[e+" सॅकंडांनी",e+" सॅकंड"],m:["एका मिणटान","एक मिनूट"],mm:[e+" मिणटांनी",e+" मिणटां"],h:["एका वरान","एक वर"],hh:[e+" वरांनी",e+" वरां"],d:["एका दिसान","एक दीस"],dd:[e+" दिसांनी",e+" दीस"],M:["एका म्हयन्यान","एक म्हयनो"],MM:[e+" म्हयन्यानी",e+" म्हयने"],y:["एका वर्सान","एक वर्स"],yy:[e+" वर्सांनी",e+" वर्सां"]};return i?r[n][0]:r[n][1]}e.defineLocale("gom-deva",{months:{standalone:"जानेवारी_फेब्रुवारी_मार्च_एप्रील_मे_जून_जुलय_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),format:"जानेवारीच्या_फेब्रुवारीच्या_मार्चाच्या_एप्रीलाच्या_मेयाच्या_जूनाच्या_जुलयाच्या_ऑगस्टाच्या_सप्टेंबराच्या_ऑक्टोबराच्या_नोव्हेंबराच्या_डिसेंबराच्या".split("_"),isFormat:/MMMM(\s)+D[oD]?/},monthsShort:"जाने._फेब्रु._मार्च_एप्री._मे_जून_जुल._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),monthsParseExact:!0,weekdays:"आयतार_सोमार_मंगळार_बुधवार_बिरेस्तार_सुक्रार_शेनवार".split("_"),weekdaysShort:"आयत._सोम._मंगळ._बुध._ब्रेस्त._सुक्र._शेन.".split("_"),weekdaysMin:"आ_सो_मं_बु_ब्रे_सु_शे".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"A h:mm [वाजतां]",LTS:"A h:mm:ss [वाजतां]",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY A h:mm [वाजतां]",LLLL:"dddd, MMMM Do, YYYY, A h:mm [वाजतां]",llll:"ddd, D MMM YYYY, A h:mm [वाजतां]"},calendar:{sameDay:"[आयज] LT",nextDay:"[फाल्यां] LT",nextWeek:"[फुडलो] dddd[,] LT",lastDay:"[काल] LT",lastWeek:"[फाटलो] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%s",past:"%s आदीं",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}(वेर)/,ordinal:function(e,t){switch(t){case"D":return e+"वेर";default:case"M":case"Q":case"DDD":case"d":case"w":case"W":return e}},week:{dow:0,doy:3},meridiemParse:/राती|सकाळीं|दनपारां|सांजे/,meridiemHour:function(e,t){return 12===e&&(e=0),"राती"===t?e<4?e:e+12:"सकाळीं"===t?e:"दनपारां"===t?e>12?e:e+12:"सांजे"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"राती":e<12?"सकाळीं":e<16?"दनपारां":e<20?"सांजे":"राती"}})}(n(381))},3168:function(e,t,n){!function(e){"use strict";function t(e,t,n,i){var r={s:["thoddea sekondamni","thodde sekond"],ss:[e+" sekondamni",e+" sekond"],m:["eka mintan","ek minut"],mm:[e+" mintamni",e+" mintam"],h:["eka voran","ek vor"],hh:[e+" voramni",e+" voram"],d:["eka disan","ek dis"],dd:[e+" disamni",e+" dis"],M:["eka mhoinean","ek mhoino"],MM:[e+" mhoineamni",e+" mhoine"],y:["eka vorsan","ek voros"],yy:[e+" vorsamni",e+" vorsam"]};return i?r[n][0]:r[n][1]}e.defineLocale("gom-latn",{months:{standalone:"Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr".split("_"),format:"Janerachea_Febrerachea_Marsachea_Abrilachea_Maiachea_Junachea_Julaiachea_Agostachea_Setembrachea_Otubrachea_Novembrachea_Dezembrachea".split("_"),isFormat:/MMMM(\s)+D[oD]?/},monthsShort:"Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Aitar_Somar_Mongllar_Budhvar_Birestar_Sukrar_Son'var".split("_"),weekdaysShort:"Ait._Som._Mon._Bud._Bre._Suk._Son.".split("_"),weekdaysMin:"Ai_Sm_Mo_Bu_Br_Su_Sn".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"A h:mm [vazta]",LTS:"A h:mm:ss [vazta]",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY A h:mm [vazta]",LLLL:"dddd, MMMM Do, YYYY, A h:mm [vazta]",llll:"ddd, D MMM YYYY, A h:mm [vazta]"},calendar:{sameDay:"[Aiz] LT",nextDay:"[Faleam] LT",nextWeek:"[Fuddlo] dddd[,] LT",lastDay:"[Kal] LT",lastWeek:"[Fattlo] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%s",past:"%s adim",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}(er)/,ordinal:function(e,t){switch(t){case"D":return e+"er";default:case"M":case"Q":case"DDD":case"d":case"w":case"W":return e}},week:{dow:0,doy:3},meridiemParse:/rati|sokallim|donparam|sanje/,meridiemHour:function(e,t){return 12===e&&(e=0),"rati"===t?e<4?e:e+12:"sokallim"===t?e:"donparam"===t?e>12?e:e+12:"sanje"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"rati":e<12?"sokallim":e<16?"donparam":e<20?"sanje":"rati"}})}(n(381))},5349:function(e,t,n){!function(e){"use strict";var t={1:"૧",2:"૨",3:"૩",4:"૪",5:"૫",6:"૬",7:"૭",8:"૮",9:"૯",0:"૦"},n={"૧":"1","૨":"2","૩":"3","૪":"4","૫":"5","૬":"6","૭":"7","૮":"8","૯":"9","૦":"0"};e.defineLocale("gu",{months:"જાન્યુઆરી_ફેબ્રુઆરી_માર્ચ_એપ્રિલ_મે_જૂન_જુલાઈ_ઑગસ્ટ_સપ્ટેમ્બર_ઑક્ટ્બર_નવેમ્બર_ડિસેમ્બર".split("_"),monthsShort:"જાન્યુ._ફેબ્રુ._માર્ચ_એપ્રિ._મે_જૂન_જુલા._ઑગ._સપ્ટે._ઑક્ટ્._નવે._ડિસે.".split("_"),monthsParseExact:!0,weekdays:"રવિવાર_સોમવાર_મંગળવાર_બુધ્વાર_ગુરુવાર_શુક્રવાર_શનિવાર".split("_"),weekdaysShort:"રવિ_સોમ_મંગળ_બુધ્_ગુરુ_શુક્ર_શનિ".split("_"),weekdaysMin:"ર_સો_મં_બુ_ગુ_શુ_શ".split("_"),longDateFormat:{LT:"A h:mm વાગ્યે",LTS:"A h:mm:ss વાગ્યે",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm વાગ્યે",LLLL:"dddd, D MMMM YYYY, A h:mm વાગ્યે"},calendar:{sameDay:"[આજ] LT",nextDay:"[કાલે] LT",nextWeek:"dddd, LT",lastDay:"[ગઇકાલે] LT",lastWeek:"[પાછલા] dddd, LT",sameElse:"L"},relativeTime:{future:"%s મા",past:"%s પહેલા",s:"અમુક પળો",ss:"%d સેકંડ",m:"એક મિનિટ",mm:"%d મિનિટ",h:"એક કલાક",hh:"%d કલાક",d:"એક દિવસ",dd:"%d દિવસ",M:"એક મહિનો",MM:"%d મહિનો",y:"એક વર્ષ",yy:"%d વર્ષ"},preparse:function(e){return e.replace(/[૧૨૩૪૫૬૭૮૯૦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/રાત|બપોર|સવાર|સાંજ/,meridiemHour:function(e,t){return 12===e&&(e=0),"રાત"===t?e<4?e:e+12:"સવાર"===t?e:"બપોર"===t?e>=10?e:e+12:"સાંજ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"રાત":e<10?"સવાર":e<17?"બપોર":e<20?"સાંજ":"રાત"},week:{dow:0,doy:6}})}(n(381))},4206:function(e,t,n){!function(e){"use strict";e.defineLocale("he",{months:"ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),monthsShort:"ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),weekdays:"ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),weekdaysShort:"א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),weekdaysMin:"א_ב_ג_ד_ה_ו_ש".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [ב]MMMM YYYY",LLL:"D [ב]MMMM YYYY HH:mm",LLLL:"dddd, D [ב]MMMM YYYY HH:mm",l:"D/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[היום ב־]LT",nextDay:"[מחר ב־]LT",nextWeek:"dddd [בשעה] LT",lastDay:"[אתמול ב־]LT",lastWeek:"[ביום] dddd [האחרון בשעה] LT",sameElse:"L"},relativeTime:{future:"בעוד %s",past:"לפני %s",s:"מספר שניות",ss:"%d שניות",m:"דקה",mm:"%d דקות",h:"שעה",hh:function(e){return 2===e?"שעתיים":e+" שעות"},d:"יום",dd:function(e){return 2===e?"יומיים":e+" ימים"},M:"חודש",MM:function(e){return 2===e?"חודשיים":e+" חודשים"},y:"שנה",yy:function(e){return 2===e?"שנתיים":e%10==0&&10!==e?e+" שנה":e+" שנים"}},meridiemParse:/אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,isPM:function(e){return/^(אחה"צ|אחרי הצהריים|בערב)$/.test(e)},meridiem:function(e,t,n){return e<5?"לפנות בוקר":e<10?"בבוקר":e<12?n?'לפנה"צ':"לפני הצהריים":e<18?n?'אחה"צ':"אחרי הצהריים":"בערב"}})}(n(381))},94:function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"},i=[/^जन/i,/^फ़र|फर/i,/^मार्च/i,/^अप्रै/i,/^मई/i,/^जून/i,/^जुल/i,/^अग/i,/^सितं|सित/i,/^अक्टू/i,/^नव|नवं/i,/^दिसं|दिस/i];e.defineLocale("hi",{months:{format:"जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"),standalone:"जनवरी_फरवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितंबर_अक्टूबर_नवंबर_दिसंबर".split("_")},monthsShort:"जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"),weekdays:"रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm बजे",LTS:"A h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm बजे",LLLL:"dddd, D MMMM YYYY, A h:mm बजे"},monthsParse:i,longMonthsParse:i,shortMonthsParse:[/^जन/i,/^फ़र/i,/^मार्च/i,/^अप्रै/i,/^मई/i,/^जून/i,/^जुल/i,/^अग/i,/^सित/i,/^अक्टू/i,/^नव/i,/^दिस/i],monthsRegex:/^(जनवरी|जन\.?|फ़रवरी|फरवरी|फ़र\.?|मार्च?|अप्रैल|अप्रै\.?|मई?|जून?|जुलाई|जुल\.?|अगस्त|अग\.?|सितम्बर|सितंबर|सित\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर|नव\.?|दिसम्बर|दिसंबर|दिस\.?)/i,monthsShortRegex:/^(जनवरी|जन\.?|फ़रवरी|फरवरी|फ़र\.?|मार्च?|अप्रैल|अप्रै\.?|मई?|जून?|जुलाई|जुल\.?|अगस्त|अग\.?|सितम्बर|सितंबर|सित\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर|नव\.?|दिसम्बर|दिसंबर|दिस\.?)/i,monthsStrictRegex:/^(जनवरी?|फ़रवरी|फरवरी?|मार्च?|अप्रैल?|मई?|जून?|जुलाई?|अगस्त?|सितम्बर|सितंबर|सित?\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर?|दिसम्बर|दिसंबर?)/i,monthsShortStrictRegex:/^(जन\.?|फ़र\.?|मार्च?|अप्रै\.?|मई?|जून?|जुल\.?|अग\.?|सित\.?|अक्टू\.?|नव\.?|दिस\.?)/i,calendar:{sameDay:"[आज] LT",nextDay:"[कल] LT",nextWeek:"dddd, LT",lastDay:"[कल] LT",lastWeek:"[पिछले] dddd, LT",sameElse:"L"},relativeTime:{future:"%s में",past:"%s पहले",s:"कुछ ही क्षण",ss:"%d सेकंड",m:"एक मिनट",mm:"%d मिनट",h:"एक घंटा",hh:"%d घंटे",d:"एक दिन",dd:"%d दिन",M:"एक महीने",MM:"%d महीने",y:"एक वर्ष",yy:"%d वर्ष"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/रात|सुबह|दोपहर|शाम/,meridiemHour:function(e,t){return 12===e&&(e=0),"रात"===t?e<4?e:e+12:"सुबह"===t?e:"दोपहर"===t?e>=10?e:e+12:"शाम"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"रात":e<10?"सुबह":e<17?"दोपहर":e<20?"शाम":"रात"},week:{dow:0,doy:6}})}(n(381))},316:function(e,t,n){!function(e){"use strict";function t(e,t,n){var i=e+" ";switch(n){case"ss":return i+(1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi");case"m":return t?"jedna minuta":"jedne minute";case"mm":return i+(1===e?"minuta":2===e||3===e||4===e?"minute":"minuta");case"h":return t?"jedan sat":"jednog sata";case"hh":return i+(1===e?"sat":2===e||3===e||4===e?"sata":"sati");case"dd":return i+(1===e?"dan":"dana");case"MM":return i+(1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci");case"yy":return i+(1===e?"godina":2===e||3===e||4===e?"godine":"godina")}}e.defineLocale("hr",{months:{format:"siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca".split("_"),standalone:"siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_")},monthsShort:"sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"Do MMMM YYYY",LLL:"Do MMMM YYYY H:mm",LLLL:"dddd, Do MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:return"[prošlu] [nedjelju] [u] LT";case 3:return"[prošlu] [srijedu] [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:t,m:t,mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(381))},2138:function(e,t,n){!function(e){"use strict";var t="vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" ");function n(e,t,n,i){var r=e;switch(n){case"s":return i||t?"néhány másodperc":"néhány másodperce";case"ss":return r+(i||t)?" másodperc":" másodperce";case"m":return"egy"+(i||t?" perc":" perce");case"mm":return r+(i||t?" perc":" perce");case"h":return"egy"+(i||t?" óra":" órája");case"hh":return r+(i||t?" óra":" órája");case"d":return"egy"+(i||t?" nap":" napja");case"dd":return r+(i||t?" nap":" napja");case"M":return"egy"+(i||t?" hónap":" hónapja");case"MM":return r+(i||t?" hónap":" hónapja");case"y":return"egy"+(i||t?" év":" éve");case"yy":return r+(i||t?" év":" éve")}return""}function i(e){return(e?"":"[múlt] ")+"["+t[this.day()]+"] LT[-kor]"}e.defineLocale("hu",{months:"január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),monthsShort:"jan._feb._márc._ápr._máj._jún._júl._aug._szept._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),weekdaysShort:"vas_hét_kedd_sze_csüt_pén_szo".split("_"),weekdaysMin:"v_h_k_sze_cs_p_szo".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY. MMMM D.",LLL:"YYYY. MMMM D. H:mm",LLLL:"YYYY. MMMM D., dddd H:mm"},meridiemParse:/de|du/i,isPM:function(e){return"u"===e.charAt(1).toLowerCase()},meridiem:function(e,t,n){return e<12?!0===n?"de":"DE":!0===n?"du":"DU"},calendar:{sameDay:"[ma] LT[-kor]",nextDay:"[holnap] LT[-kor]",nextWeek:function(){return i.call(this,!0)},lastDay:"[tegnap] LT[-kor]",lastWeek:function(){return i.call(this,!1)},sameElse:"L"},relativeTime:{future:"%s múlva",past:"%s",s:n,ss:n,m:n,mm:n,h:n,hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},1423:function(e,t,n){!function(e){"use strict";e.defineLocale("hy-am",{months:{format:"հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի".split("_"),standalone:"հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր".split("_")},monthsShort:"հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ".split("_"),weekdays:"կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ".split("_"),weekdaysShort:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),weekdaysMin:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY թ.",LLL:"D MMMM YYYY թ., HH:mm",LLLL:"dddd, D MMMM YYYY թ., HH:mm"},calendar:{sameDay:"[այսօր] LT",nextDay:"[վաղը] LT",lastDay:"[երեկ] LT",nextWeek:function(){return"dddd [օրը ժամը] LT"},lastWeek:function(){return"[անցած] dddd [օրը ժամը] LT"},sameElse:"L"},relativeTime:{future:"%s հետո",past:"%s առաջ",s:"մի քանի վայրկյան",ss:"%d վայրկյան",m:"րոպե",mm:"%d րոպե",h:"ժամ",hh:"%d ժամ",d:"օր",dd:"%d օր",M:"ամիս",MM:"%d ամիս",y:"տարի",yy:"%d տարի"},meridiemParse:/գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,isPM:function(e){return/^(ցերեկվա|երեկոյան)$/.test(e)},meridiem:function(e){return e<4?"գիշերվա":e<12?"առավոտվա":e<17?"ցերեկվա":"երեկոյան"},dayOfMonthOrdinalParse:/\d{1,2}|\d{1,2}-(ին|րդ)/,ordinal:function(e,t){switch(t){case"DDD":case"w":case"W":case"DDDo":return 1===e?e+"-ին":e+"-րդ";default:return e}},week:{dow:1,doy:7}})}(n(381))},9218:function(e,t,n){!function(e){"use strict";e.defineLocale("id",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des".split("_"),weekdays:"Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),weekdaysShort:"Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|siang|sore|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"siang"===t?e>=11?e:e+12:"sore"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"siang":e<19?"sore":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Besok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kemarin pukul] LT",lastWeek:"dddd [lalu pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lalu",s:"beberapa detik",ss:"%d detik",m:"semenit",mm:"%d menit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:0,doy:6}})}(n(381))},135:function(e,t,n){!function(e){"use strict";function t(e){return e%100==11||e%10!=1}function n(e,n,i,r){var a=e+" ";switch(i){case"s":return n||r?"nokkrar sekúndur":"nokkrum sekúndum";case"ss":return t(e)?a+(n||r?"sekúndur":"sekúndum"):a+"sekúnda";case"m":return n?"mínúta":"mínútu";case"mm":return t(e)?a+(n||r?"mínútur":"mínútum"):n?a+"mínúta":a+"mínútu";case"hh":return t(e)?a+(n||r?"klukkustundir":"klukkustundum"):a+"klukkustund";case"d":return n?"dagur":r?"dag":"degi";case"dd":return t(e)?n?a+"dagar":a+(r?"daga":"dögum"):n?a+"dagur":a+(r?"dag":"degi");case"M":return n?"mánuður":r?"mánuð":"mánuði";case"MM":return t(e)?n?a+"mánuðir":a+(r?"mánuði":"mánuðum"):n?a+"mánuður":a+(r?"mánuð":"mánuði");case"y":return n||r?"ár":"ári";case"yy":return t(e)?a+(n||r?"ár":"árum"):a+(n||r?"ár":"ári")}}e.defineLocale("is",{months:"janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),monthsShort:"jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),weekdays:"sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),weekdaysShort:"sun_mán_þri_mið_fim_fös_lau".split("_"),weekdaysMin:"Su_Má_Þr_Mi_Fi_Fö_La".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd, D. MMMM YYYY [kl.] H:mm"},calendar:{sameDay:"[í dag kl.] LT",nextDay:"[á morgun kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[í gær kl.] LT",lastWeek:"[síðasta] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"eftir %s",past:"fyrir %s síðan",s:n,ss:n,m:n,mm:n,h:"klukkustund",hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},150:function(e,t,n){!function(e){"use strict";e.defineLocale("it-ch",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:function(){switch(this.day()){case 0:return"[la scorsa] dddd [alle] LT";default:return"[lo scorso] dddd [alle] LT"}},sameElse:"L"},relativeTime:{future:function(e){return(/^[0-9].+$/.test(e)?"tra":"in")+" "+e},past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(381))},626:function(e,t,n){!function(e){"use strict";e.defineLocale("it",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:function(){return"[Oggi a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},nextDay:function(){return"[Domani a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},nextWeek:function(){return"dddd [a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},lastDay:function(){return"[Ieri a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},lastWeek:function(){switch(this.day()){case 0:return"[La scorsa] dddd [a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT";default:return"[Lo scorso] dddd [a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"}},sameElse:"L"},relativeTime:{future:"tra %s",past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",w:"una settimana",ww:"%d settimane",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(381))},9183:function(e,t,n){!function(e){"use strict";e.defineLocale("ja",{eras:[{since:"2019-05-01",offset:1,name:"令和",narrow:"㋿",abbr:"R"},{since:"1989-01-08",until:"2019-04-30",offset:1,name:"平成",narrow:"㍻",abbr:"H"},{since:"1926-12-25",until:"1989-01-07",offset:1,name:"昭和",narrow:"㍼",abbr:"S"},{since:"1912-07-30",until:"1926-12-24",offset:1,name:"大正",narrow:"㍽",abbr:"T"},{since:"1873-01-01",until:"1912-07-29",offset:6,name:"明治",narrow:"㍾",abbr:"M"},{since:"0001-01-01",until:"1873-12-31",offset:1,name:"西暦",narrow:"AD",abbr:"AD"},{since:"0000-12-31",until:-1/0,offset:1,name:"紀元前",narrow:"BC",abbr:"BC"}],eraYearOrdinalRegex:/(元|\d+)年/,eraYearOrdinalParse:function(e,t){return"元"===t[1]?1:parseInt(t[1]||e,10)},months:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),weekdaysShort:"日_月_火_水_木_金_土".split("_"),weekdaysMin:"日_月_火_水_木_金_土".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日 dddd HH:mm",l:"YYYY/MM/DD",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日(ddd) HH:mm"},meridiemParse:/午前|午後/i,isPM:function(e){return"午後"===e},meridiem:function(e,t,n){return e<12?"午前":"午後"},calendar:{sameDay:"[今日] LT",nextDay:"[明日] LT",nextWeek:function(e){return e.week()!==this.week()?"[来週]dddd LT":"dddd LT"},lastDay:"[昨日] LT",lastWeek:function(e){return this.week()!==e.week()?"[先週]dddd LT":"dddd LT"},sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}日/,ordinal:function(e,t){switch(t){case"y":return 1===e?"元年":e+"年";case"d":case"D":case"DDD":return e+"日";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"数秒",ss:"%d秒",m:"1分",mm:"%d分",h:"1時間",hh:"%d時間",d:"1日",dd:"%d日",M:"1ヶ月",MM:"%dヶ月",y:"1年",yy:"%d年"}})}(n(381))},4286:function(e,t,n){!function(e){"use strict";e.defineLocale("jv",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des".split("_"),weekdays:"Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu".split("_"),weekdaysShort:"Min_Sen_Sel_Reb_Kem_Jem_Sep".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sp".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/enjing|siyang|sonten|ndalu/,meridiemHour:function(e,t){return 12===e&&(e=0),"enjing"===t?e:"siyang"===t?e>=11?e:e+12:"sonten"===t||"ndalu"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"enjing":e<15?"siyang":e<19?"sonten":"ndalu"},calendar:{sameDay:"[Dinten puniko pukul] LT",nextDay:"[Mbenjang pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kala wingi pukul] LT",lastWeek:"dddd [kepengker pukul] LT",sameElse:"L"},relativeTime:{future:"wonten ing %s",past:"%s ingkang kepengker",s:"sawetawis detik",ss:"%d detik",m:"setunggal menit",mm:"%d menit",h:"setunggal jam",hh:"%d jam",d:"sedinten",dd:"%d dinten",M:"sewulan",MM:"%d wulan",y:"setaun",yy:"%d taun"},week:{dow:1,doy:7}})}(n(381))},2105:function(e,t,n){!function(e){"use strict";e.defineLocale("ka",{months:"იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი".split("_"),monthsShort:"იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split("_"),weekdays:{standalone:"კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი".split("_"),format:"კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს".split("_"),isFormat:/(წინა|შემდეგ)/},weekdaysShort:"კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"),weekdaysMin:"კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[დღეს] LT[-ზე]",nextDay:"[ხვალ] LT[-ზე]",lastDay:"[გუშინ] LT[-ზე]",nextWeek:"[შემდეგ] dddd LT[-ზე]",lastWeek:"[წინა] dddd LT-ზე",sameElse:"L"},relativeTime:{future:function(e){return e.replace(/(წამ|წუთ|საათ|წელ|დღ|თვ)(ი|ე)/,(function(e,t,n){return"ი"===n?t+"ში":t+n+"ში"}))},past:function(e){return/(წამი|წუთი|საათი|დღე|თვე)/.test(e)?e.replace(/(ი|ე)$/,"ის წინ"):/წელი/.test(e)?e.replace(/წელი$/,"წლის წინ"):e},s:"რამდენიმე წამი",ss:"%d წამი",m:"წუთი",mm:"%d წუთი",h:"საათი",hh:"%d საათი",d:"დღე",dd:"%d დღე",M:"თვე",MM:"%d თვე",y:"წელი",yy:"%d წელი"},dayOfMonthOrdinalParse:/0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,ordinal:function(e){return 0===e?e:1===e?e+"-ლი":e<20||e<=100&&e%20==0||e%100==0?"მე-"+e:e+"-ე"},week:{dow:1,doy:7}})}(n(381))},7772:function(e,t,n){!function(e){"use strict";var t={0:"-ші",1:"-ші",2:"-ші",3:"-ші",4:"-ші",5:"-ші",6:"-шы",7:"-ші",8:"-ші",9:"-шы",10:"-шы",20:"-шы",30:"-шы",40:"-шы",50:"-ші",60:"-шы",70:"-ші",80:"-ші",90:"-шы",100:"-ші"};e.defineLocale("kk",{months:"қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан".split("_"),monthsShort:"қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел".split("_"),weekdays:"жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі".split("_"),weekdaysShort:"жек_дүй_сей_сәр_бей_жұм_сен".split("_"),weekdaysMin:"жк_дй_сй_ср_бй_жм_сн".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгін сағат] LT",nextDay:"[Ертең сағат] LT",nextWeek:"dddd [сағат] LT",lastDay:"[Кеше сағат] LT",lastWeek:"[Өткен аптаның] dddd [сағат] LT",sameElse:"L"},relativeTime:{future:"%s ішінде",past:"%s бұрын",s:"бірнеше секунд",ss:"%d секунд",m:"бір минут",mm:"%d минут",h:"бір сағат",hh:"%d сағат",d:"бір күн",dd:"%d күн",M:"бір ай",MM:"%d ай",y:"бір жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(ші|шы)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(381))},8758:function(e,t,n){!function(e){"use strict";var t={1:"១",2:"២",3:"៣",4:"៤",5:"៥",6:"៦",7:"៧",8:"៨",9:"៩",0:"០"},n={"១":"1","២":"2","៣":"3","៤":"4","៥":"5","៦":"6","៧":"7","៨":"8","៩":"9","០":"0"};e.defineLocale("km",{months:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),monthsShort:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),weekdays:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),weekdaysShort:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysMin:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ព្រឹក|ល្ងាច/,isPM:function(e){return"ល្ងាច"===e},meridiem:function(e,t,n){return e<12?"ព្រឹក":"ល្ងាច"},calendar:{sameDay:"[ថ្ងៃនេះ ម៉ោង] LT",nextDay:"[ស្អែក ម៉ោង] LT",nextWeek:"dddd [ម៉ោង] LT",lastDay:"[ម្សិលមិញ ម៉ោង] LT",lastWeek:"dddd [សប្តាហ៍មុន] [ម៉ោង] LT",sameElse:"L"},relativeTime:{future:"%sទៀត",past:"%sមុន",s:"ប៉ុន្មានវិនាទី",ss:"%d វិនាទី",m:"មួយនាទី",mm:"%d នាទី",h:"មួយម៉ោង",hh:"%d ម៉ោង",d:"មួយថ្ងៃ",dd:"%d ថ្ងៃ",M:"មួយខែ",MM:"%d ខែ",y:"មួយឆ្នាំ",yy:"%d ឆ្នាំ"},dayOfMonthOrdinalParse:/ទី\d{1,2}/,ordinal:"ទី%d",preparse:function(e){return e.replace(/[១២៣៤៥៦៧៨៩០]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},week:{dow:1,doy:4}})}(n(381))},9282:function(e,t,n){!function(e){"use strict";var t={1:"೧",2:"೨",3:"೩",4:"೪",5:"೫",6:"೬",7:"೭",8:"೮",9:"೯",0:"೦"},n={"೧":"1","೨":"2","೩":"3","೪":"4","೫":"5","೬":"6","೭":"7","೮":"8","೯":"9","೦":"0"};e.defineLocale("kn",{months:"ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್".split("_"),monthsShort:"ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂ_ಅಕ್ಟೋ_ನವೆಂ_ಡಿಸೆಂ".split("_"),monthsParseExact:!0,weekdays:"ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ".split("_"),weekdaysShort:"ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ".split("_"),weekdaysMin:"ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[ಇಂದು] LT",nextDay:"[ನಾಳೆ] LT",nextWeek:"dddd, LT",lastDay:"[ನಿನ್ನೆ] LT",lastWeek:"[ಕೊನೆಯ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ನಂತರ",past:"%s ಹಿಂದೆ",s:"ಕೆಲವು ಕ್ಷಣಗಳು",ss:"%d ಸೆಕೆಂಡುಗಳು",m:"ಒಂದು ನಿಮಿಷ",mm:"%d ನಿಮಿಷ",h:"ಒಂದು ಗಂಟೆ",hh:"%d ಗಂಟೆ",d:"ಒಂದು ದಿನ",dd:"%d ದಿನ",M:"ಒಂದು ತಿಂಗಳು",MM:"%d ತಿಂಗಳು",y:"ಒಂದು ವರ್ಷ",yy:"%d ವರ್ಷ"},preparse:function(e){return e.replace(/[೧೨೩೪೫೬೭೮೯೦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ರಾತ್ರಿ"===t?e<4?e:e+12:"ಬೆಳಿಗ್ಗೆ"===t?e:"ಮಧ್ಯಾಹ್ನ"===t?e>=10?e:e+12:"ಸಂಜೆ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"ರಾತ್ರಿ":e<10?"ಬೆಳಿಗ್ಗೆ":e<17?"ಮಧ್ಯಾಹ್ನ":e<20?"ಸಂಜೆ":"ರಾತ್ರಿ"},dayOfMonthOrdinalParse:/\d{1,2}(ನೇ)/,ordinal:function(e){return e+"ನೇ"},week:{dow:0,doy:6}})}(n(381))},3730:function(e,t,n){!function(e){"use strict";e.defineLocale("ko",{months:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),monthsShort:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),weekdays:"일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),weekdaysShort:"일_월_화_수_목_금_토".split("_"),weekdaysMin:"일_월_화_수_목_금_토".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY년 MMMM D일",LLL:"YYYY년 MMMM D일 A h:mm",LLLL:"YYYY년 MMMM D일 dddd A h:mm",l:"YYYY.MM.DD.",ll:"YYYY년 MMMM D일",lll:"YYYY년 MMMM D일 A h:mm",llll:"YYYY년 MMMM D일 dddd A h:mm"},calendar:{sameDay:"오늘 LT",nextDay:"내일 LT",nextWeek:"dddd LT",lastDay:"어제 LT",lastWeek:"지난주 dddd LT",sameElse:"L"},relativeTime:{future:"%s 후",past:"%s 전",s:"몇 초",ss:"%d초",m:"1분",mm:"%d분",h:"한 시간",hh:"%d시간",d:"하루",dd:"%d일",M:"한 달",MM:"%d달",y:"일 년",yy:"%d년"},dayOfMonthOrdinalParse:/\d{1,2}(일|월|주)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"일";case"M":return e+"월";case"w":case"W":return e+"주";default:return e}},meridiemParse:/오전|오후/,isPM:function(e){return"오후"===e},meridiem:function(e,t,n){return e<12?"오전":"오후"}})}(n(381))},1408:function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},i=["کانونی دووەم","شوبات","ئازار","نیسان","ئایار","حوزەیران","تەمموز","ئاب","ئەیلوول","تشرینی یەكەم","تشرینی دووەم","كانونی یەکەم"];e.defineLocale("ku",{months:i,monthsShort:i,weekdays:"یه‌كشه‌ممه‌_دووشه‌ممه‌_سێشه‌ممه‌_چوارشه‌ممه‌_پێنجشه‌ممه‌_هه‌ینی_شه‌ممه‌".split("_"),weekdaysShort:"یه‌كشه‌م_دووشه‌م_سێشه‌م_چوارشه‌م_پێنجشه‌م_هه‌ینی_شه‌ممه‌".split("_"),weekdaysMin:"ی_د_س_چ_پ_ه_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ئێواره‌|به‌یانی/,isPM:function(e){return/ئێواره‌/.test(e)},meridiem:function(e,t,n){return e<12?"به‌یانی":"ئێواره‌"},calendar:{sameDay:"[ئه‌مرۆ كاتژمێر] LT",nextDay:"[به‌یانی كاتژمێر] LT",nextWeek:"dddd [كاتژمێر] LT",lastDay:"[دوێنێ كاتژمێر] LT",lastWeek:"dddd [كاتژمێر] LT",sameElse:"L"},relativeTime:{future:"له‌ %s",past:"%s",s:"چه‌ند چركه‌یه‌ك",ss:"چركه‌ %d",m:"یه‌ك خوله‌ك",mm:"%d خوله‌ك",h:"یه‌ك كاتژمێر",hh:"%d كاتژمێر",d:"یه‌ك ڕۆژ",dd:"%d ڕۆژ",M:"یه‌ك مانگ",MM:"%d مانگ",y:"یه‌ك ساڵ",yy:"%d ساڵ"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(381))},3291:function(e,t,n){!function(e){"use strict";var t={0:"-чү",1:"-чи",2:"-чи",3:"-чү",4:"-чү",5:"-чи",6:"-чы",7:"-чи",8:"-чи",9:"-чу",10:"-чу",20:"-чы",30:"-чу",40:"-чы",50:"-чү",60:"-чы",70:"-чи",80:"-чи",90:"-чу",100:"-чү"};e.defineLocale("ky",{months:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),monthsShort:"янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split("_"),weekdays:"Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби".split("_"),weekdaysShort:"Жек_Дүй_Шей_Шар_Бей_Жум_Ише".split("_"),weekdaysMin:"Жк_Дй_Шй_Шр_Бй_Жм_Иш".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгүн саат] LT",nextDay:"[Эртең саат] LT",nextWeek:"dddd [саат] LT",lastDay:"[Кечээ саат] LT",lastWeek:"[Өткөн аптанын] dddd [күнү] [саат] LT",sameElse:"L"},relativeTime:{future:"%s ичинде",past:"%s мурун",s:"бирнече секунд",ss:"%d секунд",m:"бир мүнөт",mm:"%d мүнөт",h:"бир саат",hh:"%d саат",d:"бир күн",dd:"%d күн",M:"бир ай",MM:"%d ай",y:"бир жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(чи|чы|чү|чу)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(381))},6841:function(e,t,n){!function(e){"use strict";function t(e,t,n,i){var r={m:["eng Minutt","enger Minutt"],h:["eng Stonn","enger Stonn"],d:["een Dag","engem Dag"],M:["ee Mount","engem Mount"],y:["ee Joer","engem Joer"]};return t?r[n][0]:r[n][1]}function n(e){if(e=parseInt(e,10),isNaN(e))return!1;if(e<0)return!0;if(e<10)return 4<=e&&e<=7;if(e<100){var t=e%10;return n(0===t?e/10:t)}if(e<1e4){for(;e>=10;)e/=10;return n(e)}return n(e/=1e3)}e.defineLocale("lb",{months:"Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split("_"),weekdaysShort:"So._Mé._Dë._Më._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mé_Dë_Më_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm [Auer]",LTS:"H:mm:ss [Auer]",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm [Auer]",LLLL:"dddd, D. MMMM YYYY H:mm [Auer]"},calendar:{sameDay:"[Haut um] LT",sameElse:"L",nextDay:"[Muer um] LT",nextWeek:"dddd [um] LT",lastDay:"[Gëschter um] LT",lastWeek:function(){switch(this.day()){case 2:case 4:return"[Leschten] dddd [um] LT";default:return"[Leschte] dddd [um] LT"}}},relativeTime:{future:function(e){return n(e.substr(0,e.indexOf(" ")))?"a "+e:"an "+e},past:function(e){return n(e.substr(0,e.indexOf(" ")))?"viru "+e:"virun "+e},s:"e puer Sekonnen",ss:"%d Sekonnen",m:t,mm:"%d Minutten",h:t,hh:"%d Stonnen",d:t,dd:"%d Deeg",M:t,MM:"%d Méint",y:t,yy:"%d Joer"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},5466:function(e,t,n){!function(e){"use strict";e.defineLocale("lo",{months:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),monthsShort:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),weekdays:"ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysShort:"ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysMin:"ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"ວັນdddd D MMMM YYYY HH:mm"},meridiemParse:/ຕອນເຊົ້າ|ຕອນແລງ/,isPM:function(e){return"ຕອນແລງ"===e},meridiem:function(e,t,n){return e<12?"ຕອນເຊົ້າ":"ຕອນແລງ"},calendar:{sameDay:"[ມື້ນີ້ເວລາ] LT",nextDay:"[ມື້ອື່ນເວລາ] LT",nextWeek:"[ວັນ]dddd[ໜ້າເວລາ] LT",lastDay:"[ມື້ວານນີ້ເວລາ] LT",lastWeek:"[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT",sameElse:"L"},relativeTime:{future:"ອີກ %s",past:"%sຜ່ານມາ",s:"ບໍ່ເທົ່າໃດວິນາທີ",ss:"%d ວິນາທີ",m:"1 ນາທີ",mm:"%d ນາທີ",h:"1 ຊົ່ວໂມງ",hh:"%d ຊົ່ວໂມງ",d:"1 ມື້",dd:"%d ມື້",M:"1 ເດືອນ",MM:"%d ເດືອນ",y:"1 ປີ",yy:"%d ປີ"},dayOfMonthOrdinalParse:/(ທີ່)\d{1,2}/,ordinal:function(e){return"ທີ່"+e}})}(n(381))},7010:function(e,t,n){!function(e){"use strict";var t={ss:"sekundė_sekundžių_sekundes",m:"minutė_minutės_minutę",mm:"minutės_minučių_minutes",h:"valanda_valandos_valandą",hh:"valandos_valandų_valandas",d:"diena_dienos_dieną",dd:"dienos_dienų_dienas",M:"mėnuo_mėnesio_mėnesį",MM:"mėnesiai_mėnesių_mėnesius",y:"metai_metų_metus",yy:"metai_metų_metus"};function n(e,t,n,i){return t?r(n)[0]:i?r(n)[1]:r(n)[2]}function i(e){return e%10==0||e>10&&e<20}function r(e){return t[e].split("_")}function a(e,t,a,s){var o=e+" ";return 1===e?o+n(0,t,a[0],s):t?o+(i(e)?r(a)[1]:r(a)[0]):s?o+r(a)[1]:o+(i(e)?r(a)[1]:r(a)[2])}e.defineLocale("lt",{months:{format:"sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"),standalone:"sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis".split("_"),isFormat:/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/},monthsShort:"sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),weekdays:{format:"sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį".split("_"),standalone:"sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_"),isFormat:/dddd HH:mm/},weekdaysShort:"Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),weekdaysMin:"S_P_A_T_K_Pn_Š".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY [m.] MMMM D [d.]",LLL:"YYYY [m.] MMMM D [d.], HH:mm [val.]",LLLL:"YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]",l:"YYYY-MM-DD",ll:"YYYY [m.] MMMM D [d.]",lll:"YYYY [m.] MMMM D [d.], HH:mm [val.]",llll:"YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]"},calendar:{sameDay:"[Šiandien] LT",nextDay:"[Rytoj] LT",nextWeek:"dddd LT",lastDay:"[Vakar] LT",lastWeek:"[Praėjusį] dddd LT",sameElse:"L"},relativeTime:{future:"po %s",past:"prieš %s",s:function(e,t,n,i){return t?"kelios sekundės":i?"kelių sekundžių":"kelias sekundes"},ss:a,m:n,mm:a,h:n,hh:a,d:n,dd:a,M:n,MM:a,y:n,yy:a},dayOfMonthOrdinalParse:/\d{1,2}-oji/,ordinal:function(e){return e+"-oji"},week:{dow:1,doy:4}})}(n(381))},7595:function(e,t,n){!function(e){"use strict";var t={ss:"sekundes_sekundēm_sekunde_sekundes".split("_"),m:"minūtes_minūtēm_minūte_minūtes".split("_"),mm:"minūtes_minūtēm_minūte_minūtes".split("_"),h:"stundas_stundām_stunda_stundas".split("_"),hh:"stundas_stundām_stunda_stundas".split("_"),d:"dienas_dienām_diena_dienas".split("_"),dd:"dienas_dienām_diena_dienas".split("_"),M:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),MM:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),y:"gada_gadiem_gads_gadi".split("_"),yy:"gada_gadiem_gads_gadi".split("_")};function n(e,t,n){return n?t%10==1&&t%100!=11?e[2]:e[3]:t%10==1&&t%100!=11?e[0]:e[1]}function i(e,i,r){return e+" "+n(t[r],e,i)}function r(e,i,r){return n(t[r],e,i)}e.defineLocale("lv",{months:"janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),monthsShort:"jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),weekdays:"svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),weekdaysShort:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysMin:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY.",LL:"YYYY. [gada] D. MMMM",LLL:"YYYY. [gada] D. MMMM, HH:mm",LLLL:"YYYY. [gada] D. MMMM, dddd, HH:mm"},calendar:{sameDay:"[Šodien pulksten] LT",nextDay:"[Rīt pulksten] LT",nextWeek:"dddd [pulksten] LT",lastDay:"[Vakar pulksten] LT",lastWeek:"[Pagājušā] dddd [pulksten] LT",sameElse:"L"},relativeTime:{future:"pēc %s",past:"pirms %s",s:function(e,t){return t?"dažas sekundes":"dažām sekundēm"},ss:i,m:r,mm:i,h:r,hh:i,d:r,dd:i,M:r,MM:i,y:r,yy:i},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},9861:function(e,t,n){!function(e){"use strict";var t={words:{ss:["sekund","sekunda","sekundi"],m:["jedan minut","jednog minuta"],mm:["minut","minuta","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mjesec","mjeseca","mjeseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,i){var r=t.words[i];return 1===i.length?n?r[0]:r[1]:e+" "+t.correctGrammaticalCase(e,r)}};e.defineLocale("me",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sjutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedjelje] [u] LT","[prošlog] [ponedjeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srijede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"nekoliko sekundi",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"dan",dd:t.translate,M:"mjesec",MM:t.translate,y:"godinu",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(381))},5493:function(e,t,n){!function(e){"use strict";e.defineLocale("mi",{months:"Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea".split("_"),monthsShort:"Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki".split("_"),monthsRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,weekdays:"Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei".split("_"),weekdaysShort:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),weekdaysMin:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [i] HH:mm",LLLL:"dddd, D MMMM YYYY [i] HH:mm"},calendar:{sameDay:"[i teie mahana, i] LT",nextDay:"[apopo i] LT",nextWeek:"dddd [i] LT",lastDay:"[inanahi i] LT",lastWeek:"dddd [whakamutunga i] LT",sameElse:"L"},relativeTime:{future:"i roto i %s",past:"%s i mua",s:"te hēkona ruarua",ss:"%d hēkona",m:"he meneti",mm:"%d meneti",h:"te haora",hh:"%d haora",d:"he ra",dd:"%d ra",M:"he marama",MM:"%d marama",y:"he tau",yy:"%d tau"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(381))},5966:function(e,t,n){!function(e){"use strict";e.defineLocale("mk",{months:"јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември".split("_"),monthsShort:"јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек".split("_"),weekdays:"недела_понеделник_вторник_среда_четврток_петок_сабота".split("_"),weekdaysShort:"нед_пон_вто_сре_чет_пет_саб".split("_"),weekdaysMin:"нe_пo_вт_ср_че_пе_сa".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Денес во] LT",nextDay:"[Утре во] LT",nextWeek:"[Во] dddd [во] LT",lastDay:"[Вчера во] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Изминатата] dddd [во] LT";case 1:case 2:case 4:case 5:return"[Изминатиот] dddd [во] LT"}},sameElse:"L"},relativeTime:{future:"за %s",past:"пред %s",s:"неколку секунди",ss:"%d секунди",m:"една минута",mm:"%d минути",h:"еден час",hh:"%d часа",d:"еден ден",dd:"%d дена",M:"еден месец",MM:"%d месеци",y:"една година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&n<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}})}(n(381))},7341:function(e,t,n){!function(e){"use strict";e.defineLocale("ml",{months:"ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ".split("_"),monthsShort:"ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.".split("_"),monthsParseExact:!0,weekdays:"ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച".split("_"),weekdaysShort:"ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി".split("_"),weekdaysMin:"ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ".split("_"),longDateFormat:{LT:"A h:mm -നു",LTS:"A h:mm:ss -നു",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm -നു",LLLL:"dddd, D MMMM YYYY, A h:mm -നു"},calendar:{sameDay:"[ഇന്ന്] LT",nextDay:"[നാളെ] LT",nextWeek:"dddd, LT",lastDay:"[ഇന്നലെ] LT",lastWeek:"[കഴിഞ്ഞ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s കഴിഞ്ഞ്",past:"%s മുൻപ്",s:"അൽപ നിമിഷങ്ങൾ",ss:"%d സെക്കൻഡ്",m:"ഒരു മിനിറ്റ്",mm:"%d മിനിറ്റ്",h:"ഒരു മണിക്കൂർ",hh:"%d മണിക്കൂർ",d:"ഒരു ദിവസം",dd:"%d ദിവസം",M:"ഒരു മാസം",MM:"%d മാസം",y:"ഒരു വർഷം",yy:"%d വർഷം"},meridiemParse:/രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,meridiemHour:function(e,t){return 12===e&&(e=0),"രാത്രി"===t&&e>=4||"ഉച്ച കഴിഞ്ഞ്"===t||"വൈകുന്നേരം"===t?e+12:e},meridiem:function(e,t,n){return e<4?"രാത്രി":e<12?"രാവിലെ":e<17?"ഉച്ച കഴിഞ്ഞ്":e<20?"വൈകുന്നേരം":"രാത്രി"}})}(n(381))},5115:function(e,t,n){!function(e){"use strict";function t(e,t,n,i){switch(n){case"s":return t?"хэдхэн секунд":"хэдхэн секундын";case"ss":return e+(t?" секунд":" секундын");case"m":case"mm":return e+(t?" минут":" минутын");case"h":case"hh":return e+(t?" цаг":" цагийн");case"d":case"dd":return e+(t?" өдөр":" өдрийн");case"M":case"MM":return e+(t?" сар":" сарын");case"y":case"yy":return e+(t?" жил":" жилийн");default:return e}}e.defineLocale("mn",{months:"Нэгдүгээр сар_Хоёрдугаар сар_Гуравдугаар сар_Дөрөвдүгээр сар_Тавдугаар сар_Зургадугаар сар_Долдугаар сар_Наймдугаар сар_Есдүгээр сар_Аравдугаар сар_Арван нэгдүгээр сар_Арван хоёрдугаар сар".split("_"),monthsShort:"1 сар_2 сар_3 сар_4 сар_5 сар_6 сар_7 сар_8 сар_9 сар_10 сар_11 сар_12 сар".split("_"),monthsParseExact:!0,weekdays:"Ням_Даваа_Мягмар_Лхагва_Пүрэв_Баасан_Бямба".split("_"),weekdaysShort:"Ням_Дав_Мяг_Лха_Пүр_Баа_Бям".split("_"),weekdaysMin:"Ня_Да_Мя_Лх_Пү_Ба_Бя".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY оны MMMMын D",LLL:"YYYY оны MMMMын D HH:mm",LLLL:"dddd, YYYY оны MMMMын D HH:mm"},meridiemParse:/ҮӨ|ҮХ/i,isPM:function(e){return"ҮХ"===e},meridiem:function(e,t,n){return e<12?"ҮӨ":"ҮХ"},calendar:{sameDay:"[Өнөөдөр] LT",nextDay:"[Маргааш] LT",nextWeek:"[Ирэх] dddd LT",lastDay:"[Өчигдөр] LT",lastWeek:"[Өнгөрсөн] dddd LT",sameElse:"L"},relativeTime:{future:"%s дараа",past:"%s өмнө",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2} өдөр/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+" өдөр";default:return e}}})}(n(381))},370:function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};function i(e,t,n,i){var r="";if(t)switch(n){case"s":r="काही सेकंद";break;case"ss":r="%d सेकंद";break;case"m":r="एक मिनिट";break;case"mm":r="%d मिनिटे";break;case"h":r="एक तास";break;case"hh":r="%d तास";break;case"d":r="एक दिवस";break;case"dd":r="%d दिवस";break;case"M":r="एक महिना";break;case"MM":r="%d महिने";break;case"y":r="एक वर्ष";break;case"yy":r="%d वर्षे"}else switch(n){case"s":r="काही सेकंदां";break;case"ss":r="%d सेकंदां";break;case"m":r="एका मिनिटा";break;case"mm":r="%d मिनिटां";break;case"h":r="एका तासा";break;case"hh":r="%d तासां";break;case"d":r="एका दिवसा";break;case"dd":r="%d दिवसां";break;case"M":r="एका महिन्या";break;case"MM":r="%d महिन्यां";break;case"y":r="एका वर्षा";break;case"yy":r="%d वर्षां"}return r.replace(/%d/i,e)}e.defineLocale("mr",{months:"जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),monthsShort:"जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),monthsParseExact:!0,weekdays:"रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm वाजता",LTS:"A h:mm:ss वाजता",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm वाजता",LLLL:"dddd, D MMMM YYYY, A h:mm वाजता"},calendar:{sameDay:"[आज] LT",nextDay:"[उद्या] LT",nextWeek:"dddd, LT",lastDay:"[काल] LT",lastWeek:"[मागील] dddd, LT",sameElse:"L"},relativeTime:{future:"%sमध्ये",past:"%sपूर्वी",s:i,ss:i,m:i,mm:i,h:i,hh:i,d:i,dd:i,M:i,MM:i,y:i,yy:i},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/पहाटे|सकाळी|दुपारी|सायंकाळी|रात्री/,meridiemHour:function(e,t){return 12===e&&(e=0),"पहाटे"===t||"सकाळी"===t?e:"दुपारी"===t||"सायंकाळी"===t||"रात्री"===t?e>=12?e:e+12:void 0},meridiem:function(e,t,n){return e>=0&&e<6?"पहाटे":e<12?"सकाळी":e<17?"दुपारी":e<20?"सायंकाळी":"रात्री"},week:{dow:0,doy:6}})}(n(381))},1237:function(e,t,n){!function(e){"use strict";e.defineLocale("ms-my",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(381))},9847:function(e,t,n){!function(e){"use strict";e.defineLocale("ms",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(381))},2126:function(e,t,n){!function(e){"use strict";e.defineLocale("mt",{months:"Jannar_Frar_Marzu_April_Mejju_Ġunju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Diċembru".split("_"),monthsShort:"Jan_Fra_Mar_Apr_Mej_Ġun_Lul_Aww_Set_Ott_Nov_Diċ".split("_"),weekdays:"Il-Ħadd_It-Tnejn_It-Tlieta_L-Erbgħa_Il-Ħamis_Il-Ġimgħa_Is-Sibt".split("_"),weekdaysShort:"Ħad_Tne_Tli_Erb_Ħam_Ġim_Sib".split("_"),weekdaysMin:"Ħa_Tn_Tl_Er_Ħa_Ġi_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Illum fil-]LT",nextDay:"[Għada fil-]LT",nextWeek:"dddd [fil-]LT",lastDay:"[Il-bieraħ fil-]LT",lastWeek:"dddd [li għadda] [fil-]LT",sameElse:"L"},relativeTime:{future:"f’ %s",past:"%s ilu",s:"ftit sekondi",ss:"%d sekondi",m:"minuta",mm:"%d minuti",h:"siegħa",hh:"%d siegħat",d:"ġurnata",dd:"%d ġranet",M:"xahar",MM:"%d xhur",y:"sena",yy:"%d sni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(381))},6165:function(e,t,n){!function(e){"use strict";var t={1:"၁",2:"၂",3:"၃",4:"၄",5:"၅",6:"၆",7:"၇",8:"၈",9:"၉",0:"၀"},n={"၁":"1","၂":"2","၃":"3","၄":"4","၅":"5","၆":"6","၇":"7","၈":"8","၉":"9","၀":"0"};e.defineLocale("my",{months:"ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ".split("_"),monthsShort:"ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ".split("_"),weekdays:"တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ".split("_"),weekdaysShort:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),weekdaysMin:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ယနေ.] LT [မှာ]",nextDay:"[မနက်ဖြန်] LT [မှာ]",nextWeek:"dddd LT [မှာ]",lastDay:"[မနေ.က] LT [မှာ]",lastWeek:"[ပြီးခဲ့သော] dddd LT [မှာ]",sameElse:"L"},relativeTime:{future:"လာမည့် %s မှာ",past:"လွန်ခဲ့သော %s က",s:"စက္ကန်.အနည်းငယ်",ss:"%d စက္ကန့်",m:"တစ်မိနစ်",mm:"%d မိနစ်",h:"တစ်နာရီ",hh:"%d နာရီ",d:"တစ်ရက်",dd:"%d ရက်",M:"တစ်လ",MM:"%d လ",y:"တစ်နှစ်",yy:"%d နှစ်"},preparse:function(e){return e.replace(/[၁၂၃၄၅၆၇၈၉၀]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},week:{dow:1,doy:4}})}(n(381))},4924:function(e,t,n){!function(e){"use strict";e.defineLocale("nb",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"sø._ma._ti._on._to._fr._lø.".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] HH:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[forrige] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"noen sekunder",ss:"%d sekunder",m:"ett minutt",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dager",w:"en uke",ww:"%d uker",M:"en måned",MM:"%d måneder",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},6744:function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};e.defineLocale("ne",{months:"जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर".split("_"),monthsShort:"जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.".split("_"),monthsParseExact:!0,weekdays:"आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार".split("_"),weekdaysShort:"आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.".split("_"),weekdaysMin:"आ._सो._मं._बु._बि._शु._श.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"Aको h:mm बजे",LTS:"Aको h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, Aको h:mm बजे",LLLL:"dddd, D MMMM YYYY, Aको h:mm बजे"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/राति|बिहान|दिउँसो|साँझ/,meridiemHour:function(e,t){return 12===e&&(e=0),"राति"===t?e<4?e:e+12:"बिहान"===t?e:"दिउँसो"===t?e>=10?e:e+12:"साँझ"===t?e+12:void 0},meridiem:function(e,t,n){return e<3?"राति":e<12?"बिहान":e<16?"दिउँसो":e<20?"साँझ":"राति"},calendar:{sameDay:"[आज] LT",nextDay:"[भोलि] LT",nextWeek:"[आउँदो] dddd[,] LT",lastDay:"[हिजो] LT",lastWeek:"[गएको] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%sमा",past:"%s अगाडि",s:"केही क्षण",ss:"%d सेकेण्ड",m:"एक मिनेट",mm:"%d मिनेट",h:"एक घण्टा",hh:"%d घण्टा",d:"एक दिन",dd:"%d दिन",M:"एक महिना",MM:"%d महिना",y:"एक बर्ष",yy:"%d बर्ष"},week:{dow:0,doy:6}})}(n(381))},9814:function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),i=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],r=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl-be",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,i){return e?/-MMM-/.test(i)?n[e.month()]:t[e.month()]:t},monthsRegex:r,monthsShortRegex:r,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:i,longMonthsParse:i,shortMonthsParse:i,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(381))},3901:function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),i=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],r=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,i){return e?/-MMM-/.test(i)?n[e.month()]:t[e.month()]:t},monthsRegex:r,monthsShortRegex:r,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:i,longMonthsParse:i,shortMonthsParse:i,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",w:"één week",ww:"%d weken",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(381))},3877:function(e,t,n){!function(e){"use strict";e.defineLocale("nn",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"),weekdaysShort:"su._må._ty._on._to._fr._lau.".split("_"),weekdaysMin:"su_må_ty_on_to_fr_la".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[I dag klokka] LT",nextDay:"[I morgon klokka] LT",nextWeek:"dddd [klokka] LT",lastDay:"[I går klokka] LT",lastWeek:"[Føregåande] dddd [klokka] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s sidan",s:"nokre sekund",ss:"%d sekund",m:"eit minutt",mm:"%d minutt",h:"ein time",hh:"%d timar",d:"ein dag",dd:"%d dagar",w:"ei veke",ww:"%d veker",M:"ein månad",MM:"%d månader",y:"eit år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},2135:function(e,t,n){!function(e){"use strict";e.defineLocale("oc-lnc",{months:{standalone:"genièr_febrièr_març_abril_mai_junh_julhet_agost_setembre_octòbre_novembre_decembre".split("_"),format:"de genièr_de febrièr_de març_d'abril_de mai_de junh_de julhet_d'agost_de setembre_d'octòbre_de novembre_de decembre".split("_"),isFormat:/D[oD]?(\s)+MMMM/},monthsShort:"gen._febr._març_abr._mai_junh_julh._ago._set._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"dimenge_diluns_dimars_dimècres_dijòus_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dm._dc._dj._dv._ds.".split("_"),weekdaysMin:"dg_dl_dm_dc_dj_dv_ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [de] YYYY",ll:"D MMM YYYY",LLL:"D MMMM [de] YYYY [a] H:mm",lll:"D MMM YYYY, H:mm",LLLL:"dddd D MMMM [de] YYYY [a] H:mm",llll:"ddd D MMM YYYY, H:mm"},calendar:{sameDay:"[uèi a] LT",nextDay:"[deman a] LT",nextWeek:"dddd [a] LT",lastDay:"[ièr a] LT",lastWeek:"dddd [passat a] LT",sameElse:"L"},relativeTime:{future:"d'aquí %s",past:"fa %s",s:"unas segondas",ss:"%d segondas",m:"una minuta",mm:"%d minutas",h:"una ora",hh:"%d oras",d:"un jorn",dd:"%d jorns",M:"un mes",MM:"%d meses",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(e,t){var n=1===e?"r":2===e?"n":3===e?"r":4===e?"t":"è";return"w"!==t&&"W"!==t||(n="a"),e+n},week:{dow:1,doy:4}})}(n(381))},5858:function(e,t,n){!function(e){"use strict";var t={1:"੧",2:"੨",3:"੩",4:"੪",5:"੫",6:"੬",7:"੭",8:"੮",9:"੯",0:"੦"},n={"੧":"1","੨":"2","੩":"3","੪":"4","੫":"5","੬":"6","੭":"7","੮":"8","੯":"9","੦":"0"};e.defineLocale("pa-in",{months:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),monthsShort:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),weekdays:"ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ".split("_"),weekdaysShort:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),weekdaysMin:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),longDateFormat:{LT:"A h:mm ਵਜੇ",LTS:"A h:mm:ss ਵਜੇ",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm ਵਜੇ",LLLL:"dddd, D MMMM YYYY, A h:mm ਵਜੇ"},calendar:{sameDay:"[ਅਜ] LT",nextDay:"[ਕਲ] LT",nextWeek:"[ਅਗਲਾ] dddd, LT",lastDay:"[ਕਲ] LT",lastWeek:"[ਪਿਛਲੇ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ਵਿੱਚ",past:"%s ਪਿਛਲੇ",s:"ਕੁਝ ਸਕਿੰਟ",ss:"%d ਸਕਿੰਟ",m:"ਇਕ ਮਿੰਟ",mm:"%d ਮਿੰਟ",h:"ਇੱਕ ਘੰਟਾ",hh:"%d ਘੰਟੇ",d:"ਇੱਕ ਦਿਨ",dd:"%d ਦਿਨ",M:"ਇੱਕ ਮਹੀਨਾ",MM:"%d ਮਹੀਨੇ",y:"ਇੱਕ ਸਾਲ",yy:"%d ਸਾਲ"},preparse:function(e){return e.replace(/[੧੨੩੪੫੬੭੮੯੦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ਰਾਤ"===t?e<4?e:e+12:"ਸਵੇਰ"===t?e:"ਦੁਪਹਿਰ"===t?e>=10?e:e+12:"ਸ਼ਾਮ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"ਰਾਤ":e<10?"ਸਵੇਰ":e<17?"ਦੁਪਹਿਰ":e<20?"ਸ਼ਾਮ":"ਰਾਤ"},week:{dow:0,doy:6}})}(n(381))},4495:function(e,t,n){!function(e){"use strict";var t="styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"),n="stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_"),i=[/^sty/i,/^lut/i,/^mar/i,/^kwi/i,/^maj/i,/^cze/i,/^lip/i,/^sie/i,/^wrz/i,/^paź/i,/^lis/i,/^gru/i];function r(e){return e%10<5&&e%10>1&&~~(e/10)%10!=1}function a(e,t,n){var i=e+" ";switch(n){case"ss":return i+(r(e)?"sekundy":"sekund");case"m":return t?"minuta":"minutę";case"mm":return i+(r(e)?"minuty":"minut");case"h":return t?"godzina":"godzinę";case"hh":return i+(r(e)?"godziny":"godzin");case"ww":return i+(r(e)?"tygodnie":"tygodni");case"MM":return i+(r(e)?"miesiące":"miesięcy");case"yy":return i+(r(e)?"lata":"lat")}}e.defineLocale("pl",{months:function(e,i){return e?/D MMMM/.test(i)?n[e.month()]:t[e.month()]:t},monthsShort:"sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),monthsParse:i,longMonthsParse:i,shortMonthsParse:i,weekdays:"niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),weekdaysShort:"ndz_pon_wt_śr_czw_pt_sob".split("_"),weekdaysMin:"Nd_Pn_Wt_Śr_Cz_Pt_So".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Dziś o] LT",nextDay:"[Jutro o] LT",nextWeek:function(){switch(this.day()){case 0:return"[W niedzielę o] LT";case 2:return"[We wtorek o] LT";case 3:return"[W środę o] LT";case 6:return"[W sobotę o] LT";default:return"[W] dddd [o] LT"}},lastDay:"[Wczoraj o] LT",lastWeek:function(){switch(this.day()){case 0:return"[W zeszłą niedzielę o] LT";case 3:return"[W zeszłą środę o] LT";case 6:return"[W zeszłą sobotę o] LT";default:return"[W zeszły] dddd [o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"%s temu",s:"kilka sekund",ss:a,m:a,mm:a,h:a,hh:a,d:"1 dzień",dd:"%d dni",w:"tydzień",ww:a,M:"miesiąc",MM:a,y:"rok",yy:a},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},7971:function(e,t,n){!function(e){"use strict";e.defineLocale("pt-br",{months:"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),monthsShort:"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),weekdays:"domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado".split("_"),weekdaysShort:"dom_seg_ter_qua_qui_sex_sáb".split("_"),weekdaysMin:"do_2ª_3ª_4ª_5ª_6ª_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY [às] HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY [às] HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"poucos segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",invalidDate:"Data inválida"})}(n(381))},9520:function(e,t,n){!function(e){"use strict";e.defineLocale("pt",{months:"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),monthsShort:"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),weekdays:"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Do_2ª_3ª_4ª_5ª_6ª_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",w:"uma semana",ww:"%d semanas",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(381))},6459:function(e,t,n){!function(e){"use strict";function t(e,t,n){var i=" ";return(e%100>=20||e>=100&&e%100==0)&&(i=" de "),e+i+{ss:"secunde",mm:"minute",hh:"ore",dd:"zile",ww:"săptămâni",MM:"luni",yy:"ani"}[n]}e.defineLocale("ro",{months:"ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),monthsShort:"ian._feb._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"),weekdaysShort:"Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),weekdaysMin:"Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[azi la] LT",nextDay:"[mâine la] LT",nextWeek:"dddd [la] LT",lastDay:"[ieri la] LT",lastWeek:"[fosta] dddd [la] LT",sameElse:"L"},relativeTime:{future:"peste %s",past:"%s în urmă",s:"câteva secunde",ss:t,m:"un minut",mm:t,h:"o oră",hh:t,d:"o zi",dd:t,w:"o săptămână",ww:t,M:"o lună",MM:t,y:"un an",yy:t},week:{dow:1,doy:7}})}(n(381))},1793:function(e,t,n){!function(e){"use strict";function t(e,t,n){return"m"===n?t?"минута":"минуту":e+" "+(i=+e,r={ss:t?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:t?"минута_минуты_минут":"минуту_минуты_минут",hh:"час_часа_часов",dd:"день_дня_дней",ww:"неделя_недели_недель",MM:"месяц_месяца_месяцев",yy:"год_года_лет"}[n].split("_"),i%10==1&&i%100!=11?r[0]:i%10>=2&&i%10<=4&&(i%100<10||i%100>=20)?r[1]:r[2]);var i,r}var n=[/^янв/i,/^фев/i,/^мар/i,/^апр/i,/^ма[йя]/i,/^июн/i,/^июл/i,/^авг/i,/^сен/i,/^окт/i,/^ноя/i,/^дек/i];e.defineLocale("ru",{months:{format:"января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"),standalone:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_")},monthsShort:{format:"янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"),standalone:"янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_")},weekdays:{standalone:"воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"),format:"воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split("_"),isFormat:/\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?] ?dddd/},weekdaysShort:"вс_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"вс_пн_вт_ср_чт_пт_сб".split("_"),monthsParse:n,longMonthsParse:n,shortMonthsParse:n,monthsRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsShortRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsStrictRegex:/^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,monthsShortStrictRegex:/^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., H:mm",LLLL:"dddd, D MMMM YYYY г., H:mm"},calendar:{sameDay:"[Сегодня, в] LT",nextDay:"[Завтра, в] LT",lastDay:"[Вчера, в] LT",nextWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В следующее] dddd, [в] LT";case 1:case 2:case 4:return"[В следующий] dddd, [в] LT";case 3:case 5:case 6:return"[В следующую] dddd, [в] LT"}},lastWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В прошлое] dddd, [в] LT";case 1:case 2:case 4:return"[В прошлый] dddd, [в] LT";case 3:case 5:case 6:return"[В прошлую] dddd, [в] LT"}},sameElse:"L"},relativeTime:{future:"через %s",past:"%s назад",s:"несколько секунд",ss:t,m:t,mm:t,h:"час",hh:t,d:"день",dd:t,w:"неделя",ww:t,M:"месяц",MM:t,y:"год",yy:t},meridiemParse:/ночи|утра|дня|вечера/i,isPM:function(e){return/^(дня|вечера)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночи":e<12?"утра":e<17?"дня":"вечера"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го|я)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":return e+"-й";case"D":return e+"-го";case"w":case"W":return e+"-я";default:return e}},week:{dow:1,doy:4}})}(n(381))},950:function(e,t,n){!function(e){"use strict";var t=["جنوري","فيبروري","مارچ","اپريل","مئي","جون","جولاءِ","آگسٽ","سيپٽمبر","آڪٽوبر","نومبر","ڊسمبر"],n=["آچر","سومر","اڱارو","اربع","خميس","جمع","ڇنڇر"];e.defineLocale("sd",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(e){return"شام"===e},meridiem:function(e,t,n){return e<12?"صبح":"شام"},calendar:{sameDay:"[اڄ] LT",nextDay:"[سڀاڻي] LT",nextWeek:"dddd [اڳين هفتي تي] LT",lastDay:"[ڪالهه] LT",lastWeek:"[گزريل هفتي] dddd [تي] LT",sameElse:"L"},relativeTime:{future:"%s پوء",past:"%s اڳ",s:"چند سيڪنڊ",ss:"%d سيڪنڊ",m:"هڪ منٽ",mm:"%d منٽ",h:"هڪ ڪلاڪ",hh:"%d ڪلاڪ",d:"هڪ ڏينهن",dd:"%d ڏينهن",M:"هڪ مهينو",MM:"%d مهينا",y:"هڪ سال",yy:"%d سال"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:4}})}(n(381))},490:function(e,t,n){!function(e){"use strict";e.defineLocale("se",{months:"ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu".split("_"),monthsShort:"ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov".split("_"),weekdays:"sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat".split("_"),weekdaysShort:"sotn_vuos_maŋ_gask_duor_bear_láv".split("_"),weekdaysMin:"s_v_m_g_d_b_L".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"MMMM D. [b.] YYYY",LLL:"MMMM D. [b.] YYYY [ti.] HH:mm",LLLL:"dddd, MMMM D. [b.] YYYY [ti.] HH:mm"},calendar:{sameDay:"[otne ti] LT",nextDay:"[ihttin ti] LT",nextWeek:"dddd [ti] LT",lastDay:"[ikte ti] LT",lastWeek:"[ovddit] dddd [ti] LT",sameElse:"L"},relativeTime:{future:"%s geažes",past:"maŋit %s",s:"moadde sekunddat",ss:"%d sekunddat",m:"okta minuhta",mm:"%d minuhtat",h:"okta diimmu",hh:"%d diimmut",d:"okta beaivi",dd:"%d beaivvit",M:"okta mánnu",MM:"%d mánut",y:"okta jahki",yy:"%d jagit"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},124:function(e,t,n){!function(e){"use strict";e.defineLocale("si",{months:"ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්".split("_"),monthsShort:"ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ".split("_"),weekdays:"ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා".split("_"),weekdaysShort:"ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන".split("_"),weekdaysMin:"ඉ_ස_අ_බ_බ්‍ර_සි_සෙ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"a h:mm",LTS:"a h:mm:ss",L:"YYYY/MM/DD",LL:"YYYY MMMM D",LLL:"YYYY MMMM D, a h:mm",LLLL:"YYYY MMMM D [වැනි] dddd, a h:mm:ss"},calendar:{sameDay:"[අද] LT[ට]",nextDay:"[හෙට] LT[ට]",nextWeek:"dddd LT[ට]",lastDay:"[ඊයේ] LT[ට]",lastWeek:"[පසුගිය] dddd LT[ට]",sameElse:"L"},relativeTime:{future:"%sකින්",past:"%sකට පෙර",s:"තත්පර කිහිපය",ss:"තත්පර %d",m:"මිනිත්තුව",mm:"මිනිත්තු %d",h:"පැය",hh:"පැය %d",d:"දිනය",dd:"දින %d",M:"මාසය",MM:"මාස %d",y:"වසර",yy:"වසර %d"},dayOfMonthOrdinalParse:/\d{1,2} වැනි/,ordinal:function(e){return e+" වැනි"},meridiemParse:/පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,isPM:function(e){return"ප.ව."===e||"පස් වරු"===e},meridiem:function(e,t,n){return e>11?n?"ප.ව.":"පස් වරු":n?"පෙ.ව.":"පෙර වරු"}})}(n(381))},4249:function(e,t,n){!function(e){"use strict";var t="január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"),n="jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_");function i(e){return e>1&&e<5}function r(e,t,n,r){var a=e+" ";switch(n){case"s":return t||r?"pár sekúnd":"pár sekundami";case"ss":return t||r?a+(i(e)?"sekundy":"sekúnd"):a+"sekundami";case"m":return t?"minúta":r?"minútu":"minútou";case"mm":return t||r?a+(i(e)?"minúty":"minút"):a+"minútami";case"h":return t?"hodina":r?"hodinu":"hodinou";case"hh":return t||r?a+(i(e)?"hodiny":"hodín"):a+"hodinami";case"d":return t||r?"deň":"dňom";case"dd":return t||r?a+(i(e)?"dni":"dní"):a+"dňami";case"M":return t||r?"mesiac":"mesiacom";case"MM":return t||r?a+(i(e)?"mesiace":"mesiacov"):a+"mesiacmi";case"y":return t||r?"rok":"rokom";case"yy":return t||r?a+(i(e)?"roky":"rokov"):a+"rokmi"}}e.defineLocale("sk",{months:t,monthsShort:n,weekdays:"nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),weekdaysShort:"ne_po_ut_st_št_pi_so".split("_"),weekdaysMin:"ne_po_ut_st_št_pi_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm"},calendar:{sameDay:"[dnes o] LT",nextDay:"[zajtra o] LT",nextWeek:function(){switch(this.day()){case 0:return"[v nedeľu o] LT";case 1:case 2:return"[v] dddd [o] LT";case 3:return"[v stredu o] LT";case 4:return"[vo štvrtok o] LT";case 5:return"[v piatok o] LT";case 6:return"[v sobotu o] LT"}},lastDay:"[včera o] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulú nedeľu o] LT";case 1:case 2:return"[minulý] dddd [o] LT";case 3:return"[minulú stredu o] LT";case 4:case 5:return"[minulý] dddd [o] LT";case 6:return"[minulú sobotu o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"pred %s",s:r,ss:r,m:r,mm:r,h:r,hh:r,d:r,dd:r,M:r,MM:r,y:r,yy:r},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},4985:function(e,t,n){!function(e){"use strict";function t(e,t,n,i){var r=e+" ";switch(n){case"s":return t||i?"nekaj sekund":"nekaj sekundami";case"ss":return r+(1===e?t?"sekundo":"sekundi":2===e?t||i?"sekundi":"sekundah":e<5?t||i?"sekunde":"sekundah":"sekund");case"m":return t?"ena minuta":"eno minuto";case"mm":return r+(1===e?t?"minuta":"minuto":2===e?t||i?"minuti":"minutama":e<5?t||i?"minute":"minutami":t||i?"minut":"minutami");case"h":return t?"ena ura":"eno uro";case"hh":return r+(1===e?t?"ura":"uro":2===e?t||i?"uri":"urama":e<5?t||i?"ure":"urami":t||i?"ur":"urami");case"d":return t||i?"en dan":"enim dnem";case"dd":return r+(1===e?t||i?"dan":"dnem":2===e?t||i?"dni":"dnevoma":t||i?"dni":"dnevi");case"M":return t||i?"en mesec":"enim mesecem";case"MM":return r+(1===e?t||i?"mesec":"mesecem":2===e?t||i?"meseca":"mesecema":e<5?t||i?"mesece":"meseci":t||i?"mesecev":"meseci");case"y":return t||i?"eno leto":"enim letom";case"yy":return r+(1===e?t||i?"leto":"letom":2===e?t||i?"leti":"letoma":e<5?t||i?"leta":"leti":t||i?"let":"leti")}}e.defineLocale("sl",{months:"januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),weekdaysShort:"ned._pon._tor._sre._čet._pet._sob.".split("_"),weekdaysMin:"ne_po_to_sr_če_pe_so".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danes ob] LT",nextDay:"[jutri ob] LT",nextWeek:function(){switch(this.day()){case 0:return"[v] [nedeljo] [ob] LT";case 3:return"[v] [sredo] [ob] LT";case 6:return"[v] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[v] dddd [ob] LT"}},lastDay:"[včeraj ob] LT",lastWeek:function(){switch(this.day()){case 0:return"[prejšnjo] [nedeljo] [ob] LT";case 3:return"[prejšnjo] [sredo] [ob] LT";case 6:return"[prejšnjo] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[prejšnji] dddd [ob] LT"}},sameElse:"L"},relativeTime:{future:"čez %s",past:"pred %s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(381))},1104:function(e,t,n){!function(e){"use strict";e.defineLocale("sq",{months:"Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split("_"),monthsShort:"Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split("_"),weekdays:"E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë".split("_"),weekdaysShort:"Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"),weekdaysMin:"D_H_Ma_Më_E_P_Sh".split("_"),weekdaysParseExact:!0,meridiemParse:/PD|MD/,isPM:function(e){return"M"===e.charAt(0)},meridiem:function(e,t,n){return e<12?"PD":"MD"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Sot në] LT",nextDay:"[Nesër në] LT",nextWeek:"dddd [në] LT",lastDay:"[Dje në] LT",lastWeek:"dddd [e kaluar në] LT",sameElse:"L"},relativeTime:{future:"në %s",past:"%s më parë",s:"disa sekonda",ss:"%d sekonda",m:"një minutë",mm:"%d minuta",h:"një orë",hh:"%d orë",d:"një ditë",dd:"%d ditë",M:"një muaj",MM:"%d muaj",y:"një vit",yy:"%d vite"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},9915:function(e,t,n){!function(e){"use strict";var t={words:{ss:["секунда","секунде","секунди"],m:["један минут","једне минуте"],mm:["минут","минуте","минута"],h:["један сат","једног сата"],hh:["сат","сата","сати"],dd:["дан","дана","дана"],MM:["месец","месеца","месеци"],yy:["година","године","година"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,i){var r=t.words[i];return 1===i.length?n?r[0]:r[1]:e+" "+t.correctGrammaticalCase(e,r)}};e.defineLocale("sr-cyrl",{months:"јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар".split("_"),monthsShort:"јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.".split("_"),monthsParseExact:!0,weekdays:"недеља_понедељак_уторак_среда_четвртак_петак_субота".split("_"),weekdaysShort:"нед._пон._уто._сре._чет._пет._суб.".split("_"),weekdaysMin:"не_по_ут_ср_че_пе_су".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D. M. YYYY.",LL:"D. MMMM YYYY.",LLL:"D. MMMM YYYY. H:mm",LLLL:"dddd, D. MMMM YYYY. H:mm"},calendar:{sameDay:"[данас у] LT",nextDay:"[сутра у] LT",nextWeek:function(){switch(this.day()){case 0:return"[у] [недељу] [у] LT";case 3:return"[у] [среду] [у] LT";case 6:return"[у] [суботу] [у] LT";case 1:case 2:case 4:case 5:return"[у] dddd [у] LT"}},lastDay:"[јуче у] LT",lastWeek:function(){return["[прошле] [недеље] [у] LT","[прошлог] [понедељка] [у] LT","[прошлог] [уторка] [у] LT","[прошле] [среде] [у] LT","[прошлог] [четвртка] [у] LT","[прошлог] [петка] [у] LT","[прошле] [суботе] [у] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"за %s",past:"пре %s",s:"неколико секунди",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"дан",dd:t.translate,M:"месец",MM:t.translate,y:"годину",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(381))},9131:function(e,t,n){!function(e){"use strict";var t={words:{ss:["sekunda","sekunde","sekundi"],m:["jedan minut","jedne minute"],mm:["minut","minute","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mesec","meseca","meseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,i){var r=t.words[i];return 1===i.length?n?r[0]:r[1]:e+" "+t.correctGrammaticalCase(e,r)}};e.defineLocale("sr",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sre._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D. M. YYYY.",LL:"D. MMMM YYYY.",LLL:"D. MMMM YYYY. H:mm",LLLL:"dddd, D. MMMM YYYY. H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedelju] [u] LT";case 3:return"[u] [sredu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedelje] [u] LT","[prošlog] [ponedeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"pre %s",s:"nekoliko sekundi",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"dan",dd:t.translate,M:"mesec",MM:t.translate,y:"godinu",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(381))},5893:function(e,t,n){!function(e){"use strict";e.defineLocale("ss",{months:"Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split("_"),monthsShort:"Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo".split("_"),weekdays:"Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo".split("_"),weekdaysShort:"Lis_Umb_Lsb_Les_Lsi_Lsh_Umg".split("_"),weekdaysMin:"Li_Us_Lb_Lt_Ls_Lh_Ug".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Namuhla nga] LT",nextDay:"[Kusasa nga] LT",nextWeek:"dddd [nga] LT",lastDay:"[Itolo nga] LT",lastWeek:"dddd [leliphelile] [nga] LT",sameElse:"L"},relativeTime:{future:"nga %s",past:"wenteka nga %s",s:"emizuzwana lomcane",ss:"%d mzuzwana",m:"umzuzu",mm:"%d emizuzu",h:"lihora",hh:"%d emahora",d:"lilanga",dd:"%d emalanga",M:"inyanga",MM:"%d tinyanga",y:"umnyaka",yy:"%d iminyaka"},meridiemParse:/ekuseni|emini|entsambama|ebusuku/,meridiem:function(e,t,n){return e<11?"ekuseni":e<15?"emini":e<19?"entsambama":"ebusuku"},meridiemHour:function(e,t){return 12===e&&(e=0),"ekuseni"===t?e:"emini"===t?e>=11?e:e+12:"entsambama"===t||"ebusuku"===t?0===e?0:e+12:void 0},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:"%d",week:{dow:1,doy:4}})}(n(381))},8760:function(e,t,n){!function(e){"use strict";e.defineLocale("sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),weekdaysShort:"sön_mån_tis_ons_tor_fre_lör".split("_"),weekdaysMin:"sö_må_ti_on_to_fr_lö".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [kl.] HH:mm",LLLL:"dddd D MMMM YYYY [kl.] HH:mm",lll:"D MMM YYYY HH:mm",llll:"ddd D MMM YYYY HH:mm"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[Igår] LT",nextWeek:"[På] dddd LT",lastWeek:"[I] dddd[s] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"för %s sedan",s:"några sekunder",ss:"%d sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en månad",MM:"%d månader",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}(\:e|\:a)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?":e":1===t||2===t?":a":":e")},week:{dow:1,doy:4}})}(n(381))},1172:function(e,t,n){!function(e){"use strict";e.defineLocale("sw",{months:"Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des".split("_"),weekdays:"Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi".split("_"),weekdaysShort:"Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos".split("_"),weekdaysMin:"J2_J3_J4_J5_Al_Ij_J1".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"hh:mm A",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[leo saa] LT",nextDay:"[kesho saa] LT",nextWeek:"[wiki ijayo] dddd [saat] LT",lastDay:"[jana] LT",lastWeek:"[wiki iliyopita] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s baadaye",past:"tokea %s",s:"hivi punde",ss:"sekunde %d",m:"dakika moja",mm:"dakika %d",h:"saa limoja",hh:"masaa %d",d:"siku moja",dd:"siku %d",M:"mwezi mmoja",MM:"miezi %d",y:"mwaka mmoja",yy:"miaka %d"},week:{dow:1,doy:7}})}(n(381))},7333:function(e,t,n){!function(e){"use strict";var t={1:"௧",2:"௨",3:"௩",4:"௪",5:"௫",6:"௬",7:"௭",8:"௮",9:"௯",0:"௦"},n={"௧":"1","௨":"2","௩":"3","௪":"4","௫":"5","௬":"6","௭":"7","௮":"8","௯":"9","௦":"0"};e.defineLocale("ta",{months:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),monthsShort:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),weekdays:"ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை".split("_"),weekdaysShort:"ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி".split("_"),weekdaysMin:"ஞா_தி_செ_பு_வி_வெ_ச".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, HH:mm",LLLL:"dddd, D MMMM YYYY, HH:mm"},calendar:{sameDay:"[இன்று] LT",nextDay:"[நாளை] LT",nextWeek:"dddd, LT",lastDay:"[நேற்று] LT",lastWeek:"[கடந்த வாரம்] dddd, LT",sameElse:"L"},relativeTime:{future:"%s இல்",past:"%s முன்",s:"ஒரு சில விநாடிகள்",ss:"%d விநாடிகள்",m:"ஒரு நிமிடம்",mm:"%d நிமிடங்கள்",h:"ஒரு மணி நேரம்",hh:"%d மணி நேரம்",d:"ஒரு நாள்",dd:"%d நாட்கள்",M:"ஒரு மாதம்",MM:"%d மாதங்கள்",y:"ஒரு வருடம்",yy:"%d ஆண்டுகள்"},dayOfMonthOrdinalParse:/\d{1,2}வது/,ordinal:function(e){return e+"வது"},preparse:function(e){return e.replace(/[௧௨௩௪௫௬௭௮௯௦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,meridiem:function(e,t,n){return e<2?" யாமம்":e<6?" வைகறை":e<10?" காலை":e<14?" நண்பகல்":e<18?" எற்பாடு":e<22?" மாலை":" யாமம்"},meridiemHour:function(e,t){return 12===e&&(e=0),"யாமம்"===t?e<2?e:e+12:"வைகறை"===t||"காலை"===t||"நண்பகல்"===t&&e>=10?e:e+12},week:{dow:0,doy:6}})}(n(381))},3110:function(e,t,n){!function(e){"use strict";e.defineLocale("te",{months:"జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జులై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్".split("_"),monthsShort:"జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జులై_ఆగ._సెప్._అక్టో._నవ._డిసె.".split("_"),monthsParseExact:!0,weekdays:"ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం".split("_"),weekdaysShort:"ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని".split("_"),weekdaysMin:"ఆ_సో_మం_బు_గు_శు_శ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[నేడు] LT",nextDay:"[రేపు] LT",nextWeek:"dddd, LT",lastDay:"[నిన్న] LT",lastWeek:"[గత] dddd, LT",sameElse:"L"},relativeTime:{future:"%s లో",past:"%s క్రితం",s:"కొన్ని క్షణాలు",ss:"%d సెకన్లు",m:"ఒక నిమిషం",mm:"%d నిమిషాలు",h:"ఒక గంట",hh:"%d గంటలు",d:"ఒక రోజు",dd:"%d రోజులు",M:"ఒక నెల",MM:"%d నెలలు",y:"ఒక సంవత్సరం",yy:"%d సంవత్సరాలు"},dayOfMonthOrdinalParse:/\d{1,2}వ/,ordinal:"%dవ",meridiemParse:/రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,meridiemHour:function(e,t){return 12===e&&(e=0),"రాత్రి"===t?e<4?e:e+12:"ఉదయం"===t?e:"మధ్యాహ్నం"===t?e>=10?e:e+12:"సాయంత్రం"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"రాత్రి":e<10?"ఉదయం":e<17?"మధ్యాహ్నం":e<20?"సాయంత్రం":"రాత్రి"},week:{dow:0,doy:6}})}(n(381))},2095:function(e,t,n){!function(e){"use strict";e.defineLocale("tet",{months:"Janeiru_Fevereiru_Marsu_Abril_Maiu_Juñu_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu".split("_"),weekdaysShort:"Dom_Seg_Ters_Kua_Kint_Sest_Sab".split("_"),weekdaysMin:"Do_Seg_Te_Ku_Ki_Ses_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Ohin iha] LT",nextDay:"[Aban iha] LT",nextWeek:"dddd [iha] LT",lastDay:"[Horiseik iha] LT",lastWeek:"dddd [semana kotuk] [iha] LT",sameElse:"L"},relativeTime:{future:"iha %s",past:"%s liuba",s:"segundu balun",ss:"segundu %d",m:"minutu ida",mm:"minutu %d",h:"oras ida",hh:"oras %d",d:"loron ida",dd:"loron %d",M:"fulan ida",MM:"fulan %d",y:"tinan ida",yy:"tinan %d"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(381))},7321:function(e,t,n){!function(e){"use strict";var t={0:"-ум",1:"-ум",2:"-юм",3:"-юм",4:"-ум",5:"-ум",6:"-ум",7:"-ум",8:"-ум",9:"-ум",10:"-ум",12:"-ум",13:"-ум",20:"-ум",30:"-юм",40:"-ум",50:"-ум",60:"-ум",70:"-ум",80:"-ум",90:"-ум",100:"-ум"};e.defineLocale("tg",{months:{format:"январи_феврали_марти_апрели_майи_июни_июли_августи_сентябри_октябри_ноябри_декабри".split("_"),standalone:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_")},monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"якшанбе_душанбе_сешанбе_чоршанбе_панҷшанбе_ҷумъа_шанбе".split("_"),weekdaysShort:"яшб_дшб_сшб_чшб_пшб_ҷум_шнб".split("_"),weekdaysMin:"яш_дш_сш_чш_пш_ҷм_шб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Имрӯз соати] LT",nextDay:"[Фардо соати] LT",lastDay:"[Дирӯз соати] LT",nextWeek:"dddd[и] [ҳафтаи оянда соати] LT",lastWeek:"dddd[и] [ҳафтаи гузашта соати] LT",sameElse:"L"},relativeTime:{future:"баъди %s",past:"%s пеш",s:"якчанд сония",m:"як дақиқа",mm:"%d дақиқа",h:"як соат",hh:"%d соат",d:"як рӯз",dd:"%d рӯз",M:"як моҳ",MM:"%d моҳ",y:"як сол",yy:"%d сол"},meridiemParse:/шаб|субҳ|рӯз|бегоҳ/,meridiemHour:function(e,t){return 12===e&&(e=0),"шаб"===t?e<4?e:e+12:"субҳ"===t?e:"рӯз"===t?e>=11?e:e+12:"бегоҳ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"шаб":e<11?"субҳ":e<16?"рӯз":e<19?"бегоҳ":"шаб"},dayOfMonthOrdinalParse:/\d{1,2}-(ум|юм)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(381))},9041:function(e,t,n){!function(e){"use strict";e.defineLocale("th",{months:"มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),monthsShort:"ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.".split("_"),monthsParseExact:!0,weekdays:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),weekdaysShort:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"),weekdaysMin:"อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY เวลา H:mm",LLLL:"วันddddที่ D MMMM YYYY เวลา H:mm"},meridiemParse:/ก่อนเที่ยง|หลังเที่ยง/,isPM:function(e){return"หลังเที่ยง"===e},meridiem:function(e,t,n){return e<12?"ก่อนเที่ยง":"หลังเที่ยง"},calendar:{sameDay:"[วันนี้ เวลา] LT",nextDay:"[พรุ่งนี้ เวลา] LT",nextWeek:"dddd[หน้า เวลา] LT",lastDay:"[เมื่อวานนี้ เวลา] LT",lastWeek:"[วัน]dddd[ที่แล้ว เวลา] LT",sameElse:"L"},relativeTime:{future:"อีก %s",past:"%sที่แล้ว",s:"ไม่กี่วินาที",ss:"%d วินาที",m:"1 นาที",mm:"%d นาที",h:"1 ชั่วโมง",hh:"%d ชั่วโมง",d:"1 วัน",dd:"%d วัน",w:"1 สัปดาห์",ww:"%d สัปดาห์",M:"1 เดือน",MM:"%d เดือน",y:"1 ปี",yy:"%d ปี"}})}(n(381))},9005:function(e,t,n){!function(e){"use strict";var t={1:"'inji",5:"'inji",8:"'inji",70:"'inji",80:"'inji",2:"'nji",7:"'nji",20:"'nji",50:"'nji",3:"'ünji",4:"'ünji",100:"'ünji",6:"'njy",9:"'unjy",10:"'unjy",30:"'unjy",60:"'ynjy",90:"'ynjy"};e.defineLocale("tk",{months:"Ýanwar_Fewral_Mart_Aprel_Maý_Iýun_Iýul_Awgust_Sentýabr_Oktýabr_Noýabr_Dekabr".split("_"),monthsShort:"Ýan_Few_Mar_Apr_Maý_Iýn_Iýl_Awg_Sen_Okt_Noý_Dek".split("_"),weekdays:"Ýekşenbe_Duşenbe_Sişenbe_Çarşenbe_Penşenbe_Anna_Şenbe".split("_"),weekdaysShort:"Ýek_Duş_Siş_Çar_Pen_Ann_Şen".split("_"),weekdaysMin:"Ýk_Dş_Sş_Çr_Pn_An_Şn".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün sagat] LT",nextDay:"[ertir sagat] LT",nextWeek:"[indiki] dddd [sagat] LT",lastDay:"[düýn] LT",lastWeek:"[geçen] dddd [sagat] LT",sameElse:"L"},relativeTime:{future:"%s soň",past:"%s öň",s:"birnäçe sekunt",m:"bir minut",mm:"%d minut",h:"bir sagat",hh:"%d sagat",d:"bir gün",dd:"%d gün",M:"bir aý",MM:"%d aý",y:"bir ýyl",yy:"%d ýyl"},ordinal:function(e,n){switch(n){case"d":case"D":case"Do":case"DD":return e;default:if(0===e)return e+"'unjy";var i=e%10;return e+(t[i]||t[e%100-i]||t[e>=100?100:null])}},week:{dow:1,doy:7}})}(n(381))},5768:function(e,t,n){!function(e){"use strict";e.defineLocale("tl-ph",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"LT [ngayong araw]",nextDay:"[Bukas ng] LT",nextWeek:"LT [sa susunod na] dddd",lastDay:"LT [kahapon]",lastWeek:"LT [noong nakaraang] dddd",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",ss:"%d segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(381))},9444:function(e,t,n){!function(e){"use strict";var t="pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut".split("_");function n(e,n,i,r){var a=function(e){var n=Math.floor(e%1e3/100),i=Math.floor(e%100/10),r=e%10,a="";return n>0&&(a+=t[n]+"vatlh"),i>0&&(a+=(""!==a?" ":"")+t[i]+"maH"),r>0&&(a+=(""!==a?" ":"")+t[r]),""===a?"pagh":a}(e);switch(i){case"ss":return a+" lup";case"mm":return a+" tup";case"hh":return a+" rep";case"dd":return a+" jaj";case"MM":return a+" jar";case"yy":return a+" DIS"}}e.defineLocale("tlh",{months:"tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’".split("_"),monthsShort:"jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’".split("_"),monthsParseExact:!0,weekdays:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysShort:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysMin:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[DaHjaj] LT",nextDay:"[wa’leS] LT",nextWeek:"LLL",lastDay:"[wa’Hu’] LT",lastWeek:"LLL",sameElse:"L"},relativeTime:{future:function(e){var t=e;return-1!==e.indexOf("jaj")?t.slice(0,-3)+"leS":-1!==e.indexOf("jar")?t.slice(0,-3)+"waQ":-1!==e.indexOf("DIS")?t.slice(0,-3)+"nem":t+" pIq"},past:function(e){var t=e;return-1!==e.indexOf("jaj")?t.slice(0,-3)+"Hu’":-1!==e.indexOf("jar")?t.slice(0,-3)+"wen":-1!==e.indexOf("DIS")?t.slice(0,-3)+"ben":t+" ret"},s:"puS lup",ss:n,m:"wa’ tup",mm:n,h:"wa’ rep",hh:n,d:"wa’ jaj",dd:n,M:"wa’ jar",MM:n,y:"wa’ DIS",yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},2397:function(e,t,n){!function(e){"use strict";var t={1:"'inci",5:"'inci",8:"'inci",70:"'inci",80:"'inci",2:"'nci",7:"'nci",20:"'nci",50:"'nci",3:"'üncü",4:"'üncü",100:"'üncü",6:"'ncı",9:"'uncu",10:"'uncu",30:"'uncu",60:"'ıncı",90:"'ıncı"};e.defineLocale("tr",{months:"Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),monthsShort:"Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),weekdays:"Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),weekdaysShort:"Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"),weekdaysMin:"Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),meridiem:function(e,t,n){return e<12?n?"öö":"ÖÖ":n?"ös":"ÖS"},meridiemParse:/öö|ÖÖ|ös|ÖS/,isPM:function(e){return"ös"===e||"ÖS"===e},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[yarın saat] LT",nextWeek:"[gelecek] dddd [saat] LT",lastDay:"[dün] LT",lastWeek:"[geçen] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s önce",s:"birkaç saniye",ss:"%d saniye",m:"bir dakika",mm:"%d dakika",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",w:"bir hafta",ww:"%d hafta",M:"bir ay",MM:"%d ay",y:"bir yıl",yy:"%d yıl"},ordinal:function(e,n){switch(n){case"d":case"D":case"Do":case"DD":return e;default:if(0===e)return e+"'ıncı";var i=e%10;return e+(t[i]||t[e%100-i]||t[e>=100?100:null])}},week:{dow:1,doy:7}})}(n(381))},8254:function(e,t,n){!function(e){"use strict";function t(e,t,n,i){var r={s:["viensas secunds","'iensas secunds"],ss:[e+" secunds",e+" secunds"],m:["'n míut","'iens míut"],mm:[e+" míuts",e+" míuts"],h:["'n þora","'iensa þora"],hh:[e+" þoras",e+" þoras"],d:["'n ziua","'iensa ziua"],dd:[e+" ziuas",e+" ziuas"],M:["'n mes","'iens mes"],MM:[e+" mesen",e+" mesen"],y:["'n ar","'iens ar"],yy:[e+" ars",e+" ars"]};return i||t?r[n][0]:r[n][1]}e.defineLocale("tzl",{months:"Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar".split("_"),monthsShort:"Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec".split("_"),weekdays:"Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi".split("_"),weekdaysShort:"Súl_Lún_Mai_Már_Xhú_Vié_Sát".split("_"),weekdaysMin:"Sú_Lú_Ma_Má_Xh_Vi_Sá".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"D. MMMM [dallas] YYYY",LLL:"D. MMMM [dallas] YYYY HH.mm",LLLL:"dddd, [li] D. MMMM [dallas] YYYY HH.mm"},meridiemParse:/d\'o|d\'a/i,isPM:function(e){return"d'o"===e.toLowerCase()},meridiem:function(e,t,n){return e>11?n?"d'o":"D'O":n?"d'a":"D'A"},calendar:{sameDay:"[oxhi à] LT",nextDay:"[demà à] LT",nextWeek:"dddd [à] LT",lastDay:"[ieiri à] LT",lastWeek:"[sür el] dddd [lasteu à] LT",sameElse:"L"},relativeTime:{future:"osprei %s",past:"ja%s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},699:function(e,t,n){!function(e){"use strict";e.defineLocale("tzm-latn",{months:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),monthsShort:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),weekdays:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysShort:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysMin:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[asdkh g] LT",nextDay:"[aska g] LT",nextWeek:"dddd [g] LT",lastDay:"[assant g] LT",lastWeek:"dddd [g] LT",sameElse:"L"},relativeTime:{future:"dadkh s yan %s",past:"yan %s",s:"imik",ss:"%d imik",m:"minuḍ",mm:"%d minuḍ",h:"saɛa",hh:"%d tassaɛin",d:"ass",dd:"%d ossan",M:"ayowr",MM:"%d iyyirn",y:"asgas",yy:"%d isgasn"},week:{dow:6,doy:12}})}(n(381))},1106:function(e,t,n){!function(e){"use strict";e.defineLocale("tzm",{months:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),monthsShort:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),weekdays:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysShort:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysMin:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ⴰⵙⴷⵅ ⴴ] LT",nextDay:"[ⴰⵙⴽⴰ ⴴ] LT",nextWeek:"dddd [ⴴ] LT",lastDay:"[ⴰⵚⴰⵏⵜ ⴴ] LT",lastWeek:"dddd [ⴴ] LT",sameElse:"L"},relativeTime:{future:"ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s",past:"ⵢⴰⵏ %s",s:"ⵉⵎⵉⴽ",ss:"%d ⵉⵎⵉⴽ",m:"ⵎⵉⵏⵓⴺ",mm:"%d ⵎⵉⵏⵓⴺ",h:"ⵙⴰⵄⴰ",hh:"%d ⵜⴰⵙⵙⴰⵄⵉⵏ",d:"ⴰⵙⵙ",dd:"%d oⵙⵙⴰⵏ",M:"ⴰⵢoⵓⵔ",MM:"%d ⵉⵢⵢⵉⵔⵏ",y:"ⴰⵙⴳⴰⵙ",yy:"%d ⵉⵙⴳⴰⵙⵏ"},week:{dow:6,doy:12}})}(n(381))},9288:function(e,t,n){!function(e){"use strict";e.defineLocale("ug-cn",{months:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),monthsShort:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),weekdays:"يەكشەنبە_دۈشەنبە_سەيشەنبە_چارشەنبە_پەيشەنبە_جۈمە_شەنبە".split("_"),weekdaysShort:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),weekdaysMin:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY-يىلىM-ئاينىڭD-كۈنى",LLL:"YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm",LLLL:"dddd، YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm"},meridiemParse:/يېرىم كېچە|سەھەر|چۈشتىن بۇرۇن|چۈش|چۈشتىن كېيىن|كەچ/,meridiemHour:function(e,t){return 12===e&&(e=0),"يېرىم كېچە"===t||"سەھەر"===t||"چۈشتىن بۇرۇن"===t?e:"چۈشتىن كېيىن"===t||"كەچ"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var i=100*e+t;return i<600?"يېرىم كېچە":i<900?"سەھەر":i<1130?"چۈشتىن بۇرۇن":i<1230?"چۈش":i<1800?"چۈشتىن كېيىن":"كەچ"},calendar:{sameDay:"[بۈگۈن سائەت] LT",nextDay:"[ئەتە سائەت] LT",nextWeek:"[كېلەركى] dddd [سائەت] LT",lastDay:"[تۆنۈگۈن] LT",lastWeek:"[ئالدىنقى] dddd [سائەت] LT",sameElse:"L"},relativeTime:{future:"%s كېيىن",past:"%s بۇرۇن",s:"نەچچە سېكونت",ss:"%d سېكونت",m:"بىر مىنۇت",mm:"%d مىنۇت",h:"بىر سائەت",hh:"%d سائەت",d:"بىر كۈن",dd:"%d كۈن",M:"بىر ئاي",MM:"%d ئاي",y:"بىر يىل",yy:"%d يىل"},dayOfMonthOrdinalParse:/\d{1,2}(-كۈنى|-ئاي|-ھەپتە)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"-كۈنى";case"w":case"W":return e+"-ھەپتە";default:return e}},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:7}})}(n(381))},7691:function(e,t,n){!function(e){"use strict";function t(e,t,n){return"m"===n?t?"хвилина":"хвилину":"h"===n?t?"година":"годину":e+" "+(i=+e,r={ss:t?"секунда_секунди_секунд":"секунду_секунди_секунд",mm:t?"хвилина_хвилини_хвилин":"хвилину_хвилини_хвилин",hh:t?"година_години_годин":"годину_години_годин",dd:"день_дні_днів",MM:"місяць_місяці_місяців",yy:"рік_роки_років"}[n].split("_"),i%10==1&&i%100!=11?r[0]:i%10>=2&&i%10<=4&&(i%100<10||i%100>=20)?r[1]:r[2]);var i,r}function n(e){return function(){return e+"о"+(11===this.hours()?"б":"")+"] LT"}}e.defineLocale("uk",{months:{format:"січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_"),standalone:"січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_")},monthsShort:"січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),weekdays:function(e,t){var n={nominative:"неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"),accusative:"неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"),genitive:"неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_")};return!0===e?n.nominative.slice(1,7).concat(n.nominative.slice(0,1)):e?n[/(\[[ВвУу]\]) ?dddd/.test(t)?"accusative":/\[?(?:минулої|наступної)? ?\] ?dddd/.test(t)?"genitive":"nominative"][e.day()]:n.nominative},weekdaysShort:"нд_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY р.",LLL:"D MMMM YYYY р., HH:mm",LLLL:"dddd, D MMMM YYYY р., HH:mm"},calendar:{sameDay:n("[Сьогодні "),nextDay:n("[Завтра "),lastDay:n("[Вчора "),nextWeek:n("[У] dddd ["),lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return n("[Минулої] dddd [").call(this);case 1:case 2:case 4:return n("[Минулого] dddd [").call(this)}},sameElse:"L"},relativeTime:{future:"за %s",past:"%s тому",s:"декілька секунд",ss:t,m:t,mm:t,h:"годину",hh:t,d:"день",dd:t,M:"місяць",MM:t,y:"рік",yy:t},meridiemParse:/ночі|ранку|дня|вечора/,isPM:function(e){return/^(дня|вечора)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночі":e<12?"ранку":e<17?"дня":"вечора"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e+"-й";case"D":return e+"-го";default:return e}},week:{dow:1,doy:7}})}(n(381))},3795:function(e,t,n){!function(e){"use strict";var t=["جنوری","فروری","مارچ","اپریل","مئی","جون","جولائی","اگست","ستمبر","اکتوبر","نومبر","دسمبر"],n=["اتوار","پیر","منگل","بدھ","جمعرات","جمعہ","ہفتہ"];e.defineLocale("ur",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(e){return"شام"===e},meridiem:function(e,t,n){return e<12?"صبح":"شام"},calendar:{sameDay:"[آج بوقت] LT",nextDay:"[کل بوقت] LT",nextWeek:"dddd [بوقت] LT",lastDay:"[گذشتہ روز بوقت] LT",lastWeek:"[گذشتہ] dddd [بوقت] LT",sameElse:"L"},relativeTime:{future:"%s بعد",past:"%s قبل",s:"چند سیکنڈ",ss:"%d سیکنڈ",m:"ایک منٹ",mm:"%d منٹ",h:"ایک گھنٹہ",hh:"%d گھنٹے",d:"ایک دن",dd:"%d دن",M:"ایک ماہ",MM:"%d ماہ",y:"ایک سال",yy:"%d سال"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:4}})}(n(381))},588:function(e,t,n){!function(e){"use strict";e.defineLocale("uz-latn",{months:"Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr".split("_"),monthsShort:"Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek".split("_"),weekdays:"Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba".split("_"),weekdaysShort:"Yak_Dush_Sesh_Chor_Pay_Jum_Shan".split("_"),weekdaysMin:"Ya_Du_Se_Cho_Pa_Ju_Sha".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Bugun soat] LT [da]",nextDay:"[Ertaga] LT [da]",nextWeek:"dddd [kuni soat] LT [da]",lastDay:"[Kecha soat] LT [da]",lastWeek:"[O'tgan] dddd [kuni soat] LT [da]",sameElse:"L"},relativeTime:{future:"Yaqin %s ichida",past:"Bir necha %s oldin",s:"soniya",ss:"%d soniya",m:"bir daqiqa",mm:"%d daqiqa",h:"bir soat",hh:"%d soat",d:"bir kun",dd:"%d kun",M:"bir oy",MM:"%d oy",y:"bir yil",yy:"%d yil"},week:{dow:1,doy:7}})}(n(381))},6791:function(e,t,n){!function(e){"use strict";e.defineLocale("uz",{months:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба".split("_"),weekdaysShort:"Якш_Душ_Сеш_Чор_Пай_Жум_Шан".split("_"),weekdaysMin:"Як_Ду_Се_Чо_Па_Жу_Ша".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Бугун соат] LT [да]",nextDay:"[Эртага] LT [да]",nextWeek:"dddd [куни соат] LT [да]",lastDay:"[Кеча соат] LT [да]",lastWeek:"[Утган] dddd [куни соат] LT [да]",sameElse:"L"},relativeTime:{future:"Якин %s ичида",past:"Бир неча %s олдин",s:"фурсат",ss:"%d фурсат",m:"бир дакика",mm:"%d дакика",h:"бир соат",hh:"%d соат",d:"бир кун",dd:"%d кун",M:"бир ой",MM:"%d ой",y:"бир йил",yy:"%d йил"},week:{dow:1,doy:7}})}(n(381))},5666:function(e,t,n){!function(e){"use strict";e.defineLocale("vi",{months:"tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),monthsShort:"Thg 01_Thg 02_Thg 03_Thg 04_Thg 05_Thg 06_Thg 07_Thg 08_Thg 09_Thg 10_Thg 11_Thg 12".split("_"),monthsParseExact:!0,weekdays:"chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),weekdaysShort:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysMin:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysParseExact:!0,meridiemParse:/sa|ch/i,isPM:function(e){return/^ch$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"sa":"SA":n?"ch":"CH"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [năm] YYYY",LLL:"D MMMM [năm] YYYY HH:mm",LLLL:"dddd, D MMMM [năm] YYYY HH:mm",l:"DD/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[Hôm nay lúc] LT",nextDay:"[Ngày mai lúc] LT",nextWeek:"dddd [tuần tới lúc] LT",lastDay:"[Hôm qua lúc] LT",lastWeek:"dddd [tuần trước lúc] LT",sameElse:"L"},relativeTime:{future:"%s tới",past:"%s trước",s:"vài giây",ss:"%d giây",m:"một phút",mm:"%d phút",h:"một giờ",hh:"%d giờ",d:"một ngày",dd:"%d ngày",w:"một tuần",ww:"%d tuần",M:"một tháng",MM:"%d tháng",y:"một năm",yy:"%d năm"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(381))},4378:function(e,t,n){!function(e){"use strict";e.defineLocale("x-pseudo",{months:"J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér".split("_"),monthsShort:"J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc".split("_"),monthsParseExact:!0,weekdays:"S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý".split("_"),weekdaysShort:"S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát".split("_"),weekdaysMin:"S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[T~ódá~ý át] LT",nextDay:"[T~ómó~rró~w át] LT",nextWeek:"dddd [át] LT",lastDay:"[Ý~ést~érdá~ý át] LT",lastWeek:"[L~ást] dddd [át] LT",sameElse:"L"},relativeTime:{future:"í~ñ %s",past:"%s á~gó",s:"á ~féw ~sécó~ñds",ss:"%d s~écóñ~ds",m:"á ~míñ~úté",mm:"%d m~íñú~tés",h:"á~ñ hó~úr",hh:"%d h~óúrs",d:"á ~dáý",dd:"%d d~áýs",M:"á ~móñ~th",MM:"%d m~óñt~hs",y:"á ~ýéár",yy:"%d ý~éárs"},dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(381))},5805:function(e,t,n){!function(e){"use strict";e.defineLocale("yo",{months:"Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀".split("_"),monthsShort:"Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀".split("_"),weekdays:"Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta".split("_"),weekdaysShort:"Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá".split("_"),weekdaysMin:"Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Ònì ni] LT",nextDay:"[Ọ̀la ni] LT",nextWeek:"dddd [Ọsẹ̀ tón'bọ] [ni] LT",lastDay:"[Àna ni] LT",lastWeek:"dddd [Ọsẹ̀ tólọ́] [ni] LT",sameElse:"L"},relativeTime:{future:"ní %s",past:"%s kọjá",s:"ìsẹjú aayá die",ss:"aayá %d",m:"ìsẹjú kan",mm:"ìsẹjú %d",h:"wákati kan",hh:"wákati %d",d:"ọjọ́ kan",dd:"ọjọ́ %d",M:"osù kan",MM:"osù %d",y:"ọdún kan",yy:"ọdún %d"},dayOfMonthOrdinalParse:/ọjọ́\s\d{1,2}/,ordinal:"ọjọ́ %d",week:{dow:1,doy:4}})}(n(381))},3839:function(e,t,n){!function(e){"use strict";e.defineLocale("zh-cn",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"周日_周一_周二_周三_周四_周五_周六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日Ah点mm分",LLLL:"YYYY年M月D日ddddAh点mm分",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"下午"===t||"晚上"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var i=100*e+t;return i<600?"凌晨":i<900?"早上":i<1130?"上午":i<1230?"中午":i<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:function(e){return e.week()!==this.week()?"[下]dddLT":"[本]dddLT"},lastDay:"[昨天]LT",lastWeek:function(e){return this.week()!==e.week()?"[上]dddLT":"[本]dddLT"},sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|周)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"周";default:return e}},relativeTime:{future:"%s后",past:"%s前",s:"几秒",ss:"%d 秒",m:"1 分钟",mm:"%d 分钟",h:"1 小时",hh:"%d 小时",d:"1 天",dd:"%d 天",w:"1 周",ww:"%d 周",M:"1 个月",MM:"%d 个月",y:"1 年",yy:"%d 年"},week:{dow:1,doy:4}})}(n(381))},5726:function(e,t,n){!function(e){"use strict";e.defineLocale("zh-hk",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var i=100*e+t;return i<600?"凌晨":i<900?"早上":i<1200?"上午":1200===i?"中午":i<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(381))},9807:function(e,t,n){!function(e){"use strict";e.defineLocale("zh-mo",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"D/M/YYYY",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var i=100*e+t;return i<600?"凌晨":i<900?"早上":i<1130?"上午":i<1230?"中午":i<1800?"下午":"晚上"},calendar:{sameDay:"[今天] LT",nextDay:"[明天] LT",nextWeek:"[下]dddd LT",lastDay:"[昨天] LT",lastWeek:"[上]dddd LT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(381))},4152:function(e,t,n){!function(e){"use strict";e.defineLocale("zh-tw",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var i=100*e+t;return i<600?"凌晨":i<900?"早上":i<1130?"上午":i<1230?"中午":i<1800?"下午":"晚上"},calendar:{sameDay:"[今天] LT",nextDay:"[明天] LT",nextWeek:"[下]dddd LT",lastDay:"[昨天] LT",lastWeek:"[上]dddd LT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(381))},381:function(e,t,n){(e=n.nmd(e)).exports=function(){"use strict";var t,i;function r(){return t.apply(null,arguments)}function a(e){return e instanceof Array||"[object Array]"===Object.prototype.toString.call(e)}function s(e){return null!=e&&"[object Object]"===Object.prototype.toString.call(e)}function o(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function d(e){if(Object.getOwnPropertyNames)return 0===Object.getOwnPropertyNames(e).length;var t;for(t in e)if(o(e,t))return!1;return!0}function l(e){return void 0===e}function u(e){return"number"==typeof e||"[object Number]"===Object.prototype.toString.call(e)}function c(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function h(e,t){var n,i=[];for(n=0;n<e.length;++n)i.push(t(e[n],n));return i}function _(e,t){for(var n in t)o(t,n)&&(e[n]=t[n]);return o(t,"toString")&&(e.toString=t.toString),o(t,"valueOf")&&(e.valueOf=t.valueOf),e}function m(e,t,n,i){return kt(e,t,n,i,!0).utc()}function f(e){return null==e._pf&&(e._pf={empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidEra:null,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],era:null,meridiem:null,rfc2822:!1,weekdayMismatch:!1}),e._pf}function p(e){if(null==e._isValid){var t=f(e),n=i.call(t.parsedDateParts,(function(e){return null!=e})),r=!isNaN(e._d.getTime())&&t.overflow<0&&!t.empty&&!t.invalidEra&&!t.invalidMonth&&!t.invalidWeekday&&!t.weekdayMismatch&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&n);if(e._strict&&(r=r&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour),null!=Object.isFrozen&&Object.isFrozen(e))return r;e._isValid=r}return e._isValid}function g(e){var t=m(NaN);return null!=e?_(f(t),e):f(t).userInvalidated=!0,t}i=Array.prototype.some?Array.prototype.some:function(e){var t,n=Object(this),i=n.length>>>0;for(t=0;t<i;t++)if(t in n&&e.call(this,n[t],t,n))return!0;return!1};var y=r.momentProperties=[],M=!1;function b(e,t){var n,i,r;if(l(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),l(t._i)||(e._i=t._i),l(t._f)||(e._f=t._f),l(t._l)||(e._l=t._l),l(t._strict)||(e._strict=t._strict),l(t._tzm)||(e._tzm=t._tzm),l(t._isUTC)||(e._isUTC=t._isUTC),l(t._offset)||(e._offset=t._offset),l(t._pf)||(e._pf=f(t)),l(t._locale)||(e._locale=t._locale),y.length>0)for(n=0;n<y.length;n++)l(r=t[i=y[n]])||(e[i]=r);return e}function L(e){b(this,e),this._d=new Date(null!=e._d?e._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===M&&(M=!0,r.updateOffset(this),M=!1)}function v(e){return e instanceof L||null!=e&&null!=e._isAMomentObject}function w(e){!1===r.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+e)}function Y(e,t){var n=!0;return _((function(){if(null!=r.deprecationHandler&&r.deprecationHandler(null,e),n){var i,a,s,d=[];for(a=0;a<arguments.length;a++){if(i="","object"==typeof arguments[a]){for(s in i+="\n["+a+"] ",arguments[0])o(arguments[0],s)&&(i+=s+": "+arguments[0][s]+", ");i=i.slice(0,-2)}else i=arguments[a];d.push(i)}w(e+"\nArguments: "+Array.prototype.slice.call(d).join("")+"\n"+(new Error).stack),n=!1}return t.apply(this,arguments)}),t)}var k,D={};function x(e,t){null!=r.deprecationHandler&&r.deprecationHandler(e,t),D[e]||(w(t),D[e]=!0)}function T(e){return"undefined"!=typeof Function&&e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function S(e,t){var n,i=_({},e);for(n in t)o(t,n)&&(s(e[n])&&s(t[n])?(i[n]={},_(i[n],e[n]),_(i[n],t[n])):null!=t[n]?i[n]=t[n]:delete i[n]);for(n in e)o(e,n)&&!o(t,n)&&s(e[n])&&(i[n]=_({},i[n]));return i}function O(e){null!=e&&this.set(e)}r.suppressDeprecationWarnings=!1,r.deprecationHandler=null,k=Object.keys?Object.keys:function(e){var t,n=[];for(t in e)o(e,t)&&n.push(t);return n};function H(e,t,n){var i=""+Math.abs(e),r=t-i.length;return(e>=0?n?"+":"":"-")+Math.pow(10,Math.max(0,r)).toString().substr(1)+i}var j=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,P=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,E={},A={};function R(e,t,n,i){var r=i;"string"==typeof i&&(r=function(){return this[i]()}),e&&(A[e]=r),t&&(A[t[0]]=function(){return H(r.apply(this,arguments),t[1],t[2])}),n&&(A[n]=function(){return this.localeData().ordinal(r.apply(this,arguments),e)})}function C(e,t){return e.isValid()?(t=W(t,e.localeData()),E[t]=E[t]||function(e){var t,n,i,r=e.match(j);for(t=0,n=r.length;t<n;t++)A[r[t]]?r[t]=A[r[t]]:r[t]=(i=r[t]).match(/\[[\s\S]/)?i.replace(/^\[|\]$/g,""):i.replace(/\\/g,"");return function(t){var i,a="";for(i=0;i<n;i++)a+=T(r[i])?r[i].call(t,e):r[i];return a}}(t),E[t](e)):e.localeData().invalidDate()}function W(e,t){var n=5;function i(e){return t.longDateFormat(e)||e}for(P.lastIndex=0;n>=0&&P.test(e);)e=e.replace(P,i),P.lastIndex=0,n-=1;return e}var I={};function F(e,t){var n=e.toLowerCase();I[n]=I[n+"s"]=I[t]=e}function N(e){return"string"==typeof e?I[e]||I[e.toLowerCase()]:void 0}function z(e){var t,n,i={};for(n in e)o(e,n)&&(t=N(n))&&(i[t]=e[n]);return i}var B={};function V(e,t){B[e]=t}function U(e){return e%4==0&&e%100!=0||e%400==0}function J(e){return e<0?Math.ceil(e)||0:Math.floor(e)}function $(e){var t=+e,n=0;return 0!==t&&isFinite(t)&&(n=J(t)),n}function q(e,t){return function(n){return null!=n?(K(this,e,n),r.updateOffset(this,t),this):G(this,e)}}function G(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():NaN}function K(e,t,n){e.isValid()&&!isNaN(n)&&("FullYear"===t&&U(e.year())&&1===e.month()&&29===e.date()?(n=$(n),e._d["set"+(e._isUTC?"UTC":"")+t](n,e.month(),ve(n,e.month()))):e._d["set"+(e._isUTC?"UTC":"")+t](n))}var Z,Q=/\d/,X=/\d\d/,ee=/\d{3}/,te=/\d{4}/,ne=/[+-]?\d{6}/,ie=/\d\d?/,re=/\d\d\d\d?/,ae=/\d\d\d\d\d\d?/,se=/\d{1,3}/,oe=/\d{1,4}/,de=/[+-]?\d{1,6}/,le=/\d+/,ue=/[+-]?\d+/,ce=/Z|[+-]\d\d:?\d\d/gi,he=/Z|[+-]\d\d(?::?\d\d)?/gi,_e=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;function me(e,t,n){Z[e]=T(t)?t:function(e,i){return e&&n?n:t}}function fe(e,t){return o(Z,e)?Z[e](t._strict,t._locale):new RegExp(pe(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,(function(e,t,n,i,r){return t||n||i||r}))))}function pe(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}Z={};var ge={};function ye(e,t){var n,i=t;for("string"==typeof e&&(e=[e]),u(t)&&(i=function(e,n){n[t]=$(e)}),n=0;n<e.length;n++)ge[e[n]]=i}function Me(e,t){ye(e,(function(e,n,i,r){i._w=i._w||{},t(e,i._w,i,r)}))}function be(e,t,n){null!=t&&o(ge,e)&&ge[e](t,n._a,n,e)}var Le;function ve(e,t){if(isNaN(e)||isNaN(t))return NaN;var n,i=(t%(n=12)+n)%n;return e+=(t-i)/12,1===i?U(e)?29:28:31-i%7%2}Le=Array.prototype.indexOf?Array.prototype.indexOf:function(e){var t;for(t=0;t<this.length;++t)if(this[t]===e)return t;return-1},R("M",["MM",2],"Mo",(function(){return this.month()+1})),R("MMM",0,0,(function(e){return this.localeData().monthsShort(this,e)})),R("MMMM",0,0,(function(e){return this.localeData().months(this,e)})),F("month","M"),V("month",8),me("M",ie),me("MM",ie,X),me("MMM",(function(e,t){return t.monthsShortRegex(e)})),me("MMMM",(function(e,t){return t.monthsRegex(e)})),ye(["M","MM"],(function(e,t){t[1]=$(e)-1})),ye(["MMM","MMMM"],(function(e,t,n,i){var r=n._locale.monthsParse(e,i,n._strict);null!=r?t[1]=r:f(n).invalidMonth=e}));var we="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),Ye="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),ke=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,De=_e,xe=_e;function Te(e,t,n){var i,r,a,s=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],i=0;i<12;++i)a=m([2e3,i]),this._shortMonthsParse[i]=this.monthsShort(a,"").toLocaleLowerCase(),this._longMonthsParse[i]=this.months(a,"").toLocaleLowerCase();return n?"MMM"===t?-1!==(r=Le.call(this._shortMonthsParse,s))?r:null:-1!==(r=Le.call(this._longMonthsParse,s))?r:null:"MMM"===t?-1!==(r=Le.call(this._shortMonthsParse,s))||-1!==(r=Le.call(this._longMonthsParse,s))?r:null:-1!==(r=Le.call(this._longMonthsParse,s))||-1!==(r=Le.call(this._shortMonthsParse,s))?r:null}function Se(e,t){var n;if(!e.isValid())return e;if("string"==typeof t)if(/^\d+$/.test(t))t=$(t);else if(!u(t=e.localeData().monthsParse(t)))return e;return n=Math.min(e.date(),ve(e.year(),t)),e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,n),e}function Oe(e){return null!=e?(Se(this,e),r.updateOffset(this,!0),this):G(this,"Month")}function He(){function e(e,t){return t.length-e.length}var t,n,i=[],r=[],a=[];for(t=0;t<12;t++)n=m([2e3,t]),i.push(this.monthsShort(n,"")),r.push(this.months(n,"")),a.push(this.months(n,"")),a.push(this.monthsShort(n,""));for(i.sort(e),r.sort(e),a.sort(e),t=0;t<12;t++)i[t]=pe(i[t]),r[t]=pe(r[t]);for(t=0;t<24;t++)a[t]=pe(a[t]);this._monthsRegex=new RegExp("^("+a.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+r.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+i.join("|")+")","i")}function je(e){return U(e)?366:365}R("Y",0,0,(function(){var e=this.year();return e<=9999?H(e,4):"+"+e})),R(0,["YY",2],0,(function(){return this.year()%100})),R(0,["YYYY",4],0,"year"),R(0,["YYYYY",5],0,"year"),R(0,["YYYYYY",6,!0],0,"year"),F("year","y"),V("year",1),me("Y",ue),me("YY",ie,X),me("YYYY",oe,te),me("YYYYY",de,ne),me("YYYYYY",de,ne),ye(["YYYYY","YYYYYY"],0),ye("YYYY",(function(e,t){t[0]=2===e.length?r.parseTwoDigitYear(e):$(e)})),ye("YY",(function(e,t){t[0]=r.parseTwoDigitYear(e)})),ye("Y",(function(e,t){t[0]=parseInt(e,10)})),r.parseTwoDigitYear=function(e){return $(e)+($(e)>68?1900:2e3)};var Pe=q("FullYear",!0);function Ee(e,t,n,i,r,a,s){var o;return e<100&&e>=0?(o=new Date(e+400,t,n,i,r,a,s),isFinite(o.getFullYear())&&o.setFullYear(e)):o=new Date(e,t,n,i,r,a,s),o}function Ae(e){var t,n;return e<100&&e>=0?((n=Array.prototype.slice.call(arguments))[0]=e+400,t=new Date(Date.UTC.apply(null,n)),isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e)):t=new Date(Date.UTC.apply(null,arguments)),t}function Re(e,t,n){var i=7+t-n;return-(7+Ae(e,0,i).getUTCDay()-t)%7+i-1}function Ce(e,t,n,i,r){var a,s,o=1+7*(t-1)+(7+n-i)%7+Re(e,i,r);return o<=0?s=je(a=e-1)+o:o>je(e)?(a=e+1,s=o-je(e)):(a=e,s=o),{year:a,dayOfYear:s}}function We(e,t,n){var i,r,a=Re(e.year(),t,n),s=Math.floor((e.dayOfYear()-a-1)/7)+1;return s<1?i=s+Ie(r=e.year()-1,t,n):s>Ie(e.year(),t,n)?(i=s-Ie(e.year(),t,n),r=e.year()+1):(r=e.year(),i=s),{week:i,year:r}}function Ie(e,t,n){var i=Re(e,t,n),r=Re(e+1,t,n);return(je(e)-i+r)/7}R("w",["ww",2],"wo","week"),R("W",["WW",2],"Wo","isoWeek"),F("week","w"),F("isoWeek","W"),V("week",5),V("isoWeek",5),me("w",ie),me("ww",ie,X),me("W",ie),me("WW",ie,X),Me(["w","ww","W","WW"],(function(e,t,n,i){t[i.substr(0,1)]=$(e)}));function Fe(e,t){return e.slice(t,7).concat(e.slice(0,t))}R("d",0,"do","day"),R("dd",0,0,(function(e){return this.localeData().weekdaysMin(this,e)})),R("ddd",0,0,(function(e){return this.localeData().weekdaysShort(this,e)})),R("dddd",0,0,(function(e){return this.localeData().weekdays(this,e)})),R("e",0,0,"weekday"),R("E",0,0,"isoWeekday"),F("day","d"),F("weekday","e"),F("isoWeekday","E"),V("day",11),V("weekday",11),V("isoWeekday",11),me("d",ie),me("e",ie),me("E",ie),me("dd",(function(e,t){return t.weekdaysMinRegex(e)})),me("ddd",(function(e,t){return t.weekdaysShortRegex(e)})),me("dddd",(function(e,t){return t.weekdaysRegex(e)})),Me(["dd","ddd","dddd"],(function(e,t,n,i){var r=n._locale.weekdaysParse(e,i,n._strict);null!=r?t.d=r:f(n).invalidWeekday=e})),Me(["d","e","E"],(function(e,t,n,i){t[i]=$(e)}));var Ne="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),ze="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),Be="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),Ve=_e,Ue=_e,Je=_e;function $e(e,t,n){var i,r,a,s=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],i=0;i<7;++i)a=m([2e3,1]).day(i),this._minWeekdaysParse[i]=this.weekdaysMin(a,"").toLocaleLowerCase(),this._shortWeekdaysParse[i]=this.weekdaysShort(a,"").toLocaleLowerCase(),this._weekdaysParse[i]=this.weekdays(a,"").toLocaleLowerCase();return n?"dddd"===t?-1!==(r=Le.call(this._weekdaysParse,s))?r:null:"ddd"===t?-1!==(r=Le.call(this._shortWeekdaysParse,s))?r:null:-1!==(r=Le.call(this._minWeekdaysParse,s))?r:null:"dddd"===t?-1!==(r=Le.call(this._weekdaysParse,s))||-1!==(r=Le.call(this._shortWeekdaysParse,s))||-1!==(r=Le.call(this._minWeekdaysParse,s))?r:null:"ddd"===t?-1!==(r=Le.call(this._shortWeekdaysParse,s))||-1!==(r=Le.call(this._weekdaysParse,s))||-1!==(r=Le.call(this._minWeekdaysParse,s))?r:null:-1!==(r=Le.call(this._minWeekdaysParse,s))||-1!==(r=Le.call(this._weekdaysParse,s))||-1!==(r=Le.call(this._shortWeekdaysParse,s))?r:null}function qe(){function e(e,t){return t.length-e.length}var t,n,i,r,a,s=[],o=[],d=[],l=[];for(t=0;t<7;t++)n=m([2e3,1]).day(t),i=pe(this.weekdaysMin(n,"")),r=pe(this.weekdaysShort(n,"")),a=pe(this.weekdays(n,"")),s.push(i),o.push(r),d.push(a),l.push(i),l.push(r),l.push(a);s.sort(e),o.sort(e),d.sort(e),l.sort(e),this._weekdaysRegex=new RegExp("^("+l.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+d.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+o.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+s.join("|")+")","i")}function Ge(){return this.hours()%12||12}function Ke(e,t){R(e,0,0,(function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)}))}function Ze(e,t){return t._meridiemParse}R("H",["HH",2],0,"hour"),R("h",["hh",2],0,Ge),R("k",["kk",2],0,(function(){return this.hours()||24})),R("hmm",0,0,(function(){return""+Ge.apply(this)+H(this.minutes(),2)})),R("hmmss",0,0,(function(){return""+Ge.apply(this)+H(this.minutes(),2)+H(this.seconds(),2)})),R("Hmm",0,0,(function(){return""+this.hours()+H(this.minutes(),2)})),R("Hmmss",0,0,(function(){return""+this.hours()+H(this.minutes(),2)+H(this.seconds(),2)})),Ke("a",!0),Ke("A",!1),F("hour","h"),V("hour",13),me("a",Ze),me("A",Ze),me("H",ie),me("h",ie),me("k",ie),me("HH",ie,X),me("hh",ie,X),me("kk",ie,X),me("hmm",re),me("hmmss",ae),me("Hmm",re),me("Hmmss",ae),ye(["H","HH"],3),ye(["k","kk"],(function(e,t,n){var i=$(e);t[3]=24===i?0:i})),ye(["a","A"],(function(e,t,n){n._isPm=n._locale.isPM(e),n._meridiem=e})),ye(["h","hh"],(function(e,t,n){t[3]=$(e),f(n).bigHour=!0})),ye("hmm",(function(e,t,n){var i=e.length-2;t[3]=$(e.substr(0,i)),t[4]=$(e.substr(i)),f(n).bigHour=!0})),ye("hmmss",(function(e,t,n){var i=e.length-4,r=e.length-2;t[3]=$(e.substr(0,i)),t[4]=$(e.substr(i,2)),t[5]=$(e.substr(r)),f(n).bigHour=!0})),ye("Hmm",(function(e,t,n){var i=e.length-2;t[3]=$(e.substr(0,i)),t[4]=$(e.substr(i))})),ye("Hmmss",(function(e,t,n){var i=e.length-4,r=e.length-2;t[3]=$(e.substr(0,i)),t[4]=$(e.substr(i,2)),t[5]=$(e.substr(r))}));var Qe=q("Hours",!0);var Xe,et={calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},longDateFormat:{LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},invalidDate:"Invalid date",ordinal:"%d",dayOfMonthOrdinalParse:/\d{1,2}/,relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",w:"a week",ww:"%d weeks",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},months:we,monthsShort:Ye,week:{dow:0,doy:6},weekdays:Ne,weekdaysMin:Be,weekdaysShort:ze,meridiemParse:/[ap]\.?m?\.?/i},tt={},nt={};function it(e,t){var n,i=Math.min(e.length,t.length);for(n=0;n<i;n+=1)if(e[n]!==t[n])return n;return i}function rt(e){return e?e.toLowerCase().replace("_","-"):e}function at(t){var i=null;if(void 0===tt[t]&&e&&e.exports)try{i=Xe._abbr,n(6700)("./"+t),st(i)}catch(e){tt[t]=null}return tt[t]}function st(e,t){var n;return e&&((n=l(t)?dt(e):ot(e,t))?Xe=n:"undefined"!=typeof console&&console.warn&&console.warn("Locale "+e+" not found. Did you forget to load it?")),Xe._abbr}function ot(e,t){if(null!==t){var n,i=et;if(t.abbr=e,null!=tt[e])x("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),i=tt[e]._config;else if(null!=t.parentLocale)if(null!=tt[t.parentLocale])i=tt[t.parentLocale]._config;else{if(null==(n=at(t.parentLocale)))return nt[t.parentLocale]||(nt[t.parentLocale]=[]),nt[t.parentLocale].push({name:e,config:t}),null;i=n._config}return tt[e]=new O(S(i,t)),nt[e]&&nt[e].forEach((function(e){ot(e.name,e.config)})),st(e),tt[e]}return delete tt[e],null}function dt(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return Xe;if(!a(e)){if(t=at(e))return t;e=[e]}return function(e){for(var t,n,i,r,a=0;a<e.length;){for(t=(r=rt(e[a]).split("-")).length,n=(n=rt(e[a+1]))?n.split("-"):null;t>0;){if(i=at(r.slice(0,t).join("-")))return i;if(n&&n.length>=t&&it(r,n)>=t-1)break;t--}a++}return Xe}(e)}function lt(e){var t,n=e._a;return n&&-2===f(e).overflow&&(t=n[1]<0||n[1]>11?1:n[2]<1||n[2]>ve(n[0],n[1])?2:n[3]<0||n[3]>24||24===n[3]&&(0!==n[4]||0!==n[5]||0!==n[6])?3:n[4]<0||n[4]>59?4:n[5]<0||n[5]>59?5:n[6]<0||n[6]>999?6:-1,f(e)._overflowDayOfYear&&(t<0||t>2)&&(t=2),f(e)._overflowWeeks&&-1===t&&(t=7),f(e)._overflowWeekday&&-1===t&&(t=8),f(e).overflow=t),e}var ut=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,ct=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,ht=/Z|[+-]\d\d(?::?\d\d)?/,_t=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/],["YYYYMM",/\d{6}/,!1],["YYYY",/\d{4}/,!1]],mt=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],ft=/^\/?Date\((-?\d+)/i,pt=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,gt={UT:0,GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function yt(e){var t,n,i,r,a,s,o=e._i,d=ut.exec(o)||ct.exec(o);if(d){for(f(e).iso=!0,t=0,n=_t.length;t<n;t++)if(_t[t][1].exec(d[1])){r=_t[t][0],i=!1!==_t[t][2];break}if(null==r)return void(e._isValid=!1);if(d[3]){for(t=0,n=mt.length;t<n;t++)if(mt[t][1].exec(d[3])){a=(d[2]||" ")+mt[t][0];break}if(null==a)return void(e._isValid=!1)}if(!i&&null!=a)return void(e._isValid=!1);if(d[4]){if(!ht.exec(d[4]))return void(e._isValid=!1);s="Z"}e._f=r+(a||"")+(s||""),wt(e)}else e._isValid=!1}function Mt(e){var t=parseInt(e,10);return t<=49?2e3+t:t<=999?1900+t:t}function bt(e){var t,n,i,r,a,s,o,d,l=pt.exec(e._i.replace(/\([^)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s\s*/,"").replace(/\s\s*$/,""));if(l){if(n=l[4],i=l[3],r=l[2],a=l[5],s=l[6],o=l[7],d=[Mt(n),Ye.indexOf(i),parseInt(r,10),parseInt(a,10),parseInt(s,10)],o&&d.push(parseInt(o,10)),t=d,!function(e,t,n){return!e||ze.indexOf(e)===new Date(t[0],t[1],t[2]).getDay()||(f(n).weekdayMismatch=!0,n._isValid=!1,!1)}(l[1],t,e))return;e._a=t,e._tzm=function(e,t,n){if(e)return gt[e];if(t)return 0;var i=parseInt(n,10),r=i%100;return(i-r)/100*60+r}(l[8],l[9],l[10]),e._d=Ae.apply(null,e._a),e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),f(e).rfc2822=!0}else e._isValid=!1}function Lt(e,t,n){return null!=e?e:null!=t?t:n}function vt(e){var t,n,i,a,s,o=[];if(!e._d){for(i=function(e){var t=new Date(r.now());return e._useUTC?[t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()]:[t.getFullYear(),t.getMonth(),t.getDate()]}(e),e._w&&null==e._a[2]&&null==e._a[1]&&function(e){var t,n,i,r,a,s,o,d,l;null!=(t=e._w).GG||null!=t.W||null!=t.E?(a=1,s=4,n=Lt(t.GG,e._a[0],We(Dt(),1,4).year),i=Lt(t.W,1),((r=Lt(t.E,1))<1||r>7)&&(d=!0)):(a=e._locale._week.dow,s=e._locale._week.doy,l=We(Dt(),a,s),n=Lt(t.gg,e._a[0],l.year),i=Lt(t.w,l.week),null!=t.d?((r=t.d)<0||r>6)&&(d=!0):null!=t.e?(r=t.e+a,(t.e<0||t.e>6)&&(d=!0)):r=a),i<1||i>Ie(n,a,s)?f(e)._overflowWeeks=!0:null!=d?f(e)._overflowWeekday=!0:(o=Ce(n,i,r,a,s),e._a[0]=o.year,e._dayOfYear=o.dayOfYear)}(e),null!=e._dayOfYear&&(s=Lt(e._a[0],i[0]),(e._dayOfYear>je(s)||0===e._dayOfYear)&&(f(e)._overflowDayOfYear=!0),n=Ae(s,0,e._dayOfYear),e._a[1]=n.getUTCMonth(),e._a[2]=n.getUTCDate()),t=0;t<3&&null==e._a[t];++t)e._a[t]=o[t]=i[t];for(;t<7;t++)e._a[t]=o[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[3]&&0===e._a[4]&&0===e._a[5]&&0===e._a[6]&&(e._nextDay=!0,e._a[3]=0),e._d=(e._useUTC?Ae:Ee).apply(null,o),a=e._useUTC?e._d.getUTCDay():e._d.getDay(),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[3]=24),e._w&&void 0!==e._w.d&&e._w.d!==a&&(f(e).weekdayMismatch=!0)}}function wt(e){if(e._f!==r.ISO_8601)if(e._f!==r.RFC_2822){e._a=[],f(e).empty=!0;var t,n,i,a,s,o,d=""+e._i,l=d.length,u=0;for(i=W(e._f,e._locale).match(j)||[],t=0;t<i.length;t++)a=i[t],(n=(d.match(fe(a,e))||[])[0])&&((s=d.substr(0,d.indexOf(n))).length>0&&f(e).unusedInput.push(s),d=d.slice(d.indexOf(n)+n.length),u+=n.length),A[a]?(n?f(e).empty=!1:f(e).unusedTokens.push(a),be(a,n,e)):e._strict&&!n&&f(e).unusedTokens.push(a);f(e).charsLeftOver=l-u,d.length>0&&f(e).unusedInput.push(d),e._a[3]<=12&&!0===f(e).bigHour&&e._a[3]>0&&(f(e).bigHour=void 0),f(e).parsedDateParts=e._a.slice(0),f(e).meridiem=e._meridiem,e._a[3]=function(e,t,n){var i;return null==n?t:null!=e.meridiemHour?e.meridiemHour(t,n):null!=e.isPM?((i=e.isPM(n))&&t<12&&(t+=12),i||12!==t||(t=0),t):t}(e._locale,e._a[3],e._meridiem),null!==(o=f(e).era)&&(e._a[0]=e._locale.erasConvertYear(o,e._a[0])),vt(e),lt(e)}else bt(e);else yt(e)}function Yt(e){var t=e._i,n=e._f;return e._locale=e._locale||dt(e._l),null===t||void 0===n&&""===t?g({nullInput:!0}):("string"==typeof t&&(e._i=t=e._locale.preparse(t)),v(t)?new L(lt(t)):(c(t)?e._d=t:a(n)?function(e){var t,n,i,r,a,s,o=!1;if(0===e._f.length)return f(e).invalidFormat=!0,void(e._d=new Date(NaN));for(r=0;r<e._f.length;r++)a=0,s=!1,t=b({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[r],wt(t),p(t)&&(s=!0),a+=f(t).charsLeftOver,a+=10*f(t).unusedTokens.length,f(t).score=a,o?a<i&&(i=a,n=t):(null==i||a<i||s)&&(i=a,n=t,s&&(o=!0));_(e,n||t)}(e):n?wt(e):function(e){var t=e._i;l(t)?e._d=new Date(r.now()):c(t)?e._d=new Date(t.valueOf()):"string"==typeof t?function(e){var t=ft.exec(e._i);null===t?(yt(e),!1===e._isValid&&(delete e._isValid,bt(e),!1===e._isValid&&(delete e._isValid,e._strict?e._isValid=!1:r.createFromInputFallback(e)))):e._d=new Date(+t[1])}(e):a(t)?(e._a=h(t.slice(0),(function(e){return parseInt(e,10)})),vt(e)):s(t)?function(e){if(!e._d){var t=z(e._i),n=void 0===t.day?t.date:t.day;e._a=h([t.year,t.month,n,t.hour,t.minute,t.second,t.millisecond],(function(e){return e&&parseInt(e,10)})),vt(e)}}(e):u(t)?e._d=new Date(t):r.createFromInputFallback(e)}(e),p(e)||(e._d=null),e))}function kt(e,t,n,i,r){var o,l={};return!0!==t&&!1!==t||(i=t,t=void 0),!0!==n&&!1!==n||(i=n,n=void 0),(s(e)&&d(e)||a(e)&&0===e.length)&&(e=void 0),l._isAMomentObject=!0,l._useUTC=l._isUTC=r,l._l=n,l._i=e,l._f=t,l._strict=i,(o=new L(lt(Yt(l))))._nextDay&&(o.add(1,"d"),o._nextDay=void 0),o}function Dt(e,t,n,i){return kt(e,t,n,i,!1)}r.createFromInputFallback=Y("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",(function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))})),r.ISO_8601=function(){},r.RFC_2822=function(){};var xt=Y("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",(function(){var e=Dt.apply(null,arguments);return this.isValid()&&e.isValid()?e<this?this:e:g()})),Tt=Y("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",(function(){var e=Dt.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:g()}));function St(e,t){var n,i;if(1===t.length&&a(t[0])&&(t=t[0]),!t.length)return Dt();for(n=t[0],i=1;i<t.length;++i)t[i].isValid()&&!t[i][e](n)||(n=t[i]);return n}var Ot=["year","quarter","month","week","day","hour","minute","second","millisecond"];function Ht(e){var t=z(e),n=t.year||0,i=t.quarter||0,r=t.month||0,a=t.week||t.isoWeek||0,s=t.day||0,d=t.hour||0,l=t.minute||0,u=t.second||0,c=t.millisecond||0;this._isValid=function(e){var t,n,i=!1;for(t in e)if(o(e,t)&&(-1===Le.call(Ot,t)||null!=e[t]&&isNaN(e[t])))return!1;for(n=0;n<Ot.length;++n)if(e[Ot[n]]){if(i)return!1;parseFloat(e[Ot[n]])!==$(e[Ot[n]])&&(i=!0)}return!0}(t),this._milliseconds=+c+1e3*u+6e4*l+1e3*d*60*60,this._days=+s+7*a,this._months=+r+3*i+12*n,this._data={},this._locale=dt(),this._bubble()}function jt(e){return e instanceof Ht}function Pt(e){return e<0?-1*Math.round(-1*e):Math.round(e)}function Et(e,t){R(e,0,0,(function(){var e=this.utcOffset(),n="+";return e<0&&(e=-e,n="-"),n+H(~~(e/60),2)+t+H(~~e%60,2)}))}Et("Z",":"),Et("ZZ",""),me("Z",he),me("ZZ",he),ye(["Z","ZZ"],(function(e,t,n){n._useUTC=!0,n._tzm=Rt(he,e)}));var At=/([\+\-]|\d\d)/gi;function Rt(e,t){var n,i,r=(t||"").match(e);return null===r?null:0===(i=60*(n=((r[r.length-1]||[])+"").match(At)||["-",0,0])[1]+$(n[2]))?0:"+"===n[0]?i:-i}function Ct(e,t){var n,i;return t._isUTC?(n=t.clone(),i=(v(e)||c(e)?e.valueOf():Dt(e).valueOf())-n.valueOf(),n._d.setTime(n._d.valueOf()+i),r.updateOffset(n,!1),n):Dt(e).local()}function Wt(e){return-Math.round(e._d.getTimezoneOffset())}function It(){return!!this.isValid()&&this._isUTC&&0===this._offset}r.updateOffset=function(){};var Ft=/^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,Nt=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function zt(e,t){var n,i,r,a,s,d,l=e,c=null;return jt(e)?l={ms:e._milliseconds,d:e._days,M:e._months}:u(e)||!isNaN(+e)?(l={},t?l[t]=+e:l.milliseconds=+e):(c=Ft.exec(e))?(n="-"===c[1]?-1:1,l={y:0,d:$(c[2])*n,h:$(c[3])*n,m:$(c[4])*n,s:$(c[5])*n,ms:$(Pt(1e3*c[6]))*n}):(c=Nt.exec(e))?(n="-"===c[1]?-1:1,l={y:Bt(c[2],n),M:Bt(c[3],n),w:Bt(c[4],n),d:Bt(c[5],n),h:Bt(c[6],n),m:Bt(c[7],n),s:Bt(c[8],n)}):null==l?l={}:"object"==typeof l&&("from"in l||"to"in l)&&(a=Dt(l.from),s=Dt(l.to),r=a.isValid()&&s.isValid()?(s=Ct(s,a),a.isBefore(s)?d=Vt(a,s):((d=Vt(s,a)).milliseconds=-d.milliseconds,d.months=-d.months),d):{milliseconds:0,months:0},(l={}).ms=r.milliseconds,l.M=r.months),i=new Ht(l),jt(e)&&o(e,"_locale")&&(i._locale=e._locale),jt(e)&&o(e,"_isValid")&&(i._isValid=e._isValid),i}function Bt(e,t){var n=e&&parseFloat(e.replace(",","."));return(isNaN(n)?0:n)*t}function Vt(e,t){var n={};return n.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(n.months,"M").isAfter(t)&&--n.months,n.milliseconds=+t-+e.clone().add(n.months,"M"),n}function Ut(e,t){return function(n,i){var r;return null===i||isNaN(+i)||(x(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),r=n,n=i,i=r),Jt(this,zt(n,i),e),this}}function Jt(e,t,n,i){var a=t._milliseconds,s=Pt(t._days),o=Pt(t._months);e.isValid()&&(i=null==i||i,o&&Se(e,G(e,"Month")+o*n),s&&K(e,"Date",G(e,"Date")+s*n),a&&e._d.setTime(e._d.valueOf()+a*n),i&&r.updateOffset(e,s||o))}zt.fn=Ht.prototype,zt.invalid=function(){return zt(NaN)};var $t=Ut(1,"add"),qt=Ut(-1,"subtract");function Gt(e){return"string"==typeof e||e instanceof String}function Kt(e){return v(e)||c(e)||Gt(e)||u(e)||function(e){var t=a(e),n=!1;return t&&(n=0===e.filter((function(t){return!u(t)&&Gt(e)})).length),t&&n}(e)||function(e){var t,n,i=s(e)&&!d(e),r=!1,a=["years","year","y","months","month","M","days","day","d","dates","date","D","hours","hour","h","minutes","minute","m","seconds","second","s","milliseconds","millisecond","ms"];for(t=0;t<a.length;t+=1)n=a[t],r=r||o(e,n);return i&&r}(e)||null==e}function Zt(e){var t,n=s(e)&&!d(e),i=!1,r=["sameDay","nextDay","lastDay","nextWeek","lastWeek","sameElse"];for(t=0;t<r.length;t+=1)i=i||o(e,r[t]);return n&&i}function Qt(e,t){if(e.date()<t.date())return-Qt(t,e);var n=12*(t.year()-e.year())+(t.month()-e.month()),i=e.clone().add(n,"months");return-(n+(t-i<0?(t-i)/(i-e.clone().add(n-1,"months")):(t-i)/(e.clone().add(n+1,"months")-i)))||0}function Xt(e){var t;return void 0===e?this._locale._abbr:(null!=(t=dt(e))&&(this._locale=t),this)}r.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",r.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var en=Y("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",(function(e){return void 0===e?this.localeData():this.locale(e)}));function tn(){return this._locale}var nn=1e3,rn=6e4,an=36e5,sn=126227808e5;function on(e,t){return(e%t+t)%t}function dn(e,t,n){return e<100&&e>=0?new Date(e+400,t,n)-sn:new Date(e,t,n).valueOf()}function ln(e,t,n){return e<100&&e>=0?Date.UTC(e+400,t,n)-sn:Date.UTC(e,t,n)}function un(e,t){return t.erasAbbrRegex(e)}function cn(){var e,t,n=[],i=[],r=[],a=[],s=this.eras();for(e=0,t=s.length;e<t;++e)i.push(pe(s[e].name)),n.push(pe(s[e].abbr)),r.push(pe(s[e].narrow)),a.push(pe(s[e].name)),a.push(pe(s[e].abbr)),a.push(pe(s[e].narrow));this._erasRegex=new RegExp("^("+a.join("|")+")","i"),this._erasNameRegex=new RegExp("^("+i.join("|")+")","i"),this._erasAbbrRegex=new RegExp("^("+n.join("|")+")","i"),this._erasNarrowRegex=new RegExp("^("+r.join("|")+")","i")}function hn(e,t){R(0,[e,e.length],0,t)}function _n(e,t,n,i,r){var a;return null==e?We(this,i,r).year:(t>(a=Ie(e,i,r))&&(t=a),mn.call(this,e,t,n,i,r))}function mn(e,t,n,i,r){var a=Ce(e,t,n,i,r),s=Ae(a.year,0,a.dayOfYear);return this.year(s.getUTCFullYear()),this.month(s.getUTCMonth()),this.date(s.getUTCDate()),this}R("N",0,0,"eraAbbr"),R("NN",0,0,"eraAbbr"),R("NNN",0,0,"eraAbbr"),R("NNNN",0,0,"eraName"),R("NNNNN",0,0,"eraNarrow"),R("y",["y",1],"yo","eraYear"),R("y",["yy",2],0,"eraYear"),R("y",["yyy",3],0,"eraYear"),R("y",["yyyy",4],0,"eraYear"),me("N",un),me("NN",un),me("NNN",un),me("NNNN",(function(e,t){return t.erasNameRegex(e)})),me("NNNNN",(function(e,t){return t.erasNarrowRegex(e)})),ye(["N","NN","NNN","NNNN","NNNNN"],(function(e,t,n,i){var r=n._locale.erasParse(e,i,n._strict);r?f(n).era=r:f(n).invalidEra=e})),me("y",le),me("yy",le),me("yyy",le),me("yyyy",le),me("yo",(function(e,t){return t._eraYearOrdinalRegex||le})),ye(["y","yy","yyy","yyyy"],0),ye(["yo"],(function(e,t,n,i){var r;n._locale._eraYearOrdinalRegex&&(r=e.match(n._locale._eraYearOrdinalRegex)),n._locale.eraYearOrdinalParse?t[0]=n._locale.eraYearOrdinalParse(e,r):t[0]=parseInt(e,10)})),R(0,["gg",2],0,(function(){return this.weekYear()%100})),R(0,["GG",2],0,(function(){return this.isoWeekYear()%100})),hn("gggg","weekYear"),hn("ggggg","weekYear"),hn("GGGG","isoWeekYear"),hn("GGGGG","isoWeekYear"),F("weekYear","gg"),F("isoWeekYear","GG"),V("weekYear",1),V("isoWeekYear",1),me("G",ue),me("g",ue),me("GG",ie,X),me("gg",ie,X),me("GGGG",oe,te),me("gggg",oe,te),me("GGGGG",de,ne),me("ggggg",de,ne),Me(["gggg","ggggg","GGGG","GGGGG"],(function(e,t,n,i){t[i.substr(0,2)]=$(e)})),Me(["gg","GG"],(function(e,t,n,i){t[i]=r.parseTwoDigitYear(e)})),R("Q",0,"Qo","quarter"),F("quarter","Q"),V("quarter",7),me("Q",Q),ye("Q",(function(e,t){t[1]=3*($(e)-1)})),R("D",["DD",2],"Do","date"),F("date","D"),V("date",9),me("D",ie),me("DD",ie,X),me("Do",(function(e,t){return e?t._dayOfMonthOrdinalParse||t._ordinalParse:t._dayOfMonthOrdinalParseLenient})),ye(["D","DD"],2),ye("Do",(function(e,t){t[2]=$(e.match(ie)[0])}));var fn=q("Date",!0);R("DDD",["DDDD",3],"DDDo","dayOfYear"),F("dayOfYear","DDD"),V("dayOfYear",4),me("DDD",se),me("DDDD",ee),ye(["DDD","DDDD"],(function(e,t,n){n._dayOfYear=$(e)})),R("m",["mm",2],0,"minute"),F("minute","m"),V("minute",14),me("m",ie),me("mm",ie,X),ye(["m","mm"],4);var pn=q("Minutes",!1);R("s",["ss",2],0,"second"),F("second","s"),V("second",15),me("s",ie),me("ss",ie,X),ye(["s","ss"],5);var gn,yn,Mn=q("Seconds",!1);for(R("S",0,0,(function(){return~~(this.millisecond()/100)})),R(0,["SS",2],0,(function(){return~~(this.millisecond()/10)})),R(0,["SSS",3],0,"millisecond"),R(0,["SSSS",4],0,(function(){return 10*this.millisecond()})),R(0,["SSSSS",5],0,(function(){return 100*this.millisecond()})),R(0,["SSSSSS",6],0,(function(){return 1e3*this.millisecond()})),R(0,["SSSSSSS",7],0,(function(){return 1e4*this.millisecond()})),R(0,["SSSSSSSS",8],0,(function(){return 1e5*this.millisecond()})),R(0,["SSSSSSSSS",9],0,(function(){return 1e6*this.millisecond()})),F("millisecond","ms"),V("millisecond",16),me("S",se,Q),me("SS",se,X),me("SSS",se,ee),gn="SSSS";gn.length<=9;gn+="S")me(gn,le);function bn(e,t){t[6]=$(1e3*("0."+e))}for(gn="S";gn.length<=9;gn+="S")ye(gn,bn);yn=q("Milliseconds",!1),R("z",0,0,"zoneAbbr"),R("zz",0,0,"zoneName");var Ln=L.prototype;function vn(e){return e}Ln.add=$t,Ln.calendar=function(e,t){1===arguments.length&&(arguments[0]?Kt(arguments[0])?(e=arguments[0],t=void 0):Zt(arguments[0])&&(t=arguments[0],e=void 0):(e=void 0,t=void 0));var n=e||Dt(),i=Ct(n,this).startOf("day"),a=r.calendarFormat(this,i)||"sameElse",s=t&&(T(t[a])?t[a].call(this,n):t[a]);return this.format(s||this.localeData().calendar(a,this,Dt(n)))},Ln.clone=function(){return new L(this)},Ln.diff=function(e,t,n){var i,r,a;if(!this.isValid())return NaN;if(!(i=Ct(e,this)).isValid())return NaN;switch(r=6e4*(i.utcOffset()-this.utcOffset()),t=N(t)){case"year":a=Qt(this,i)/12;break;case"month":a=Qt(this,i);break;case"quarter":a=Qt(this,i)/3;break;case"second":a=(this-i)/1e3;break;case"minute":a=(this-i)/6e4;break;case"hour":a=(this-i)/36e5;break;case"day":a=(this-i-r)/864e5;break;case"week":a=(this-i-r)/6048e5;break;default:a=this-i}return n?a:J(a)},Ln.endOf=function(e){var t,n;if(void 0===(e=N(e))||"millisecond"===e||!this.isValid())return this;switch(n=this._isUTC?ln:dn,e){case"year":t=n(this.year()+1,0,1)-1;break;case"quarter":t=n(this.year(),this.month()-this.month()%3+3,1)-1;break;case"month":t=n(this.year(),this.month()+1,1)-1;break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday()+7)-1;break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1)+7)-1;break;case"day":case"date":t=n(this.year(),this.month(),this.date()+1)-1;break;case"hour":t=this._d.valueOf(),t+=an-on(t+(this._isUTC?0:this.utcOffset()*rn),an)-1;break;case"minute":t=this._d.valueOf(),t+=rn-on(t,rn)-1;break;case"second":t=this._d.valueOf(),t+=nn-on(t,nn)-1}return this._d.setTime(t),r.updateOffset(this,!0),this},Ln.format=function(e){e||(e=this.isUtc()?r.defaultFormatUtc:r.defaultFormat);var t=C(this,e);return this.localeData().postformat(t)},Ln.from=function(e,t){return this.isValid()&&(v(e)&&e.isValid()||Dt(e).isValid())?zt({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},Ln.fromNow=function(e){return this.from(Dt(),e)},Ln.to=function(e,t){return this.isValid()&&(v(e)&&e.isValid()||Dt(e).isValid())?zt({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},Ln.toNow=function(e){return this.to(Dt(),e)},Ln.get=function(e){return T(this[e=N(e)])?this[e]():this},Ln.invalidAt=function(){return f(this).overflow},Ln.isAfter=function(e,t){var n=v(e)?e:Dt(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=N(t)||"millisecond")?this.valueOf()>n.valueOf():n.valueOf()<this.clone().startOf(t).valueOf())},Ln.isBefore=function(e,t){var n=v(e)?e:Dt(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=N(t)||"millisecond")?this.valueOf()<n.valueOf():this.clone().endOf(t).valueOf()<n.valueOf())},Ln.isBetween=function(e,t,n,i){var r=v(e)?e:Dt(e),a=v(t)?t:Dt(t);return!!(this.isValid()&&r.isValid()&&a.isValid())&&("("===(i=i||"()")[0]?this.isAfter(r,n):!this.isBefore(r,n))&&(")"===i[1]?this.isBefore(a,n):!this.isAfter(a,n))},Ln.isSame=function(e,t){var n,i=v(e)?e:Dt(e);return!(!this.isValid()||!i.isValid())&&("millisecond"===(t=N(t)||"millisecond")?this.valueOf()===i.valueOf():(n=i.valueOf(),this.clone().startOf(t).valueOf()<=n&&n<=this.clone().endOf(t).valueOf()))},Ln.isSameOrAfter=function(e,t){return this.isSame(e,t)||this.isAfter(e,t)},Ln.isSameOrBefore=function(e,t){return this.isSame(e,t)||this.isBefore(e,t)},Ln.isValid=function(){return p(this)},Ln.lang=en,Ln.locale=Xt,Ln.localeData=tn,Ln.max=Tt,Ln.min=xt,Ln.parsingFlags=function(){return _({},f(this))},Ln.set=function(e,t){if("object"==typeof e){var n,i=function(e){var t,n=[];for(t in e)o(e,t)&&n.push({unit:t,priority:B[t]});return n.sort((function(e,t){return e.priority-t.priority})),n}(e=z(e));for(n=0;n<i.length;n++)this[i[n].unit](e[i[n].unit])}else if(T(this[e=N(e)]))return this[e](t);return this},Ln.startOf=function(e){var t,n;if(void 0===(e=N(e))||"millisecond"===e||!this.isValid())return this;switch(n=this._isUTC?ln:dn,e){case"year":t=n(this.year(),0,1);break;case"quarter":t=n(this.year(),this.month()-this.month()%3,1);break;case"month":t=n(this.year(),this.month(),1);break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday());break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1));break;case"day":case"date":t=n(this.year(),this.month(),this.date());break;case"hour":t=this._d.valueOf(),t-=on(t+(this._isUTC?0:this.utcOffset()*rn),an);break;case"minute":t=this._d.valueOf(),t-=on(t,rn);break;case"second":t=this._d.valueOf(),t-=on(t,nn)}return this._d.setTime(t),r.updateOffset(this,!0),this},Ln.subtract=qt,Ln.toArray=function(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]},Ln.toObject=function(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}},Ln.toDate=function(){return new Date(this.valueOf())},Ln.toISOString=function(e){if(!this.isValid())return null;var t=!0!==e,n=t?this.clone().utc():this;return n.year()<0||n.year()>9999?C(n,t?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"):T(Date.prototype.toISOString)?t?this.toDate().toISOString():new Date(this.valueOf()+60*this.utcOffset()*1e3).toISOString().replace("Z",C(n,"Z")):C(n,t?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")},Ln.inspect=function(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var e,t,n,i="moment",r="";return this.isLocal()||(i=0===this.utcOffset()?"moment.utc":"moment.parseZone",r="Z"),e="["+i+'("]',t=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY","-MM-DD[T]HH:mm:ss.SSS",n=r+'[")]',this.format(e+t+"-MM-DD[T]HH:mm:ss.SSS"+n)},"undefined"!=typeof Symbol&&null!=Symbol.for&&(Ln[Symbol.for("nodejs.util.inspect.custom")]=function(){return"Moment<"+this.format()+">"}),Ln.toJSON=function(){return this.isValid()?this.toISOString():null},Ln.toString=function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},Ln.unix=function(){return Math.floor(this.valueOf()/1e3)},Ln.valueOf=function(){return this._d.valueOf()-6e4*(this._offset||0)},Ln.creationData=function(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}},Ln.eraName=function(){var e,t,n,i=this.localeData().eras();for(e=0,t=i.length;e<t;++e){if(n=this.clone().startOf("day").valueOf(),i[e].since<=n&&n<=i[e].until)return i[e].name;if(i[e].until<=n&&n<=i[e].since)return i[e].name}return""},Ln.eraNarrow=function(){var e,t,n,i=this.localeData().eras();for(e=0,t=i.length;e<t;++e){if(n=this.clone().startOf("day").valueOf(),i[e].since<=n&&n<=i[e].until)return i[e].narrow;if(i[e].until<=n&&n<=i[e].since)return i[e].narrow}return""},Ln.eraAbbr=function(){var e,t,n,i=this.localeData().eras();for(e=0,t=i.length;e<t;++e){if(n=this.clone().startOf("day").valueOf(),i[e].since<=n&&n<=i[e].until)return i[e].abbr;if(i[e].until<=n&&n<=i[e].since)return i[e].abbr}return""},Ln.eraYear=function(){var e,t,n,i,a=this.localeData().eras();for(e=0,t=a.length;e<t;++e)if(n=a[e].since<=a[e].until?1:-1,i=this.clone().startOf("day").valueOf(),a[e].since<=i&&i<=a[e].until||a[e].until<=i&&i<=a[e].since)return(this.year()-r(a[e].since).year())*n+a[e].offset;return this.year()},Ln.year=Pe,Ln.isLeapYear=function(){return U(this.year())},Ln.weekYear=function(e){return _n.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)},Ln.isoWeekYear=function(e){return _n.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)},Ln.quarter=Ln.quarters=function(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)},Ln.month=Oe,Ln.daysInMonth=function(){return ve(this.year(),this.month())},Ln.week=Ln.weeks=function(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")},Ln.isoWeek=Ln.isoWeeks=function(e){var t=We(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")},Ln.weeksInYear=function(){var e=this.localeData()._week;return Ie(this.year(),e.dow,e.doy)},Ln.weeksInWeekYear=function(){var e=this.localeData()._week;return Ie(this.weekYear(),e.dow,e.doy)},Ln.isoWeeksInYear=function(){return Ie(this.year(),1,4)},Ln.isoWeeksInISOWeekYear=function(){return Ie(this.isoWeekYear(),1,4)},Ln.date=fn,Ln.day=Ln.days=function(e){if(!this.isValid())return null!=e?this:NaN;var t=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=e?(e=function(e,t){return"string"!=typeof e?e:isNaN(e)?"number"==typeof(e=t.weekdaysParse(e))?e:null:parseInt(e,10)}(e,this.localeData()),this.add(e-t,"d")):t},Ln.weekday=function(e){if(!this.isValid())return null!=e?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")},Ln.isoWeekday=function(e){if(!this.isValid())return null!=e?this:NaN;if(null!=e){var t=function(e,t){return"string"==typeof e?t.weekdaysParse(e)%7||7:isNaN(e)?null:e}(e,this.localeData());return this.day(this.day()%7?t:t-7)}return this.day()||7},Ln.dayOfYear=function(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")},Ln.hour=Ln.hours=Qe,Ln.minute=Ln.minutes=pn,Ln.second=Ln.seconds=Mn,Ln.millisecond=Ln.milliseconds=yn,Ln.utcOffset=function(e,t,n){var i,a=this._offset||0;if(!this.isValid())return null!=e?this:NaN;if(null!=e){if("string"==typeof e){if(null===(e=Rt(he,e)))return this}else Math.abs(e)<16&&!n&&(e*=60);return!this._isUTC&&t&&(i=Wt(this)),this._offset=e,this._isUTC=!0,null!=i&&this.add(i,"m"),a!==e&&(!t||this._changeInProgress?Jt(this,zt(e-a,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,r.updateOffset(this,!0),this._changeInProgress=null)),this}return this._isUTC?a:Wt(this)},Ln.utc=function(e){return this.utcOffset(0,e)},Ln.local=function(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(Wt(this),"m")),this},Ln.parseZone=function(){if(null!=this._tzm)this.utcOffset(this._tzm,!1,!0);else if("string"==typeof this._i){var e=Rt(ce,this._i);null!=e?this.utcOffset(e):this.utcOffset(0,!0)}return this},Ln.hasAlignedHourOffset=function(e){return!!this.isValid()&&(e=e?Dt(e).utcOffset():0,(this.utcOffset()-e)%60==0)},Ln.isDST=function(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()},Ln.isLocal=function(){return!!this.isValid()&&!this._isUTC},Ln.isUtcOffset=function(){return!!this.isValid()&&this._isUTC},Ln.isUtc=It,Ln.isUTC=It,Ln.zoneAbbr=function(){return this._isUTC?"UTC":""},Ln.zoneName=function(){return this._isUTC?"Coordinated Universal Time":""},Ln.dates=Y("dates accessor is deprecated. Use date instead.",fn),Ln.months=Y("months accessor is deprecated. Use month instead",Oe),Ln.years=Y("years accessor is deprecated. Use year instead",Pe),Ln.zone=Y("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",(function(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()})),Ln.isDSTShifted=Y("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",(function(){if(!l(this._isDSTShifted))return this._isDSTShifted;var e,t={};return b(t,this),(t=Yt(t))._a?(e=t._isUTC?m(t._a):Dt(t._a),this._isDSTShifted=this.isValid()&&function(e,t,n){var i,r=Math.min(e.length,t.length),a=Math.abs(e.length-t.length),s=0;for(i=0;i<r;i++)(n&&e[i]!==t[i]||!n&&$(e[i])!==$(t[i]))&&s++;return s+a}(t._a,e.toArray())>0):this._isDSTShifted=!1,this._isDSTShifted}));var wn=O.prototype;function Yn(e,t,n,i){var r=dt(),a=m().set(i,t);return r[n](a,e)}function kn(e,t,n){if(u(e)&&(t=e,e=void 0),e=e||"",null!=t)return Yn(e,t,n,"month");var i,r=[];for(i=0;i<12;i++)r[i]=Yn(e,i,n,"month");return r}function Dn(e,t,n,i){"boolean"==typeof e?(u(t)&&(n=t,t=void 0),t=t||""):(n=t=e,e=!1,u(t)&&(n=t,t=void 0),t=t||"");var r,a=dt(),s=e?a._week.dow:0,o=[];if(null!=n)return Yn(t,(n+s)%7,i,"day");for(r=0;r<7;r++)o[r]=Yn(t,(r+s)%7,i,"day");return o}wn.calendar=function(e,t,n){var i=this._calendar[e]||this._calendar.sameElse;return T(i)?i.call(t,n):i},wn.longDateFormat=function(e){var t=this._longDateFormat[e],n=this._longDateFormat[e.toUpperCase()];return t||!n?t:(this._longDateFormat[e]=n.match(j).map((function(e){return"MMMM"===e||"MM"===e||"DD"===e||"dddd"===e?e.slice(1):e})).join(""),this._longDateFormat[e])},wn.invalidDate=function(){return this._invalidDate},wn.ordinal=function(e){return this._ordinal.replace("%d",e)},wn.preparse=vn,wn.postformat=vn,wn.relativeTime=function(e,t,n,i){var r=this._relativeTime[n];return T(r)?r(e,t,n,i):r.replace(/%d/i,e)},wn.pastFuture=function(e,t){var n=this._relativeTime[e>0?"future":"past"];return T(n)?n(t):n.replace(/%s/i,t)},wn.set=function(e){var t,n;for(n in e)o(e,n)&&(T(t=e[n])?this[n]=t:this["_"+n]=t);this._config=e,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)},wn.eras=function(e,t){var n,i,a,s=this._eras||dt("en")._eras;for(n=0,i=s.length;n<i;++n){switch(typeof s[n].since){case"string":a=r(s[n].since).startOf("day"),s[n].since=a.valueOf()}switch(typeof s[n].until){case"undefined":s[n].until=1/0;break;case"string":a=r(s[n].until).startOf("day").valueOf(),s[n].until=a.valueOf()}}return s},wn.erasParse=function(e,t,n){var i,r,a,s,o,d=this.eras();for(e=e.toUpperCase(),i=0,r=d.length;i<r;++i)if(a=d[i].name.toUpperCase(),s=d[i].abbr.toUpperCase(),o=d[i].narrow.toUpperCase(),n)switch(t){case"N":case"NN":case"NNN":if(s===e)return d[i];break;case"NNNN":if(a===e)return d[i];break;case"NNNNN":if(o===e)return d[i]}else if([a,s,o].indexOf(e)>=0)return d[i]},wn.erasConvertYear=function(e,t){var n=e.since<=e.until?1:-1;return void 0===t?r(e.since).year():r(e.since).year()+(t-e.offset)*n},wn.erasAbbrRegex=function(e){return o(this,"_erasAbbrRegex")||cn.call(this),e?this._erasAbbrRegex:this._erasRegex},wn.erasNameRegex=function(e){return o(this,"_erasNameRegex")||cn.call(this),e?this._erasNameRegex:this._erasRegex},wn.erasNarrowRegex=function(e){return o(this,"_erasNarrowRegex")||cn.call(this),e?this._erasNarrowRegex:this._erasRegex},wn.months=function(e,t){return e?a(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||ke).test(t)?"format":"standalone"][e.month()]:a(this._months)?this._months:this._months.standalone},wn.monthsShort=function(e,t){return e?a(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[ke.test(t)?"format":"standalone"][e.month()]:a(this._monthsShort)?this._monthsShort:this._monthsShort.standalone},wn.monthsParse=function(e,t,n){var i,r,a;if(this._monthsParseExact)return Te.call(this,e,t,n);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),i=0;i<12;i++){if(r=m([2e3,i]),n&&!this._longMonthsParse[i]&&(this._longMonthsParse[i]=new RegExp("^"+this.months(r,"").replace(".","")+"$","i"),this._shortMonthsParse[i]=new RegExp("^"+this.monthsShort(r,"").replace(".","")+"$","i")),n||this._monthsParse[i]||(a="^"+this.months(r,"")+"|^"+this.monthsShort(r,""),this._monthsParse[i]=new RegExp(a.replace(".",""),"i")),n&&"MMMM"===t&&this._longMonthsParse[i].test(e))return i;if(n&&"MMM"===t&&this._shortMonthsParse[i].test(e))return i;if(!n&&this._monthsParse[i].test(e))return i}},wn.monthsRegex=function(e){return this._monthsParseExact?(o(this,"_monthsRegex")||He.call(this),e?this._monthsStrictRegex:this._monthsRegex):(o(this,"_monthsRegex")||(this._monthsRegex=xe),this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex)},wn.monthsShortRegex=function(e){return this._monthsParseExact?(o(this,"_monthsRegex")||He.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):(o(this,"_monthsShortRegex")||(this._monthsShortRegex=De),this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex)},wn.week=function(e){return We(e,this._week.dow,this._week.doy).week},wn.firstDayOfYear=function(){return this._week.doy},wn.firstDayOfWeek=function(){return this._week.dow},wn.weekdays=function(e,t){var n=a(this._weekdays)?this._weekdays:this._weekdays[e&&!0!==e&&this._weekdays.isFormat.test(t)?"format":"standalone"];return!0===e?Fe(n,this._week.dow):e?n[e.day()]:n},wn.weekdaysMin=function(e){return!0===e?Fe(this._weekdaysMin,this._week.dow):e?this._weekdaysMin[e.day()]:this._weekdaysMin},wn.weekdaysShort=function(e){return!0===e?Fe(this._weekdaysShort,this._week.dow):e?this._weekdaysShort[e.day()]:this._weekdaysShort},wn.weekdaysParse=function(e,t,n){var i,r,a;if(this._weekdaysParseExact)return $e.call(this,e,t,n);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),i=0;i<7;i++){if(r=m([2e3,1]).day(i),n&&!this._fullWeekdaysParse[i]&&(this._fullWeekdaysParse[i]=new RegExp("^"+this.weekdays(r,"").replace(".","\\.?")+"$","i"),this._shortWeekdaysParse[i]=new RegExp("^"+this.weekdaysShort(r,"").replace(".","\\.?")+"$","i"),this._minWeekdaysParse[i]=new RegExp("^"+this.weekdaysMin(r,"").replace(".","\\.?")+"$","i")),this._weekdaysParse[i]||(a="^"+this.weekdays(r,"")+"|^"+this.weekdaysShort(r,"")+"|^"+this.weekdaysMin(r,""),this._weekdaysParse[i]=new RegExp(a.replace(".",""),"i")),n&&"dddd"===t&&this._fullWeekdaysParse[i].test(e))return i;if(n&&"ddd"===t&&this._shortWeekdaysParse[i].test(e))return i;if(n&&"dd"===t&&this._minWeekdaysParse[i].test(e))return i;if(!n&&this._weekdaysParse[i].test(e))return i}},wn.weekdaysRegex=function(e){return this._weekdaysParseExact?(o(this,"_weekdaysRegex")||qe.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):(o(this,"_weekdaysRegex")||(this._weekdaysRegex=Ve),this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex)},wn.weekdaysShortRegex=function(e){return this._weekdaysParseExact?(o(this,"_weekdaysRegex")||qe.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(o(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=Ue),this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)},wn.weekdaysMinRegex=function(e){return this._weekdaysParseExact?(o(this,"_weekdaysRegex")||qe.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(o(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=Je),this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)},wn.isPM=function(e){return"p"===(e+"").toLowerCase().charAt(0)},wn.meridiem=function(e,t,n){return e>11?n?"pm":"PM":n?"am":"AM"},st("en",{eras:[{since:"0001-01-01",until:1/0,offset:1,name:"Anno Domini",narrow:"AD",abbr:"AD"},{since:"0000-12-31",until:-1/0,offset:1,name:"Before Christ",narrow:"BC",abbr:"BC"}],dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1===$(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}}),r.lang=Y("moment.lang is deprecated. Use moment.locale instead.",st),r.langData=Y("moment.langData is deprecated. Use moment.localeData instead.",dt);var xn=Math.abs;function Tn(e,t,n,i){var r=zt(t,n);return e._milliseconds+=i*r._milliseconds,e._days+=i*r._days,e._months+=i*r._months,e._bubble()}function Sn(e){return e<0?Math.floor(e):Math.ceil(e)}function On(e){return 4800*e/146097}function Hn(e){return 146097*e/4800}function jn(e){return function(){return this.as(e)}}var Pn=jn("ms"),En=jn("s"),An=jn("m"),Rn=jn("h"),Cn=jn("d"),Wn=jn("w"),In=jn("M"),Fn=jn("Q"),Nn=jn("y");function zn(e){return function(){return this.isValid()?this._data[e]:NaN}}var Bn=zn("milliseconds"),Vn=zn("seconds"),Un=zn("minutes"),Jn=zn("hours"),$n=zn("days"),qn=zn("months"),Gn=zn("years");var Kn=Math.round,Zn={ss:44,s:45,m:45,h:22,d:26,w:null,M:11};function Qn(e,t,n,i,r){return r.relativeTime(t||1,!!n,e,i)}var Xn=Math.abs;function ei(e){return(e>0)-(e<0)||+e}function ti(){if(!this.isValid())return this.localeData().invalidDate();var e,t,n,i,r,a,s,o,d=Xn(this._milliseconds)/1e3,l=Xn(this._days),u=Xn(this._months),c=this.asSeconds();return c?(e=J(d/60),t=J(e/60),d%=60,e%=60,n=J(u/12),u%=12,i=d?d.toFixed(3).replace(/\.?0+$/,""):"",r=c<0?"-":"",a=ei(this._months)!==ei(c)?"-":"",s=ei(this._days)!==ei(c)?"-":"",o=ei(this._milliseconds)!==ei(c)?"-":"",r+"P"+(n?a+n+"Y":"")+(u?a+u+"M":"")+(l?s+l+"D":"")+(t||e||d?"T":"")+(t?o+t+"H":"")+(e?o+e+"M":"")+(d?o+i+"S":"")):"P0D"}var ni=Ht.prototype;return ni.isValid=function(){return this._isValid},ni.abs=function(){var e=this._data;return this._milliseconds=xn(this._milliseconds),this._days=xn(this._days),this._months=xn(this._months),e.milliseconds=xn(e.milliseconds),e.seconds=xn(e.seconds),e.minutes=xn(e.minutes),e.hours=xn(e.hours),e.months=xn(e.months),e.years=xn(e.years),this},ni.add=function(e,t){return Tn(this,e,t,1)},ni.subtract=function(e,t){return Tn(this,e,t,-1)},ni.as=function(e){if(!this.isValid())return NaN;var t,n,i=this._milliseconds;if("month"===(e=N(e))||"quarter"===e||"year"===e)switch(t=this._days+i/864e5,n=this._months+On(t),e){case"month":return n;case"quarter":return n/3;case"year":return n/12}else switch(t=this._days+Math.round(Hn(this._months)),e){case"week":return t/7+i/6048e5;case"day":return t+i/864e5;case"hour":return 24*t+i/36e5;case"minute":return 1440*t+i/6e4;case"second":return 86400*t+i/1e3;case"millisecond":return Math.floor(864e5*t)+i;default:throw new Error("Unknown unit "+e)}},ni.asMilliseconds=Pn,ni.asSeconds=En,ni.asMinutes=An,ni.asHours=Rn,ni.asDays=Cn,ni.asWeeks=Wn,ni.asMonths=In,ni.asQuarters=Fn,ni.asYears=Nn,ni.valueOf=function(){return this.isValid()?this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*$(this._months/12):NaN},ni._bubble=function(){var e,t,n,i,r,a=this._milliseconds,s=this._days,o=this._months,d=this._data;return a>=0&&s>=0&&o>=0||a<=0&&s<=0&&o<=0||(a+=864e5*Sn(Hn(o)+s),s=0,o=0),d.milliseconds=a%1e3,e=J(a/1e3),d.seconds=e%60,t=J(e/60),d.minutes=t%60,n=J(t/60),d.hours=n%24,s+=J(n/24),o+=r=J(On(s)),s-=Sn(Hn(r)),i=J(o/12),o%=12,d.days=s,d.months=o,d.years=i,this},ni.clone=function(){return zt(this)},ni.get=function(e){return e=N(e),this.isValid()?this[e+"s"]():NaN},ni.milliseconds=Bn,ni.seconds=Vn,ni.minutes=Un,ni.hours=Jn,ni.days=$n,ni.weeks=function(){return J(this.days()/7)},ni.months=qn,ni.years=Gn,ni.humanize=function(e,t){if(!this.isValid())return this.localeData().invalidDate();var n,i,r=!1,a=Zn;return"object"==typeof e&&(t=e,e=!1),"boolean"==typeof e&&(r=e),"object"==typeof t&&(a=Object.assign({},Zn,t),null!=t.s&&null==t.ss&&(a.ss=t.s-1)),i=function(e,t,n,i){var r=zt(e).abs(),a=Kn(r.as("s")),s=Kn(r.as("m")),o=Kn(r.as("h")),d=Kn(r.as("d")),l=Kn(r.as("M")),u=Kn(r.as("w")),c=Kn(r.as("y")),h=a<=n.ss&&["s",a]||a<n.s&&["ss",a]||s<=1&&["m"]||s<n.m&&["mm",s]||o<=1&&["h"]||o<n.h&&["hh",o]||d<=1&&["d"]||d<n.d&&["dd",d];return null!=n.w&&(h=h||u<=1&&["w"]||u<n.w&&["ww",u]),(h=h||l<=1&&["M"]||l<n.M&&["MM",l]||c<=1&&["y"]||["yy",c])[2]=t,h[3]=+e>0,h[4]=i,Qn.apply(null,h)}(this,!r,a,n=this.localeData()),r&&(i=n.pastFuture(+this,i)),n.postformat(i)},ni.toISOString=ti,ni.toString=ti,ni.toJSON=ti,ni.locale=Xt,ni.localeData=tn,ni.toIsoString=Y("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",ti),ni.lang=en,R("X",0,0,"unix"),R("x",0,0,"valueOf"),me("x",ue),me("X",/[+-]?\d+(\.\d{1,3})?/),ye("X",(function(e,t,n){n._d=new Date(1e3*parseFloat(e))})),ye("x",(function(e,t,n){n._d=new Date($(e))})),r.version="2.29.1",t=Dt,r.fn=Ln,r.min=function(){return St("isBefore",[].slice.call(arguments,0))},r.max=function(){return St("isAfter",[].slice.call(arguments,0))},r.now=function(){return Date.now?Date.now():+new Date},r.utc=m,r.unix=function(e){return Dt(1e3*e)},r.months=function(e,t){return kn(e,t,"months")},r.isDate=c,r.locale=st,r.invalid=g,r.duration=zt,r.isMoment=v,r.weekdays=function(e,t,n){return Dn(e,t,n,"weekdays")},r.parseZone=function(){return Dt.apply(null,arguments).parseZone()},r.localeData=dt,r.isDuration=jt,r.monthsShort=function(e,t){return kn(e,t,"monthsShort")},r.weekdaysMin=function(e,t,n){return Dn(e,t,n,"weekdaysMin")},r.defineLocale=ot,r.updateLocale=function(e,t){if(null!=t){var n,i,r=et;null!=tt[e]&&null!=tt[e].parentLocale?tt[e].set(S(tt[e]._config,t)):(null!=(i=at(e))&&(r=i._config),t=S(r,t),null==i&&(t.abbr=e),(n=new O(t)).parentLocale=tt[e],tt[e]=n),st(e)}else null!=tt[e]&&(null!=tt[e].parentLocale?(tt[e]=tt[e].parentLocale,e===st()&&st(e)):null!=tt[e]&&delete tt[e]);return tt[e]},r.locales=function(){return k(tt)},r.weekdaysShort=function(e,t,n){return Dn(e,t,n,"weekdaysShort")},r.normalizeUnits=N,r.relativeTimeRounding=function(e){return void 0===e?Kn:"function"==typeof e&&(Kn=e,!0)},r.relativeTimeThreshold=function(e,t){return void 0!==Zn[e]&&(void 0===t?Zn[e]:(Zn[e]=t,"s"===e&&(Zn.ss=t-1),!0))},r.calendarFormat=function(e,t){var n=e.diff(t,"days",!0);return n<-6?"sameElse":n<-1?"lastWeek":n<0?"lastDay":n<1?"sameDay":n<2?"nextDay":n<7?"nextWeek":"sameElse"},r.prototype=Ln,r.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"GGGG-[W]WW",MONTH:"YYYY-MM"},r}()},3271:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Component=void 0;const i=n(5006),r=n(6449),a=n(2234);t.Component=class{constructor(e){this._elements=[],this._skipUnmount=!1,this._hasUnmounted=!1,this.props=e||{},this.id=this._getHash()}setState(e,t=!1){"object"==typeof e&&null!==e&&void 0!==this.state?this.state=Object.assign(Object.assign({},this.state),e):this.state=e,t&&this.update()}set state(e){a._state.set(this.id,e)}get state(){return a._state.get(this.id)}set initState(e){void 0===this.state&&(this.state=e)}get elements(){return this._elements}set elements(e){Array.isArray(e)||(e=[e]),e.forEach((e=>{this._elements.push(e)}))}_addNodeRemoveListener(){/^[^{]+{\s+}$/gm.test(this.didUnmount.toString())||i.onNodeRemove(this.elements[0],(()=>{this._skipUnmount||this._didUnmount()}))}_didMount(){this._addNodeRemoveListener(),this.didMount()}_didUnmount(){this._hasUnmounted||(this.didUnmount(),this._hasUnmounted=!0)}willMount(){}didMount(){}didUnmount(){}render(e){}update(e){this._skipUnmount=!0;const t=[...this.elements];this._elements=[];let n=this.render(e);n=r._render(n),this.elements=n;const i=t[0].parentElement;i||console.warn("Component needs a parent element to get updated!"),this.elements.forEach((e=>{i.insertBefore(e,t[0])})),t.forEach((e=>{e.remove(),e=null})),this._addNodeRemoveListener(),r.tick((()=>{this._skipUnmount=!1,this.elements[0].isConnected||this._didUnmount()}))}_getHash(){}}},7402:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Helmet=void 0;const i=n(3271),r=n(6449);class a extends i.Component{static SSR(e){const t=/(<helmet\b[^>]*>)((.|\n)*?)(<\/helmet>)/gm,n=[],i=[];if("undefined"!=typeof document&&document.head){let e=[];e=document.head.children;for(let t=0;t<e.length;t++)-1===n.indexOf(e[t])&&n.push(e[t])}let r;for(;null!==(r=t.exec(e));){const e=r[1],t=r[2];e.includes('data-placement="head"')&&!n.includes(t)?n.push(t):i.includes(t)||i.push(t)}return{body:e.replace(t,""),head:n,footer:i}}didMount(){this.props.children.forEach((e=>{var t,n,i,a;const s=this.props.footer?document.body:document.head,o=e.tagName;let d=[];d.push(e.innerText);for(let i=0;i<e.attributes.length;i++)d.push(null===(t=e.attributes.item(i))||void 0===t?void 0:t.name.toLowerCase()),d.push(null===(n=e.attributes.item(i))||void 0===n?void 0:n.value.toLowerCase());if("HTML"===o||"BODY"===o){const e=document.getElementsByTagName(o)[0];for(let t=1;t<d.length;t+=2)e.setAttribute(d[t],d[t+1]);return}if("TITLE"===o){const t=document.getElementsByTagName("TITLE");if(t.length>0){const n=e;t[0].text=n.text}else{const t=r.h("title",null,e.innerHTML);s.appendChild(t)}return}let l=!1;d=d.sort();const u=document.getElementsByTagName(o);for(let e=0;e<u.length;e++){let t=[];t.push(u[e].innerText);for(let n=0;n<u[e].attributes.length;n++)t.push(null===(i=u[e].attributes.item(n))||void 0===i?void 0:i.name.toLowerCase()),t.push(null===(a=u[e].attributes.item(n))||void 0===a?void 0:a.value.toLowerCase());t=t.sort(),d.length>0&&t.length>0&&JSON.stringify(d)===JSON.stringify(t)&&(l=!0)}l||r.appendChildren(s,e)}))}render(){const e=this.props.footer?"footer":"head";return globalThis&&globalThis.isSSR?r.h("helmet",{"data-ssr":!0,"data-placement":e},this.props.children):[]}}t.Helmet=a},643:function(e,t,n){"use strict";var i=this&&this.__rest||function(e,t){var n={};for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.indexOf(i)<0&&(n[i]=e[i]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(i=Object.getOwnPropertySymbols(e);r<i.length;r++)t.indexOf(i[r])<0&&Object.prototype.propertyIsEnumerable.call(e,i[r])&&(n[i[r]]=e[i[r]])}return n};Object.defineProperty(t,"__esModule",{value:!0}),t.Img=void 0;const r=n(3271),a=n(6449);class s extends r.Component{constructor(e){super(e);const{src:t,key:n}=e;this.id=`${a.strToHash(t)}-${a.strToHash(JSON.stringify(e))}`,n&&(this.id+=`key-${n}`),this.state||this.setState({isLoaded:!1,image:void 0})}didMount(){const e=this.props,{lazy:t=!0,placeholder:n,children:r,key:s,ref:o}=e,d=i(e,["lazy","placeholder","children","key","ref"]);"boolean"==typeof t&&!1===t||new IntersectionObserver(((e,t)=>{e.forEach((e=>{e.isIntersecting&&(t.disconnect(),this.state.image=a.h("img",Object.assign({},d)),this.state.image.complete?(this.state.isLoaded=!0,this.update()):this.state.image.onload=()=>{this.state.isLoaded=!0,this.update()})}))}),{threshold:[0,1]}).observe(this.elements[0])}render(){const e=this.props,{src:t,placeholder:n,children:r,lazy:s=!0,key:o,ref:d}=e,l=i(e,["src","placeholder","children","lazy","key","ref"]);if("boolean"==typeof s&&!1===s)return this.state.image=a.h("img",Object.assign({src:t},l)),this.state.image;if(this.state.isLoaded)return this.state.image;if(n&&"string"==typeof n)return a.h("img",Object.assign({src:n},l));if(n&&"function"==typeof n)return n();{const e={};l.width&&(e.width=`${l.width}px`),l.height&&(e.height=`${l.height}px`);const{width:t,height:n}=l,r=i(l,["width","height"]);return a.h("div",Object.assign({style:e},r))}}}t.Img=s},7204:function(e,t,n){"use strict";var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&i(t,e,n);return r(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Visible=t.Suspense=t.Router=t.Link=t.Img=t.Helmet=void 0;var s=n(7402);Object.defineProperty(t,"Helmet",{enumerable:!0,get:function(){return s.Helmet}});var o=n(643);Object.defineProperty(t,"Img",{enumerable:!0,get:function(){return o.Img}});var d=n(8805);Object.defineProperty(t,"Link",{enumerable:!0,get:function(){return d.Link}}),t.Router=a(n(3197));var l=n(8973);Object.defineProperty(t,"Suspense",{enumerable:!0,get:function(){return l.Suspense}});var u=n(8091);Object.defineProperty(t,"Visible",{enumerable:!0,get:function(){return u.Visible}})},8805:function(e,t,n){"use strict";var i=this&&this.__rest||function(e,t){var n={};for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.indexOf(i)<0&&(n[i]=e[i]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(i=Object.getOwnPropertySymbols(e);r<i.length;r++)t.indexOf(i[r])<0&&Object.prototype.propertyIsEnumerable.call(e,i[r])&&(n[i[r]]=e[i[r]])}return n};Object.defineProperty(t,"__esModule",{value:!0}),t.Link=void 0;const r=n(3271),a=n(7402),s=n(6449),o=n(6669);class d extends r.Component{prefetchOnHover(){this.elements[0].addEventListener("mouseover",(()=>this.addPrefetch()),{once:!0})}prefetchOnVisible(){new IntersectionObserver(((e,t)=>{e.forEach((e=>{e.isIntersecting&&(t.disconnect(),this.addPrefetch())}))}),{threshold:[0,1]}).observe(this.elements[0])}addPrefetch(){let e=!1;const t=document.getElementsByTagName("link");for(let n=0;n<t.length;n++)"prefetch"===t[n].getAttribute("rel")&&t[n].getAttribute("href")===this.props.href&&(e=!0);if(!e){const e=s.h("link",{rel:"prefetch",href:this.props.href,as:"document"});document.head.appendChild(e)}}didMount(){const{href:e,prefetch:t,delay:n=0,back:i=!1}=this.props;i&&this.elements[0].addEventListener("click",(e=>{e.preventDefault();const t=e.target;t.href===document.referrer?window.history.back():window.location.href=t.href})),n>0&&this.elements[0].addEventListener("click",(t=>{t.preventDefault(),setTimeout((()=>window.location.href=e),n)})),t&&("hover"===t?this.prefetchOnHover():"visible"===t?this.prefetchOnVisible():this.addPrefetch())}render(){const e=this.props,{children:t,prefetch:n,back:r,ref:d}=e,l=i(e,["children","prefetch","back","ref"]);this.props.href||console.warn('Please add "href" to <Link>'),1!==t.length&&console.warn("Please add ONE child to <Link> (<Link>child</Link>)");const u=s.h("a",Object.assign({},l),...t);if(!0!==n||"undefined"!=typeof window&&window.document)return u;{const e=s.h("link",{rel:"prefetch",href:this.props.href,as:"document"}),t=s.h(a.Helmet,null,e);return s.h(o.Fragment,null,[t,u])}}}t.Link=d},3197:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Link=t.to=t.Route=t.Switch=void 0;const i=n(3271),r=n(6449),a=[],s=e=>{window.history.pushState({},"",e),a.forEach((e=>e.handlePop()))},o=e=>{window.history.replaceState({},"",e),a.forEach((e=>e.handlePop()))},d=(e,t)=>{const{exact:n=!1,regex:i}=t;let r,{path:a}=t;if(!a)return{path:null,url:e,isExact:!0};let s={};if(a.includes("/:")){const t=a.split("/"),n=e.split("/");t.forEach(((e,r)=>{if(/^:/.test(e)){const a=e.slice(1),o=n[r];if(i&&i[a]&&!i[a].test(o))return null;s=Object.assign(Object.assign({},s),{[a]:o}),t[r]=n[r]}})),a=t.join("/")}if("*"===a&&(r=[e]),r||(r=new RegExp(`^${a}`).exec(e)),!r)return null;const o=r[0],d=e===o;return n&&!d?null:{path:a,url:o,isExact:d,params:s}};class l extends i.Component{constructor(){super(...arguments),this.index=0,this.path="",this.match={index:-1,path:""}}didMount(){window.addEventListener("popstate",this.handlePop.bind(this)),a.push(this)}didUnmount(){window.removeEventListener("popstate",this.handlePop.bind(this)),a.splice(a.indexOf(this),1)}handlePop(){this.findChild(),this.shouldUpdate()&&this.update()}findChild(){this.match={index:-1,path:""};for(let e=0;e<this.props.children.length;e++){const t=this.props.children[e],{path:n,exact:i,regex:r}=t.props;if(d("undefined"!=typeof isSSR?_nano.location.pathname:window.location.pathname,{path:n,exact:i,regex:r}))return this.match.index=e,void(this.match.path=n)}}shouldUpdate(){return this.path!==this.match.path||this.index!==this.match.index}render(){this.findChild();const e=this.props.children[this.match.index];if(-1===this.match.index&&(this.path="",this.index=0),e){const{path:t}=e.props;this.path=t,this.index=this.match.index;const n=r._render(e);return r._render(n)}return this.props.fallback?r._render(this.props.fallback):r.h("div",{class:"route"},"not found")}}t.Switch=l,t.Route=({path:e,regex:t,children:n})=>(n.forEach((n=>{n.props&&(n.props=Object.assign(Object.assign({},n.props),{route:{path:e,regex:t}}))})),n),t.to=(e,t=!1)=>{t?o(e):s(e)},t.Link=({to:e,replace:t,children:n})=>r.h("a",{href:e,onClick:n=>(n.preventDefault(),void(t?o(e):s(e)))},n)},8973:function(e,t,n){"use strict";var i=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(r,a){function s(e){try{d(i.next(e))}catch(e){a(e)}}function o(e){try{d(i.throw(e))}catch(e){a(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,o)}d((i=i.apply(e,t||[])).next())}))},r=this&&this.__rest||function(e,t){var n={};for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.indexOf(i)<0&&(n[i]=e[i]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(i=Object.getOwnPropertySymbols(e);r<i.length;r++)t.indexOf(i[r])<0&&Object.prototype.propertyIsEnumerable.call(e,i[r])&&(n[i[r]]=e[i[r]])}return n};Object.defineProperty(t,"__esModule",{value:!0}),t.Suspense=void 0;const a=n(3271),s=n(6449);class o extends a.Component{constructor(e){super(e),this.ready=!1;const t=this.props,{children:n,fallback:i,cache:a=!1}=t,o=r(t,["children","fallback","cache"]),d=JSON.stringify(o,(function(e,t){return"function"==typeof t?`${t}`:t}));this.id=s.strToHash(JSON.stringify(d))}didMount(){return i(this,void 0,void 0,(function*(){const e=this.props,{children:t,fallback:n,cache:i=!1}=e,a=r(e,["children","fallback","cache"]);if(i&&(this.initState={}),this.loadFromCache(i))return;const s=Object.values(a).map((e=>e())),o=yield Promise.all(s),d=this.prepareData(a,o,i);this.addDataToChildren(d),this.ready=!0,this.update()}))}ssr(){const e=this.props,{children:t,fallback:n,cache:i=!1}=e,a=r(e,["children","fallback","cache"]),s=Object.values(a).map((e=>e())),o=this.prepareData(a,s,!1);this.addDataToChildren(o)}loadFromCache(e){const t=this.state&&e&&Object.keys(this.state).length>0;return t&&(this.addDataToChildren(this.state),this.ready=!0),t}prepareData(e,t,n){return Object.keys(e).reduce(((e,i,r)=>(n&&(this.state=Object.assign(Object.assign({},this.state),{[i]:t[r]})),Object.assign(Object.assign({},e),{[i]:t[r]}))),{})}addDataToChildren(e){this.props.children.forEach((t=>{t.props&&(t.props=Object.assign(Object.assign({},t.props),e))}))}render(){if("undefined"==typeof isSSR){const{cache:e=!1}=this.props;return this.loadFromCache(e),this.ready?this.props.children:this.props.fallback}return this.ssr(),this.props.children}}t.Suspense=o},8091:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Visible=void 0;const i=n(6449),r=n(3271);class a extends r.Component{constructor(){super(...arguments),this.isVisible=!1}didMount(){new IntersectionObserver(((e,t)=>{e.forEach((e=>{e.isIntersecting&&(t.disconnect(),this.isVisible=!0,this.update())}))}),{threshold:[0,1]}).observe(this.elements[0])}render(){return this.isVisible?(this.props.onVisible&&this.props.onVisible(),i.render(this.props.component||this.props.children[0])):i.h("div",{"data-visible":!1,visibility:"hidden"})}}t.Visible=a},3184:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createContext=void 0,t.createContext=e=>{let t=e;return{Provider:e=>(e.value&&(t=e.value),e.children),Consumer:e=>({component:e.children[0](t),props:Object.assign(Object.assign({},e),{context:t})}),get:()=>t,set:e=>t=e}}},6449:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.h=t.renderComponent=t._render=t.render=t.hydrate=t.appendChildren=t.strToHash=t.removeAllChildNodes=t.tick=void 0,t.tick="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,t.removeAllChildNodes=e=>{for(;e.firstChild;)e.removeChild(e.firstChild)},t.strToHash=e=>{let t=0;for(let n=0;n<e.length;n++)t=(t<<5)-t+e.charCodeAt(n),t|=0;return Math.abs(t).toString(32)},t.appendChildren=(e,n)=>{Array.isArray(n)?("object"==typeof n&&(n=Array.prototype.slice.call(n)),n.forEach((n=>{if(Array.isArray(n))t.appendChildren(e,n);else{let i=t._render(n);void 0!==i&&(Array.isArray(i)?t.appendChildren(e,i):e.appendChild(null==i.nodeType?document.createTextNode(i.toString()):i))}}))):t.appendChildren(e,[n])},t.hydrate=(e,n=null,i=!0)=>t.render(e,n,i),t.render=(e,n=null,i=!0)=>{let r=t._render(e);return Array.isArray(r)&&(r=r.map((e=>t._render(e))),1===r.length&&(r=r[0])),n?(i&&t.removeAllChildNodes(n),r&&n.id&&n.id===r.id&&n.parentElement?n.parentElement.replaceChild(r,n):Array.isArray(r)?r.forEach((e=>{t.appendChildren(n,t._render(e))})):t.appendChildren(n,t._render(r)),n.ssr?n.ssr:n):"boolean"!=typeof isSSR||!0!==isSSR||Array.isArray(r)?r:[r]},t._render=e=>void 0===e||null==e?[]:"string"==typeof e?e:"number"==typeof e?e.toString():e.tagName&&"svg"===e.tagName.toLowerCase()?(e=>{const t=e.children[0],n=t.attributes,i=r("svg");for(let e=n.length-1;e>=0;e--)i.setAttribute(n[e].name,n[e].value);return i.innerHTML=t.innerHTML,i})({children:[e]}):e.tagName?e:e&&e.component&&e.component.prototype&&e.component.prototype.constructor&&/^class\s/.test(Function.prototype.toString.call(e.component))?i(e):e.component&&"function"==typeof e.component?n(e):Array.isArray(e)?e.map((e=>t._render(e))).flat():"function"==typeof e?t._render(e()):e.component&&e.component.tagName&&"string"==typeof e.component.tagName||Array.isArray(e.component)||e.component?t._render(e.component):"object"==typeof e?[]:void console.warn("Something unexpected happened with:",e);const n=e=>{const{component:n,props:i}=e;let r=n(i);return t._render(r)},i=e=>{const{component:n,props:i}=e,r=t.strToHash(n.toString());n.prototype._getHash=()=>r;const a=new n(i);a.willMount();let s=a.render();return s=t._render(s),a.elements=s,i&&i.ref&&i.ref(a),"undefined"==typeof isSSR&&t.tick((()=>{a._didMount()})),s};t.renderComponent=e=>{console.warn("DEPRECATED: renderComponent() is deprecated, use _render() instead!")};const r=e=>document.createElementNS("http://www.w3.org/2000/svg",e);t.h=(e,n,...i)=>{if("string"!=typeof e)return{component:e,props:Object.assign(Object.assign({},n),{children:i})};let a;const s="svg"===e?r("svg"):document.createElement(e),o=(e,t)=>0===t.indexOf("on")&&(!!e.ssr||"object"==typeof e[t]||"function"==typeof e[t]);for(const e in n){if("style"===e&&"object"==typeof n[e]){const t=Object.keys(n[e]).map((t=>`${t}:${n[e][t]}`)).join(";").replace(/[A-Z]/g,(e=>`-${e.toLowerCase()}`));n[e]=t+";"}"ref"===e?a=n[e]:o(s,e.toLowerCase())?s.addEventListener(e.toLowerCase().substring(2),(t=>n[e](t))):/className/i.test(e)?console.warn('You can use "class" instead of "className".'):s.setAttribute(e,n[e])}return t.appendChildren(s,i),a&&a(s),s.ssr?s.ssr:s}},6669:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Fragment=void 0,t.Fragment=e=>e.children},5006:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.printVersion=t.onNodeRemove=t.nodeToString=t.task=void 0;const i=n(7410);t.task=e=>setTimeout(e,0),t.nodeToString=e=>{const t=document.createElement("div");return t.appendChild(e.cloneNode(!0)),t.innerHTML};const r=(e,t)=>!!e&&(e===t||r(e.parentNode,t));t.onNodeRemove=(e,t)=>{let n=new MutationObserver((i=>{i.forEach((i=>{i.removedNodes.forEach((i=>{r(e,i)&&(t(),n&&(n.disconnect(),n=void 0))}))}))}));return n.observe(document,{childList:!0,subtree:!0}),n},t.printVersion=()=>{const e=`Powered by nano JSX v${i.VERSION}`;console.log(`%c %c %c %c %c ${e} %c http://nanojsx.io`,"background: #ff0000","background: #ffff00","background: #00ff00","background: #00ffff","color: #fff; background: #000000;","background: none")}},3441:function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=i(n(4773));t.default=r.default},5486:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.build=t.evaluate=t.treeify=void 0;const i=n(8027);t.treeify=(e,t)=>{const n=e=>{let i="",r=null;const a=[],s=[];for(let o=1;o<e.length;o++){const d=e[o++],l=e[o]?t[e[o++]-1]:e[++o];3===d?i=l:4===d?(a.push(l),r=null):5===d?(r||(r=Object.create(null),a.push(r)),r[e[++o]]=[l]):6===d?r[e[++o]].push(l):2===d?s.push(n(l)):0===d&&s.push(l)}return{tag:i,props:a,children:s}},{children:i}=n(e);return i.length>1?i:i[0]},t.evaluate=(e,n,i,r)=>{let a;n[0]=0;for(let s=1;s<n.length;s++){const o=n[s++],d=n[s]?(n[0]|=o?1:2,i[n[s++]]):n[++s];3===o?r[0]=d:4===o?r[1]=Object.assign(r[1]||{},d):5===o?(r[1]=r[1]||{})[n[++s]]=d:6===o?r[1][n[++s]]+=`${d}`:o?(a=e.apply(d,t.evaluate(e,d,i,["",null])),r.push(a),d[0]?n[0]|=2:(n[s-2]=0,n[s]=a)):r.push(d)}return r},t.build=function(e,...t){const n=[e,...t],r=this;let a,s,o=1,d="",l="",u=[0];const c=e=>{1===o&&(e||(d=d.replace(/^\s*\n\s*|\s*\n\s*$/g,"")))?i.MINI?u.push(e?n[e]:d):u.push(0,e,d):3===o&&(e||d)?(i.MINI?u[1]=e?n[e]:d:u.push(3,e,d),o=2):2===o&&"..."===d&&e?i.MINI?u[2]=Object.assign(u[2]||{},n[e]):u.push(4,e,0):2===o&&d&&!e?i.MINI?(u[2]=u[2]||{})[d]=!0:u.push(5,0,!0,d):o>=5&&(i.MINI?5===o?((u[2]=u[2]||{})[s]=e?d?d+n[e]:n[e]:d,o=6):(e||d)&&(u[2][s]+=e?d+n[e]:d):((d||!e&&5===o)&&(u.push(o,0,d,s),o=6),e&&(u.push(o,e,0,s),o=6))),d=""};for(let t=0;t<e.length;t++){t&&(1===o&&c(),c(t));for(let n=0;n<e[t].length;n++)a=e[t][n],1===o?"<"===a?(c(),u=i.MINI?[u,"",null]:[u],o=3):d+=a:4===o?"--"===d&&">"===a?(o=1,d=""):d=a+d[0]:l?a===l?l="":d+=a:'"'===a||"'"===a?l=a:">"===a?(c(),o=1):o&&("="===a?(o=5,s=d,d=""):"/"===a&&(o<5||">"===e[t][n+1])?(c(),3===o&&(u=u[0]),o=u,i.MINI?(u=u[0]).push(r(...o.slice(1))):(u=u[0]).push(2,0,o),o=0):" "===a||"\t"===a||"\n"===a||"\r"===a?(c(),o=2):d+=a),3===o&&"!--"===d&&(o=4,u=u[0])}return c(),i.MINI?u.length>2?u.slice(1):u[1]:u}},8027:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MINI=void 0,t.MINI=!1},4773:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(8027),r=n(5486),a=new Map;t.default=i.MINI?r.build:function(e){let t=a.get(this);return t||(t=new Map,a.set(this,t)),t=r.evaluate(this,t.get(e)||(t.set(e,t=r.build(e)),t),arguments,[]),t.length>1?t:t[0]}},1978:function(e,t,n){"use strict";var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),r=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||i(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),t.VERSION=t.printVersion=t.withStyles=t.createContext=t.Store=t.Fragment=t.renderSSR=t.task=t.nodeToString=t.hydrateLazy=t.jsx=t.Component=t.tick=t.hydrate=t.render=t.h=void 0,n(1365);var a=n(6449);Object.defineProperty(t,"h",{enumerable:!0,get:function(){return a.h}}),Object.defineProperty(t,"render",{enumerable:!0,get:function(){return a.render}}),Object.defineProperty(t,"hydrate",{enumerable:!0,get:function(){return a.hydrate}}),Object.defineProperty(t,"tick",{enumerable:!0,get:function(){return a.tick}});var s=n(3271);Object.defineProperty(t,"Component",{enumerable:!0,get:function(){return s.Component}}),r(n(7204),t);const o=n(6449),d=n(7807);t.default={h:o.h,render:o.render,hydrate:o.hydrate,renderSSR:d.renderSSR};var l=n(6469);Object.defineProperty(t,"jsx",{enumerable:!0,get:function(){return l.jsx}});var u=n(1957);Object.defineProperty(t,"hydrateLazy",{enumerable:!0,get:function(){return u.hydrateLazy}});var c=n(5006);Object.defineProperty(t,"nodeToString",{enumerable:!0,get:function(){return c.nodeToString}}),Object.defineProperty(t,"task",{enumerable:!0,get:function(){return c.task}});var h=n(7807);Object.defineProperty(t,"renderSSR",{enumerable:!0,get:function(){return h.renderSSR}});var _=n(6669);Object.defineProperty(t,"Fragment",{enumerable:!0,get:function(){return _.Fragment}});var m=n(8477);Object.defineProperty(t,"Store",{enumerable:!0,get:function(){return m.Store}});var f=n(3184);Object.defineProperty(t,"createContext",{enumerable:!0,get:function(){return f.createContext}});var p=n(3928);Object.defineProperty(t,"withStyles",{enumerable:!0,get:function(){return p.withStyles}});var g=n(5006);Object.defineProperty(t,"printVersion",{enumerable:!0,get:function(){return g.printVersion}});var y=n(7410);Object.defineProperty(t,"VERSION",{enumerable:!0,get:function(){return y.VERSION}})},6469:function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.jsx=void 0;const r=n(6449),a=i(n(3441)).default.bind(r.h);t.jsx=a},1957:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.hydrateLazy=void 0;const i=n(6449),r=n(8091);t.hydrateLazy=(e,t=null,n=!0)=>{const a=i.h(r.Visible,null,e);return i.hydrate(a,t,n)}},7807:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentSSR=t.HTMLElementSSR=t.renderSSR=t.clearState=t.initSSR=void 0;const i=n(6449),r=n(2234);globalThis.isSSR=!0===(()=>{const e="undefined"!=typeof Deno,t="undefined"!=typeof window;return"undefined"!=typeof isSSR&&isSSR||e||!t})()||void 0,globalThis._nano={isSSR,location:{pathname:"/"}},t.initSSR=(e="/")=>{_nano.location={pathname:e},globalThis.document=isSSR?new s:window.document},t.clearState=()=>{r._state.clear()},t.renderSSR=(e,n={})=>{const{pathname:a,clearState:s=!0}=n;return t.initSSR(a),s&&r._state.clear(),i.render(e,null,!0).join("")};class a{constructor(e){this.isSelfClosing=!1,this.tagName=e,["area","base","br","col","embed","hr","img","input","link","meta","param","source","track","wbr"].indexOf(e)>=0?(this.ssr=`<${e} />`,this.isSelfClosing=!0):this.ssr=`<${e}></${e}>`}get outerHTML(){return this.innerText}get innerHTML(){var e,t;return null!==(t=null===(e=/(^<[a-z]+>)([\s\S]*)(<\/[a-z]+>$)/gm.exec(this.ssr))||void 0===e?void 0:e[2])&&void 0!==t?t:""}get innerText(){var e,t;return null!==(t=null===(e=/(^<[^>]+>)(.+)?(<\/[a-z]+>$|\/>$)/gm.exec(this.ssr))||void 0===e?void 0:e[2])&&void 0!==t?t:""}set innerText(e){this.ssr=this.ssr.replace(/(^<[^>]+>)(.+)?(<\/[a-z]+>$|\/>$)/gm,`$1${e}$3`)}get attributes(){return{length:1}}setAttributeNS(e,t){this.setAttribute(e,t)}setAttribute(e,t){this.isSelfClosing?this.ssr=this.ssr.replace(/(^<[a-z]+ )(.+)/gm,`$1${e}="${t}" $2`):this.ssr=this.ssr.replace(/(^<[^>]+)(.+)/gm,`$1 ${e}="${t}"$2`)}appendChild(e){const t=e.ssr?e.ssr:e,n=this.ssr.lastIndexOf("</");this.ssr=this.ssr.substring(0,n)+t+this.ssr.substring(n)}replaceChild(e,t){this.innerText=e.ssr}get children(){const e=/<([a-z]+)((?!<\/\1).)*<\/\1>/gms,t=[];let n;for(;null!==(n=e.exec(this.innerHTML));)t.push(n[0].replace(/[\s]+/gm," "));return t}addEventListener(e,t,n){}}t.HTMLElementSSR=a;class s{constructor(){this.body=this.createElement("body"),this.head=this.createElement("head")}createElement(e){return new a(e)}createElementNS(e,t){return new a(t)}createTextNode(e){return e}querySelector(e){}}t.DocumentSSR=s},2234:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t._clearState=t._state=void 0,t._state=new Map,t._clearState=()=>{t._state.clear()}},8477:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Store=void 0,t.Store=class{constructor(e,t="",n="memory"){if(this._listeners=new Map,"undefined"!=typeof isSSR&&(n="memory"),this._id=t,this._storage=n,this._state=this._prevState=e,"memory"===n||!n)return;const i="local"===n?localStorage:sessionStorage,r=i.getItem(this._id);r?this._state=this._prevState=JSON.parse(r):i.setItem(this._id,JSON.stringify(e))}persist(e){"memory"!==this._storage&&("local"===this._storage?localStorage:sessionStorage).setItem(this._id,JSON.stringify(e))}clear(){this._state=this._prevState=void 0,"local"===this._storage?localStorage.removeItem(this._id):"session"===this._storage&&sessionStorage.removeItem(this._id)}setState(e){this.state=e}set state(e){this._prevState=this._state,this._state=e,this.persist(e),this._listeners.forEach((e=>{e(this._state,this._prevState)}))}get state(){return this._state}use(){const e=Math.random().toString(36).substr(2,9),t=this;return{get state(){return t.state},setState:e=>{this.state=e},subscribe:t=>{this._listeners.set(e,t)},cancel:()=>{this._listeners.delete(e)}}}}},1365:()=>{},7410:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.VERSION=void 0,t.VERSION="0.0.18"},3928:function(e,t,n){"use strict";var i=this&&this.__rest||function(e,t){var n={};for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.indexOf(i)<0&&(n[i]=e[i]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(i=Object.getOwnPropertySymbols(e);r<i.length;r++)t.indexOf(i[r])<0&&Object.prototype.propertyIsEnumerable.call(e,i[r])&&(n[i[r]]=e[i[r]])}return n};Object.defineProperty(t,"__esModule",{value:!0}),t.withStyles=void 0;const r=n(6449),a=n(3271),s=n(6669),o=n(7402);t.withStyles=e=>t=>class extends a.Component{render(){const n=this.props,{children:a}=n,d=i(n,["children"]),l=r.h(o.Helmet,null,r.h("style",null,e.toString())),u=a&&a.length>0?r.h(t,Object.assign({},d),a):r.h(t,Object.assign({},this.props));return r.h(s.Fragment,null,l,u)}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,